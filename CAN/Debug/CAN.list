
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007618  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080078b8  080078b8  000088b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080079b8  080079b8  000089b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080079c0  080079c0  000089c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  080079c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000030c  24000084  08007a4c  00009084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000390  08007a4c  00009390  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014154  00000000  00000000  000090b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022f7  00000000  00000000  0001d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e38  00000000  00000000  0001f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000af3  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003855c  00000000  00000000  00020e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000115df  00000000  00000000  00059387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016603e  00000000  00000000  0006a966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d09a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000043d0  00000000  00000000  001d09e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001d4db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080078a0 	.word	0x080078a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	080078a0 	.word	0x080078a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CAN_SendMessage>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CAN_SendMessage(uint32_t id, uint8_t* data, uint8_t length) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	4613      	mov	r3, r2
 80006b8:	71fb      	strb	r3, [r7, #7]
    // Setup TX Header for Extended ID
    TxHeader.Identifier = id;                   // 29-bit Identifier
 80006ba:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;        // Set Extended ID mode
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;         // Length in bytes
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006ce:	2208      	movs	r2, #8
 80006d0:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x6c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]

    // Copy data
    memcpy(TxData, data, length);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	461a      	mov	r2, r3
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <CAN_SendMessage+0x70>)
 80006f8:	f006 fb29 	bl	8006d4e <memcpy>

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x70>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x6c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x74>)
 8000702:	f001 f9a2 	bl	8001a4a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x64>
        Error_Handler();
 800070c:	f000 f9f2 	bl	8000af4 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	24000150 	.word	0x24000150
 800071c:	24000000 	.word	0x24000000
 8000720:	240000b0 	.word	0x240000b0

08000724 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af06      	add	r7, sp, #24
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
//	BSP_LED_Toggle(LED_RED);
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02c      	beq.n	8000792 <HAL_FDCAN_RxFifo0Callback+0x6e>
//        FDCAN_RxHeaderTypeDef RxHeader;
//        uint8_t RxData[8];

        // Read the received message
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 800073a:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f001 f9de 	bl	8001b00 <HAL_FDCAN_GetRxMessage>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d123      	bne.n	8000792 <HAL_FDCAN_RxFifo0Callback+0x6e>
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800074c:	6819      	ldr	r1, [r3, #0]
                   RxHeader.Identifier, RxData[0], RxData[1], RxData[2], RxData[3],
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000750:	781b      	ldrb	r3, [r3, #0]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 8000752:	469c      	mov	ip, r3
                   RxHeader.Identifier, RxData[0], RxData[1], RxData[2], RxData[3],
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000756:	785b      	ldrb	r3, [r3, #1]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 8000758:	469e      	mov	lr, r3
                   RxHeader.Identifier, RxData[0], RxData[1], RxData[2], RxData[3],
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 800075c:	789b      	ldrb	r3, [r3, #2]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 800075e:	461a      	mov	r2, r3
                   RxHeader.Identifier, RxData[0], RxData[1], RxData[2], RxData[3],
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000762:	78db      	ldrb	r3, [r3, #3]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 8000764:	4618      	mov	r0, r3
                   RxData[4], RxData[5], RxData[6], RxData[7]);
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000768:	791b      	ldrb	r3, [r3, #4]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 800076a:	461c      	mov	r4, r3
                   RxData[4], RxData[5], RxData[6], RxData[7]);
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 800076e:	795b      	ldrb	r3, [r3, #5]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 8000770:	461d      	mov	r5, r3
                   RxData[4], RxData[5], RxData[6], RxData[7]);
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000774:	799b      	ldrb	r3, [r3, #6]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 8000776:	461e      	mov	r6, r3
                   RxData[4], RxData[5], RxData[6], RxData[7]);
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <HAL_FDCAN_RxFifo0Callback+0x78>)
 800077a:	79db      	ldrb	r3, [r3, #7]
            printf("Interrupt: Received ID: 0x%X, Data: %X %X %X %X %X %X %X %X\r\n",
 800077c:	9305      	str	r3, [sp, #20]
 800077e:	9604      	str	r6, [sp, #16]
 8000780:	9503      	str	r5, [sp, #12]
 8000782:	9402      	str	r4, [sp, #8]
 8000784:	9001      	str	r0, [sp, #4]
 8000786:	9200      	str	r2, [sp, #0]
 8000788:	4673      	mov	r3, lr
 800078a:	4662      	mov	r2, ip
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <HAL_FDCAN_RxFifo0Callback+0x80>)
 800078e:	f006 fa0d 	bl	8006bac <iprintf>
        }
    }
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079a:	bf00      	nop
 800079c:	2400019c 	.word	0x2400019c
 80007a0:	24000174 	.word	0x24000174
 80007a4:	080078b8 	.word	0x080078b8

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fd72 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f84c 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f92c 	bl	8000a10 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007b8:	f000 f8c6 	bl	8000948 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80007bc:	4820      	ldr	r0, [pc, #128]	@ (8000840 <main+0x98>)
 80007be:	f001 f919 	bl	80019f4 <HAL_FDCAN_Start>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <main+0x24>
    {
  	  Error_Handler();
 80007c8:	f000 f994 	bl	8000af4 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <main+0x98>)
 80007d2:	f001 fb01 	bl	8001dd8 <HAL_FDCAN_ActivateNotification>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <main+0x38>
    {
      /* Notification Error */
      Error_Handler();
 80007dc:	f000 f98a 	bl	8000af4 <Error_Handler>
    }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fbe1 	bl	8000fa8 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fbde 	bl	8000fa8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007ec:	2002      	movs	r0, #2
 80007ee:	f000 fbdb 	bl	8000fa8 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <main+0x9c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <main+0x9c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000800:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <main+0x9c>)
 8000802:	2200      	movs	r2, #0
 8000804:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <main+0x9c>)
 8000808:	2200      	movs	r2, #0
 800080a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800080c:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <main+0x9c>)
 800080e:	2200      	movs	r2, #0
 8000810:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000812:	490c      	ldr	r1, [pc, #48]	@ (8000844 <main+0x9c>)
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fc67 	bl	80010e8 <BSP_COM_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <main+0x7c>
  {
    Error_Handler();
 8000820:	f000 f968 	bl	8000af4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LED_Toggle(LED_GREEN);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fc35 	bl	8001094 <BSP_LED_Toggle>
	  CAN_SendMessage(200, TxData, 8);  // Send message every second
 800082a:	2208      	movs	r2, #8
 800082c:	4906      	ldr	r1, [pc, #24]	@ (8000848 <main+0xa0>)
 800082e:	20c8      	movs	r0, #200	@ 0xc8
 8000830:	f7ff ff3c 	bl	80006ac <CAN_SendMessage>
	  HAL_Delay(1000);  // Wait 1 second
 8000834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000838:	f000 fdbe 	bl	80013b8 <HAL_Delay>
	  BSP_LED_Toggle(LED_GREEN);
 800083c:	bf00      	nop
 800083e:	e7f1      	b.n	8000824 <main+0x7c>
 8000840:	240000b0 	.word	0x240000b0
 8000844:	240000a0 	.word	0x240000a0
 8000848:	24000000 	.word	0x24000000

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b09c      	sub	sp, #112	@ 0x70
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000856:	224c      	movs	r2, #76	@ 0x4c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f006 f9fb 	bl	8006c56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2220      	movs	r2, #32
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f006 f9f5 	bl	8006c56 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800086c:	2002      	movs	r0, #2
 800086e:	f002 fa1f 	bl	8002cb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <SystemClock_Config+0xf4>)
 8000878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087a:	4a31      	ldr	r2, [pc, #196]	@ (8000940 <SystemClock_Config+0xf4>)
 800087c:	f023 0301 	bic.w	r3, r3, #1
 8000880:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000882:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <SystemClock_Config+0xf4>)
 8000884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	4b2d      	ldr	r3, [pc, #180]	@ (8000944 <SystemClock_Config+0xf8>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000894:	4a2b      	ldr	r2, [pc, #172]	@ (8000944 <SystemClock_Config+0xf8>)
 8000896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b29      	ldr	r3, [pc, #164]	@ (8000944 <SystemClock_Config+0xf8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a8:	bf00      	nop
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <SystemClock_Config+0xf8>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008b6:	d1f8      	bne.n	80008aa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008bc:	2301      	movs	r3, #1
 80008be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c0:	2340      	movs	r3, #64	@ 0x40
 80008c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c8:	2300      	movs	r3, #0
 80008ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80008d0:	2309      	movs	r3, #9
 80008d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80008d8:	230f      	movs	r3, #15
 80008da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008e0:	230c      	movs	r3, #12
 80008e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008e4:	2302      	movs	r3, #2
 80008e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80008e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fa16 	bl	8002d24 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008fe:	f000 f8f9 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	233f      	movs	r3, #63	@ 0x3f
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2101      	movs	r1, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fe56 	bl	80035d8 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000932:	f000 f8df 	bl	8000af4 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3770      	adds	r7, #112	@ 0x70
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	58000400 	.word	0x58000400
 8000944:	58024800 	.word	0x58024800

08000948 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800094c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 800094e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a0c <MX_FDCAN1_Init+0xc4>)
 8000950:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000958:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800095e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000964:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000970:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000972:	2201      	movs	r2, #1
 8000974:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000976:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000978:	2203      	movs	r2, #3
 800097a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 800097e:	2210      	movs	r2, #16
 8000980:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000984:	2203      	movs	r2, #3
 8000986:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 800098a:	2201      	movs	r2, #1
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000990:	2209      	movs	r2, #9
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 8000996:	220a      	movs	r2, #10
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 800099c:	2209      	movs	r2, #9
 800099e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_FDCAN1_Init+0xc0>)
 80009f6:	f000 fe1f 	bl	8001638 <HAL_FDCAN_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a00:	f000 f878 	bl	8000af4 <Error_Handler>
//	  Error_Handler();
//  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	240000b0 	.word	0x240000b0
 8000a0c:	4000a000 	.word	0x4000a000

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b30      	ldr	r3, [pc, #192]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a44:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	4a18      	ldr	r2, [pc, #96]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a90:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <MX_GPIO_Init+0xd8>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4812      	ldr	r0, [pc, #72]	@ (8000aec <MX_GPIO_Init+0xdc>)
 8000aa4:	f002 f8d0 	bl	8002c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <MX_GPIO_Init+0xe0>)
 8000abe:	f001 ff13 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_GPIO_Init+0xdc>)
 8000ada:	f001 ff05 	bl	80028e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58021000 	.word	0x58021000
 8000af0:	58020800 	.word	0x58020800

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  BSP_LED_Toggle(LED_RED);
 8000afc:	2002      	movs	r0, #2
 8000afe:	f000 fac9 	bl	8001094 <BSP_LED_Toggle>
	  HAL_Delay(100);
 8000b02:	2064      	movs	r0, #100	@ 0x64
 8000b04:	f000 fc58 	bl	80013b8 <HAL_Delay>
	  BSP_LED_Toggle(LED_RED);
 8000b08:	bf00      	nop
 8000b0a:	e7f7      	b.n	8000afc <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <HAL_MspInit+0x30>)
 8000b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b18:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x30>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x30>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58024400 	.word	0x58024400

08000b40 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ba      	sub	sp, #232	@ 0xe8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	22c0      	movs	r2, #192	@ 0xc0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f006 f878 	bl	8006c56 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c18 <HAL_FDCAN_MspInit+0xd8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d14e      	bne.n	8000c0e <HAL_FDCAN_MspInit+0xce>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 f8b1 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000b94:	f7ff ffae 	bl	8000af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b98:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <HAL_FDCAN_MspInit+0xdc>)
 8000b9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c1c <HAL_FDCAN_MspInit+0xdc>)
 8000ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_FDCAN_MspInit+0xdc>)
 8000baa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_FDCAN_MspInit+0xdc>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <HAL_FDCAN_MspInit+0xdc>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_FDCAN_MspInit+0xdc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000bec:	2309      	movs	r3, #9
 8000bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <HAL_FDCAN_MspInit+0xe0>)
 8000bfa:	f001 fe75 	bl	80028e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2013      	movs	r0, #19
 8000c04:	f000 fce3 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c08:	2013      	movs	r0, #19
 8000c0a:	f000 fcfa 	bl	8001602 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000c0e:	bf00      	nop
 8000c10:	37e8      	adds	r7, #232	@ 0xe8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	4000a000 	.word	0x4000a000
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020c00 	.word	0x58020c00

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f000 fb7d 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c8a:	f001 f91f 	bl	8001ecc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	240000b0 	.word	0x240000b0

08000c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e00a      	b.n	8000cc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000caa:	f3af 8000 	nop.w
 8000cae:	4601      	mov	r1, r0
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	b2ca      	uxtb	r2, r1
 8000cb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf0      	blt.n	8000caa <_read+0x12>
  }

  return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e009      	b.n	8000cf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fa5d 	bl	80011ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf1      	blt.n	8000ce4 <_write+0x12>
  }
  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_close>:

int _close(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d32:	605a      	str	r2, [r3, #4]
  return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_isatty>:

int _isatty(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f005 ffa6 	bl	8006cf4 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24080000 	.word	0x24080000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	240001a4 	.word	0x240001a4
 8000ddc:	24000390 	.word	0x24000390

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de4:	4b43      	ldr	r3, [pc, #268]	@ (8000ef4 <SystemInit+0x114>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dea:	4a42      	ldr	r2, [pc, #264]	@ (8000ef4 <SystemInit+0x114>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df4:	4b40      	ldr	r3, [pc, #256]	@ (8000ef8 <SystemInit+0x118>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 030f 	and.w	r3, r3, #15
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d807      	bhi.n	8000e10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e00:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef8 <SystemInit+0x118>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 030f 	bic.w	r3, r3, #15
 8000e08:	4a3b      	ldr	r2, [pc, #236]	@ (8000ef8 <SystemInit+0x118>)
 8000e0a:	f043 0307 	orr.w	r3, r3, #7
 8000e0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e10:	4b3a      	ldr	r3, [pc, #232]	@ (8000efc <SystemInit+0x11c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a39      	ldr	r2, [pc, #228]	@ (8000efc <SystemInit+0x11c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e1c:	4b37      	ldr	r3, [pc, #220]	@ (8000efc <SystemInit+0x11c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e22:	4b36      	ldr	r3, [pc, #216]	@ (8000efc <SystemInit+0x11c>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4935      	ldr	r1, [pc, #212]	@ (8000efc <SystemInit+0x11c>)
 8000e28:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <SystemInit+0x120>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <SystemInit+0x118>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef8 <SystemInit+0x118>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 030f 	bic.w	r3, r3, #15
 8000e42:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef8 <SystemInit+0x118>)
 8000e44:	f043 0307 	orr.w	r3, r3, #7
 8000e48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <SystemInit+0x11c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e50:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <SystemInit+0x11c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e56:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <SystemInit+0x11c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e5c:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <SystemInit+0x11c>)
 8000e5e:	4a29      	ldr	r2, [pc, #164]	@ (8000f04 <SystemInit+0x124>)
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e62:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <SystemInit+0x11c>)
 8000e64:	4a28      	ldr	r2, [pc, #160]	@ (8000f08 <SystemInit+0x128>)
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <SystemInit+0x11c>)
 8000e6a:	4a28      	ldr	r2, [pc, #160]	@ (8000f0c <SystemInit+0x12c>)
 8000e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <SystemInit+0x11c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e74:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <SystemInit+0x11c>)
 8000e76:	4a25      	ldr	r2, [pc, #148]	@ (8000f0c <SystemInit+0x12c>)
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <SystemInit+0x11c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <SystemInit+0x11c>)
 8000e82:	4a22      	ldr	r2, [pc, #136]	@ (8000f0c <SystemInit+0x12c>)
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <SystemInit+0x11c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <SystemInit+0x11c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1a      	ldr	r2, [pc, #104]	@ (8000efc <SystemInit+0x11c>)
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e98:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <SystemInit+0x11c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <SystemInit+0x130>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <SystemInit+0x134>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000eaa:	d202      	bcs.n	8000eb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <SystemInit+0x138>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <SystemInit+0x11c>)
 8000eb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d113      	bne.n	8000ee8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <SystemInit+0x11c>)
 8000ec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <SystemInit+0x11c>)
 8000ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ecc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <SystemInit+0x13c>)
 8000ed2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <SystemInit+0x11c>)
 8000eda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ede:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <SystemInit+0x11c>)
 8000ee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ee4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	52002000 	.word	0x52002000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f04:	02020200 	.word	0x02020200
 8000f08:	01ff0000 	.word	0x01ff0000
 8000f0c:	01010280 	.word	0x01010280
 8000f10:	5c001000 	.word	0x5c001000
 8000f14:	ffff0000 	.word	0xffff0000
 8000f18:	51008108 	.word	0x51008108
 8000f1c:	52004000 	.word	0x52004000

08000f20 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <ExitRun0Mode+0x2c>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <ExitRun0Mode+0x2c>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f30:	bf00      	nop
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <ExitRun0Mode+0x2c>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	58024800 	.word	0x58024800

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f8c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f54:	f7ff ffe4 	bl	8000f20 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f58:	f7ff ff42 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	@ (8000f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f82:	f005 febd 	bl	8006d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fc0f 	bl	80007a8 <main>
  bx  lr
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f94:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8000f98:	080079c8 	.word	0x080079c8
  ldr r2, =_sbss
 8000f9c:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8000fa0:	24000390 	.word	0x24000390

08000fa4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC3_IRQHandler>
	...

08000fa8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d009      	beq.n	8000fd0 <BSP_LED_Init+0x28>
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d006      	beq.n	8000fd0 <BSP_LED_Init+0x28>
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d003      	beq.n	8000fd0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fc8:	f06f 0301 	mvn.w	r3, #1
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fce:	e055      	b.n	800107c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10f      	bne.n	8000ff6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <BSP_LED_Init+0xe0>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8001088 <BSP_LED_Init+0xe0>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <BSP_LED_Init+0xe0>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	e021      	b.n	800103a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10f      	bne.n	800101c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <BSP_LED_Init+0xe0>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001002:	4a21      	ldr	r2, [pc, #132]	@ (8001088 <BSP_LED_Init+0xe0>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <BSP_LED_Init+0xe0>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	e00e      	b.n	800103a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <BSP_LED_Init+0xe0>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001022:	4a19      	ldr	r2, [pc, #100]	@ (8001088 <BSP_LED_Init+0xe0>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <BSP_LED_Init+0xe0>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4a13      	ldr	r2, [pc, #76]	@ (800108c <BSP_LED_Init+0xe4>)
 800103e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001042:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <BSP_LED_Init+0xe8>)
 8001054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001058:	f107 0218 	add.w	r2, r7, #24
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fc42 	bl	80028e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <BSP_LED_Init+0xe8>)
 8001068:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4a07      	ldr	r2, [pc, #28]	@ (800108c <BSP_LED_Init+0xe4>)
 8001070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	f001 fde6 	bl	8002c48 <HAL_GPIO_WritePin>
  }

  return ret;
 800107c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800107e:	4618      	mov	r0, r3
 8001080:	3730      	adds	r7, #48	@ 0x30
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	58024400 	.word	0x58024400
 800108c:	08007954 	.word	0x08007954
 8001090:	24000014 	.word	0x24000014

08001094 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d009      	beq.n	80010bc <BSP_LED_Toggle+0x28>
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d006      	beq.n	80010bc <BSP_LED_Toggle+0x28>
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d003      	beq.n	80010bc <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010b4:	f06f 0301 	mvn.w	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e00b      	b.n	80010d4 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <BSP_LED_Toggle+0x4c>)
 80010c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4907      	ldr	r1, [pc, #28]	@ (80010e4 <BSP_LED_Toggle+0x50>)
 80010c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f001 fdd3 	bl	8002c7a <HAL_GPIO_TogglePin>
  }

  return ret;
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	24000014 	.word	0x24000014
 80010e4:	08007954 	.word	0x08007954

080010e8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010fe:	f06f 0301 	mvn.w	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e018      	b.n	8001138 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2294      	movs	r2, #148	@ 0x94
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <BSP_COM_Init+0x5c>)
 8001110:	4413      	add	r3, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f866 	bl	80011e4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2294      	movs	r2, #148	@ 0x94
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <BSP_COM_Init+0x5c>)
 8001122:	4413      	add	r3, r2
 8001124:	6839      	ldr	r1, [r7, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f80e 	bl	8001148 <MX_USART3_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001132:	f06f 0303 	mvn.w	r3, #3
 8001136:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001138:	68fb      	ldr	r3, [r7, #12]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	240001a8 	.word	0x240001a8

08001148 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_USART3_Init+0x60>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	220c      	movs	r2, #12
 8001166:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	895b      	ldrh	r3, [r3, #10]
 800116c:	461a      	mov	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	891b      	ldrh	r3, [r3, #8]
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	899b      	ldrh	r3, [r3, #12]
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001194:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f004 fbd6 	bl	8005948 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	24000010 	.word	0x24000010

080011ac <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <__io_putchar+0x30>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	2394      	movs	r3, #148	@ 0x94
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <__io_putchar+0x34>)
 80011c2:	1898      	adds	r0, r3, r2
 80011c4:	1d39      	adds	r1, r7, #4
 80011c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ca:	2201      	movs	r2, #1
 80011cc:	f004 fc16 	bl	80059fc <HAL_UART_Transmit>
  return ch;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2400023c 	.word	0x2400023c
 80011e0:	240001a8 	.word	0x240001a8

080011e4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <COM1_MspInit+0xa8>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f2:	4a26      	ldr	r2, [pc, #152]	@ (800128c <COM1_MspInit+0xa8>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fc:	4b23      	ldr	r3, [pc, #140]	@ (800128c <COM1_MspInit+0xa8>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <COM1_MspInit+0xa8>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001210:	4a1e      	ldr	r2, [pc, #120]	@ (800128c <COM1_MspInit+0xa8>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <COM1_MspInit+0xa8>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <COM1_MspInit+0xa8>)
 800122a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800122e:	4a17      	ldr	r2, [pc, #92]	@ (800128c <COM1_MspInit+0xa8>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001234:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <COM1_MspInit+0xa8>)
 800123a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800123e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800124a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001254:	2301      	movs	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001258:	2307      	movs	r3, #7
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	480b      	ldr	r0, [pc, #44]	@ (8001290 <COM1_MspInit+0xac>)
 8001264:	f001 fb40 	bl	80028e8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800126c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001272:	2307      	movs	r3, #7
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <COM1_MspInit+0xac>)
 800127e:	f001 fb33 	bl	80028e8 <HAL_GPIO_Init>
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	58024400 	.word	0x58024400
 8001290:	58020c00 	.word	0x58020c00

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f98c 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a0:	f002 fb50 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4913      	ldr	r1, [pc, #76]	@ (8001300 <HAL_Init+0x6c>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_Init+0x6c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_Init+0x70>)
 80012d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <HAL_Init+0x74>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f814 	bl	800130c <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e002      	b.n	80012f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ee:	f7ff fc0d 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400
 8001300:	08007944 	.word	0x08007944
 8001304:	2400000c 	.word	0x2400000c
 8001308:	24000008 	.word	0x24000008

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_InitTick+0x64>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f971 	bl	800161e <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f93b 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <HAL_InitTick+0x68>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24000024 	.word	0x24000024
 8001370:	24000008 	.word	0x24000008
 8001374:	24000020 	.word	0x24000020

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	24000024 	.word	0x24000024
 800139c:	24000240 	.word	0x24000240

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	24000240 	.word	0x24000240

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	24000024 	.word	0x24000024

08001400 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetREVID+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1b      	lsrs	r3, r3, #16
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	5c001000 	.word	0x5c001000

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	05fa0000 	.word	0x05fa0000

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	@ (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	@ (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	@ (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	@ 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff40 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff33 	bl	800147c <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa4 	bl	8001574 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b098      	sub	sp, #96	@ 0x60
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001640:	4a84      	ldr	r2, [pc, #528]	@ (8001854 <HAL_FDCAN_Init+0x21c>)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4611      	mov	r1, r2
 8001648:	224c      	movs	r2, #76	@ 0x4c
 800164a:	4618      	mov	r0, r3
 800164c:	f005 fb7f 	bl	8006d4e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1c6      	b.n	80019e8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7e      	ldr	r2, [pc, #504]	@ (8001858 <HAL_FDCAN_Init+0x220>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d106      	bne.n	8001672 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fa5a 	bl	8000b40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0210 	bic.w	r2, r2, #16
 800169a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800169c:	f7ff fe80 	bl	80013a0 <HAL_GetTick>
 80016a0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016a2:	e014      	b.n	80016ce <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016a4:	f7ff fe7c 	bl	80013a0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90d      	bls.n	80016ce <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e18c      	b.n	80019e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d0e3      	beq.n	80016a4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699a      	ldr	r2, [r3, #24]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ec:	f7ff fe58 	bl	80013a0 <HAL_GetTick>
 80016f0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016f2:	e014      	b.n	800171e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016f4:	f7ff fe54 	bl	80013a0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d90d      	bls.n	800171e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e164      	b.n	80019e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e3      	beq.n	80016f4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0202 	orr.w	r2, r2, #2
 800173a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7c1b      	ldrb	r3, [r3, #16]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001752:	619a      	str	r2, [r3, #24]
 8001754:	e007      	b.n	8001766 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001764:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7c5b      	ldrb	r3, [r3, #17]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	e007      	b.n	8001790 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800178e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7c9b      	ldrb	r3, [r3, #18]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	e007      	b.n	80017ba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017b8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80017de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0210 	bic.w	r2, r2, #16
 80017ee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d108      	bne.n	800180a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0204 	orr.w	r2, r2, #4
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e030      	b.n	800186c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d02c      	beq.n	800186c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d020      	beq.n	800185c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001828:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0210 	orr.w	r2, r2, #16
 8001838:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d114      	bne.n	800186c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0220 	orr.w	r2, r2, #32
 8001850:	619a      	str	r2, [r3, #24]
 8001852:	e00b      	b.n	800186c <HAL_FDCAN_Init+0x234>
 8001854:	080078f8 	.word	0x080078f8
 8001858:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0220 	orr.w	r2, r2, #32
 800186a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	3b01      	subs	r3, #1
 8001872:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	3b01      	subs	r3, #1
 800187a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800187c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001884:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	3b01      	subs	r3, #1
 800188e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001894:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001896:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80018a0:	d115      	bne.n	80018ce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	3b01      	subs	r3, #1
 80018ae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018b0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	3b01      	subs	r3, #1
 80018b8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018ba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018ca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018cc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f4:	4413      	add	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d011      	beq.n	800191e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001902:	f023 0107 	bic.w	r1, r3, #7
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	3360      	adds	r3, #96	@ 0x60
 800190e:	443b      	add	r3, r7
 8001910:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d011      	beq.n	800194a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800192e:	f023 0107 	bic.w	r1, r3, #7
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	3360      	adds	r3, #96	@ 0x60
 800193a:	443b      	add	r3, r7
 800193c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194e:	2b00      	cmp	r3, #0
 8001950:	d012      	beq.n	8001978 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800195a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	3360      	adds	r3, #96	@ 0x60
 8001966:	443b      	add	r3, r7
 8001968:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800196c:	011a      	lsls	r2, r3, #4
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197c:	2b00      	cmp	r3, #0
 800197e:	d012      	beq.n	80019a6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001988:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	3360      	adds	r3, #96	@ 0x60
 8001994:	443b      	add	r3, r7
 8001996:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800199a:	021a      	lsls	r2, r3, #8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <HAL_FDCAN_Init+0x3b8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d107      	bne.n	80019c0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f022 0203 	bic.w	r2, r2, #3
 80019be:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fd81 	bl	80024e0 <FDCAN_CalcultateRamBlockAddresses>
 80019de:	4603      	mov	r3, r0
 80019e0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80019e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3760      	adds	r7, #96	@ 0x60
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	4000a000 	.word	0x4000a000

080019f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d111      	bne.n	8001a2c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e008      	b.n	8001a3e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a32:	f043 0204 	orr.w	r2, r3, #4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d141      	bne.n	8001ae6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a6a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e038      	b.n	8001af8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e026      	b.n	8001af8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fe93 	bl	80027ec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e008      	b.n	8001af8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001aec:	f043 0208 	orr.w	r2, r3, #8
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	@ 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001b18:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001b1a:	7efb      	ldrb	r3, [r7, #27]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	f040 8149 	bne.w	8001db4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b40      	cmp	r3, #64	@ 0x40
 8001b26:	d14c      	bne.n	8001bc2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b30:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b3e:	f043 0220 	orr.w	r2, r3, #32
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e13c      	b.n	8001dc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e12a      	b.n	8001dc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b80:	d10a      	bne.n	8001b98 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b92:	d101      	bne.n	8001b98 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb4:	69f9      	ldr	r1, [r7, #28]
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc0:	e068      	b.n	8001c94 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b41      	cmp	r3, #65	@ 0x41
 8001bc6:	d14c      	bne.n	8001c62 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001bd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bde:	f043 0220 	orr.w	r2, r3, #32
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ec      	b.n	8001dc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0da      	b.n	8001dc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c20:	d10a      	bne.n	8001c38 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c32:	d101      	bne.n	8001c38 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001c34:	2301      	movs	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	4413      	add	r3, r2
 8001c4a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c54:	69f9      	ldr	r1, [r7, #28]
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c60:	e018      	b.n	8001c94 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d309      	bcc.n	8001c80 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c72:	f043 0220 	orr.w	r2, r3, #32
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0a2      	b.n	8001dc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0c9b      	lsrs	r3, r3, #18
 8001cae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e005      	b.n	8001cc4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	3304      	adds	r3, #4
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0e1b      	lsrs	r3, r3, #24
 8001d18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0fda      	lsrs	r2, r3, #31
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	e00a      	b.n	8001d50 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	441a      	add	r2, r3
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	440b      	add	r3, r1
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d3ec      	bcc.n	8001d3a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b40      	cmp	r3, #64	@ 0x40
 8001d64:	d105      	bne.n	8001d72 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001d70:	e01e      	b.n	8001db0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b41      	cmp	r3, #65	@ 0x41
 8001d76:	d105      	bne.n	8001d84 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001d82:	e015      	b.n	8001db0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b1f      	cmp	r3, #31
 8001d88:	d808      	bhi.n	8001d9c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	fa01 f202 	lsl.w	r2, r1, r2
 8001d96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001d9a:	e009      	b.n	8001db0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 021f 	and.w	r2, r3, #31
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2101      	movs	r1, #1
 8001da8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e008      	b.n	8001dc6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dba:	f043 0208 	orr.w	r2, r3, #8
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	372c      	adds	r7, #44	@ 0x2c
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	0800795c 	.word	0x0800795c

08001dd8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001dea:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d002      	beq.n	8001df8 <HAL_FDCAN_ActivateNotification+0x20>
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d155      	bne.n	8001ea4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e16:	e014      	b.n	8001e42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d108      	bne.n	8001e3a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0202 	orr.w	r2, r2, #2
 8001e36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e38:	e003      	b.n	8001e42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <HAL_FDCAN_ActivateNotification+0xec>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	6553      	str	r3, [r2, #84]	@ 0x54
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0f9b      	lsrs	r3, r3, #30
 8001e9a:	490b      	ldr	r1, [pc, #44]	@ (8001ec8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e008      	b.n	8001eb6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eaa:	f043 0202 	orr.w	r2, r3, #2
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	3fcfffff 	.word	0x3fcfffff
 8001ec8:	4000a800 	.word	0x4000a800

08001ecc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b096      	sub	sp, #88	@ 0x58
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	079b      	lsls	r3, r3, #30
 8001eda:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001edc:	4b98      	ldr	r3, [pc, #608]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	079b      	lsls	r3, r3, #30
 8001ee2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001ef2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001efc:	4013      	ands	r3, r2
 8001efe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f14:	4013      	ands	r3, r2
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f36:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8001f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f44:	4013      	ands	r3, r2
 8001f46:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8001f52:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f90:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f92:	4b6b      	ldr	r3, [pc, #428]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fa54 	bl	8002446 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa0:	0a9b      	lsrs	r3, r3, #10
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fac:	0a9b      	lsrs	r3, r3, #10
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d017      	beq.n	8001fe6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fca:	4013      	ands	r3, r2
 8001fcc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fd8:	4b59      	ldr	r3, [pc, #356]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001fde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fa07 	bl	80023f4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ff2:	4b54      	ldr	r3, [pc, #336]	@ (8002144 <HAL_FDCAN_IRQHandler+0x278>)
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	6513      	str	r3, [r2, #80]	@ 0x50
 8001ff8:	4a51      	ldr	r2, [pc, #324]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffc:	0f9b      	lsrs	r3, r3, #30
 8001ffe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002000:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f9c0 	bl	8002388 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00d      	beq.n	800202a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002014:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <HAL_FDCAN_IRQHandler+0x278>)
 8002016:	400b      	ands	r3, r1
 8002018:	6513      	str	r3, [r2, #80]	@ 0x50
 800201a:	4a49      	ldr	r2, [pc, #292]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 800201c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800201e:	0f9b      	lsrs	r3, r3, #30
 8002020:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002022:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f9ba 	bl	800239e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800202a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002036:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <HAL_FDCAN_IRQHandler+0x278>)
 8002038:	400b      	ands	r3, r1
 800203a:	6513      	str	r3, [r2, #80]	@ 0x50
 800203c:	4a40      	ldr	r2, [pc, #256]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 800203e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002040:	0f9b      	lsrs	r3, r3, #30
 8002042:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002044:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fb6c 	bl	8000724 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800204c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002058:	4b3a      	ldr	r3, [pc, #232]	@ (8002144 <HAL_FDCAN_IRQHandler+0x278>)
 800205a:	400b      	ands	r3, r1
 800205c:	6513      	str	r3, [r2, #80]	@ 0x50
 800205e:	4a38      	ldr	r2, [pc, #224]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8002060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002062:	0f9b      	lsrs	r3, r3, #30
 8002064:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002066:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f9a3 	bl	80023b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800206e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002070:	0adb      	lsrs	r3, r3, #11
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207c:	0adb      	lsrs	r3, r3, #11
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800208e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002090:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f997 	bl	80023ca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800209c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209e:	0a5b      	lsrs	r3, r3, #9
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01d      	beq.n	80020e4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80020a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020aa:	0a5b      	lsrs	r3, r3, #9
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d017      	beq.n	80020e4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020c8:	4013      	ands	r3, r2
 80020ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80020dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f97d 	bl	80023de <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80020e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e6:	0cdb      	lsrs	r3, r3, #19
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80020f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f2:	0cdb      	lsrs	r3, r3, #19
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002104:	651a      	str	r2, [r3, #80]	@ 0x50
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f97c 	bl	800240a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800211e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002132:	651a      	str	r2, [r3, #80]	@ 0x50
 8002134:	4b02      	ldr	r3, [pc, #8]	@ (8002140 <HAL_FDCAN_IRQHandler+0x274>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	e004      	b.n	8002148 <HAL_FDCAN_IRQHandler+0x27c>
 800213e:	bf00      	nop
 8002140:	4000a800 	.word	0x4000a800
 8002144:	3fcfffff 	.word	0x3fcfffff
 8002148:	f000 f969 	bl	800241e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800214c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800214e:	0c9b      	lsrs	r3, r3, #18
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215a:	0c9b      	lsrs	r3, r3, #18
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800216c:	651a      	str	r2, [r3, #80]	@ 0x50
 800216e:	4b83      	ldr	r3, [pc, #524]	@ (800237c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f95c 	bl	8002432 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217c:	0c5b      	lsrs	r3, r3, #17
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002188:	0c5b      	lsrs	r3, r3, #17
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00f      	beq.n	80021b2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800219a:	651a      	str	r2, [r3, #80]	@ 0x50
 800219c:	4b77      	ldr	r3, [pc, #476]	@ (800237c <HAL_FDCAN_IRQHandler+0x4b0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80021b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00d      	beq.n	80021d4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021be:	4b70      	ldr	r3, [pc, #448]	@ (8002380 <HAL_FDCAN_IRQHandler+0x4b4>)
 80021c0:	400b      	ands	r3, r1
 80021c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80021c4:	4a6d      	ldr	r2, [pc, #436]	@ (800237c <HAL_FDCAN_IRQHandler+0x4b0>)
 80021c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c8:	0f9b      	lsrs	r3, r3, #30
 80021ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80021cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f94d 	bl	800246e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80021d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d011      	beq.n	80021fe <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80021e0:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_FDCAN_IRQHandler+0x4b4>)
 80021e2:	400b      	ands	r3, r1
 80021e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80021e6:	4a65      	ldr	r2, [pc, #404]	@ (800237c <HAL_FDCAN_IRQHandler+0x4b0>)
 80021e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ea:	0f9b      	lsrs	r3, r3, #30
 80021ec:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80021f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a60      	ldr	r2, [pc, #384]	@ (8002384 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	f040 80ac 	bne.w	8002362 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a4 	beq.w	8002362 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800222e:	4013      	ands	r3, r2
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800223c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002246:	4013      	ands	r3, r2
 8002248:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800225e:	4013      	ands	r3, r2
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800226c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	4013      	ands	r3, r2
 8002278:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8002284:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	4013      	ands	r3, r2
 8002290:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80022a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80022b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8e6 	bl	8002484 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022c4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80022c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8e6 	bl	800249a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01a      	beq.n	8002310 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d014      	beq.n	8002310 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022fc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2240      	movs	r2, #64	@ 0x40
 8002304:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	6939      	ldr	r1, [r7, #16]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8d0 	bl	80024b0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800231c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800231e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f8d1 	bl	80024c8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f874 	bl	800245a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002372:	bf00      	nop
 8002374:	3758      	adds	r7, #88	@ 0x58
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	4000a800 	.word	0x4000a800
 8002380:	3fcfffff 	.word	0x3fcfffff
 8002384:	4000a000 	.word	0x4000a000

08002388 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80024f6:	4ba7      	ldr	r3, [pc, #668]	@ (8002794 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	0091      	lsls	r1, r2, #2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	430b      	orrs	r3, r1
 8002504:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002510:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	4413      	add	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002536:	4b97      	ldr	r3, [pc, #604]	@ (8002794 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002538:	4013      	ands	r3, r2
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	0091      	lsls	r1, r2, #2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	430b      	orrs	r3, r1
 8002544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002550:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4413      	add	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002578:	4b86      	ldr	r3, [pc, #536]	@ (8002794 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800257a:	4013      	ands	r3, r2
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	0091      	lsls	r1, r2, #2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002592:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	041a      	lsls	r2, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025c0:	4b74      	ldr	r3, [pc, #464]	@ (8002794 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	0091      	lsls	r1, r2, #2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80025da:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e2:	041a      	lsls	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4413      	add	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002608:	4b62      	ldr	r3, [pc, #392]	@ (8002794 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800260a:	4013      	ands	r3, r2
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	0091      	lsls	r1, r2, #2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	430b      	orrs	r3, r1
 8002616:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4413      	add	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002634:	4b57      	ldr	r3, [pc, #348]	@ (8002794 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002636:	4013      	ands	r3, r2
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	0091      	lsls	r1, r2, #2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	430b      	orrs	r3, r1
 8002642:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800264e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	041a      	lsls	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002678:	4013      	ands	r3, r2
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	0091      	lsls	r1, r2, #2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	430b      	orrs	r3, r1
 8002684:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002690:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	041a      	lsls	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026ac:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b4:	061a      	lsls	r2, r3, #24
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026c4:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80026c6:	4413      	add	r3, r2
 80026c8:	009a      	lsls	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	441a      	add	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002700:	441a      	add	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	441a      	add	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d915      	bls.n	80027bc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002790:	e006      	b.n	80027a0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002792:	bf00      	nop
 8002794:	ffff0003 	.word	0xffff0003
 8002798:	10002b00 	.word	0x10002b00
 800279c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2203      	movs	r2, #3
 80027b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e010      	b.n	80027de <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e005      	b.n	80027d0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3f3      	bcc.n	80027c4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800280a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002812:	4313      	orrs	r3, r2
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e00a      	b.n	800282e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002820:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002826:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800282c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002838:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800283e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002844:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3304      	adds	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	3304      	adds	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e020      	b.n	80028c6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3303      	adds	r3, #3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3302      	adds	r3, #2
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	440b      	add	r3, r1
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800289c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	440b      	add	r3, r1
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80028aa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	440a      	add	r2, r1
 80028b2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028b4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	3304      	adds	r3, #4
 80028be:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3304      	adds	r3, #4
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <FDCAN_CopyMessageToRAM+0xf8>)
 80028cc:	5cd3      	ldrb	r3, [r2, r3]
 80028ce:	461a      	mov	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d3d6      	bcc.n	8002884 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	3724      	adds	r7, #36	@ 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	0800795c 	.word	0x0800795c

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028f6:	4b89      	ldr	r3, [pc, #548]	@ (8002b1c <HAL_GPIO_Init+0x234>)
 80028f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028fa:	e194      	b.n	8002c26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8186 	beq.w	8002c20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d005      	beq.n	800292c <HAL_GPIO_Init+0x44>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d130      	bne.n	800298e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002962:	2201      	movs	r2, #1
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0201 	and.w	r2, r3, #1
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b03      	cmp	r3, #3
 8002998:	d017      	beq.n	80029ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d123      	bne.n	8002a1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	08da      	lsrs	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3208      	adds	r2, #8
 80029de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	08da      	lsrs	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3208      	adds	r2, #8
 8002a18:	69b9      	ldr	r1, [r7, #24]
 8002a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0203 	and.w	r2, r3, #3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80e0 	beq.w	8002c20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a60:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_GPIO_Init+0x238>)
 8002a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a66:	4a2e      	ldr	r2, [pc, #184]	@ (8002b20 <HAL_GPIO_Init+0x238>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_GPIO_Init+0x238>)
 8002a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7e:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_GPIO_Init+0x23c>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a20      	ldr	r2, [pc, #128]	@ (8002b28 <HAL_GPIO_Init+0x240>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d052      	beq.n	8002b50 <HAL_GPIO_Init+0x268>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	@ (8002b2c <HAL_GPIO_Init+0x244>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d031      	beq.n	8002b16 <HAL_GPIO_Init+0x22e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_GPIO_Init+0x248>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x22a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <HAL_GPIO_Init+0x24c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x226>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <HAL_GPIO_Init+0x250>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x222>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b3c <HAL_GPIO_Init+0x254>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x21e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <HAL_GPIO_Init+0x258>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x21a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <HAL_GPIO_Init+0x25c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x216>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <HAL_GPIO_Init+0x260>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x212>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <HAL_GPIO_Init+0x264>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x20e>
 8002af2:	2309      	movs	r3, #9
 8002af4:	e02d      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002af6:	230a      	movs	r3, #10
 8002af8:	e02b      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002afa:	2308      	movs	r3, #8
 8002afc:	e029      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e027      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002b02:	2306      	movs	r3, #6
 8002b04:	e025      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e023      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e021      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e01f      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e01d      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01b      	b.n	8002b52 <HAL_GPIO_Init+0x26a>
 8002b1a:	bf00      	nop
 8002b1c:	58000080 	.word	0x58000080
 8002b20:	58024400 	.word	0x58024400
 8002b24:	58000400 	.word	0x58000400
 8002b28:	58020000 	.word	0x58020000
 8002b2c:	58020400 	.word	0x58020400
 8002b30:	58020800 	.word	0x58020800
 8002b34:	58020c00 	.word	0x58020c00
 8002b38:	58021000 	.word	0x58021000
 8002b3c:	58021400 	.word	0x58021400
 8002b40:	58021800 	.word	0x58021800
 8002b44:	58021c00 	.word	0x58021c00
 8002b48:	58022000 	.word	0x58022000
 8002b4c:	58022400 	.word	0x58022400
 8002b50:	2300      	movs	r3, #0
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	f002 0203 	and.w	r2, r2, #3
 8002b58:	0092      	lsls	r2, r2, #2
 8002b5a:	4093      	lsls	r3, r2
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b62:	4938      	ldr	r1, [pc, #224]	@ (8002c44 <HAL_GPIO_Init+0x35c>)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	3301      	adds	r3, #1
 8002c24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f47f ae63 	bne.w	80028fc <HAL_GPIO_Init+0x14>
  }
}
 8002c36:	bf00      	nop
 8002c38:	bf00      	nop
 8002c3a:	3724      	adds	r7, #36	@ 0x24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	58000400 	.word	0x58000400

08002c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
 8002c54:	4613      	mov	r3, r2
 8002c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c58:	787b      	ldrb	r3, [r7, #1]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c64:	e003      	b.n	8002c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	041a      	lsls	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c8c:	887a      	ldrh	r2, [r7, #2]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	041a      	lsls	r2, r3, #16
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43d9      	mvns	r1, r3
 8002c98:	887b      	ldrh	r3, [r7, #2]
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	619a      	str	r2, [r3, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cb8:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_PWREx_ConfigSupply+0x70>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d00a      	beq.n	8002cda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cc4:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <HAL_PWREx_ConfigSupply+0x70>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e01f      	b.n	8002d16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e01d      	b.n	8002d16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_PWREx_ConfigSupply+0x70>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	490f      	ldr	r1, [pc, #60]	@ (8002d20 <HAL_PWREx_ConfigSupply+0x70>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cea:	f7fe fb59 	bl	80013a0 <HAL_GetTick>
 8002cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cf0:	e009      	b.n	8002d06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cf2:	f7fe fb55 	bl	80013a0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d00:	d901      	bls.n	8002d06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e007      	b.n	8002d16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_PWREx_ConfigSupply+0x70>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	58024800 	.word	0x58024800

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	@ 0x30
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f000 bc48 	b.w	80035c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8088 	beq.w	8002e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d46:	4b99      	ldr	r3, [pc, #612]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d50:	4b96      	ldr	r3, [pc, #600]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d007      	beq.n	8002d6c <HAL_RCC_OscConfig+0x48>
 8002d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5e:	2b18      	cmp	r3, #24
 8002d60:	d111      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62>
 8002d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d06d      	beq.n	8002e54 <HAL_RCC_OscConfig+0x130>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d169      	bne.n	8002e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f000 bc21 	b.w	80035c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x7a>
 8002d90:	4b86      	ldr	r3, [pc, #536]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a85      	ldr	r2, [pc, #532]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e02e      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x9c>
 8002da6:	4b81      	ldr	r3, [pc, #516]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a80      	ldr	r2, [pc, #512]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b7e      	ldr	r3, [pc, #504]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7d      	ldr	r2, [pc, #500]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0xc0>
 8002dca:	4b78      	ldr	r3, [pc, #480]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a77      	ldr	r2, [pc, #476]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b75      	ldr	r3, [pc, #468]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a74      	ldr	r2, [pc, #464]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002de4:	4b71      	ldr	r3, [pc, #452]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a70      	ldr	r2, [pc, #448]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b6e      	ldr	r3, [pc, #440]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6d      	ldr	r2, [pc, #436]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe facc 	bl	80013a0 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fac8 	bl	80013a0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e3d4      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e1e:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe8>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fab8 	bl	80013a0 <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fab4 	bl	80013a0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e3c0      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e46:	4b59      	ldr	r3, [pc, #356]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x110>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80ca 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e64:	4b51      	ldr	r3, [pc, #324]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_RCC_OscConfig+0x166>
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b18      	cmp	r3, #24
 8002e7e:	d156      	bne.n	8002f2e <HAL_RCC_OscConfig+0x20a>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d151      	bne.n	8002f2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8a:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e392      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ea2:	4b42      	ldr	r3, [pc, #264]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0219 	bic.w	r2, r3, #25
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	493f      	ldr	r1, [pc, #252]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fa74 	bl	80013a0 <HAL_GetTick>
 8002eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fa70 	bl	80013a0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e37c      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ece:	4b37      	ldr	r3, [pc, #220]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	f7fe fa91 	bl	8001400 <HAL_GetREVID>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d817      	bhi.n	8002f18 <HAL_RCC_OscConfig+0x1f4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d108      	bne.n	8002f02 <HAL_RCC_OscConfig+0x1de>
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002efe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f00:	e07a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	031b      	lsls	r3, r3, #12
 8002f10:	4926      	ldr	r1, [pc, #152]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f16:	e06f      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f18:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	4921      	ldr	r1, [pc, #132]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	e064      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d047      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f36:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0219 	bic.w	r2, r3, #25
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	491a      	ldr	r1, [pc, #104]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fa2a 	bl	80013a0 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe fa26 	bl	80013a0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e332      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f62:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	f7fe fa47 	bl	8001400 <HAL_GetREVID>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d819      	bhi.n	8002fb0 <HAL_RCC_OscConfig+0x28c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b40      	cmp	r3, #64	@ 0x40
 8002f82:	d108      	bne.n	8002f96 <HAL_RCC_OscConfig+0x272>
 8002f84:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f92:	6053      	str	r3, [r2, #4]
 8002f94:	e030      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	031b      	lsls	r3, r3, #12
 8002fa4:	4901      	ldr	r1, [pc, #4]	@ (8002fac <HAL_RCC_OscConfig+0x288>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
 8002faa:	e025      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	4b9a      	ldr	r3, [pc, #616]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	4997      	ldr	r1, [pc, #604]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
 8002fc4:	e018      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc6:	4b95      	ldr	r3, [pc, #596]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a94      	ldr	r2, [pc, #592]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe f9e5 	bl	80013a0 <HAL_GetTick>
 8002fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe f9e1 	bl	80013a0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e2ed      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fec:	4b8b      	ldr	r3, [pc, #556]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a9 	beq.w	8003158 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003006:	4b85      	ldr	r3, [pc, #532]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800300e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003010:	4b82      	ldr	r3, [pc, #520]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d007      	beq.n	800302c <HAL_RCC_OscConfig+0x308>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b18      	cmp	r3, #24
 8003020:	d13a      	bne.n	8003098 <HAL_RCC_OscConfig+0x374>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d135      	bne.n	8003098 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800302c:	4b7b      	ldr	r3, [pc, #492]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_OscConfig+0x320>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	2b80      	cmp	r3, #128	@ 0x80
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e2c1      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003044:	f7fe f9dc 	bl	8001400 <HAL_GetREVID>
 8003048:	4603      	mov	r3, r0
 800304a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800304e:	4293      	cmp	r3, r2
 8003050:	d817      	bhi.n	8003082 <HAL_RCC_OscConfig+0x35e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	2b20      	cmp	r3, #32
 8003058:	d108      	bne.n	800306c <HAL_RCC_OscConfig+0x348>
 800305a:	4b70      	ldr	r3, [pc, #448]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003062:	4a6e      	ldr	r2, [pc, #440]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003068:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800306a:	e075      	b.n	8003158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800306c:	4b6b      	ldr	r3, [pc, #428]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	069b      	lsls	r3, r3, #26
 800307a:	4968      	ldr	r1, [pc, #416]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003080:	e06a      	b.n	8003158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003082:	4b66      	ldr	r3, [pc, #408]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	4962      	ldr	r1, [pc, #392]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003096:	e05f      	b.n	8003158 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d042      	beq.n	8003126 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030a0:	4b5e      	ldr	r3, [pc, #376]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5d      	ldr	r2, [pc, #372]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f978 	bl	80013a0 <HAL_GetTick>
 80030b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030b4:	f7fe f974 	bl	80013a0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e280      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030c6:	4b55      	ldr	r3, [pc, #340]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030d2:	f7fe f995 	bl	8001400 <HAL_GetREVID>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030dc:	4293      	cmp	r3, r2
 80030de:	d817      	bhi.n	8003110 <HAL_RCC_OscConfig+0x3ec>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d108      	bne.n	80030fa <HAL_RCC_OscConfig+0x3d6>
 80030e8:	4b4c      	ldr	r3, [pc, #304]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030f0:	4a4a      	ldr	r2, [pc, #296]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030f6:	6053      	str	r3, [r2, #4]
 80030f8:	e02e      	b.n	8003158 <HAL_RCC_OscConfig+0x434>
 80030fa:	4b48      	ldr	r3, [pc, #288]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	069b      	lsls	r3, r3, #26
 8003108:	4944      	ldr	r1, [pc, #272]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
 800310e:	e023      	b.n	8003158 <HAL_RCC_OscConfig+0x434>
 8003110:	4b42      	ldr	r3, [pc, #264]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	493f      	ldr	r1, [pc, #252]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
 8003124:	e018      	b.n	8003158 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003126:	4b3d      	ldr	r3, [pc, #244]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3c      	ldr	r2, [pc, #240]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800312c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe f935 	bl	80013a0 <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800313a:	f7fe f931 	bl	80013a0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e23d      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800314c:	4b33      	ldr	r3, [pc, #204]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d036      	beq.n	80031d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d019      	beq.n	80031a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316c:	4b2b      	ldr	r3, [pc, #172]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800316e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003170:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe f912 	bl	80013a0 <HAL_GetTick>
 800317c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003180:	f7fe f90e 	bl	80013a0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e21a      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003192:	4b22      	ldr	r3, [pc, #136]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 8003194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x45c>
 800319e:	e018      	b.n	80031d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a0:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a4:	4a1d      	ldr	r2, [pc, #116]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe f8f8 	bl	80013a0 <HAL_GetTick>
 80031b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b4:	f7fe f8f4 	bl	80013a0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e200      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d039      	beq.n	8003252 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01c      	beq.n	8003220 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a0c      	ldr	r2, [pc, #48]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 80031ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031f2:	f7fe f8d5 	bl	80013a0 <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031fa:	f7fe f8d1 	bl	80013a0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1dd      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_RCC_OscConfig+0x4f8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x4d6>
 8003218:	e01b      	b.n	8003252 <HAL_RCC_OscConfig+0x52e>
 800321a:	bf00      	nop
 800321c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003220:	4b9b      	ldr	r3, [pc, #620]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a9a      	ldr	r2, [pc, #616]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800322a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800322c:	f7fe f8b8 	bl	80013a0 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003234:	f7fe f8b4 	bl	80013a0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1c0      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003246:	4b92      	ldr	r3, [pc, #584]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8081 	beq.w	8003362 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003260:	4b8c      	ldr	r3, [pc, #560]	@ (8003494 <HAL_RCC_OscConfig+0x770>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a8b      	ldr	r2, [pc, #556]	@ (8003494 <HAL_RCC_OscConfig+0x770>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800326c:	f7fe f898 	bl	80013a0 <HAL_GetTick>
 8003270:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fe f894 	bl	80013a0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1a0      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003286:	4b83      	ldr	r3, [pc, #524]	@ (8003494 <HAL_RCC_OscConfig+0x770>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x584>
 800329a:	4b7d      	ldr	r3, [pc, #500]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	4a7c      	ldr	r2, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a6:	e02d      	b.n	8003304 <HAL_RCC_OscConfig+0x5e0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10c      	bne.n	80032ca <HAL_RCC_OscConfig+0x5a6>
 80032b0:	4b77      	ldr	r3, [pc, #476]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	4a76      	ldr	r2, [pc, #472]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80032bc:	4b74      	ldr	r3, [pc, #464]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	4a73      	ldr	r2, [pc, #460]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032c2:	f023 0304 	bic.w	r3, r3, #4
 80032c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x5e0>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x5c8>
 80032d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	4b6c      	ldr	r3, [pc, #432]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0x5e0>
 80032ec:	4b68      	ldr	r3, [pc, #416]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a67      	ldr	r2, [pc, #412]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f8:	4b65      	ldr	r3, [pc, #404]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4a64      	ldr	r2, [pc, #400]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe f848 	bl	80013a0 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe f844 	bl	80013a0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e14e      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800332a:	4b59      	ldr	r3, [pc, #356]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ee      	beq.n	8003314 <HAL_RCC_OscConfig+0x5f0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe f832 	bl	80013a0 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe f82e 	bl	80013a0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e138      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003356:	4b4e      	ldr	r3, [pc, #312]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ee      	bne.n	8003340 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 812d 	beq.w	80035c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800336c:	4b48      	ldr	r3, [pc, #288]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003374:	2b18      	cmp	r3, #24
 8003376:	f000 80bd 	beq.w	80034f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	2b02      	cmp	r3, #2
 8003380:	f040 809e 	bne.w	80034c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	4b42      	ldr	r3, [pc, #264]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a41      	ldr	r2, [pc, #260]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800338a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800338e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe f806 	bl	80013a0 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe f802 	bl	80013a0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e10e      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033aa:	4b39      	ldr	r3, [pc, #228]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b6:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80033b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ba:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <HAL_RCC_OscConfig+0x774>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	430a      	orrs	r2, r1
 80033ca:	4931      	ldr	r1, [pc, #196]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	3b01      	subs	r3, #1
 80033d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033de:	3b01      	subs	r3, #1
 80033e0:	025b      	lsls	r3, r3, #9
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	3b01      	subs	r3, #1
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003400:	4923      	ldr	r1, [pc, #140]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003406:	4b22      	ldr	r3, [pc, #136]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003412:	4b1f      	ldr	r3, [pc, #124]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003416:	4b21      	ldr	r3, [pc, #132]	@ (800349c <HAL_RCC_OscConfig+0x778>)
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800341e:	00d2      	lsls	r2, r2, #3
 8003420:	491b      	ldr	r1, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003426:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	f023 020c 	bic.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	4917      	ldr	r1, [pc, #92]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003438:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	f023 0202 	bic.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003444:	4912      	ldr	r1, [pc, #72]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800344a:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	4a10      	ldr	r2, [pc, #64]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003456:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800345c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003462:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800346c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800346e:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	4a07      	ldr	r2, [pc, #28]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800347a:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <HAL_RCC_OscConfig+0x76c>)
 8003480:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd ff8b 	bl	80013a0 <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800348c:	e011      	b.n	80034b2 <HAL_RCC_OscConfig+0x78e>
 800348e:	bf00      	nop
 8003490:	58024400 	.word	0x58024400
 8003494:	58024800 	.word	0x58024800
 8003498:	fffffc0c 	.word	0xfffffc0c
 800349c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd ff7e 	bl	80013a0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e08a      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034b2:	4b47      	ldr	r3, [pc, #284]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x77c>
 80034be:	e082      	b.n	80035c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c0:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a42      	ldr	r2, [pc, #264]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80034c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fd ff68 	bl	80013a0 <HAL_GetTick>
 80034d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fd ff64 	bl	80013a0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e070      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034e6:	4b3a      	ldr	r3, [pc, #232]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x7b0>
 80034f2:	e068      	b.n	80035c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034f4:	4b36      	ldr	r3, [pc, #216]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034fa:	4b35      	ldr	r3, [pc, #212]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	2b01      	cmp	r3, #1
 8003506:	d031      	beq.n	800356c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f003 0203 	and.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d12a      	bne.n	800356c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d122      	bne.n	800356c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d11a      	bne.n	800356c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0a5b      	lsrs	r3, r3, #9
 800353a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003542:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d111      	bne.n	800356c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d108      	bne.n	800356c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	0e1b      	lsrs	r3, r3, #24
 800355e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003566:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e02b      	b.n	80035c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003570:	4b17      	ldr	r3, [pc, #92]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800357a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	429a      	cmp	r2, r3
 8003584:	d01f      	beq.n	80035c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	4a11      	ldr	r2, [pc, #68]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003592:	f7fd ff05 	bl	80013a0 <HAL_GetTick>
 8003596:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003598:	bf00      	nop
 800359a:	f7fd ff01 	bl	80013a0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d0f9      	beq.n	800359a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035a6:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80035a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_RCC_OscConfig+0x8b0>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035b2:	00d2      	lsls	r2, r2, #3
 80035b4:	4906      	ldr	r1, [pc, #24]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80035ba:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	4a04      	ldr	r2, [pc, #16]	@ (80035d0 <HAL_RCC_OscConfig+0x8ac>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3730      	adds	r7, #48	@ 0x30
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	58024400 	.word	0x58024400
 80035d4:	ffff0007 	.word	0xffff0007

080035d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e19c      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b8a      	ldr	r3, [pc, #552]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d910      	bls.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b87      	ldr	r3, [pc, #540]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 020f 	bic.w	r2, r3, #15
 8003602:	4985      	ldr	r1, [pc, #532]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b83      	ldr	r3, [pc, #524]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e184      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d010      	beq.n	800364a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	4b7b      	ldr	r3, [pc, #492]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003634:	429a      	cmp	r2, r3
 8003636:	d908      	bls.n	800364a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003638:	4b78      	ldr	r3, [pc, #480]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	4975      	ldr	r1, [pc, #468]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 8003646:	4313      	orrs	r3, r2
 8003648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d010      	beq.n	8003678 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	4b70      	ldr	r3, [pc, #448]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003662:	429a      	cmp	r2, r3
 8003664:	d908      	bls.n	8003678 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003666:	4b6d      	ldr	r3, [pc, #436]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	496a      	ldr	r1, [pc, #424]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 8003674:	4313      	orrs	r3, r2
 8003676:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d010      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	4b64      	ldr	r3, [pc, #400]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003690:	429a      	cmp	r2, r3
 8003692:	d908      	bls.n	80036a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003694:	4b61      	ldr	r3, [pc, #388]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	495e      	ldr	r1, [pc, #376]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d010      	beq.n	80036d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	4b59      	ldr	r3, [pc, #356]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036be:	429a      	cmp	r2, r3
 80036c0:	d908      	bls.n	80036d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036c2:	4b56      	ldr	r3, [pc, #344]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4953      	ldr	r1, [pc, #332]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	4b4d      	ldr	r3, [pc, #308]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d908      	bls.n	8003702 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f023 020f 	bic.w	r2, r3, #15
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4947      	ldr	r1, [pc, #284]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d055      	beq.n	80037ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800370e:	4b43      	ldr	r3, [pc, #268]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	4940      	ldr	r1, [pc, #256]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800371c:	4313      	orrs	r3, r2
 800371e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d107      	bne.n	8003738 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003728:	4b3c      	ldr	r3, [pc, #240]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d121      	bne.n	8003778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0f6      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d107      	bne.n	8003750 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003740:	4b36      	ldr	r3, [pc, #216]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d115      	bne.n	8003778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0ea      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003758:	4b30      	ldr	r3, [pc, #192]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0de      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003768:	4b2c      	ldr	r3, [pc, #176]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0d6      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003778:	4b28      	ldr	r3, [pc, #160]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f023 0207 	bic.w	r2, r3, #7
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4925      	ldr	r1, [pc, #148]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 8003786:	4313      	orrs	r3, r2
 8003788:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378a:	f7fd fe09 	bl	80013a0 <HAL_GetTick>
 800378e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003792:	f7fd fe05 	bl	80013a0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0be      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a8:	4b1c      	ldr	r3, [pc, #112]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d1eb      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	4b14      	ldr	r3, [pc, #80]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d208      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d6:	4b11      	ldr	r3, [pc, #68]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f023 020f 	bic.w	r2, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	490e      	ldr	r1, [pc, #56]	@ (800381c <HAL_RCC_ClockConfig+0x244>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d214      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 020f 	bic.w	r2, r3, #15
 80037fe:	4906      	ldr	r1, [pc, #24]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <HAL_RCC_ClockConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e086      	b.n	8003926 <HAL_RCC_ClockConfig+0x34e>
 8003818:	52002000 	.word	0x52002000
 800381c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d010      	beq.n	800384e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	4b3f      	ldr	r3, [pc, #252]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003838:	429a      	cmp	r2, r3
 800383a:	d208      	bcs.n	800384e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800383c:	4b3c      	ldr	r3, [pc, #240]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	4939      	ldr	r1, [pc, #228]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 800384a:	4313      	orrs	r3, r2
 800384c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003866:	429a      	cmp	r2, r3
 8003868:	d208      	bcs.n	800387c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	492e      	ldr	r1, [pc, #184]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 8003878:	4313      	orrs	r3, r2
 800387a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003894:	429a      	cmp	r2, r3
 8003896:	d208      	bcs.n	80038aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003898:	4b25      	ldr	r3, [pc, #148]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4922      	ldr	r1, [pc, #136]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d010      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d208      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4917      	ldr	r1, [pc, #92]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038d8:	f000 f834 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	4912      	ldr	r1, [pc, #72]	@ (8003934 <HAL_RCC_ClockConfig+0x35c>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
 80038f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <HAL_RCC_ClockConfig+0x358>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003934 <HAL_RCC_ClockConfig+0x35c>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <HAL_RCC_ClockConfig+0x360>)
 800390e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003910:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x364>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_RCC_ClockConfig+0x368>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fcf6 	bl	800130c <HAL_InitTick>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
 8003934:	08007944 	.word	0x08007944
 8003938:	2400000c 	.word	0x2400000c
 800393c:	24000008 	.word	0x24000008
 8003940:	24000020 	.word	0x24000020

08003944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	@ 0x24
 8003948:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800394a:	4bb3      	ldr	r3, [pc, #716]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003952:	2b18      	cmp	r3, #24
 8003954:	f200 8155 	bhi.w	8003c02 <HAL_RCC_GetSysClockFreq+0x2be>
 8003958:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <HAL_RCC_GetSysClockFreq+0x1c>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	080039c5 	.word	0x080039c5
 8003964:	08003c03 	.word	0x08003c03
 8003968:	08003c03 	.word	0x08003c03
 800396c:	08003c03 	.word	0x08003c03
 8003970:	08003c03 	.word	0x08003c03
 8003974:	08003c03 	.word	0x08003c03
 8003978:	08003c03 	.word	0x08003c03
 800397c:	08003c03 	.word	0x08003c03
 8003980:	080039eb 	.word	0x080039eb
 8003984:	08003c03 	.word	0x08003c03
 8003988:	08003c03 	.word	0x08003c03
 800398c:	08003c03 	.word	0x08003c03
 8003990:	08003c03 	.word	0x08003c03
 8003994:	08003c03 	.word	0x08003c03
 8003998:	08003c03 	.word	0x08003c03
 800399c:	08003c03 	.word	0x08003c03
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	08003c03 	.word	0x08003c03
 80039a8:	08003c03 	.word	0x08003c03
 80039ac:	08003c03 	.word	0x08003c03
 80039b0:	08003c03 	.word	0x08003c03
 80039b4:	08003c03 	.word	0x08003c03
 80039b8:	08003c03 	.word	0x08003c03
 80039bc:	08003c03 	.word	0x08003c03
 80039c0:	080039f7 	.word	0x080039f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039c4:	4b94      	ldr	r3, [pc, #592]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039d0:	4b91      	ldr	r3, [pc, #580]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	4a90      	ldr	r2, [pc, #576]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
 80039e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80039e2:	e111      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039e4:	4b8d      	ldr	r3, [pc, #564]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039e6:	61bb      	str	r3, [r7, #24]
      break;
 80039e8:	e10e      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039ec:	61bb      	str	r3, [r7, #24]
      break;
 80039ee:	e10b      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039f2:	61bb      	str	r3, [r7, #24]
      break;
 80039f4:	e108      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039f6:	4b88      	ldr	r3, [pc, #544]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a00:	4b85      	ldr	r3, [pc, #532]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a0c:	4b82      	ldr	r3, [pc, #520]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a16:	4b80      	ldr	r3, [pc, #512]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1a:	08db      	lsrs	r3, r3, #3
 8003a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80e1 	beq.w	8003bfc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	f000 8083 	beq.w	8003b48 <HAL_RCC_GetSysClockFreq+0x204>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f200 80a1 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x248>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x114>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d056      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a56:	e099      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a58:	4b6f      	ldr	r3, [pc, #444]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02d      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a64:	4b6c      	ldr	r3, [pc, #432]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b62      	ldr	r3, [pc, #392]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003abe:	e087      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b51      	ldr	r3, [pc, #324]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ae6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b02:	e065      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b16:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b46:	e043      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003c34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b8a:	e021      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	0a5b      	lsrs	r3, r3, #9
 8003bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bda:	3301      	adds	r3, #1
 8003bdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf4:	ee17 3a90 	vmov	r3, s15
 8003bf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bfa:	e005      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]
      break;
 8003c00:	e002      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c02:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c04:	61bb      	str	r3, [r7, #24]
      break;
 8003c06:	bf00      	nop
  }

  return sysclockfreq;
 8003c08:	69bb      	ldr	r3, [r7, #24]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	@ 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	03d09000 	.word	0x03d09000
 8003c20:	003d0900 	.word	0x003d0900
 8003c24:	007a1200 	.word	0x007a1200
 8003c28:	46000000 	.word	0x46000000
 8003c2c:	4c742400 	.word	0x4c742400
 8003c30:	4a742400 	.word	0x4a742400
 8003c34:	4af42400 	.word	0x4af42400

08003c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c3e:	f7ff fe81 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	490f      	ldr	r1, [pc, #60]	@ (8003c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8003c50:	5ccb      	ldrb	r3, [r1, r3]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	4a09      	ldr	r2, [pc, #36]	@ (8003c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	4a07      	ldr	r2, [pc, #28]	@ (8003c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c76:	4a07      	ldr	r2, [pc, #28]	@ (8003c94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	08007944 	.word	0x08007944
 8003c90:	2400000c 	.word	0x2400000c
 8003c94:	24000008 	.word	0x24000008

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c9c:	f7ff ffcc 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4904      	ldr	r1, [pc, #16]	@ (8003cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	08007944 	.word	0x08007944

08003cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003cc8:	f7ff ffb6 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4904      	ldr	r1, [pc, #16]	@ (8003cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	08007944 	.word	0x08007944

08003cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf4:	b0ca      	sub	sp, #296	@ 0x128
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d14:	2500      	movs	r5, #0
 8003d16:	ea54 0305 	orrs.w	r3, r4, r5
 8003d1a:	d049      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d26:	d02f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d2c:	d828      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d32:	d01a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d38:	d822      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d42:	d007      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d44:	e01c      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d46:	4bb8      	ldr	r3, [pc, #736]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	4ab7      	ldr	r2, [pc, #732]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d52:	e01a      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	3308      	adds	r3, #8
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 fc8f 	bl	8005680 <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d68:	e00f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2102      	movs	r1, #2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 fd36 	bl	80057e4 <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d92:	4ba5      	ldr	r3, [pc, #660]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003da0:	4aa1      	ldr	r2, [pc, #644]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da2:	430b      	orrs	r3, r1
 8003da4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003da6:	e003      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003dbc:	f04f 0900 	mov.w	r9, #0
 8003dc0:	ea58 0309 	orrs.w	r3, r8, r9
 8003dc4:	d047      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d82a      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003ded 	.word	0x08003ded
 8003ddc:	08003dfb 	.word	0x08003dfb
 8003de0:	08003e11 	.word	0x08003e11
 8003de4:	08003e2f 	.word	0x08003e2f
 8003de8:	08003e2f 	.word	0x08003e2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dec:	4b8e      	ldr	r3, [pc, #568]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	4a8d      	ldr	r2, [pc, #564]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df8:	e01a      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	3308      	adds	r3, #8
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fc3c 	bl	8005680 <RCCEx_PLL2_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e0e:	e00f      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	3328      	adds	r3, #40	@ 0x28
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fce3 	bl	80057e4 <RCCEx_PLL3_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e24:	e004      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e38:	4b7b      	ldr	r3, [pc, #492]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3c:	f023 0107 	bic.w	r1, r3, #7
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	4a78      	ldr	r2, [pc, #480]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003e62:	f04f 0b00 	mov.w	fp, #0
 8003e66:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e6a:	d04c      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e76:	d030      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7c:	d829      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e80:	d02d      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e84:	d825      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e86:	2b80      	cmp	r3, #128	@ 0x80
 8003e88:	d018      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003e8a:	2b80      	cmp	r3, #128	@ 0x80
 8003e8c:	d821      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d007      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e98:	4b63      	ldr	r3, [pc, #396]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	4a62      	ldr	r2, [pc, #392]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ea4:	e01c      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	3308      	adds	r3, #8
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 fbe6 	bl	8005680 <RCCEx_PLL2_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003eba:	e011      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	3328      	adds	r3, #40	@ 0x28
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 fc8d 	bl	80057e4 <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e006      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003efc:	e003      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003f12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003f1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003f20:	460b      	mov	r3, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	d053      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f32:	d035      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f38:	d82e      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f3e:	d031      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f44:	d828      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f4a:	d01a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f50:	d822      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003f56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003f5c:	e01c      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5e:	4b32      	ldr	r3, [pc, #200]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	4a31      	ldr	r2, [pc, #196]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f6a:	e01c      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f70:	3308      	adds	r3, #8
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 fb83 	bl	8005680 <RCCEx_PLL2_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f80:	e011      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	3328      	adds	r3, #40	@ 0x28
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 fc2a 	bl	80057e4 <RCCEx_PLL3_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f96:	e006      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fae:	4b1e      	ldr	r3, [pc, #120]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003fda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fe4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d056      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ffa:	d038      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ffc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004000:	d831      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004002:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004006:	d034      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004008:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800400c:	d82b      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800400e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004012:	d01d      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004018:	d825      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800401e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004024:	e01f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004026:	bf00      	nop
 8004028:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800402c:	4ba2      	ldr	r3, [pc, #648]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	4aa1      	ldr	r2, [pc, #644]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004038:	e01c      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	3308      	adds	r3, #8
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f001 fb1c 	bl	8005680 <RCCEx_PLL2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800404e:	e011      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	3328      	adds	r3, #40	@ 0x28
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f001 fbc3 	bl	80057e4 <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004064:	e006      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800407c:	4b8e      	ldr	r3, [pc, #568]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800408c:	4a8a      	ldr	r2, [pc, #552]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800408e:	430b      	orrs	r3, r1
 8004090:	6593      	str	r3, [r2, #88]	@ 0x58
 8004092:	e003      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80040a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80040b6:	460b      	mov	r3, r1
 80040b8:	4313      	orrs	r3, r2
 80040ba:	d03a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c2:	2b30      	cmp	r3, #48	@ 0x30
 80040c4:	d01f      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80040c6:	2b30      	cmp	r3, #48	@ 0x30
 80040c8:	d819      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d00c      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d815      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d019      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d111      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040da:	4b77      	ldr	r3, [pc, #476]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	4a76      	ldr	r2, [pc, #472]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040e6:	e011      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	3308      	adds	r3, #8
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fac5 	bl	8005680 <RCCEx_PLL2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040fc:	e006      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004104:	e002      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800410a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004114:	4b68      	ldr	r3, [pc, #416]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004118:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004124:	430b      	orrs	r3, r1
 8004126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800413e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004148:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800414c:	460b      	mov	r3, r1
 800414e:	4313      	orrs	r3, r2
 8004150:	d051      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800415c:	d035      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800415e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004162:	d82e      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004164:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004168:	d031      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800416a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800416e:	d828      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004174:	d01a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417a:	d822      	bhi.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004184:	d007      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004186:	e01c      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4a4a      	ldr	r2, [pc, #296]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004194:	e01c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	3308      	adds	r3, #8
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 fa6e 	bl	8005680 <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041aa:	e011      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	3328      	adds	r3, #40	@ 0x28
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fb15 	bl	80057e4 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041c0:	e006      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c8:	e002      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80041ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041d8:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e6:	4a34      	ldr	r2, [pc, #208]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80041ec:	e003      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800420c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d056      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800421c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004220:	d033      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004222:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004226:	d82c      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004228:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800422c:	d02f      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800422e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004232:	d826      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004234:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004238:	d02b      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800423a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800423e:	d820      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004244:	d012      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800424a:	d81a      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d022      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004254:	d115      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	3308      	adds	r3, #8
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f001 fa0e 	bl	8005680 <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800426a:	e015      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	3328      	adds	r3, #40	@ 0x28
 8004272:	2101      	movs	r1, #1
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fab5 	bl	80057e4 <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004280:	e00a      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004288:	e006      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800428a:	bf00      	nop
 800428c:	e004      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ae:	4a02      	ldr	r2, [pc, #8]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80042d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d055      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f0:	d033      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80042f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f6:	d82c      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fc:	d02f      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004302:	d826      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004304:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004308:	d02b      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800430a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800430e:	d820      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004314:	d012      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800431a:	d81a      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d022      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004324:	d115      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	3308      	adds	r3, #8
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f001 f9a6 	bl	8005680 <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800433a:	e015      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	3328      	adds	r3, #40	@ 0x28
 8004342:	2101      	movs	r1, #1
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fa4d 	bl	80057e4 <RCCEx_PLL3_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004350:	e00a      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800435a:	bf00      	nop
 800435c:	e004      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004370:	4ba3      	ldr	r3, [pc, #652]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004374:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004380:	4a9f      	ldr	r2, [pc, #636]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004382:	430b      	orrs	r3, r1
 8004384:	6593      	str	r3, [r2, #88]	@ 0x58
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800439c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d037      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043ba:	d00e      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c0:	d816      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d018      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ca:	d111      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	4a8b      	ldr	r2, [pc, #556]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043d8:	e00f      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f94c 	bl	8005680 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80043f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004402:	4b7f      	ldr	r3, [pc, #508]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004406:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	4a7b      	ldr	r2, [pc, #492]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004412:	430b      	orrs	r3, r1
 8004414:	6513      	str	r3, [r2, #80]	@ 0x50
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800442c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004430:	2300      	movs	r3, #0
 8004432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004436:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d039      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004446:	2b03      	cmp	r3, #3
 8004448:	d81c      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800444a:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	0800448d 	.word	0x0800448d
 8004454:	08004461 	.word	0x08004461
 8004458:	0800446f 	.word	0x0800446f
 800445c:	0800448d 	.word	0x0800448d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004460:	4b67      	ldr	r3, [pc, #412]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	4a66      	ldr	r2, [pc, #408]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800446a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800446c:	e00f      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	3308      	adds	r3, #8
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f902 	bl	8005680 <RCCEx_PLL2_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004496:	4b5a      	ldr	r3, [pc, #360]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449a:	f023 0103 	bic.w	r1, r3, #3
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a4:	4a56      	ldr	r2, [pc, #344]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80044c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80044ce:	460b      	mov	r3, r1
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f000 809f 	beq.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a4a      	ldr	r2, [pc, #296]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044e2:	f7fc ff5d 	bl	80013a0 <HAL_GetTick>
 80044e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ea:	e00b      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fc ff58 	bl	80013a0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b64      	cmp	r3, #100	@ 0x64
 80044fa:	d903      	bls.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004502:	e005      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004504:	4b3f      	ldr	r3, [pc, #252]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ed      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004514:	2b00      	cmp	r3, #0
 8004516:	d179      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004518:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800451a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004524:	4053      	eors	r3, r2
 8004526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452e:	4b34      	ldr	r3, [pc, #208]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004536:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800453a:	4b31      	ldr	r3, [pc, #196]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	4a30      	ldr	r2, [pc, #192]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004546:	4b2e      	ldr	r3, [pc, #184]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	4a2d      	ldr	r2, [pc, #180]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800454c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004550:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004552:	4a2b      	ldr	r2, [pc, #172]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004558:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004566:	d118      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fc ff1a 	bl	80013a0 <HAL_GetTick>
 800456c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004570:	e00d      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fc ff15 	bl	80013a0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004582:	429a      	cmp	r2, r3
 8004584:	d903      	bls.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800458c:	e005      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800458e:	4b1c      	ldr	r3, [pc, #112]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0eb      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d129      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045b2:	d10e      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80045b4:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045c4:	091a      	lsrs	r2, r3, #4
 80045c6:	4b10      	ldr	r3, [pc, #64]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6113      	str	r3, [r2, #16]
 80045d0:	e005      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045dc:	6113      	str	r3, [r2, #16]
 80045de:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ee:	4a04      	ldr	r2, [pc, #16]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f4:	e00e      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80045fe:	e009      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004600:	58024400 	.word	0x58024400
 8004604:	58024800 	.word	0x58024800
 8004608:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f002 0301 	and.w	r3, r2, #1
 8004620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004624:	2300      	movs	r3, #0
 8004626:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800462a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	f000 8089 	beq.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463c:	2b28      	cmp	r3, #40	@ 0x28
 800463e:	d86b      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004640:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	08004721 	.word	0x08004721
 800464c:	08004719 	.word	0x08004719
 8004650:	08004719 	.word	0x08004719
 8004654:	08004719 	.word	0x08004719
 8004658:	08004719 	.word	0x08004719
 800465c:	08004719 	.word	0x08004719
 8004660:	08004719 	.word	0x08004719
 8004664:	08004719 	.word	0x08004719
 8004668:	080046ed 	.word	0x080046ed
 800466c:	08004719 	.word	0x08004719
 8004670:	08004719 	.word	0x08004719
 8004674:	08004719 	.word	0x08004719
 8004678:	08004719 	.word	0x08004719
 800467c:	08004719 	.word	0x08004719
 8004680:	08004719 	.word	0x08004719
 8004684:	08004719 	.word	0x08004719
 8004688:	08004703 	.word	0x08004703
 800468c:	08004719 	.word	0x08004719
 8004690:	08004719 	.word	0x08004719
 8004694:	08004719 	.word	0x08004719
 8004698:	08004719 	.word	0x08004719
 800469c:	08004719 	.word	0x08004719
 80046a0:	08004719 	.word	0x08004719
 80046a4:	08004719 	.word	0x08004719
 80046a8:	08004721 	.word	0x08004721
 80046ac:	08004719 	.word	0x08004719
 80046b0:	08004719 	.word	0x08004719
 80046b4:	08004719 	.word	0x08004719
 80046b8:	08004719 	.word	0x08004719
 80046bc:	08004719 	.word	0x08004719
 80046c0:	08004719 	.word	0x08004719
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004719 	.word	0x08004719
 80046d0:	08004719 	.word	0x08004719
 80046d4:	08004719 	.word	0x08004719
 80046d8:	08004719 	.word	0x08004719
 80046dc:	08004719 	.word	0x08004719
 80046e0:	08004719 	.word	0x08004719
 80046e4:	08004719 	.word	0x08004719
 80046e8:	08004721 	.word	0x08004721
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f0:	3308      	adds	r3, #8
 80046f2:	2101      	movs	r1, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 ffc3 	bl	8005680 <RCCEx_PLL2_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004700:	e00f      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	3328      	adds	r3, #40	@ 0x28
 8004708:	2101      	movs	r1, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f86a 	bl	80057e4 <RCCEx_PLL3_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004716:	e004      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800472a:	4bbf      	ldr	r3, [pc, #764]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004738:	4abb      	ldr	r2, [pc, #748]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800473a:	430b      	orrs	r3, r1
 800473c:	6553      	str	r3, [r2, #84]	@ 0x54
 800473e:	e003      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f002 0302 	and.w	r3, r2, #2
 8004754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004758:	2300      	movs	r3, #0
 800475a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800475e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d041      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800476e:	2b05      	cmp	r3, #5
 8004770:	d824      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004772:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047c5 	.word	0x080047c5
 800477c:	08004791 	.word	0x08004791
 8004780:	080047a7 	.word	0x080047a7
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047c5 	.word	0x080047c5
 800478c:	080047c5 	.word	0x080047c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	3308      	adds	r3, #8
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f000 ff71 	bl	8005680 <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047a4:	e00f      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	3328      	adds	r3, #40	@ 0x28
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 f818 	bl	80057e4 <RCCEx_PLL3_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80047c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047ce:	4b96      	ldr	r3, [pc, #600]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d2:	f023 0107 	bic.w	r1, r3, #7
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047dc:	4a92      	ldr	r2, [pc, #584]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80047e2:	e003      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f002 0304 	and.w	r3, r2, #4
 80047f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004802:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	d044      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004814:	2b05      	cmp	r3, #5
 8004816:	d825      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004818:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	0800486d 	.word	0x0800486d
 8004824:	08004839 	.word	0x08004839
 8004828:	0800484f 	.word	0x0800484f
 800482c:	0800486d 	.word	0x0800486d
 8004830:	0800486d 	.word	0x0800486d
 8004834:	0800486d 	.word	0x0800486d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	3308      	adds	r3, #8
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f000 ff1d 	bl	8005680 <RCCEx_PLL2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800484c:	e00f      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	3328      	adds	r3, #40	@ 0x28
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f000 ffc4 	bl	80057e4 <RCCEx_PLL3_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004862:	e004      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800486a:	e000      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800486c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004876:	4b6c      	ldr	r3, [pc, #432]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487a:	f023 0107 	bic.w	r1, r3, #7
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004886:	4a68      	ldr	r2, [pc, #416]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004888:	430b      	orrs	r3, r1
 800488a:	6593      	str	r3, [r2, #88]	@ 0x58
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f002 0320 	and.w	r3, r2, #32
 80048a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048b0:	460b      	mov	r3, r1
 80048b2:	4313      	orrs	r3, r2
 80048b4:	d055      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c2:	d033      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80048c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c8:	d82c      	bhi.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ce:	d02f      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d4:	d826      	bhi.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048da:	d02b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80048dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048e0:	d820      	bhi.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e6:	d012      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80048e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ec:	d81a      	bhi.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d022      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80048f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f6:	d115      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	3308      	adds	r3, #8
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f000 febd 	bl	8005680 <RCCEx_PLL2_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800490c:	e015      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004912:	3328      	adds	r3, #40	@ 0x28
 8004914:	2102      	movs	r1, #2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 ff64 	bl	80057e4 <RCCEx_PLL3_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004922:	e00a      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800492a:	e006      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800492c:	bf00      	nop
 800492e:	e004      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004930:	bf00      	nop
 8004932:	e002      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004942:	4b39      	ldr	r3, [pc, #228]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	4a35      	ldr	r2, [pc, #212]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004954:	430b      	orrs	r3, r1
 8004956:	6553      	str	r3, [r2, #84]	@ 0x54
 8004958:	e003      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800496e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004972:	2300      	movs	r3, #0
 8004974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004978:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d058      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800498e:	d033      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004990:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004994:	d82c      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499a:	d02f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a0:	d826      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049a6:	d02b      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80049a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049ac:	d820      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b2:	d012      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b8:	d81a      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d022      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	d115      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c8:	3308      	adds	r3, #8
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fe57 	bl	8005680 <RCCEx_PLL2_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049d8:	e015      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	3328      	adds	r3, #40	@ 0x28
 80049e0:	2102      	movs	r1, #2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fefe 	bl	80057e4 <RCCEx_PLL3_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049ee:	e00a      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049f6:	e006      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049f8:	bf00      	nop
 80049fa:	e004      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049fc:	bf00      	nop
 80049fe:	e002      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a0e:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a1e:	4a02      	ldr	r2, [pc, #8]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a24:	e006      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	d055      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a60:	d033      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004a62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a66:	d82c      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6c:	d02f      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a72:	d826      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a78:	d02b      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004a7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a7e:	d820      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a84:	d012      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a8a:	d81a      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d022      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a94:	d115      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fdee 	bl	8005680 <RCCEx_PLL2_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004aaa:	e015      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	3328      	adds	r3, #40	@ 0x28
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fe95 	bl	80057e4 <RCCEx_PLL3_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ac8:	e006      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004aca:	bf00      	nop
 8004acc:	e004      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004af0:	4a9d      	ldr	r2, [pc, #628]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004af6:	e003      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f002 0308 	and.w	r3, r2, #8
 8004b0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	d01e      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	3328      	adds	r3, #40	@ 0x28
 8004b34:	2102      	movs	r1, #2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fe54 	bl	80057e4 <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b48:	4b87      	ldr	r3, [pc, #540]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b58:	4a83      	ldr	r2, [pc, #524]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f002 0310 	and.w	r3, r2, #16
 8004b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d01e      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	3328      	adds	r3, #40	@ 0x28
 8004b92:	2102      	movs	r1, #2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fe25 	bl	80057e4 <RCCEx_PLL3_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ba6:	4b70      	ldr	r3, [pc, #448]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004baa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d03e      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004be8:	d022      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bee:	d81b      	bhi.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf8:	d00b      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004bfa:	e015      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c00:	3308      	adds	r3, #8
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fd3b 	bl	8005680 <RCCEx_PLL2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c10:	e00f      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	3328      	adds	r3, #40	@ 0x28
 8004c18:	2102      	movs	r1, #2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fde2 	bl	80057e4 <RCCEx_PLL3_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c26:	e004      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c2e:	e000      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c4a:	4a47      	ldr	r2, [pc, #284]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c68:	2300      	movs	r3, #0
 8004c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d03b      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c82:	d01f      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c88:	d818      	bhi.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c8e:	d003      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c94:	d007      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c96:	e011      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c98:	4b33      	ldr	r3, [pc, #204]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	4a32      	ldr	r2, [pc, #200]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ca4:	e00f      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004caa:	3328      	adds	r3, #40	@ 0x28
 8004cac:	2101      	movs	r1, #1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fd98 	bl	80057e4 <RCCEx_PLL3_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cce:	4b26      	ldr	r3, [pc, #152]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cde:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004cfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d034      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d18:	d007      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d1a:	e011      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d28:	e00e      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	3308      	adds	r3, #8
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fca4 	bl	8005680 <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5e:	4a02      	ldr	r2, [pc, #8]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d64:	e006      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004d66:	bf00      	nop
 8004d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d82:	2300      	movs	r3, #0
 8004d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d00c      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d94:	3328      	adds	r3, #40	@ 0x28
 8004d96:	2102      	movs	r1, #2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fd23 	bl	80057e4 <RCCEx_PLL3_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004db8:	2300      	movs	r3, #0
 8004dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	d038      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dd2:	d018      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dd8:	d811      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dde:	d014      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de4:	d80b      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d011      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dee:	d106      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df0:	4bc3      	ldr	r3, [pc, #780]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4ac2      	ldr	r2, [pc, #776]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e04:	e004      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e06:	bf00      	nop
 8004e08:	e002      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e000      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e18:	4bb9      	ldr	r3, [pc, #740]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e28:	4ab5      	ldr	r2, [pc, #724]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e2e:	e003      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e46:	2300      	movs	r3, #0
 8004e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e54:	4baa      	ldr	r3, [pc, #680]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e62:	4aa7      	ldr	r2, [pc, #668]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e76:	2300      	movs	r3, #0
 8004e78:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e84:	4b9e      	ldr	r3, [pc, #632]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e94:	4a9a      	ldr	r2, [pc, #616]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e96:	430b      	orrs	r3, r1
 8004e98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eb6:	4b92      	ldr	r3, [pc, #584]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ed8:	2300      	movs	r3, #0
 8004eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8004edc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ee6:	4b86      	ldr	r3, [pc, #536]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	4a85      	ldr	r2, [pc, #532]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ef0:	6113      	str	r3, [r2, #16]
 8004ef2:	4b83      	ldr	r3, [pc, #524]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ef4:	6919      	ldr	r1, [r3, #16]
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004efe:	4a80      	ldr	r2, [pc, #512]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f12:	2300      	movs	r3, #0
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	d009      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f20:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2e:	4a74      	ldr	r2, [pc, #464]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f50:	4b6b      	ldr	r3, [pc, #428]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f60:	4a67      	ldr	r2, [pc, #412]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	2100      	movs	r1, #0
 8004f70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d011      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	3308      	adds	r3, #8
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fb78 	bl	8005680 <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	2100      	movs	r1, #0
 8004fb0:	6239      	str	r1, [r7, #32]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d011      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fb58 	bl	8005680 <RCCEx_PLL2_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	61b9      	str	r1, [r7, #24]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4313      	orrs	r3, r2
 8005000:	d011      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005006:	3308      	adds	r3, #8
 8005008:	2102      	movs	r1, #2
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fb38 	bl	8005680 <RCCEx_PLL2_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	2100      	movs	r1, #0
 8005030:	6139      	str	r1, [r7, #16]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800503c:	460b      	mov	r3, r1
 800503e:	4313      	orrs	r3, r2
 8005040:	d011      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	3328      	adds	r3, #40	@ 0x28
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fbca 	bl	80057e4 <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	2100      	movs	r1, #0
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800507c:	460b      	mov	r3, r1
 800507e:	4313      	orrs	r3, r2
 8005080:	d011      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005086:	3328      	adds	r3, #40	@ 0x28
 8005088:	2101      	movs	r1, #1
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fbaa 	bl	80057e4 <RCCEx_PLL3_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	2100      	movs	r1, #0
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050bc:	460b      	mov	r3, r1
 80050be:	4313      	orrs	r3, r2
 80050c0:	d011      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c6:	3328      	adds	r3, #40	@ 0x28
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fb8a 	bl	80057e4 <RCCEx_PLL3_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80050d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80050e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e000      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80050fa:	46bd      	mov	sp, r7
 80050fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005100:	58024400 	.word	0x58024400

08005104 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005108:	f7fe fd96 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4904      	ldr	r1, [pc, #16]	@ (800512c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	58024400 	.word	0x58024400
 800512c:	08007944 	.word	0x08007944

08005130 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005130:	b480      	push	{r7}
 8005132:	b089      	sub	sp, #36	@ 0x24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005138:	4ba1      	ldr	r3, [pc, #644]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005142:	4b9f      	ldr	r3, [pc, #636]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	0b1b      	lsrs	r3, r3, #12
 8005148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800514c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800514e:	4b9c      	ldr	r3, [pc, #624]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800515a:	4b99      	ldr	r3, [pc, #612]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515e:	08db      	lsrs	r3, r3, #3
 8005160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8111 	beq.w	80053a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b02      	cmp	r3, #2
 8005182:	f000 8083 	beq.w	800528c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b02      	cmp	r3, #2
 800518a:	f200 80a1 	bhi.w	80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d056      	beq.n	8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800519a:	e099      	b.n	80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800519c:	4b88      	ldr	r3, [pc, #544]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d02d      	beq.n	8005204 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051a8:	4b85      	ldr	r3, [pc, #532]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	08db      	lsrs	r3, r3, #3
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	4a84      	ldr	r2, [pc, #528]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
 80051b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b7b      	ldr	r3, [pc, #492]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005202:	e087      	b.n	8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005216:	4b6a      	ldr	r3, [pc, #424]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005226:	ed97 6a03 	vldr	s12, [r7, #12]
 800522a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800522e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800523a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005246:	e065      	b.n	8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005252:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525a:	4b59      	ldr	r3, [pc, #356]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526a:	ed97 6a03 	vldr	s12, [r7, #12]
 800526e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800528a:	e043      	b.n	8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	4b48      	ldr	r3, [pc, #288]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80052b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ce:	e021      	b.n	8005314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e2:	4b37      	ldr	r3, [pc, #220]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005312:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005314:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	0a5b      	lsrs	r3, r3, #9
 800531a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800532a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800532e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800533a:	ee17 2a90 	vmov	r2, s15
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005342:	4b1f      	ldr	r3, [pc, #124]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800535c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005368:	ee17 2a90 	vmov	r2, s15
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005370:	4b13      	ldr	r3, [pc, #76]	@ (80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005374:	0e1b      	lsrs	r3, r3, #24
 8005376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538a:	edd7 6a07 	vldr	s13, [r7, #28]
 800538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005396:	ee17 2a90 	vmov	r2, s15
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800539e:	e008      	b.n	80053b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
}
 80053b2:	bf00      	nop
 80053b4:	3724      	adds	r7, #36	@ 0x24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	58024400 	.word	0x58024400
 80053c4:	03d09000 	.word	0x03d09000
 80053c8:	46000000 	.word	0x46000000
 80053cc:	4c742400 	.word	0x4c742400
 80053d0:	4a742400 	.word	0x4a742400
 80053d4:	4af42400 	.word	0x4af42400

080053d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80053d8:	b480      	push	{r7}
 80053da:	b089      	sub	sp, #36	@ 0x24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053e0:	4ba1      	ldr	r3, [pc, #644]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053ea:	4b9f      	ldr	r3, [pc, #636]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	0d1b      	lsrs	r3, r3, #20
 80053f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053f6:	4b9c      	ldr	r3, [pc, #624]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005402:	4b99      	ldr	r3, [pc, #612]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005406:	08db      	lsrs	r3, r3, #3
 8005408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8111 	beq.w	8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b02      	cmp	r3, #2
 800542a:	f000 8083 	beq.w	8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b02      	cmp	r3, #2
 8005432:	f200 80a1 	bhi.w	8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d056      	beq.n	80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005442:	e099      	b.n	8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005444:	4b88      	ldr	r3, [pc, #544]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02d      	beq.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005450:	4b85      	ldr	r3, [pc, #532]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	08db      	lsrs	r3, r3, #3
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	4a84      	ldr	r2, [pc, #528]	@ (800566c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
 8005460:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547a:	4b7b      	ldr	r3, [pc, #492]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a03 	vldr	s12, [r7, #12]
 800548e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054aa:	e087      	b.n	80055bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054be:	4b6a      	ldr	r3, [pc, #424]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ee:	e065      	b.n	80055bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005502:	4b59      	ldr	r3, [pc, #356]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005512:	ed97 6a03 	vldr	s12, [r7, #12]
 8005516:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800551a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005532:	e043      	b.n	80055bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800567c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005546:	4b48      	ldr	r3, [pc, #288]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005556:	ed97 6a03 	vldr	s12, [r7, #12]
 800555a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800555e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005576:	e021      	b.n	80055bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558a:	4b37      	ldr	r3, [pc, #220]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559a:	ed97 6a03 	vldr	s12, [r7, #12]
 800559e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	0a5b      	lsrs	r3, r3, #9
 80055c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80055da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e2:	ee17 2a90 	vmov	r2, s15
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80055ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005600:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005604:	edd7 6a07 	vldr	s13, [r7, #28]
 8005608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800560c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005610:	ee17 2a90 	vmov	r2, s15
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005618:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	0e1b      	lsrs	r3, r3, #24
 800561e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800562e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005632:	edd7 6a07 	vldr	s13, [r7, #28]
 8005636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800563e:	ee17 2a90 	vmov	r2, s15
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005646:	e008      	b.n	800565a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	609a      	str	r2, [r3, #8]
}
 800565a:	bf00      	nop
 800565c:	3724      	adds	r7, #36	@ 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
 800566c:	03d09000 	.word	0x03d09000
 8005670:	46000000 	.word	0x46000000
 8005674:	4c742400 	.word	0x4c742400
 8005678:	4a742400 	.word	0x4a742400
 800567c:	4af42400 	.word	0x4af42400

08005680 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800568e:	4b53      	ldr	r3, [pc, #332]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b03      	cmp	r3, #3
 8005698:	d101      	bne.n	800569e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e099      	b.n	80057d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800569e:	4b4f      	ldr	r3, [pc, #316]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4e      	ldr	r2, [pc, #312]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80056a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056aa:	f7fb fe79 	bl	80013a0 <HAL_GetTick>
 80056ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056b0:	e008      	b.n	80056c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056b2:	f7fb fe75 	bl	80013a0 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e086      	b.n	80057d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056c4:	4b45      	ldr	r3, [pc, #276]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056d0:	4b42      	ldr	r3, [pc, #264]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	031b      	lsls	r3, r3, #12
 80056de:	493f      	ldr	r1, [pc, #252]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	025b      	lsls	r3, r3, #9
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	3b01      	subs	r3, #1
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005714:	4931      	ldr	r1, [pc, #196]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800571a:	4b30      	ldr	r3, [pc, #192]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	492d      	ldr	r1, [pc, #180]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005728:	4313      	orrs	r3, r2
 800572a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800572c:	4b2b      	ldr	r3, [pc, #172]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 800572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005730:	f023 0220 	bic.w	r2, r3, #32
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	4928      	ldr	r1, [pc, #160]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800573e:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005744:	f023 0310 	bic.w	r3, r3, #16
 8005748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800574a:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 800574c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800574e:	4b24      	ldr	r3, [pc, #144]	@ (80057e0 <RCCEx_PLL2_Config+0x160>)
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	69d2      	ldr	r2, [r2, #28]
 8005756:	00d2      	lsls	r2, r2, #3
 8005758:	4920      	ldr	r1, [pc, #128]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 800575a:	4313      	orrs	r3, r2
 800575c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800575e:	4b1f      	ldr	r3, [pc, #124]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005764:	f043 0310 	orr.w	r3, r3, #16
 8005768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005770:	4b1a      	ldr	r3, [pc, #104]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	4a19      	ldr	r2, [pc, #100]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005776:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800577a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800577c:	e00f      	b.n	800579e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d106      	bne.n	8005792 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005784:	4b15      	ldr	r3, [pc, #84]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	4a14      	ldr	r2, [pc, #80]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 800578a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800578e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005790:	e005      	b.n	800579e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 8005798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800579c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800579e:	4b0f      	ldr	r3, [pc, #60]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a0e      	ldr	r2, [pc, #56]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80057a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057aa:	f7fb fdf9 	bl	80013a0 <HAL_GetTick>
 80057ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057b2:	f7fb fdf5 	bl	80013a0 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e006      	b.n	80057d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057c4:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <RCCEx_PLL2_Config+0x15c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
 80057e0:	ffff0007 	.word	0xffff0007

080057e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057f2:	4b53      	ldr	r3, [pc, #332]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d101      	bne.n	8005802 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e099      	b.n	8005936 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005802:	4b4f      	ldr	r3, [pc, #316]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a4e      	ldr	r2, [pc, #312]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800580c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580e:	f7fb fdc7 	bl	80013a0 <HAL_GetTick>
 8005812:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005814:	e008      	b.n	8005828 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005816:	f7fb fdc3 	bl	80013a0 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e086      	b.n	8005936 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005828:	4b45      	ldr	r3, [pc, #276]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f0      	bne.n	8005816 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005834:	4b42      	ldr	r3, [pc, #264]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005838:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	051b      	lsls	r3, r3, #20
 8005842:	493f      	ldr	r1, [pc, #252]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	628b      	str	r3, [r1, #40]	@ 0x28
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	3b01      	subs	r3, #1
 800584e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	3b01      	subs	r3, #1
 8005858:	025b      	lsls	r3, r3, #9
 800585a:	b29b      	uxth	r3, r3
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	3b01      	subs	r3, #1
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005878:	4931      	ldr	r1, [pc, #196]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 800587a:	4313      	orrs	r3, r2
 800587c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800587e:	4b30      	ldr	r3, [pc, #192]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005882:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	492d      	ldr	r1, [pc, #180]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005890:	4b2b      	ldr	r3, [pc, #172]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005894:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	4928      	ldr	r1, [pc, #160]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058a2:	4b27      	ldr	r3, [pc, #156]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a6:	4a26      	ldr	r2, [pc, #152]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058ae:	4b24      	ldr	r3, [pc, #144]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b2:	4b24      	ldr	r3, [pc, #144]	@ (8005944 <RCCEx_PLL3_Config+0x160>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	69d2      	ldr	r2, [r2, #28]
 80058ba:	00d2      	lsls	r2, r2, #3
 80058bc:	4920      	ldr	r1, [pc, #128]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	4a19      	ldr	r2, [pc, #100]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058e0:	e00f      	b.n	8005902 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058e8:	4b15      	ldr	r3, [pc, #84]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	4a14      	ldr	r2, [pc, #80]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058f4:	e005      	b.n	8005902 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058f6:	4b12      	ldr	r3, [pc, #72]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fa:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 80058fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005900:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005902:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a0e      	ldr	r2, [pc, #56]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800590c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590e:	f7fb fd47 	bl	80013a0 <HAL_GetTick>
 8005912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005914:	e008      	b.n	8005928 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005916:	f7fb fd43 	bl	80013a0 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005928:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <RCCEx_PLL3_Config+0x15c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	ffff0007 	.word	0xffff0007

08005948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e042      	b.n	80059e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f83b 	bl	80059e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2224      	movs	r2, #36	@ 0x24
 8005976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fe28 	bl	80065e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8bd 	bl	8005b18 <UART_SetConfig>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e01b      	b.n	80059e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fea7 	bl	800672c <UART_CheckIdleState>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d17b      	bne.n	8005b0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_UART_Transmit+0x26>
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e074      	b.n	8005b10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2221      	movs	r2, #33	@ 0x21
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a36:	f7fb fcb3 	bl	80013a0 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a54:	d108      	bne.n	8005a68 <HAL_UART_Transmit+0x6c>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e003      	b.n	8005a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a70:	e030      	b.n	8005ad4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2180      	movs	r1, #128	@ 0x80
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 feff 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e03d      	b.n	8005b10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	3302      	adds	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e007      	b.n	8005ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	781a      	ldrb	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1c8      	bne.n	8005a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2140      	movs	r1, #64	@ 0x40
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fec8 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e006      	b.n	8005b10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b1c:	b092      	sub	sp, #72	@ 0x48
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4bbe      	ldr	r3, [pc, #760]	@ (8005e40 <UART_SetConfig+0x328>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4ab3      	ldr	r2, [pc, #716]	@ (8005e44 <UART_SetConfig+0x32c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b80:	4313      	orrs	r3, r2
 8005b82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	4baf      	ldr	r3, [pc, #700]	@ (8005e48 <UART_SetConfig+0x330>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	f023 010f 	bic.w	r1, r3, #15
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4aa6      	ldr	r2, [pc, #664]	@ (8005e4c <UART_SetConfig+0x334>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d177      	bne.n	8005ca8 <UART_SetConfig+0x190>
 8005bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8005e50 <UART_SetConfig+0x338>)
 8005bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bc0:	2b28      	cmp	r3, #40	@ 0x28
 8005bc2:	d86d      	bhi.n	8005ca0 <UART_SetConfig+0x188>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <UART_SetConfig+0xb4>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c71 	.word	0x08005c71
 8005bd0:	08005ca1 	.word	0x08005ca1
 8005bd4:	08005ca1 	.word	0x08005ca1
 8005bd8:	08005ca1 	.word	0x08005ca1
 8005bdc:	08005ca1 	.word	0x08005ca1
 8005be0:	08005ca1 	.word	0x08005ca1
 8005be4:	08005ca1 	.word	0x08005ca1
 8005be8:	08005ca1 	.word	0x08005ca1
 8005bec:	08005c79 	.word	0x08005c79
 8005bf0:	08005ca1 	.word	0x08005ca1
 8005bf4:	08005ca1 	.word	0x08005ca1
 8005bf8:	08005ca1 	.word	0x08005ca1
 8005bfc:	08005ca1 	.word	0x08005ca1
 8005c00:	08005ca1 	.word	0x08005ca1
 8005c04:	08005ca1 	.word	0x08005ca1
 8005c08:	08005ca1 	.word	0x08005ca1
 8005c0c:	08005c81 	.word	0x08005c81
 8005c10:	08005ca1 	.word	0x08005ca1
 8005c14:	08005ca1 	.word	0x08005ca1
 8005c18:	08005ca1 	.word	0x08005ca1
 8005c1c:	08005ca1 	.word	0x08005ca1
 8005c20:	08005ca1 	.word	0x08005ca1
 8005c24:	08005ca1 	.word	0x08005ca1
 8005c28:	08005ca1 	.word	0x08005ca1
 8005c2c:	08005c89 	.word	0x08005c89
 8005c30:	08005ca1 	.word	0x08005ca1
 8005c34:	08005ca1 	.word	0x08005ca1
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005ca1 	.word	0x08005ca1
 8005c40:	08005ca1 	.word	0x08005ca1
 8005c44:	08005ca1 	.word	0x08005ca1
 8005c48:	08005ca1 	.word	0x08005ca1
 8005c4c:	08005c91 	.word	0x08005c91
 8005c50:	08005ca1 	.word	0x08005ca1
 8005c54:	08005ca1 	.word	0x08005ca1
 8005c58:	08005ca1 	.word	0x08005ca1
 8005c5c:	08005ca1 	.word	0x08005ca1
 8005c60:	08005ca1 	.word	0x08005ca1
 8005c64:	08005ca1 	.word	0x08005ca1
 8005c68:	08005ca1 	.word	0x08005ca1
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e222      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e21e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e21a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e216      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c90:	2320      	movs	r3, #32
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e212      	b.n	80060be <UART_SetConfig+0x5a6>
 8005c98:	2340      	movs	r3, #64	@ 0x40
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e20e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e20a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a69      	ldr	r2, [pc, #420]	@ (8005e54 <UART_SetConfig+0x33c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d130      	bne.n	8005d14 <UART_SetConfig+0x1fc>
 8005cb2:	4b67      	ldr	r3, [pc, #412]	@ (8005e50 <UART_SetConfig+0x338>)
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d826      	bhi.n	8005d0c <UART_SetConfig+0x1f4>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <UART_SetConfig+0x1ac>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005ced 	.word	0x08005ced
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e1ec      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e1e8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e1e4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e1e0      	b.n	80060be <UART_SetConfig+0x5a6>
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e1dc      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d04:	2340      	movs	r3, #64	@ 0x40
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e1d8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d0c:	2380      	movs	r3, #128	@ 0x80
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e1d4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a4f      	ldr	r2, [pc, #316]	@ (8005e58 <UART_SetConfig+0x340>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d130      	bne.n	8005d80 <UART_SetConfig+0x268>
 8005d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e50 <UART_SetConfig+0x338>)
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d826      	bhi.n	8005d78 <UART_SetConfig+0x260>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <UART_SetConfig+0x218>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d49 	.word	0x08005d49
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	08005d59 	.word	0x08005d59
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e1b6      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d50:	2304      	movs	r3, #4
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e1b2      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e1ae      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d60:	2310      	movs	r3, #16
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e1aa      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e1a6      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d70:	2340      	movs	r3, #64	@ 0x40
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e1a2      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d78:	2380      	movs	r3, #128	@ 0x80
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e19e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a35      	ldr	r2, [pc, #212]	@ (8005e5c <UART_SetConfig+0x344>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d130      	bne.n	8005dec <UART_SetConfig+0x2d4>
 8005d8a:	4b31      	ldr	r3, [pc, #196]	@ (8005e50 <UART_SetConfig+0x338>)
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d826      	bhi.n	8005de4 <UART_SetConfig+0x2cc>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <UART_SetConfig+0x284>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005db5 	.word	0x08005db5
 8005da0:	08005dbd 	.word	0x08005dbd
 8005da4:	08005dc5 	.word	0x08005dc5
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e180      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e17c      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e178      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e174      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e170      	b.n	80060be <UART_SetConfig+0x5a6>
 8005ddc:	2340      	movs	r3, #64	@ 0x40
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e16c      	b.n	80060be <UART_SetConfig+0x5a6>
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e168      	b.n	80060be <UART_SetConfig+0x5a6>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <UART_SetConfig+0x348>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d142      	bne.n	8005e7c <UART_SetConfig+0x364>
 8005df6:	4b16      	ldr	r3, [pc, #88]	@ (8005e50 <UART_SetConfig+0x338>)
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d838      	bhi.n	8005e74 <UART_SetConfig+0x35c>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0x2f0>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e21 	.word	0x08005e21
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e65 	.word	0x08005e65
 8005e1c:	08005e6d 	.word	0x08005e6d
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e14a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e146      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e142      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e13e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e40:	cfff69f3 	.word	0xcfff69f3
 8005e44:	58000c00 	.word	0x58000c00
 8005e48:	11fff4ff 	.word	0x11fff4ff
 8005e4c:	40011000 	.word	0x40011000
 8005e50:	58024400 	.word	0x58024400
 8005e54:	40004400 	.word	0x40004400
 8005e58:	40004800 	.word	0x40004800
 8005e5c:	40004c00 	.word	0x40004c00
 8005e60:	40005000 	.word	0x40005000
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e128      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e6c:	2340      	movs	r3, #64	@ 0x40
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e124      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e74:	2380      	movs	r3, #128	@ 0x80
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e120      	b.n	80060be <UART_SetConfig+0x5a6>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4acb      	ldr	r2, [pc, #812]	@ (80061b0 <UART_SetConfig+0x698>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d176      	bne.n	8005f74 <UART_SetConfig+0x45c>
 8005e86:	4bcb      	ldr	r3, [pc, #812]	@ (80061b4 <UART_SetConfig+0x69c>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e8e:	2b28      	cmp	r3, #40	@ 0x28
 8005e90:	d86c      	bhi.n	8005f6c <UART_SetConfig+0x454>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x380>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005f3d 	.word	0x08005f3d
 8005e9c:	08005f6d 	.word	0x08005f6d
 8005ea0:	08005f6d 	.word	0x08005f6d
 8005ea4:	08005f6d 	.word	0x08005f6d
 8005ea8:	08005f6d 	.word	0x08005f6d
 8005eac:	08005f6d 	.word	0x08005f6d
 8005eb0:	08005f6d 	.word	0x08005f6d
 8005eb4:	08005f6d 	.word	0x08005f6d
 8005eb8:	08005f45 	.word	0x08005f45
 8005ebc:	08005f6d 	.word	0x08005f6d
 8005ec0:	08005f6d 	.word	0x08005f6d
 8005ec4:	08005f6d 	.word	0x08005f6d
 8005ec8:	08005f6d 	.word	0x08005f6d
 8005ecc:	08005f6d 	.word	0x08005f6d
 8005ed0:	08005f6d 	.word	0x08005f6d
 8005ed4:	08005f6d 	.word	0x08005f6d
 8005ed8:	08005f4d 	.word	0x08005f4d
 8005edc:	08005f6d 	.word	0x08005f6d
 8005ee0:	08005f6d 	.word	0x08005f6d
 8005ee4:	08005f6d 	.word	0x08005f6d
 8005ee8:	08005f6d 	.word	0x08005f6d
 8005eec:	08005f6d 	.word	0x08005f6d
 8005ef0:	08005f6d 	.word	0x08005f6d
 8005ef4:	08005f6d 	.word	0x08005f6d
 8005ef8:	08005f55 	.word	0x08005f55
 8005efc:	08005f6d 	.word	0x08005f6d
 8005f00:	08005f6d 	.word	0x08005f6d
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	08005f6d 	.word	0x08005f6d
 8005f10:	08005f6d 	.word	0x08005f6d
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f5d 	.word	0x08005f5d
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	08005f6d 	.word	0x08005f6d
 8005f24:	08005f6d 	.word	0x08005f6d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f6d 	.word	0x08005f6d
 8005f34:	08005f6d 	.word	0x08005f6d
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e0bc      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e0b8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e0b4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e0b0      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e0ac      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f64:	2340      	movs	r3, #64	@ 0x40
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e0a8      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f6c:	2380      	movs	r3, #128	@ 0x80
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e0a4      	b.n	80060be <UART_SetConfig+0x5a6>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a8f      	ldr	r2, [pc, #572]	@ (80061b8 <UART_SetConfig+0x6a0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d130      	bne.n	8005fe0 <UART_SetConfig+0x4c8>
 8005f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80061b4 <UART_SetConfig+0x69c>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d826      	bhi.n	8005fd8 <UART_SetConfig+0x4c0>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <UART_SetConfig+0x478>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa9 	.word	0x08005fa9
 8005f94:	08005fb1 	.word	0x08005fb1
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08005fc1 	.word	0x08005fc1
 8005fa0:	08005fc9 	.word	0x08005fc9
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e086      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e082      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e07e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e07a      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fc8:	2320      	movs	r3, #32
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e076      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fd0:	2340      	movs	r3, #64	@ 0x40
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e072      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e06e      	b.n	80060be <UART_SetConfig+0x5a6>
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a75      	ldr	r2, [pc, #468]	@ (80061bc <UART_SetConfig+0x6a4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d130      	bne.n	800604c <UART_SetConfig+0x534>
 8005fea:	4b72      	ldr	r3, [pc, #456]	@ (80061b4 <UART_SetConfig+0x69c>)
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d826      	bhi.n	8006044 <UART_SetConfig+0x52c>
 8005ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ffc <UART_SetConfig+0x4e4>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006015 	.word	0x08006015
 8006000:	0800601d 	.word	0x0800601d
 8006004:	08006025 	.word	0x08006025
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	2300      	movs	r3, #0
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e050      	b.n	80060be <UART_SetConfig+0x5a6>
 800601c:	2304      	movs	r3, #4
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e04c      	b.n	80060be <UART_SetConfig+0x5a6>
 8006024:	2308      	movs	r3, #8
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e048      	b.n	80060be <UART_SetConfig+0x5a6>
 800602c:	2310      	movs	r3, #16
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e044      	b.n	80060be <UART_SetConfig+0x5a6>
 8006034:	2320      	movs	r3, #32
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e040      	b.n	80060be <UART_SetConfig+0x5a6>
 800603c:	2340      	movs	r3, #64	@ 0x40
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e03c      	b.n	80060be <UART_SetConfig+0x5a6>
 8006044:	2380      	movs	r3, #128	@ 0x80
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e038      	b.n	80060be <UART_SetConfig+0x5a6>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5b      	ldr	r2, [pc, #364]	@ (80061c0 <UART_SetConfig+0x6a8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d130      	bne.n	80060b8 <UART_SetConfig+0x5a0>
 8006056:	4b57      	ldr	r3, [pc, #348]	@ (80061b4 <UART_SetConfig+0x69c>)
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2b05      	cmp	r3, #5
 8006060:	d826      	bhi.n	80060b0 <UART_SetConfig+0x598>
 8006062:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <UART_SetConfig+0x550>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006081 	.word	0x08006081
 800606c:	08006089 	.word	0x08006089
 8006070:	08006091 	.word	0x08006091
 8006074:	08006099 	.word	0x08006099
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a9 	.word	0x080060a9
 8006080:	2302      	movs	r3, #2
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e01a      	b.n	80060be <UART_SetConfig+0x5a6>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608e:	e016      	b.n	80060be <UART_SetConfig+0x5a6>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e012      	b.n	80060be <UART_SetConfig+0x5a6>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e00e      	b.n	80060be <UART_SetConfig+0x5a6>
 80060a0:	2320      	movs	r3, #32
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e00a      	b.n	80060be <UART_SetConfig+0x5a6>
 80060a8:	2340      	movs	r3, #64	@ 0x40
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e006      	b.n	80060be <UART_SetConfig+0x5a6>
 80060b0:	2380      	movs	r3, #128	@ 0x80
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e002      	b.n	80060be <UART_SetConfig+0x5a6>
 80060b8:	2380      	movs	r3, #128	@ 0x80
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3f      	ldr	r2, [pc, #252]	@ (80061c0 <UART_SetConfig+0x6a8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	f040 80f8 	bne.w	80062ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	dc46      	bgt.n	8006160 <UART_SetConfig+0x648>
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	f2c0 8082 	blt.w	80061dc <UART_SetConfig+0x6c4>
 80060d8:	3b02      	subs	r3, #2
 80060da:	2b1e      	cmp	r3, #30
 80060dc:	d87e      	bhi.n	80061dc <UART_SetConfig+0x6c4>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x5cc>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006167 	.word	0x08006167
 80060e8:	080061dd 	.word	0x080061dd
 80060ec:	0800616f 	.word	0x0800616f
 80060f0:	080061dd 	.word	0x080061dd
 80060f4:	080061dd 	.word	0x080061dd
 80060f8:	080061dd 	.word	0x080061dd
 80060fc:	0800617f 	.word	0x0800617f
 8006100:	080061dd 	.word	0x080061dd
 8006104:	080061dd 	.word	0x080061dd
 8006108:	080061dd 	.word	0x080061dd
 800610c:	080061dd 	.word	0x080061dd
 8006110:	080061dd 	.word	0x080061dd
 8006114:	080061dd 	.word	0x080061dd
 8006118:	080061dd 	.word	0x080061dd
 800611c:	0800618f 	.word	0x0800618f
 8006120:	080061dd 	.word	0x080061dd
 8006124:	080061dd 	.word	0x080061dd
 8006128:	080061dd 	.word	0x080061dd
 800612c:	080061dd 	.word	0x080061dd
 8006130:	080061dd 	.word	0x080061dd
 8006134:	080061dd 	.word	0x080061dd
 8006138:	080061dd 	.word	0x080061dd
 800613c:	080061dd 	.word	0x080061dd
 8006140:	080061dd 	.word	0x080061dd
 8006144:	080061dd 	.word	0x080061dd
 8006148:	080061dd 	.word	0x080061dd
 800614c:	080061dd 	.word	0x080061dd
 8006150:	080061dd 	.word	0x080061dd
 8006154:	080061dd 	.word	0x080061dd
 8006158:	080061dd 	.word	0x080061dd
 800615c:	080061cf 	.word	0x080061cf
 8006160:	2b40      	cmp	r3, #64	@ 0x40
 8006162:	d037      	beq.n	80061d4 <UART_SetConfig+0x6bc>
 8006164:	e03a      	b.n	80061dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006166:	f7fe ffcd 	bl	8005104 <HAL_RCCEx_GetD3PCLK1Freq>
 800616a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800616c:	e03c      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe ffdc 	bl	8005130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800617c:	e034      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617e:	f107 0318 	add.w	r3, r7, #24
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff f928 	bl	80053d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618c:	e02c      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800618e:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <UART_SetConfig+0x69c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800619a:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <UART_SetConfig+0x69c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	08db      	lsrs	r3, r3, #3
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	4a07      	ldr	r2, [pc, #28]	@ (80061c4 <UART_SetConfig+0x6ac>)
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061ac:	e01c      	b.n	80061e8 <UART_SetConfig+0x6d0>
 80061ae:	bf00      	nop
 80061b0:	40011400 	.word	0x40011400
 80061b4:	58024400 	.word	0x58024400
 80061b8:	40007800 	.word	0x40007800
 80061bc:	40007c00 	.word	0x40007c00
 80061c0:	58000c00 	.word	0x58000c00
 80061c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061c8:	4b9d      	ldr	r3, [pc, #628]	@ (8006440 <UART_SetConfig+0x928>)
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061cc:	e00c      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061ce:	4b9d      	ldr	r3, [pc, #628]	@ (8006444 <UART_SetConfig+0x92c>)
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d2:	e009      	b.n	80061e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061da:	e005      	b.n	80061e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 81de 	beq.w	80065ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	4a94      	ldr	r2, [pc, #592]	@ (8006448 <UART_SetConfig+0x930>)
 80061f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006202:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006210:	429a      	cmp	r2, r3
 8006212:	d305      	bcc.n	8006220 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	429a      	cmp	r2, r3
 800621e:	d903      	bls.n	8006228 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006226:	e1c1      	b.n	80065ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622a:	2200      	movs	r2, #0
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	60fa      	str	r2, [r7, #12]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	4a84      	ldr	r2, [pc, #528]	@ (8006448 <UART_SetConfig+0x930>)
 8006236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623a:	b29b      	uxth	r3, r3
 800623c:	2200      	movs	r2, #0
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800624a:	f7fa f899 	bl	8000380 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4610      	mov	r0, r2
 8006254:	4619      	mov	r1, r3
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	020b      	lsls	r3, r1, #8
 8006260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006264:	0202      	lsls	r2, r0, #8
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	6849      	ldr	r1, [r1, #4]
 800626a:	0849      	lsrs	r1, r1, #1
 800626c:	2000      	movs	r0, #0
 800626e:	460c      	mov	r4, r1
 8006270:	4605      	mov	r5, r0
 8006272:	eb12 0804 	adds.w	r8, r2, r4
 8006276:	eb43 0905 	adc.w	r9, r3, r5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	469a      	mov	sl, r3
 8006282:	4693      	mov	fp, r2
 8006284:	4652      	mov	r2, sl
 8006286:	465b      	mov	r3, fp
 8006288:	4640      	mov	r0, r8
 800628a:	4649      	mov	r1, r9
 800628c:	f7fa f878 	bl	8000380 <__aeabi_uldivmod>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4613      	mov	r3, r2
 8006296:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800629e:	d308      	bcc.n	80062b2 <UART_SetConfig+0x79a>
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062a6:	d204      	bcs.n	80062b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ae:	60da      	str	r2, [r3, #12]
 80062b0:	e17c      	b.n	80065ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062b8:	e178      	b.n	80065ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c2:	f040 80c5 	bne.w	8006450 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	dc48      	bgt.n	8006360 <UART_SetConfig+0x848>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db7b      	blt.n	80063ca <UART_SetConfig+0x8b2>
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d879      	bhi.n	80063ca <UART_SetConfig+0x8b2>
 80062d6:	a201      	add	r2, pc, #4	@ (adr r2, 80062dc <UART_SetConfig+0x7c4>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	08006367 	.word	0x08006367
 80062e0:	0800636f 	.word	0x0800636f
 80062e4:	080063cb 	.word	0x080063cb
 80062e8:	080063cb 	.word	0x080063cb
 80062ec:	08006377 	.word	0x08006377
 80062f0:	080063cb 	.word	0x080063cb
 80062f4:	080063cb 	.word	0x080063cb
 80062f8:	080063cb 	.word	0x080063cb
 80062fc:	08006387 	.word	0x08006387
 8006300:	080063cb 	.word	0x080063cb
 8006304:	080063cb 	.word	0x080063cb
 8006308:	080063cb 	.word	0x080063cb
 800630c:	080063cb 	.word	0x080063cb
 8006310:	080063cb 	.word	0x080063cb
 8006314:	080063cb 	.word	0x080063cb
 8006318:	080063cb 	.word	0x080063cb
 800631c:	08006397 	.word	0x08006397
 8006320:	080063cb 	.word	0x080063cb
 8006324:	080063cb 	.word	0x080063cb
 8006328:	080063cb 	.word	0x080063cb
 800632c:	080063cb 	.word	0x080063cb
 8006330:	080063cb 	.word	0x080063cb
 8006334:	080063cb 	.word	0x080063cb
 8006338:	080063cb 	.word	0x080063cb
 800633c:	080063cb 	.word	0x080063cb
 8006340:	080063cb 	.word	0x080063cb
 8006344:	080063cb 	.word	0x080063cb
 8006348:	080063cb 	.word	0x080063cb
 800634c:	080063cb 	.word	0x080063cb
 8006350:	080063cb 	.word	0x080063cb
 8006354:	080063cb 	.word	0x080063cb
 8006358:	080063cb 	.word	0x080063cb
 800635c:	080063bd 	.word	0x080063bd
 8006360:	2b40      	cmp	r3, #64	@ 0x40
 8006362:	d02e      	beq.n	80063c2 <UART_SetConfig+0x8aa>
 8006364:	e031      	b.n	80063ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006366:	f7fd fc97 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 800636a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800636c:	e033      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636e:	f7fd fca9 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 8006372:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006374:	e02f      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fed8 	bl	8005130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006384:	e027      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006386:	f107 0318 	add.w	r3, r7, #24
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f824 	bl	80053d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006394:	e01f      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006396:	4b2d      	ldr	r3, [pc, #180]	@ (800644c <UART_SetConfig+0x934>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063a2:	4b2a      	ldr	r3, [pc, #168]	@ (800644c <UART_SetConfig+0x934>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <UART_SetConfig+0x928>)
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063b4:	e00f      	b.n	80063d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063b6:	4b22      	ldr	r3, [pc, #136]	@ (8006440 <UART_SetConfig+0x928>)
 80063b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ba:	e00c      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063bc:	4b21      	ldr	r3, [pc, #132]	@ (8006444 <UART_SetConfig+0x92c>)
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c0:	e009      	b.n	80063d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c8:	e005      	b.n	80063d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80e7 	beq.w	80065ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <UART_SetConfig+0x930>)
 80063e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80063f0:	005a      	lsls	r2, r3, #1
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	441a      	add	r2, r3
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006402:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006406:	2b0f      	cmp	r3, #15
 8006408:	d916      	bls.n	8006438 <UART_SetConfig+0x920>
 800640a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d212      	bcs.n	8006438 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006414:	b29b      	uxth	r3, r3
 8006416:	f023 030f 	bic.w	r3, r3, #15
 800641a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	b29b      	uxth	r3, r3
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	b29a      	uxth	r2, r3
 8006428:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800642a:	4313      	orrs	r3, r2
 800642c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	e0b9      	b.n	80065ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800643e:	e0b5      	b.n	80065ac <UART_SetConfig+0xa94>
 8006440:	03d09000 	.word	0x03d09000
 8006444:	003d0900 	.word	0x003d0900
 8006448:	0800796c 	.word	0x0800796c
 800644c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006450:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006454:	2b20      	cmp	r3, #32
 8006456:	dc49      	bgt.n	80064ec <UART_SetConfig+0x9d4>
 8006458:	2b00      	cmp	r3, #0
 800645a:	db7c      	blt.n	8006556 <UART_SetConfig+0xa3e>
 800645c:	2b20      	cmp	r3, #32
 800645e:	d87a      	bhi.n	8006556 <UART_SetConfig+0xa3e>
 8006460:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <UART_SetConfig+0x950>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	080064f3 	.word	0x080064f3
 800646c:	080064fb 	.word	0x080064fb
 8006470:	08006557 	.word	0x08006557
 8006474:	08006557 	.word	0x08006557
 8006478:	08006503 	.word	0x08006503
 800647c:	08006557 	.word	0x08006557
 8006480:	08006557 	.word	0x08006557
 8006484:	08006557 	.word	0x08006557
 8006488:	08006513 	.word	0x08006513
 800648c:	08006557 	.word	0x08006557
 8006490:	08006557 	.word	0x08006557
 8006494:	08006557 	.word	0x08006557
 8006498:	08006557 	.word	0x08006557
 800649c:	08006557 	.word	0x08006557
 80064a0:	08006557 	.word	0x08006557
 80064a4:	08006557 	.word	0x08006557
 80064a8:	08006523 	.word	0x08006523
 80064ac:	08006557 	.word	0x08006557
 80064b0:	08006557 	.word	0x08006557
 80064b4:	08006557 	.word	0x08006557
 80064b8:	08006557 	.word	0x08006557
 80064bc:	08006557 	.word	0x08006557
 80064c0:	08006557 	.word	0x08006557
 80064c4:	08006557 	.word	0x08006557
 80064c8:	08006557 	.word	0x08006557
 80064cc:	08006557 	.word	0x08006557
 80064d0:	08006557 	.word	0x08006557
 80064d4:	08006557 	.word	0x08006557
 80064d8:	08006557 	.word	0x08006557
 80064dc:	08006557 	.word	0x08006557
 80064e0:	08006557 	.word	0x08006557
 80064e4:	08006557 	.word	0x08006557
 80064e8:	08006549 	.word	0x08006549
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d02e      	beq.n	800654e <UART_SetConfig+0xa36>
 80064f0:	e031      	b.n	8006556 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fd fbd1 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 80064f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064f8:	e033      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fa:	f7fd fbe3 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 80064fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006500:	e02f      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fe12 	bl	8005130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006510:	e027      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006512:	f107 0318 	add.w	r3, r7, #24
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe ff5e 	bl	80053d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006520:	e01f      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006522:	4b2d      	ldr	r3, [pc, #180]	@ (80065d8 <UART_SetConfig+0xac0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800652e:	4b2a      	ldr	r3, [pc, #168]	@ (80065d8 <UART_SetConfig+0xac0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	4a28      	ldr	r2, [pc, #160]	@ (80065dc <UART_SetConfig+0xac4>)
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006540:	e00f      	b.n	8006562 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006542:	4b26      	ldr	r3, [pc, #152]	@ (80065dc <UART_SetConfig+0xac4>)
 8006544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006546:	e00c      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006548:	4b25      	ldr	r3, [pc, #148]	@ (80065e0 <UART_SetConfig+0xac8>)
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654c:	e009      	b.n	8006562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006554:	e005      	b.n	8006562 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006560:	bf00      	nop
    }

    if (pclk != 0U)
 8006562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d021      	beq.n	80065ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	4a1d      	ldr	r2, [pc, #116]	@ (80065e4 <UART_SetConfig+0xacc>)
 800656e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006572:	461a      	mov	r2, r3
 8006574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006576:	fbb3 f2f2 	udiv	r2, r3, r2
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	441a      	add	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d909      	bls.n	80065a6 <UART_SetConfig+0xa8e>
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006598:	d205      	bcs.n	80065a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	b29a      	uxth	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
 80065a4:	e002      	b.n	80065ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3748      	adds	r7, #72	@ 0x48
 80065d0:	46bd      	mov	sp, r7
 80065d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	03d09000 	.word	0x03d09000
 80065e0:	003d0900 	.word	0x003d0900
 80065e4:	0800796c 	.word	0x0800796c

080065e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01a      	beq.n	80066fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066e6:	d10a      	bne.n	80066fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b098      	sub	sp, #96	@ 0x60
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800673c:	f7fa fe30 	bl	80013a0 <HAL_GetTick>
 8006740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b08      	cmp	r3, #8
 800674e:	d12f      	bne.n	80067b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f88e 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d022      	beq.n	80067b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800677e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006788:	647b      	str	r3, [r7, #68]	@ 0x44
 800678a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800678e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e063      	b.n	8006878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d149      	bne.n	8006852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c6:	2200      	movs	r2, #0
 80067c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f857 	bl	8006880 <UART_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d03c      	beq.n	8006852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	623b      	str	r3, [r7, #32]
   return(result);
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	60fb      	str	r3, [r7, #12]
   return(result);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800682a:	61fa      	str	r2, [r7, #28]
 800682c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	69b9      	ldr	r1, [r7, #24]
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	617b      	str	r3, [r7, #20]
   return(result);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e012      	b.n	8006878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3758      	adds	r7, #88	@ 0x58
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	e04f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d04b      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689a:	f7fa fd81 	bl	80013a0 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e04e      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d037      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b80      	cmp	r3, #128	@ 0x80
 80068c6:	d034      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d031      	beq.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d110      	bne.n	80068fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f839 	bl	800695c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2208      	movs	r2, #8
 80068ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e029      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800690c:	d111      	bne.n	8006932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f81f 	bl	800695c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e00f      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	bf0c      	ite	eq
 8006942:	2301      	moveq	r3, #1
 8006944:	2300      	movne	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	429a      	cmp	r2, r3
 800694e:	d0a0      	beq.n	8006892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b095      	sub	sp, #84	@ 0x54
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006982:	643b      	str	r3, [r7, #64]	@ 0x40
 8006984:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e6      	bne.n	8006964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a24 <UART_EndRxTransfer+0xc8>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e5      	bne.n	8006996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d118      	bne.n	8006a04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	613b      	str	r3, [r7, #16]
   return(result);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a18:	bf00      	nop
 8006a1a:	3754      	adds	r7, #84	@ 0x54
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	effffffe 	.word	0xeffffffe

08006a28 <std>:
 8006a28:	2300      	movs	r3, #0
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a36:	6083      	str	r3, [r0, #8]
 8006a38:	8181      	strh	r1, [r0, #12]
 8006a3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a3c:	81c2      	strh	r2, [r0, #14]
 8006a3e:	6183      	str	r3, [r0, #24]
 8006a40:	4619      	mov	r1, r3
 8006a42:	2208      	movs	r2, #8
 8006a44:	305c      	adds	r0, #92	@ 0x5c
 8006a46:	f000 f906 	bl	8006c56 <memset>
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a80 <std+0x58>)
 8006a4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <std+0x5c>)
 8006a50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <std+0x60>)
 8006a54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <std+0x64>)
 8006a58:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x68>)
 8006a5c:	6224      	str	r4, [r4, #32]
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	d006      	beq.n	8006a70 <std+0x48>
 8006a62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a66:	4294      	cmp	r4, r2
 8006a68:	d002      	beq.n	8006a70 <std+0x48>
 8006a6a:	33d0      	adds	r3, #208	@ 0xd0
 8006a6c:	429c      	cmp	r4, r3
 8006a6e:	d105      	bne.n	8006a7c <std+0x54>
 8006a70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a78:	f000 b966 	b.w	8006d48 <__retarget_lock_init_recursive>
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	bf00      	nop
 8006a80:	08006bd1 	.word	0x08006bd1
 8006a84:	08006bf3 	.word	0x08006bf3
 8006a88:	08006c2b 	.word	0x08006c2b
 8006a8c:	08006c4f 	.word	0x08006c4f
 8006a90:	24000244 	.word	0x24000244

08006a94 <stdio_exit_handler>:
 8006a94:	4a02      	ldr	r2, [pc, #8]	@ (8006aa0 <stdio_exit_handler+0xc>)
 8006a96:	4903      	ldr	r1, [pc, #12]	@ (8006aa4 <stdio_exit_handler+0x10>)
 8006a98:	4803      	ldr	r0, [pc, #12]	@ (8006aa8 <stdio_exit_handler+0x14>)
 8006a9a:	f000 b869 	b.w	8006b70 <_fwalk_sglue>
 8006a9e:	bf00      	nop
 8006aa0:	24000028 	.word	0x24000028
 8006aa4:	08007601 	.word	0x08007601
 8006aa8:	24000038 	.word	0x24000038

08006aac <cleanup_stdio>:
 8006aac:	6841      	ldr	r1, [r0, #4]
 8006aae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae0 <cleanup_stdio+0x34>)
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	d001      	beq.n	8006abc <cleanup_stdio+0x10>
 8006ab8:	f000 fda2 	bl	8007600 <_fflush_r>
 8006abc:	68a1      	ldr	r1, [r4, #8]
 8006abe:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <cleanup_stdio+0x38>)
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	d002      	beq.n	8006aca <cleanup_stdio+0x1e>
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fd9b 	bl	8007600 <_fflush_r>
 8006aca:	68e1      	ldr	r1, [r4, #12]
 8006acc:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <cleanup_stdio+0x3c>)
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	d004      	beq.n	8006adc <cleanup_stdio+0x30>
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad8:	f000 bd92 	b.w	8007600 <_fflush_r>
 8006adc:	bd10      	pop	{r4, pc}
 8006ade:	bf00      	nop
 8006ae0:	24000244 	.word	0x24000244
 8006ae4:	240002ac 	.word	0x240002ac
 8006ae8:	24000314 	.word	0x24000314

08006aec <global_stdio_init.part.0>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <global_stdio_init.part.0+0x30>)
 8006af0:	4c0b      	ldr	r4, [pc, #44]	@ (8006b20 <global_stdio_init.part.0+0x34>)
 8006af2:	4a0c      	ldr	r2, [pc, #48]	@ (8006b24 <global_stdio_init.part.0+0x38>)
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	4620      	mov	r0, r4
 8006af8:	2200      	movs	r2, #0
 8006afa:	2104      	movs	r1, #4
 8006afc:	f7ff ff94 	bl	8006a28 <std>
 8006b00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b04:	2201      	movs	r2, #1
 8006b06:	2109      	movs	r1, #9
 8006b08:	f7ff ff8e 	bl	8006a28 <std>
 8006b0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b10:	2202      	movs	r2, #2
 8006b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b16:	2112      	movs	r1, #18
 8006b18:	f7ff bf86 	b.w	8006a28 <std>
 8006b1c:	2400037c 	.word	0x2400037c
 8006b20:	24000244 	.word	0x24000244
 8006b24:	08006a95 	.word	0x08006a95

08006b28 <__sfp_lock_acquire>:
 8006b28:	4801      	ldr	r0, [pc, #4]	@ (8006b30 <__sfp_lock_acquire+0x8>)
 8006b2a:	f000 b90e 	b.w	8006d4a <__retarget_lock_acquire_recursive>
 8006b2e:	bf00      	nop
 8006b30:	24000385 	.word	0x24000385

08006b34 <__sfp_lock_release>:
 8006b34:	4801      	ldr	r0, [pc, #4]	@ (8006b3c <__sfp_lock_release+0x8>)
 8006b36:	f000 b909 	b.w	8006d4c <__retarget_lock_release_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	24000385 	.word	0x24000385

08006b40 <__sinit>:
 8006b40:	b510      	push	{r4, lr}
 8006b42:	4604      	mov	r4, r0
 8006b44:	f7ff fff0 	bl	8006b28 <__sfp_lock_acquire>
 8006b48:	6a23      	ldr	r3, [r4, #32]
 8006b4a:	b11b      	cbz	r3, 8006b54 <__sinit+0x14>
 8006b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b50:	f7ff bff0 	b.w	8006b34 <__sfp_lock_release>
 8006b54:	4b04      	ldr	r3, [pc, #16]	@ (8006b68 <__sinit+0x28>)
 8006b56:	6223      	str	r3, [r4, #32]
 8006b58:	4b04      	ldr	r3, [pc, #16]	@ (8006b6c <__sinit+0x2c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f5      	bne.n	8006b4c <__sinit+0xc>
 8006b60:	f7ff ffc4 	bl	8006aec <global_stdio_init.part.0>
 8006b64:	e7f2      	b.n	8006b4c <__sinit+0xc>
 8006b66:	bf00      	nop
 8006b68:	08006aad 	.word	0x08006aad
 8006b6c:	2400037c 	.word	0x2400037c

08006b70 <_fwalk_sglue>:
 8006b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b74:	4607      	mov	r7, r0
 8006b76:	4688      	mov	r8, r1
 8006b78:	4614      	mov	r4, r2
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b80:	f1b9 0901 	subs.w	r9, r9, #1
 8006b84:	d505      	bpl.n	8006b92 <_fwalk_sglue+0x22>
 8006b86:	6824      	ldr	r4, [r4, #0]
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d1f7      	bne.n	8006b7c <_fwalk_sglue+0xc>
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d907      	bls.n	8006ba8 <_fwalk_sglue+0x38>
 8006b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	d003      	beq.n	8006ba8 <_fwalk_sglue+0x38>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	47c0      	blx	r8
 8006ba6:	4306      	orrs	r6, r0
 8006ba8:	3568      	adds	r5, #104	@ 0x68
 8006baa:	e7e9      	b.n	8006b80 <_fwalk_sglue+0x10>

08006bac <iprintf>:
 8006bac:	b40f      	push	{r0, r1, r2, r3}
 8006bae:	b507      	push	{r0, r1, r2, lr}
 8006bb0:	4906      	ldr	r1, [pc, #24]	@ (8006bcc <iprintf+0x20>)
 8006bb2:	ab04      	add	r3, sp, #16
 8006bb4:	6808      	ldr	r0, [r1, #0]
 8006bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bba:	6881      	ldr	r1, [r0, #8]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	f000 f9f7 	bl	8006fb0 <_vfiprintf_r>
 8006bc2:	b003      	add	sp, #12
 8006bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	24000034 	.word	0x24000034

08006bd0 <__sread>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd8:	f000 f868 	bl	8006cac <_read_r>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	bfab      	itete	ge
 8006be0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006be2:	89a3      	ldrhlt	r3, [r4, #12]
 8006be4:	181b      	addge	r3, r3, r0
 8006be6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bea:	bfac      	ite	ge
 8006bec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bee:	81a3      	strhlt	r3, [r4, #12]
 8006bf0:	bd10      	pop	{r4, pc}

08006bf2 <__swrite>:
 8006bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf6:	461f      	mov	r7, r3
 8006bf8:	898b      	ldrh	r3, [r1, #12]
 8006bfa:	05db      	lsls	r3, r3, #23
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	4616      	mov	r6, r2
 8006c02:	d505      	bpl.n	8006c10 <__swrite+0x1e>
 8006c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c08:	2302      	movs	r3, #2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f000 f83c 	bl	8006c88 <_lseek_r>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	463b      	mov	r3, r7
 8006c20:	4628      	mov	r0, r5
 8006c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c26:	f000 b853 	b.w	8006cd0 <_write_r>

08006c2a <__sseek>:
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c32:	f000 f829 	bl	8006c88 <_lseek_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	bf15      	itete	ne
 8006c3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c46:	81a3      	strheq	r3, [r4, #12]
 8006c48:	bf18      	it	ne
 8006c4a:	81a3      	strhne	r3, [r4, #12]
 8006c4c:	bd10      	pop	{r4, pc}

08006c4e <__sclose>:
 8006c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c52:	f000 b809 	b.w	8006c68 <_close_r>

08006c56 <memset>:
 8006c56:	4402      	add	r2, r0
 8006c58:	4603      	mov	r3, r0
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d100      	bne.n	8006c60 <memset+0xa>
 8006c5e:	4770      	bx	lr
 8006c60:	f803 1b01 	strb.w	r1, [r3], #1
 8006c64:	e7f9      	b.n	8006c5a <memset+0x4>
	...

08006c68 <_close_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d06      	ldr	r5, [pc, #24]	@ (8006c84 <_close_r+0x1c>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7fa f849 	bl	8000d0a <_close>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_close_r+0x1a>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_close_r+0x1a>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	24000380 	.word	0x24000380

08006c88 <_lseek_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	@ (8006ca8 <_lseek_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa f85e 	bl	8000d58 <_lseek>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_lseek_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_lseek_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	24000380 	.word	0x24000380

08006cac <_read_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d07      	ldr	r5, [pc, #28]	@ (8006ccc <_read_r+0x20>)
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	602a      	str	r2, [r5, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f7f9 ffec 	bl	8000c98 <_read>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_read_r+0x1e>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_read_r+0x1e>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	24000380 	.word	0x24000380

08006cd0 <_write_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d07      	ldr	r5, [pc, #28]	@ (8006cf0 <_write_r+0x20>)
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	4611      	mov	r1, r2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	602a      	str	r2, [r5, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f7f9 fff7 	bl	8000cd2 <_write>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_write_r+0x1e>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_write_r+0x1e>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	24000380 	.word	0x24000380

08006cf4 <__errno>:
 8006cf4:	4b01      	ldr	r3, [pc, #4]	@ (8006cfc <__errno+0x8>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	24000034 	.word	0x24000034

08006d00 <__libc_init_array>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4d0d      	ldr	r5, [pc, #52]	@ (8006d38 <__libc_init_array+0x38>)
 8006d04:	4c0d      	ldr	r4, [pc, #52]	@ (8006d3c <__libc_init_array+0x3c>)
 8006d06:	1b64      	subs	r4, r4, r5
 8006d08:	10a4      	asrs	r4, r4, #2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	42a6      	cmp	r6, r4
 8006d0e:	d109      	bne.n	8006d24 <__libc_init_array+0x24>
 8006d10:	4d0b      	ldr	r5, [pc, #44]	@ (8006d40 <__libc_init_array+0x40>)
 8006d12:	4c0c      	ldr	r4, [pc, #48]	@ (8006d44 <__libc_init_array+0x44>)
 8006d14:	f000 fdc4 	bl	80078a0 <_init>
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	2600      	movs	r6, #0
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	d105      	bne.n	8006d2e <__libc_init_array+0x2e>
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d28:	4798      	blx	r3
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7ee      	b.n	8006d0c <__libc_init_array+0xc>
 8006d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d32:	4798      	blx	r3
 8006d34:	3601      	adds	r6, #1
 8006d36:	e7f2      	b.n	8006d1e <__libc_init_array+0x1e>
 8006d38:	080079c0 	.word	0x080079c0
 8006d3c:	080079c0 	.word	0x080079c0
 8006d40:	080079c0 	.word	0x080079c0
 8006d44:	080079c4 	.word	0x080079c4

08006d48 <__retarget_lock_init_recursive>:
 8006d48:	4770      	bx	lr

08006d4a <__retarget_lock_acquire_recursive>:
 8006d4a:	4770      	bx	lr

08006d4c <__retarget_lock_release_recursive>:
 8006d4c:	4770      	bx	lr

08006d4e <memcpy>:
 8006d4e:	440a      	add	r2, r1
 8006d50:	4291      	cmp	r1, r2
 8006d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d56:	d100      	bne.n	8006d5a <memcpy+0xc>
 8006d58:	4770      	bx	lr
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d64:	4291      	cmp	r1, r2
 8006d66:	d1f9      	bne.n	8006d5c <memcpy+0xe>
 8006d68:	bd10      	pop	{r4, pc}
	...

08006d6c <_free_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4605      	mov	r5, r0
 8006d70:	2900      	cmp	r1, #0
 8006d72:	d041      	beq.n	8006df8 <_free_r+0x8c>
 8006d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d78:	1f0c      	subs	r4, r1, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bfb8      	it	lt
 8006d7e:	18e4      	addlt	r4, r4, r3
 8006d80:	f000 f8e0 	bl	8006f44 <__malloc_lock>
 8006d84:	4a1d      	ldr	r2, [pc, #116]	@ (8006dfc <_free_r+0x90>)
 8006d86:	6813      	ldr	r3, [r2, #0]
 8006d88:	b933      	cbnz	r3, 8006d98 <_free_r+0x2c>
 8006d8a:	6063      	str	r3, [r4, #4]
 8006d8c:	6014      	str	r4, [r2, #0]
 8006d8e:	4628      	mov	r0, r5
 8006d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d94:	f000 b8dc 	b.w	8006f50 <__malloc_unlock>
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	d908      	bls.n	8006dae <_free_r+0x42>
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	1821      	adds	r1, r4, r0
 8006da0:	428b      	cmp	r3, r1
 8006da2:	bf01      	itttt	eq
 8006da4:	6819      	ldreq	r1, [r3, #0]
 8006da6:	685b      	ldreq	r3, [r3, #4]
 8006da8:	1809      	addeq	r1, r1, r0
 8006daa:	6021      	streq	r1, [r4, #0]
 8006dac:	e7ed      	b.n	8006d8a <_free_r+0x1e>
 8006dae:	461a      	mov	r2, r3
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	b10b      	cbz	r3, 8006db8 <_free_r+0x4c>
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d9fa      	bls.n	8006dae <_free_r+0x42>
 8006db8:	6811      	ldr	r1, [r2, #0]
 8006dba:	1850      	adds	r0, r2, r1
 8006dbc:	42a0      	cmp	r0, r4
 8006dbe:	d10b      	bne.n	8006dd8 <_free_r+0x6c>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	4401      	add	r1, r0
 8006dc4:	1850      	adds	r0, r2, r1
 8006dc6:	4283      	cmp	r3, r0
 8006dc8:	6011      	str	r1, [r2, #0]
 8006dca:	d1e0      	bne.n	8006d8e <_free_r+0x22>
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	6053      	str	r3, [r2, #4]
 8006dd2:	4408      	add	r0, r1
 8006dd4:	6010      	str	r0, [r2, #0]
 8006dd6:	e7da      	b.n	8006d8e <_free_r+0x22>
 8006dd8:	d902      	bls.n	8006de0 <_free_r+0x74>
 8006dda:	230c      	movs	r3, #12
 8006ddc:	602b      	str	r3, [r5, #0]
 8006dde:	e7d6      	b.n	8006d8e <_free_r+0x22>
 8006de0:	6820      	ldr	r0, [r4, #0]
 8006de2:	1821      	adds	r1, r4, r0
 8006de4:	428b      	cmp	r3, r1
 8006de6:	bf04      	itt	eq
 8006de8:	6819      	ldreq	r1, [r3, #0]
 8006dea:	685b      	ldreq	r3, [r3, #4]
 8006dec:	6063      	str	r3, [r4, #4]
 8006dee:	bf04      	itt	eq
 8006df0:	1809      	addeq	r1, r1, r0
 8006df2:	6021      	streq	r1, [r4, #0]
 8006df4:	6054      	str	r4, [r2, #4]
 8006df6:	e7ca      	b.n	8006d8e <_free_r+0x22>
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	2400038c 	.word	0x2400038c

08006e00 <sbrk_aligned>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	4e0f      	ldr	r6, [pc, #60]	@ (8006e40 <sbrk_aligned+0x40>)
 8006e04:	460c      	mov	r4, r1
 8006e06:	6831      	ldr	r1, [r6, #0]
 8006e08:	4605      	mov	r5, r0
 8006e0a:	b911      	cbnz	r1, 8006e12 <sbrk_aligned+0x12>
 8006e0c:	f000 fcb4 	bl	8007778 <_sbrk_r>
 8006e10:	6030      	str	r0, [r6, #0]
 8006e12:	4621      	mov	r1, r4
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 fcaf 	bl	8007778 <_sbrk_r>
 8006e1a:	1c43      	adds	r3, r0, #1
 8006e1c:	d103      	bne.n	8006e26 <sbrk_aligned+0x26>
 8006e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e22:	4620      	mov	r0, r4
 8006e24:	bd70      	pop	{r4, r5, r6, pc}
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d0f8      	beq.n	8006e22 <sbrk_aligned+0x22>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 fca0 	bl	8007778 <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d1f2      	bne.n	8006e22 <sbrk_aligned+0x22>
 8006e3c:	e7ef      	b.n	8006e1e <sbrk_aligned+0x1e>
 8006e3e:	bf00      	nop
 8006e40:	24000388 	.word	0x24000388

08006e44 <_malloc_r>:
 8006e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e48:	1ccd      	adds	r5, r1, #3
 8006e4a:	f025 0503 	bic.w	r5, r5, #3
 8006e4e:	3508      	adds	r5, #8
 8006e50:	2d0c      	cmp	r5, #12
 8006e52:	bf38      	it	cc
 8006e54:	250c      	movcc	r5, #12
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	4606      	mov	r6, r0
 8006e5a:	db01      	blt.n	8006e60 <_malloc_r+0x1c>
 8006e5c:	42a9      	cmp	r1, r5
 8006e5e:	d904      	bls.n	8006e6a <_malloc_r+0x26>
 8006e60:	230c      	movs	r3, #12
 8006e62:	6033      	str	r3, [r6, #0]
 8006e64:	2000      	movs	r0, #0
 8006e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f40 <_malloc_r+0xfc>
 8006e6e:	f000 f869 	bl	8006f44 <__malloc_lock>
 8006e72:	f8d8 3000 	ldr.w	r3, [r8]
 8006e76:	461c      	mov	r4, r3
 8006e78:	bb44      	cbnz	r4, 8006ecc <_malloc_r+0x88>
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff ffbf 	bl	8006e00 <sbrk_aligned>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	4604      	mov	r4, r0
 8006e86:	d158      	bne.n	8006f3a <_malloc_r+0xf6>
 8006e88:	f8d8 4000 	ldr.w	r4, [r8]
 8006e8c:	4627      	mov	r7, r4
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	d143      	bne.n	8006f1a <_malloc_r+0xd6>
 8006e92:	2c00      	cmp	r4, #0
 8006e94:	d04b      	beq.n	8006f2e <_malloc_r+0xea>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	4639      	mov	r1, r7
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	eb04 0903 	add.w	r9, r4, r3
 8006ea0:	f000 fc6a 	bl	8007778 <_sbrk_r>
 8006ea4:	4581      	cmp	r9, r0
 8006ea6:	d142      	bne.n	8006f2e <_malloc_r+0xea>
 8006ea8:	6821      	ldr	r1, [r4, #0]
 8006eaa:	1a6d      	subs	r5, r5, r1
 8006eac:	4629      	mov	r1, r5
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7ff ffa6 	bl	8006e00 <sbrk_aligned>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d03a      	beq.n	8006f2e <_malloc_r+0xea>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	442b      	add	r3, r5
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	bb62      	cbnz	r2, 8006f20 <_malloc_r+0xdc>
 8006ec6:	f8c8 7000 	str.w	r7, [r8]
 8006eca:	e00f      	b.n	8006eec <_malloc_r+0xa8>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	1b52      	subs	r2, r2, r5
 8006ed0:	d420      	bmi.n	8006f14 <_malloc_r+0xd0>
 8006ed2:	2a0b      	cmp	r2, #11
 8006ed4:	d917      	bls.n	8006f06 <_malloc_r+0xc2>
 8006ed6:	1961      	adds	r1, r4, r5
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	6025      	str	r5, [r4, #0]
 8006edc:	bf18      	it	ne
 8006ede:	6059      	strne	r1, [r3, #4]
 8006ee0:	6863      	ldr	r3, [r4, #4]
 8006ee2:	bf08      	it	eq
 8006ee4:	f8c8 1000 	streq.w	r1, [r8]
 8006ee8:	5162      	str	r2, [r4, r5]
 8006eea:	604b      	str	r3, [r1, #4]
 8006eec:	4630      	mov	r0, r6
 8006eee:	f000 f82f 	bl	8006f50 <__malloc_unlock>
 8006ef2:	f104 000b 	add.w	r0, r4, #11
 8006ef6:	1d23      	adds	r3, r4, #4
 8006ef8:	f020 0007 	bic.w	r0, r0, #7
 8006efc:	1ac2      	subs	r2, r0, r3
 8006efe:	bf1c      	itt	ne
 8006f00:	1a1b      	subne	r3, r3, r0
 8006f02:	50a3      	strne	r3, [r4, r2]
 8006f04:	e7af      	b.n	8006e66 <_malloc_r+0x22>
 8006f06:	6862      	ldr	r2, [r4, #4]
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	bf0c      	ite	eq
 8006f0c:	f8c8 2000 	streq.w	r2, [r8]
 8006f10:	605a      	strne	r2, [r3, #4]
 8006f12:	e7eb      	b.n	8006eec <_malloc_r+0xa8>
 8006f14:	4623      	mov	r3, r4
 8006f16:	6864      	ldr	r4, [r4, #4]
 8006f18:	e7ae      	b.n	8006e78 <_malloc_r+0x34>
 8006f1a:	463c      	mov	r4, r7
 8006f1c:	687f      	ldr	r7, [r7, #4]
 8006f1e:	e7b6      	b.n	8006e8e <_malloc_r+0x4a>
 8006f20:	461a      	mov	r2, r3
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d1fb      	bne.n	8006f20 <_malloc_r+0xdc>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6053      	str	r3, [r2, #4]
 8006f2c:	e7de      	b.n	8006eec <_malloc_r+0xa8>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	6033      	str	r3, [r6, #0]
 8006f32:	4630      	mov	r0, r6
 8006f34:	f000 f80c 	bl	8006f50 <__malloc_unlock>
 8006f38:	e794      	b.n	8006e64 <_malloc_r+0x20>
 8006f3a:	6005      	str	r5, [r0, #0]
 8006f3c:	e7d6      	b.n	8006eec <_malloc_r+0xa8>
 8006f3e:	bf00      	nop
 8006f40:	2400038c 	.word	0x2400038c

08006f44 <__malloc_lock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	@ (8006f4c <__malloc_lock+0x8>)
 8006f46:	f7ff bf00 	b.w	8006d4a <__retarget_lock_acquire_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	24000384 	.word	0x24000384

08006f50 <__malloc_unlock>:
 8006f50:	4801      	ldr	r0, [pc, #4]	@ (8006f58 <__malloc_unlock+0x8>)
 8006f52:	f7ff befb 	b.w	8006d4c <__retarget_lock_release_recursive>
 8006f56:	bf00      	nop
 8006f58:	24000384 	.word	0x24000384

08006f5c <__sfputc_r>:
 8006f5c:	6893      	ldr	r3, [r2, #8]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	b410      	push	{r4}
 8006f64:	6093      	str	r3, [r2, #8]
 8006f66:	da08      	bge.n	8006f7a <__sfputc_r+0x1e>
 8006f68:	6994      	ldr	r4, [r2, #24]
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	db01      	blt.n	8006f72 <__sfputc_r+0x16>
 8006f6e:	290a      	cmp	r1, #10
 8006f70:	d103      	bne.n	8006f7a <__sfputc_r+0x1e>
 8006f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f76:	f000 bb6b 	b.w	8007650 <__swbuf_r>
 8006f7a:	6813      	ldr	r3, [r2, #0]
 8006f7c:	1c58      	adds	r0, r3, #1
 8006f7e:	6010      	str	r0, [r2, #0]
 8006f80:	7019      	strb	r1, [r3, #0]
 8006f82:	4608      	mov	r0, r1
 8006f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <__sfputs_r>:
 8006f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	4614      	mov	r4, r2
 8006f92:	18d5      	adds	r5, r2, r3
 8006f94:	42ac      	cmp	r4, r5
 8006f96:	d101      	bne.n	8006f9c <__sfputs_r+0x12>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e007      	b.n	8006fac <__sfputs_r+0x22>
 8006f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa0:	463a      	mov	r2, r7
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f7ff ffda 	bl	8006f5c <__sfputc_r>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d1f3      	bne.n	8006f94 <__sfputs_r+0xa>
 8006fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fb0 <_vfiprintf_r>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	b09d      	sub	sp, #116	@ 0x74
 8006fb8:	4614      	mov	r4, r2
 8006fba:	4698      	mov	r8, r3
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	b118      	cbz	r0, 8006fc8 <_vfiprintf_r+0x18>
 8006fc0:	6a03      	ldr	r3, [r0, #32]
 8006fc2:	b90b      	cbnz	r3, 8006fc8 <_vfiprintf_r+0x18>
 8006fc4:	f7ff fdbc 	bl	8006b40 <__sinit>
 8006fc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fca:	07d9      	lsls	r1, r3, #31
 8006fcc:	d405      	bmi.n	8006fda <_vfiprintf_r+0x2a>
 8006fce:	89ab      	ldrh	r3, [r5, #12]
 8006fd0:	059a      	lsls	r2, r3, #22
 8006fd2:	d402      	bmi.n	8006fda <_vfiprintf_r+0x2a>
 8006fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fd6:	f7ff feb8 	bl	8006d4a <__retarget_lock_acquire_recursive>
 8006fda:	89ab      	ldrh	r3, [r5, #12]
 8006fdc:	071b      	lsls	r3, r3, #28
 8006fde:	d501      	bpl.n	8006fe4 <_vfiprintf_r+0x34>
 8006fe0:	692b      	ldr	r3, [r5, #16]
 8006fe2:	b99b      	cbnz	r3, 800700c <_vfiprintf_r+0x5c>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f000 fb70 	bl	80076cc <__swsetup_r>
 8006fec:	b170      	cbz	r0, 800700c <_vfiprintf_r+0x5c>
 8006fee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ff0:	07dc      	lsls	r4, r3, #31
 8006ff2:	d504      	bpl.n	8006ffe <_vfiprintf_r+0x4e>
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	b01d      	add	sp, #116	@ 0x74
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	0598      	lsls	r0, r3, #22
 8007002:	d4f7      	bmi.n	8006ff4 <_vfiprintf_r+0x44>
 8007004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007006:	f7ff fea1 	bl	8006d4c <__retarget_lock_release_recursive>
 800700a:	e7f3      	b.n	8006ff4 <_vfiprintf_r+0x44>
 800700c:	2300      	movs	r3, #0
 800700e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007010:	2320      	movs	r3, #32
 8007012:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007016:	f8cd 800c 	str.w	r8, [sp, #12]
 800701a:	2330      	movs	r3, #48	@ 0x30
 800701c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80071cc <_vfiprintf_r+0x21c>
 8007020:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007024:	f04f 0901 	mov.w	r9, #1
 8007028:	4623      	mov	r3, r4
 800702a:	469a      	mov	sl, r3
 800702c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007030:	b10a      	cbz	r2, 8007036 <_vfiprintf_r+0x86>
 8007032:	2a25      	cmp	r2, #37	@ 0x25
 8007034:	d1f9      	bne.n	800702a <_vfiprintf_r+0x7a>
 8007036:	ebba 0b04 	subs.w	fp, sl, r4
 800703a:	d00b      	beq.n	8007054 <_vfiprintf_r+0xa4>
 800703c:	465b      	mov	r3, fp
 800703e:	4622      	mov	r2, r4
 8007040:	4629      	mov	r1, r5
 8007042:	4630      	mov	r0, r6
 8007044:	f7ff ffa1 	bl	8006f8a <__sfputs_r>
 8007048:	3001      	adds	r0, #1
 800704a:	f000 80a7 	beq.w	800719c <_vfiprintf_r+0x1ec>
 800704e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007050:	445a      	add	r2, fp
 8007052:	9209      	str	r2, [sp, #36]	@ 0x24
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 809f 	beq.w	800719c <_vfiprintf_r+0x1ec>
 800705e:	2300      	movs	r3, #0
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007068:	f10a 0a01 	add.w	sl, sl, #1
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007074:	931a      	str	r3, [sp, #104]	@ 0x68
 8007076:	4654      	mov	r4, sl
 8007078:	2205      	movs	r2, #5
 800707a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707e:	4853      	ldr	r0, [pc, #332]	@ (80071cc <_vfiprintf_r+0x21c>)
 8007080:	f7f9 f92e 	bl	80002e0 <memchr>
 8007084:	9a04      	ldr	r2, [sp, #16]
 8007086:	b9d8      	cbnz	r0, 80070c0 <_vfiprintf_r+0x110>
 8007088:	06d1      	lsls	r1, r2, #27
 800708a:	bf44      	itt	mi
 800708c:	2320      	movmi	r3, #32
 800708e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007092:	0713      	lsls	r3, r2, #28
 8007094:	bf44      	itt	mi
 8007096:	232b      	movmi	r3, #43	@ 0x2b
 8007098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800709c:	f89a 3000 	ldrb.w	r3, [sl]
 80070a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a2:	d015      	beq.n	80070d0 <_vfiprintf_r+0x120>
 80070a4:	9a07      	ldr	r2, [sp, #28]
 80070a6:	4654      	mov	r4, sl
 80070a8:	2000      	movs	r0, #0
 80070aa:	f04f 0c0a 	mov.w	ip, #10
 80070ae:	4621      	mov	r1, r4
 80070b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b4:	3b30      	subs	r3, #48	@ 0x30
 80070b6:	2b09      	cmp	r3, #9
 80070b8:	d94b      	bls.n	8007152 <_vfiprintf_r+0x1a2>
 80070ba:	b1b0      	cbz	r0, 80070ea <_vfiprintf_r+0x13a>
 80070bc:	9207      	str	r2, [sp, #28]
 80070be:	e014      	b.n	80070ea <_vfiprintf_r+0x13a>
 80070c0:	eba0 0308 	sub.w	r3, r0, r8
 80070c4:	fa09 f303 	lsl.w	r3, r9, r3
 80070c8:	4313      	orrs	r3, r2
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	46a2      	mov	sl, r4
 80070ce:	e7d2      	b.n	8007076 <_vfiprintf_r+0xc6>
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	1d19      	adds	r1, r3, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	9103      	str	r1, [sp, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bfbb      	ittet	lt
 80070dc:	425b      	neglt	r3, r3
 80070de:	f042 0202 	orrlt.w	r2, r2, #2
 80070e2:	9307      	strge	r3, [sp, #28]
 80070e4:	9307      	strlt	r3, [sp, #28]
 80070e6:	bfb8      	it	lt
 80070e8:	9204      	strlt	r2, [sp, #16]
 80070ea:	7823      	ldrb	r3, [r4, #0]
 80070ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80070ee:	d10a      	bne.n	8007106 <_vfiprintf_r+0x156>
 80070f0:	7863      	ldrb	r3, [r4, #1]
 80070f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f4:	d132      	bne.n	800715c <_vfiprintf_r+0x1ac>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	1d1a      	adds	r2, r3, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	9203      	str	r2, [sp, #12]
 80070fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007102:	3402      	adds	r4, #2
 8007104:	9305      	str	r3, [sp, #20]
 8007106:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80071dc <_vfiprintf_r+0x22c>
 800710a:	7821      	ldrb	r1, [r4, #0]
 800710c:	2203      	movs	r2, #3
 800710e:	4650      	mov	r0, sl
 8007110:	f7f9 f8e6 	bl	80002e0 <memchr>
 8007114:	b138      	cbz	r0, 8007126 <_vfiprintf_r+0x176>
 8007116:	9b04      	ldr	r3, [sp, #16]
 8007118:	eba0 000a 	sub.w	r0, r0, sl
 800711c:	2240      	movs	r2, #64	@ 0x40
 800711e:	4082      	lsls	r2, r0
 8007120:	4313      	orrs	r3, r2
 8007122:	3401      	adds	r4, #1
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712a:	4829      	ldr	r0, [pc, #164]	@ (80071d0 <_vfiprintf_r+0x220>)
 800712c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007130:	2206      	movs	r2, #6
 8007132:	f7f9 f8d5 	bl	80002e0 <memchr>
 8007136:	2800      	cmp	r0, #0
 8007138:	d03f      	beq.n	80071ba <_vfiprintf_r+0x20a>
 800713a:	4b26      	ldr	r3, [pc, #152]	@ (80071d4 <_vfiprintf_r+0x224>)
 800713c:	bb1b      	cbnz	r3, 8007186 <_vfiprintf_r+0x1d6>
 800713e:	9b03      	ldr	r3, [sp, #12]
 8007140:	3307      	adds	r3, #7
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	3308      	adds	r3, #8
 8007148:	9303      	str	r3, [sp, #12]
 800714a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714c:	443b      	add	r3, r7
 800714e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007150:	e76a      	b.n	8007028 <_vfiprintf_r+0x78>
 8007152:	fb0c 3202 	mla	r2, ip, r2, r3
 8007156:	460c      	mov	r4, r1
 8007158:	2001      	movs	r0, #1
 800715a:	e7a8      	b.n	80070ae <_vfiprintf_r+0xfe>
 800715c:	2300      	movs	r3, #0
 800715e:	3401      	adds	r4, #1
 8007160:	9305      	str	r3, [sp, #20]
 8007162:	4619      	mov	r1, r3
 8007164:	f04f 0c0a 	mov.w	ip, #10
 8007168:	4620      	mov	r0, r4
 800716a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800716e:	3a30      	subs	r2, #48	@ 0x30
 8007170:	2a09      	cmp	r2, #9
 8007172:	d903      	bls.n	800717c <_vfiprintf_r+0x1cc>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0c6      	beq.n	8007106 <_vfiprintf_r+0x156>
 8007178:	9105      	str	r1, [sp, #20]
 800717a:	e7c4      	b.n	8007106 <_vfiprintf_r+0x156>
 800717c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007180:	4604      	mov	r4, r0
 8007182:	2301      	movs	r3, #1
 8007184:	e7f0      	b.n	8007168 <_vfiprintf_r+0x1b8>
 8007186:	ab03      	add	r3, sp, #12
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	462a      	mov	r2, r5
 800718c:	4b12      	ldr	r3, [pc, #72]	@ (80071d8 <_vfiprintf_r+0x228>)
 800718e:	a904      	add	r1, sp, #16
 8007190:	4630      	mov	r0, r6
 8007192:	f3af 8000 	nop.w
 8007196:	4607      	mov	r7, r0
 8007198:	1c78      	adds	r0, r7, #1
 800719a:	d1d6      	bne.n	800714a <_vfiprintf_r+0x19a>
 800719c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	d405      	bmi.n	80071ae <_vfiprintf_r+0x1fe>
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	059a      	lsls	r2, r3, #22
 80071a6:	d402      	bmi.n	80071ae <_vfiprintf_r+0x1fe>
 80071a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071aa:	f7ff fdcf 	bl	8006d4c <__retarget_lock_release_recursive>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	065b      	lsls	r3, r3, #25
 80071b2:	f53f af1f 	bmi.w	8006ff4 <_vfiprintf_r+0x44>
 80071b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071b8:	e71e      	b.n	8006ff8 <_vfiprintf_r+0x48>
 80071ba:	ab03      	add	r3, sp, #12
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	462a      	mov	r2, r5
 80071c0:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <_vfiprintf_r+0x228>)
 80071c2:	a904      	add	r1, sp, #16
 80071c4:	4630      	mov	r0, r6
 80071c6:	f000 f879 	bl	80072bc <_printf_i>
 80071ca:	e7e4      	b.n	8007196 <_vfiprintf_r+0x1e6>
 80071cc:	08007984 	.word	0x08007984
 80071d0:	0800798e 	.word	0x0800798e
 80071d4:	00000000 	.word	0x00000000
 80071d8:	08006f8b 	.word	0x08006f8b
 80071dc:	0800798a 	.word	0x0800798a

080071e0 <_printf_common>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	4616      	mov	r6, r2
 80071e6:	4698      	mov	r8, r3
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	690b      	ldr	r3, [r1, #16]
 80071ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bfb8      	it	lt
 80071f4:	4613      	movlt	r3, r2
 80071f6:	6033      	str	r3, [r6, #0]
 80071f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071fc:	4607      	mov	r7, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	b10a      	cbz	r2, 8007206 <_printf_common+0x26>
 8007202:	3301      	adds	r3, #1
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	0699      	lsls	r1, r3, #26
 800720a:	bf42      	ittt	mi
 800720c:	6833      	ldrmi	r3, [r6, #0]
 800720e:	3302      	addmi	r3, #2
 8007210:	6033      	strmi	r3, [r6, #0]
 8007212:	6825      	ldr	r5, [r4, #0]
 8007214:	f015 0506 	ands.w	r5, r5, #6
 8007218:	d106      	bne.n	8007228 <_printf_common+0x48>
 800721a:	f104 0a19 	add.w	sl, r4, #25
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	6832      	ldr	r2, [r6, #0]
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	42ab      	cmp	r3, r5
 8007226:	dc26      	bgt.n	8007276 <_printf_common+0x96>
 8007228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	3b00      	subs	r3, #0
 8007230:	bf18      	it	ne
 8007232:	2301      	movne	r3, #1
 8007234:	0692      	lsls	r2, r2, #26
 8007236:	d42b      	bmi.n	8007290 <_printf_common+0xb0>
 8007238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800723c:	4641      	mov	r1, r8
 800723e:	4638      	mov	r0, r7
 8007240:	47c8      	blx	r9
 8007242:	3001      	adds	r0, #1
 8007244:	d01e      	beq.n	8007284 <_printf_common+0xa4>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	6922      	ldr	r2, [r4, #16]
 800724a:	f003 0306 	and.w	r3, r3, #6
 800724e:	2b04      	cmp	r3, #4
 8007250:	bf02      	ittt	eq
 8007252:	68e5      	ldreq	r5, [r4, #12]
 8007254:	6833      	ldreq	r3, [r6, #0]
 8007256:	1aed      	subeq	r5, r5, r3
 8007258:	68a3      	ldr	r3, [r4, #8]
 800725a:	bf0c      	ite	eq
 800725c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007260:	2500      	movne	r5, #0
 8007262:	4293      	cmp	r3, r2
 8007264:	bfc4      	itt	gt
 8007266:	1a9b      	subgt	r3, r3, r2
 8007268:	18ed      	addgt	r5, r5, r3
 800726a:	2600      	movs	r6, #0
 800726c:	341a      	adds	r4, #26
 800726e:	42b5      	cmp	r5, r6
 8007270:	d11a      	bne.n	80072a8 <_printf_common+0xc8>
 8007272:	2000      	movs	r0, #0
 8007274:	e008      	b.n	8007288 <_printf_common+0xa8>
 8007276:	2301      	movs	r3, #1
 8007278:	4652      	mov	r2, sl
 800727a:	4641      	mov	r1, r8
 800727c:	4638      	mov	r0, r7
 800727e:	47c8      	blx	r9
 8007280:	3001      	adds	r0, #1
 8007282:	d103      	bne.n	800728c <_printf_common+0xac>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	3501      	adds	r5, #1
 800728e:	e7c6      	b.n	800721e <_printf_common+0x3e>
 8007290:	18e1      	adds	r1, r4, r3
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	2030      	movs	r0, #48	@ 0x30
 8007296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800729a:	4422      	add	r2, r4
 800729c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072a4:	3302      	adds	r3, #2
 80072a6:	e7c7      	b.n	8007238 <_printf_common+0x58>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4622      	mov	r2, r4
 80072ac:	4641      	mov	r1, r8
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c8      	blx	r9
 80072b2:	3001      	adds	r0, #1
 80072b4:	d0e6      	beq.n	8007284 <_printf_common+0xa4>
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7d9      	b.n	800726e <_printf_common+0x8e>
	...

080072bc <_printf_i>:
 80072bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	7e0f      	ldrb	r7, [r1, #24]
 80072c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072c4:	2f78      	cmp	r7, #120	@ 0x78
 80072c6:	4691      	mov	r9, r2
 80072c8:	4680      	mov	r8, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	469a      	mov	sl, r3
 80072ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072d2:	d807      	bhi.n	80072e4 <_printf_i+0x28>
 80072d4:	2f62      	cmp	r7, #98	@ 0x62
 80072d6:	d80a      	bhi.n	80072ee <_printf_i+0x32>
 80072d8:	2f00      	cmp	r7, #0
 80072da:	f000 80d1 	beq.w	8007480 <_printf_i+0x1c4>
 80072de:	2f58      	cmp	r7, #88	@ 0x58
 80072e0:	f000 80b8 	beq.w	8007454 <_printf_i+0x198>
 80072e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072ec:	e03a      	b.n	8007364 <_printf_i+0xa8>
 80072ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072f2:	2b15      	cmp	r3, #21
 80072f4:	d8f6      	bhi.n	80072e4 <_printf_i+0x28>
 80072f6:	a101      	add	r1, pc, #4	@ (adr r1, 80072fc <_printf_i+0x40>)
 80072f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072fc:	08007355 	.word	0x08007355
 8007300:	08007369 	.word	0x08007369
 8007304:	080072e5 	.word	0x080072e5
 8007308:	080072e5 	.word	0x080072e5
 800730c:	080072e5 	.word	0x080072e5
 8007310:	080072e5 	.word	0x080072e5
 8007314:	08007369 	.word	0x08007369
 8007318:	080072e5 	.word	0x080072e5
 800731c:	080072e5 	.word	0x080072e5
 8007320:	080072e5 	.word	0x080072e5
 8007324:	080072e5 	.word	0x080072e5
 8007328:	08007467 	.word	0x08007467
 800732c:	08007393 	.word	0x08007393
 8007330:	08007421 	.word	0x08007421
 8007334:	080072e5 	.word	0x080072e5
 8007338:	080072e5 	.word	0x080072e5
 800733c:	08007489 	.word	0x08007489
 8007340:	080072e5 	.word	0x080072e5
 8007344:	08007393 	.word	0x08007393
 8007348:	080072e5 	.word	0x080072e5
 800734c:	080072e5 	.word	0x080072e5
 8007350:	08007429 	.word	0x08007429
 8007354:	6833      	ldr	r3, [r6, #0]
 8007356:	1d1a      	adds	r2, r3, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6032      	str	r2, [r6, #0]
 800735c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007364:	2301      	movs	r3, #1
 8007366:	e09c      	b.n	80074a2 <_printf_i+0x1e6>
 8007368:	6833      	ldr	r3, [r6, #0]
 800736a:	6820      	ldr	r0, [r4, #0]
 800736c:	1d19      	adds	r1, r3, #4
 800736e:	6031      	str	r1, [r6, #0]
 8007370:	0606      	lsls	r6, r0, #24
 8007372:	d501      	bpl.n	8007378 <_printf_i+0xbc>
 8007374:	681d      	ldr	r5, [r3, #0]
 8007376:	e003      	b.n	8007380 <_printf_i+0xc4>
 8007378:	0645      	lsls	r5, r0, #25
 800737a:	d5fb      	bpl.n	8007374 <_printf_i+0xb8>
 800737c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007380:	2d00      	cmp	r5, #0
 8007382:	da03      	bge.n	800738c <_printf_i+0xd0>
 8007384:	232d      	movs	r3, #45	@ 0x2d
 8007386:	426d      	negs	r5, r5
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800738c:	4858      	ldr	r0, [pc, #352]	@ (80074f0 <_printf_i+0x234>)
 800738e:	230a      	movs	r3, #10
 8007390:	e011      	b.n	80073b6 <_printf_i+0xfa>
 8007392:	6821      	ldr	r1, [r4, #0]
 8007394:	6833      	ldr	r3, [r6, #0]
 8007396:	0608      	lsls	r0, r1, #24
 8007398:	f853 5b04 	ldr.w	r5, [r3], #4
 800739c:	d402      	bmi.n	80073a4 <_printf_i+0xe8>
 800739e:	0649      	lsls	r1, r1, #25
 80073a0:	bf48      	it	mi
 80073a2:	b2ad      	uxthmi	r5, r5
 80073a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80073a6:	4852      	ldr	r0, [pc, #328]	@ (80074f0 <_printf_i+0x234>)
 80073a8:	6033      	str	r3, [r6, #0]
 80073aa:	bf14      	ite	ne
 80073ac:	230a      	movne	r3, #10
 80073ae:	2308      	moveq	r3, #8
 80073b0:	2100      	movs	r1, #0
 80073b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073b6:	6866      	ldr	r6, [r4, #4]
 80073b8:	60a6      	str	r6, [r4, #8]
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	db05      	blt.n	80073ca <_printf_i+0x10e>
 80073be:	6821      	ldr	r1, [r4, #0]
 80073c0:	432e      	orrs	r6, r5
 80073c2:	f021 0104 	bic.w	r1, r1, #4
 80073c6:	6021      	str	r1, [r4, #0]
 80073c8:	d04b      	beq.n	8007462 <_printf_i+0x1a6>
 80073ca:	4616      	mov	r6, r2
 80073cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80073d0:	fb03 5711 	mls	r7, r3, r1, r5
 80073d4:	5dc7      	ldrb	r7, [r0, r7]
 80073d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073da:	462f      	mov	r7, r5
 80073dc:	42bb      	cmp	r3, r7
 80073de:	460d      	mov	r5, r1
 80073e0:	d9f4      	bls.n	80073cc <_printf_i+0x110>
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d10b      	bne.n	80073fe <_printf_i+0x142>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	07df      	lsls	r7, r3, #31
 80073ea:	d508      	bpl.n	80073fe <_printf_i+0x142>
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	6861      	ldr	r1, [r4, #4]
 80073f0:	4299      	cmp	r1, r3
 80073f2:	bfde      	ittt	le
 80073f4:	2330      	movle	r3, #48	@ 0x30
 80073f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073fe:	1b92      	subs	r2, r2, r6
 8007400:	6122      	str	r2, [r4, #16]
 8007402:	f8cd a000 	str.w	sl, [sp]
 8007406:	464b      	mov	r3, r9
 8007408:	aa03      	add	r2, sp, #12
 800740a:	4621      	mov	r1, r4
 800740c:	4640      	mov	r0, r8
 800740e:	f7ff fee7 	bl	80071e0 <_printf_common>
 8007412:	3001      	adds	r0, #1
 8007414:	d14a      	bne.n	80074ac <_printf_i+0x1f0>
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	b004      	add	sp, #16
 800741c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	f043 0320 	orr.w	r3, r3, #32
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	4832      	ldr	r0, [pc, #200]	@ (80074f4 <_printf_i+0x238>)
 800742a:	2778      	movs	r7, #120	@ 0x78
 800742c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	6831      	ldr	r1, [r6, #0]
 8007434:	061f      	lsls	r7, r3, #24
 8007436:	f851 5b04 	ldr.w	r5, [r1], #4
 800743a:	d402      	bmi.n	8007442 <_printf_i+0x186>
 800743c:	065f      	lsls	r7, r3, #25
 800743e:	bf48      	it	mi
 8007440:	b2ad      	uxthmi	r5, r5
 8007442:	6031      	str	r1, [r6, #0]
 8007444:	07d9      	lsls	r1, r3, #31
 8007446:	bf44      	itt	mi
 8007448:	f043 0320 	orrmi.w	r3, r3, #32
 800744c:	6023      	strmi	r3, [r4, #0]
 800744e:	b11d      	cbz	r5, 8007458 <_printf_i+0x19c>
 8007450:	2310      	movs	r3, #16
 8007452:	e7ad      	b.n	80073b0 <_printf_i+0xf4>
 8007454:	4826      	ldr	r0, [pc, #152]	@ (80074f0 <_printf_i+0x234>)
 8007456:	e7e9      	b.n	800742c <_printf_i+0x170>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	f023 0320 	bic.w	r3, r3, #32
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	e7f6      	b.n	8007450 <_printf_i+0x194>
 8007462:	4616      	mov	r6, r2
 8007464:	e7bd      	b.n	80073e2 <_printf_i+0x126>
 8007466:	6833      	ldr	r3, [r6, #0]
 8007468:	6825      	ldr	r5, [r4, #0]
 800746a:	6961      	ldr	r1, [r4, #20]
 800746c:	1d18      	adds	r0, r3, #4
 800746e:	6030      	str	r0, [r6, #0]
 8007470:	062e      	lsls	r6, r5, #24
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	d501      	bpl.n	800747a <_printf_i+0x1be>
 8007476:	6019      	str	r1, [r3, #0]
 8007478:	e002      	b.n	8007480 <_printf_i+0x1c4>
 800747a:	0668      	lsls	r0, r5, #25
 800747c:	d5fb      	bpl.n	8007476 <_printf_i+0x1ba>
 800747e:	8019      	strh	r1, [r3, #0]
 8007480:	2300      	movs	r3, #0
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	4616      	mov	r6, r2
 8007486:	e7bc      	b.n	8007402 <_printf_i+0x146>
 8007488:	6833      	ldr	r3, [r6, #0]
 800748a:	1d1a      	adds	r2, r3, #4
 800748c:	6032      	str	r2, [r6, #0]
 800748e:	681e      	ldr	r6, [r3, #0]
 8007490:	6862      	ldr	r2, [r4, #4]
 8007492:	2100      	movs	r1, #0
 8007494:	4630      	mov	r0, r6
 8007496:	f7f8 ff23 	bl	80002e0 <memchr>
 800749a:	b108      	cbz	r0, 80074a0 <_printf_i+0x1e4>
 800749c:	1b80      	subs	r0, r0, r6
 800749e:	6060      	str	r0, [r4, #4]
 80074a0:	6863      	ldr	r3, [r4, #4]
 80074a2:	6123      	str	r3, [r4, #16]
 80074a4:	2300      	movs	r3, #0
 80074a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074aa:	e7aa      	b.n	8007402 <_printf_i+0x146>
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	4632      	mov	r2, r6
 80074b0:	4649      	mov	r1, r9
 80074b2:	4640      	mov	r0, r8
 80074b4:	47d0      	blx	sl
 80074b6:	3001      	adds	r0, #1
 80074b8:	d0ad      	beq.n	8007416 <_printf_i+0x15a>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	079b      	lsls	r3, r3, #30
 80074be:	d413      	bmi.n	80074e8 <_printf_i+0x22c>
 80074c0:	68e0      	ldr	r0, [r4, #12]
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	4298      	cmp	r0, r3
 80074c6:	bfb8      	it	lt
 80074c8:	4618      	movlt	r0, r3
 80074ca:	e7a6      	b.n	800741a <_printf_i+0x15e>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4632      	mov	r2, r6
 80074d0:	4649      	mov	r1, r9
 80074d2:	4640      	mov	r0, r8
 80074d4:	47d0      	blx	sl
 80074d6:	3001      	adds	r0, #1
 80074d8:	d09d      	beq.n	8007416 <_printf_i+0x15a>
 80074da:	3501      	adds	r5, #1
 80074dc:	68e3      	ldr	r3, [r4, #12]
 80074de:	9903      	ldr	r1, [sp, #12]
 80074e0:	1a5b      	subs	r3, r3, r1
 80074e2:	42ab      	cmp	r3, r5
 80074e4:	dcf2      	bgt.n	80074cc <_printf_i+0x210>
 80074e6:	e7eb      	b.n	80074c0 <_printf_i+0x204>
 80074e8:	2500      	movs	r5, #0
 80074ea:	f104 0619 	add.w	r6, r4, #25
 80074ee:	e7f5      	b.n	80074dc <_printf_i+0x220>
 80074f0:	08007995 	.word	0x08007995
 80074f4:	080079a6 	.word	0x080079a6

080074f8 <__sflush_r>:
 80074f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	0716      	lsls	r6, r2, #28
 8007502:	4605      	mov	r5, r0
 8007504:	460c      	mov	r4, r1
 8007506:	d454      	bmi.n	80075b2 <__sflush_r+0xba>
 8007508:	684b      	ldr	r3, [r1, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	dc02      	bgt.n	8007514 <__sflush_r+0x1c>
 800750e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	dd48      	ble.n	80075a6 <__sflush_r+0xae>
 8007514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007516:	2e00      	cmp	r6, #0
 8007518:	d045      	beq.n	80075a6 <__sflush_r+0xae>
 800751a:	2300      	movs	r3, #0
 800751c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007520:	682f      	ldr	r7, [r5, #0]
 8007522:	6a21      	ldr	r1, [r4, #32]
 8007524:	602b      	str	r3, [r5, #0]
 8007526:	d030      	beq.n	800758a <__sflush_r+0x92>
 8007528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	0759      	lsls	r1, r3, #29
 800752e:	d505      	bpl.n	800753c <__sflush_r+0x44>
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007536:	b10b      	cbz	r3, 800753c <__sflush_r+0x44>
 8007538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	2300      	movs	r3, #0
 800753e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007540:	6a21      	ldr	r1, [r4, #32]
 8007542:	4628      	mov	r0, r5
 8007544:	47b0      	blx	r6
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	d106      	bne.n	800755a <__sflush_r+0x62>
 800754c:	6829      	ldr	r1, [r5, #0]
 800754e:	291d      	cmp	r1, #29
 8007550:	d82b      	bhi.n	80075aa <__sflush_r+0xb2>
 8007552:	4a2a      	ldr	r2, [pc, #168]	@ (80075fc <__sflush_r+0x104>)
 8007554:	40ca      	lsrs	r2, r1
 8007556:	07d6      	lsls	r6, r2, #31
 8007558:	d527      	bpl.n	80075aa <__sflush_r+0xb2>
 800755a:	2200      	movs	r2, #0
 800755c:	6062      	str	r2, [r4, #4]
 800755e:	04d9      	lsls	r1, r3, #19
 8007560:	6922      	ldr	r2, [r4, #16]
 8007562:	6022      	str	r2, [r4, #0]
 8007564:	d504      	bpl.n	8007570 <__sflush_r+0x78>
 8007566:	1c42      	adds	r2, r0, #1
 8007568:	d101      	bne.n	800756e <__sflush_r+0x76>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	b903      	cbnz	r3, 8007570 <__sflush_r+0x78>
 800756e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007572:	602f      	str	r7, [r5, #0]
 8007574:	b1b9      	cbz	r1, 80075a6 <__sflush_r+0xae>
 8007576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800757a:	4299      	cmp	r1, r3
 800757c:	d002      	beq.n	8007584 <__sflush_r+0x8c>
 800757e:	4628      	mov	r0, r5
 8007580:	f7ff fbf4 	bl	8006d6c <_free_r>
 8007584:	2300      	movs	r3, #0
 8007586:	6363      	str	r3, [r4, #52]	@ 0x34
 8007588:	e00d      	b.n	80075a6 <__sflush_r+0xae>
 800758a:	2301      	movs	r3, #1
 800758c:	4628      	mov	r0, r5
 800758e:	47b0      	blx	r6
 8007590:	4602      	mov	r2, r0
 8007592:	1c50      	adds	r0, r2, #1
 8007594:	d1c9      	bne.n	800752a <__sflush_r+0x32>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0c6      	beq.n	800752a <__sflush_r+0x32>
 800759c:	2b1d      	cmp	r3, #29
 800759e:	d001      	beq.n	80075a4 <__sflush_r+0xac>
 80075a0:	2b16      	cmp	r3, #22
 80075a2:	d11e      	bne.n	80075e2 <__sflush_r+0xea>
 80075a4:	602f      	str	r7, [r5, #0]
 80075a6:	2000      	movs	r0, #0
 80075a8:	e022      	b.n	80075f0 <__sflush_r+0xf8>
 80075aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ae:	b21b      	sxth	r3, r3
 80075b0:	e01b      	b.n	80075ea <__sflush_r+0xf2>
 80075b2:	690f      	ldr	r7, [r1, #16]
 80075b4:	2f00      	cmp	r7, #0
 80075b6:	d0f6      	beq.n	80075a6 <__sflush_r+0xae>
 80075b8:	0793      	lsls	r3, r2, #30
 80075ba:	680e      	ldr	r6, [r1, #0]
 80075bc:	bf08      	it	eq
 80075be:	694b      	ldreq	r3, [r1, #20]
 80075c0:	600f      	str	r7, [r1, #0]
 80075c2:	bf18      	it	ne
 80075c4:	2300      	movne	r3, #0
 80075c6:	eba6 0807 	sub.w	r8, r6, r7
 80075ca:	608b      	str	r3, [r1, #8]
 80075cc:	f1b8 0f00 	cmp.w	r8, #0
 80075d0:	dde9      	ble.n	80075a6 <__sflush_r+0xae>
 80075d2:	6a21      	ldr	r1, [r4, #32]
 80075d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075d6:	4643      	mov	r3, r8
 80075d8:	463a      	mov	r2, r7
 80075da:	4628      	mov	r0, r5
 80075dc:	47b0      	blx	r6
 80075de:	2800      	cmp	r0, #0
 80075e0:	dc08      	bgt.n	80075f4 <__sflush_r+0xfc>
 80075e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	4407      	add	r7, r0
 80075f6:	eba8 0800 	sub.w	r8, r8, r0
 80075fa:	e7e7      	b.n	80075cc <__sflush_r+0xd4>
 80075fc:	20400001 	.word	0x20400001

08007600 <_fflush_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	690b      	ldr	r3, [r1, #16]
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
 8007608:	b913      	cbnz	r3, 8007610 <_fflush_r+0x10>
 800760a:	2500      	movs	r5, #0
 800760c:	4628      	mov	r0, r5
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	b118      	cbz	r0, 800761a <_fflush_r+0x1a>
 8007612:	6a03      	ldr	r3, [r0, #32]
 8007614:	b90b      	cbnz	r3, 800761a <_fflush_r+0x1a>
 8007616:	f7ff fa93 	bl	8006b40 <__sinit>
 800761a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f3      	beq.n	800760a <_fflush_r+0xa>
 8007622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007624:	07d0      	lsls	r0, r2, #31
 8007626:	d404      	bmi.n	8007632 <_fflush_r+0x32>
 8007628:	0599      	lsls	r1, r3, #22
 800762a:	d402      	bmi.n	8007632 <_fflush_r+0x32>
 800762c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800762e:	f7ff fb8c 	bl	8006d4a <__retarget_lock_acquire_recursive>
 8007632:	4628      	mov	r0, r5
 8007634:	4621      	mov	r1, r4
 8007636:	f7ff ff5f 	bl	80074f8 <__sflush_r>
 800763a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800763c:	07da      	lsls	r2, r3, #31
 800763e:	4605      	mov	r5, r0
 8007640:	d4e4      	bmi.n	800760c <_fflush_r+0xc>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	059b      	lsls	r3, r3, #22
 8007646:	d4e1      	bmi.n	800760c <_fflush_r+0xc>
 8007648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800764a:	f7ff fb7f 	bl	8006d4c <__retarget_lock_release_recursive>
 800764e:	e7dd      	b.n	800760c <_fflush_r+0xc>

08007650 <__swbuf_r>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	460e      	mov	r6, r1
 8007654:	4614      	mov	r4, r2
 8007656:	4605      	mov	r5, r0
 8007658:	b118      	cbz	r0, 8007662 <__swbuf_r+0x12>
 800765a:	6a03      	ldr	r3, [r0, #32]
 800765c:	b90b      	cbnz	r3, 8007662 <__swbuf_r+0x12>
 800765e:	f7ff fa6f 	bl	8006b40 <__sinit>
 8007662:	69a3      	ldr	r3, [r4, #24]
 8007664:	60a3      	str	r3, [r4, #8]
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	071a      	lsls	r2, r3, #28
 800766a:	d501      	bpl.n	8007670 <__swbuf_r+0x20>
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	b943      	cbnz	r3, 8007682 <__swbuf_r+0x32>
 8007670:	4621      	mov	r1, r4
 8007672:	4628      	mov	r0, r5
 8007674:	f000 f82a 	bl	80076cc <__swsetup_r>
 8007678:	b118      	cbz	r0, 8007682 <__swbuf_r+0x32>
 800767a:	f04f 37ff 	mov.w	r7, #4294967295
 800767e:	4638      	mov	r0, r7
 8007680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	6922      	ldr	r2, [r4, #16]
 8007686:	1a98      	subs	r0, r3, r2
 8007688:	6963      	ldr	r3, [r4, #20]
 800768a:	b2f6      	uxtb	r6, r6
 800768c:	4283      	cmp	r3, r0
 800768e:	4637      	mov	r7, r6
 8007690:	dc05      	bgt.n	800769e <__swbuf_r+0x4e>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f7ff ffb3 	bl	8007600 <_fflush_r>
 800769a:	2800      	cmp	r0, #0
 800769c:	d1ed      	bne.n	800767a <__swbuf_r+0x2a>
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	60a3      	str	r3, [r4, #8]
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	6022      	str	r2, [r4, #0]
 80076aa:	701e      	strb	r6, [r3, #0]
 80076ac:	6962      	ldr	r2, [r4, #20]
 80076ae:	1c43      	adds	r3, r0, #1
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d004      	beq.n	80076be <__swbuf_r+0x6e>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	07db      	lsls	r3, r3, #31
 80076b8:	d5e1      	bpl.n	800767e <__swbuf_r+0x2e>
 80076ba:	2e0a      	cmp	r6, #10
 80076bc:	d1df      	bne.n	800767e <__swbuf_r+0x2e>
 80076be:	4621      	mov	r1, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f7ff ff9d 	bl	8007600 <_fflush_r>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d0d9      	beq.n	800767e <__swbuf_r+0x2e>
 80076ca:	e7d6      	b.n	800767a <__swbuf_r+0x2a>

080076cc <__swsetup_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4b29      	ldr	r3, [pc, #164]	@ (8007774 <__swsetup_r+0xa8>)
 80076d0:	4605      	mov	r5, r0
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	460c      	mov	r4, r1
 80076d6:	b118      	cbz	r0, 80076e0 <__swsetup_r+0x14>
 80076d8:	6a03      	ldr	r3, [r0, #32]
 80076da:	b90b      	cbnz	r3, 80076e0 <__swsetup_r+0x14>
 80076dc:	f7ff fa30 	bl	8006b40 <__sinit>
 80076e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e4:	0719      	lsls	r1, r3, #28
 80076e6:	d422      	bmi.n	800772e <__swsetup_r+0x62>
 80076e8:	06da      	lsls	r2, r3, #27
 80076ea:	d407      	bmi.n	80076fc <__swsetup_r+0x30>
 80076ec:	2209      	movs	r2, #9
 80076ee:	602a      	str	r2, [r5, #0]
 80076f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076f4:	81a3      	strh	r3, [r4, #12]
 80076f6:	f04f 30ff 	mov.w	r0, #4294967295
 80076fa:	e033      	b.n	8007764 <__swsetup_r+0x98>
 80076fc:	0758      	lsls	r0, r3, #29
 80076fe:	d512      	bpl.n	8007726 <__swsetup_r+0x5a>
 8007700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007702:	b141      	cbz	r1, 8007716 <__swsetup_r+0x4a>
 8007704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007708:	4299      	cmp	r1, r3
 800770a:	d002      	beq.n	8007712 <__swsetup_r+0x46>
 800770c:	4628      	mov	r0, r5
 800770e:	f7ff fb2d 	bl	8006d6c <_free_r>
 8007712:	2300      	movs	r3, #0
 8007714:	6363      	str	r3, [r4, #52]	@ 0x34
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800771c:	81a3      	strh	r3, [r4, #12]
 800771e:	2300      	movs	r3, #0
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f043 0308 	orr.w	r3, r3, #8
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	b94b      	cbnz	r3, 8007746 <__swsetup_r+0x7a>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800773c:	d003      	beq.n	8007746 <__swsetup_r+0x7a>
 800773e:	4621      	mov	r1, r4
 8007740:	4628      	mov	r0, r5
 8007742:	f000 f84f 	bl	80077e4 <__smakebuf_r>
 8007746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774a:	f013 0201 	ands.w	r2, r3, #1
 800774e:	d00a      	beq.n	8007766 <__swsetup_r+0x9a>
 8007750:	2200      	movs	r2, #0
 8007752:	60a2      	str	r2, [r4, #8]
 8007754:	6962      	ldr	r2, [r4, #20]
 8007756:	4252      	negs	r2, r2
 8007758:	61a2      	str	r2, [r4, #24]
 800775a:	6922      	ldr	r2, [r4, #16]
 800775c:	b942      	cbnz	r2, 8007770 <__swsetup_r+0xa4>
 800775e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007762:	d1c5      	bne.n	80076f0 <__swsetup_r+0x24>
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	0799      	lsls	r1, r3, #30
 8007768:	bf58      	it	pl
 800776a:	6962      	ldrpl	r2, [r4, #20]
 800776c:	60a2      	str	r2, [r4, #8]
 800776e:	e7f4      	b.n	800775a <__swsetup_r+0x8e>
 8007770:	2000      	movs	r0, #0
 8007772:	e7f7      	b.n	8007764 <__swsetup_r+0x98>
 8007774:	24000034 	.word	0x24000034

08007778 <_sbrk_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4d06      	ldr	r5, [pc, #24]	@ (8007794 <_sbrk_r+0x1c>)
 800777c:	2300      	movs	r3, #0
 800777e:	4604      	mov	r4, r0
 8007780:	4608      	mov	r0, r1
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	f7f9 faf6 	bl	8000d74 <_sbrk>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_sbrk_r+0x1a>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_sbrk_r+0x1a>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	24000380 	.word	0x24000380

08007798 <__swhatbuf_r>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a0:	2900      	cmp	r1, #0
 80077a2:	b096      	sub	sp, #88	@ 0x58
 80077a4:	4615      	mov	r5, r2
 80077a6:	461e      	mov	r6, r3
 80077a8:	da0d      	bge.n	80077c6 <__swhatbuf_r+0x2e>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077b0:	f04f 0100 	mov.w	r1, #0
 80077b4:	bf14      	ite	ne
 80077b6:	2340      	movne	r3, #64	@ 0x40
 80077b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077bc:	2000      	movs	r0, #0
 80077be:	6031      	str	r1, [r6, #0]
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	b016      	add	sp, #88	@ 0x58
 80077c4:	bd70      	pop	{r4, r5, r6, pc}
 80077c6:	466a      	mov	r2, sp
 80077c8:	f000 f848 	bl	800785c <_fstat_r>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dbec      	blt.n	80077aa <__swhatbuf_r+0x12>
 80077d0:	9901      	ldr	r1, [sp, #4]
 80077d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077da:	4259      	negs	r1, r3
 80077dc:	4159      	adcs	r1, r3
 80077de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077e2:	e7eb      	b.n	80077bc <__swhatbuf_r+0x24>

080077e4 <__smakebuf_r>:
 80077e4:	898b      	ldrh	r3, [r1, #12]
 80077e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077e8:	079d      	lsls	r5, r3, #30
 80077ea:	4606      	mov	r6, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	d507      	bpl.n	8007800 <__smakebuf_r+0x1c>
 80077f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	6123      	str	r3, [r4, #16]
 80077f8:	2301      	movs	r3, #1
 80077fa:	6163      	str	r3, [r4, #20]
 80077fc:	b003      	add	sp, #12
 80077fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007800:	ab01      	add	r3, sp, #4
 8007802:	466a      	mov	r2, sp
 8007804:	f7ff ffc8 	bl	8007798 <__swhatbuf_r>
 8007808:	9f00      	ldr	r7, [sp, #0]
 800780a:	4605      	mov	r5, r0
 800780c:	4639      	mov	r1, r7
 800780e:	4630      	mov	r0, r6
 8007810:	f7ff fb18 	bl	8006e44 <_malloc_r>
 8007814:	b948      	cbnz	r0, 800782a <__smakebuf_r+0x46>
 8007816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781a:	059a      	lsls	r2, r3, #22
 800781c:	d4ee      	bmi.n	80077fc <__smakebuf_r+0x18>
 800781e:	f023 0303 	bic.w	r3, r3, #3
 8007822:	f043 0302 	orr.w	r3, r3, #2
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	e7e2      	b.n	80077f0 <__smakebuf_r+0xc>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	6020      	str	r0, [r4, #0]
 800782e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	9b01      	ldr	r3, [sp, #4]
 8007836:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800783a:	b15b      	cbz	r3, 8007854 <__smakebuf_r+0x70>
 800783c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007840:	4630      	mov	r0, r6
 8007842:	f000 f81d 	bl	8007880 <_isatty_r>
 8007846:	b128      	cbz	r0, 8007854 <__smakebuf_r+0x70>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	431d      	orrs	r5, r3
 8007858:	81a5      	strh	r5, [r4, #12]
 800785a:	e7cf      	b.n	80077fc <__smakebuf_r+0x18>

0800785c <_fstat_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d07      	ldr	r5, [pc, #28]	@ (800787c <_fstat_r+0x20>)
 8007860:	2300      	movs	r3, #0
 8007862:	4604      	mov	r4, r0
 8007864:	4608      	mov	r0, r1
 8007866:	4611      	mov	r1, r2
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	f7f9 fa5a 	bl	8000d22 <_fstat>
 800786e:	1c43      	adds	r3, r0, #1
 8007870:	d102      	bne.n	8007878 <_fstat_r+0x1c>
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	b103      	cbz	r3, 8007878 <_fstat_r+0x1c>
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	bd38      	pop	{r3, r4, r5, pc}
 800787a:	bf00      	nop
 800787c:	24000380 	.word	0x24000380

08007880 <_isatty_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d06      	ldr	r5, [pc, #24]	@ (800789c <_isatty_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	f7f9 fa59 	bl	8000d42 <_isatty>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_isatty_r+0x1a>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_isatty_r+0x1a>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	24000380 	.word	0x24000380

080078a0 <_init>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	bf00      	nop
 80078a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a6:	bc08      	pop	{r3}
 80078a8:	469e      	mov	lr, r3
 80078aa:	4770      	bx	lr

080078ac <_fini>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr
