
memory_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008384  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008490  08008490  00009490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008534  08008534  0000a120  2**0
                  CONTENTS
  4 .ARM          00000000  08008534  08008534  0000a120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008534  08008534  0000a120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008534  08008534  00009534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008538  08008538  00009538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  0800853c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003230  20000120  0800865c  0000a120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003350  0800865c  0000a350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d109  00000000  00000000  0000a149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e29  00000000  00000000  00017252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0001a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000845  00000000  00000000  0001abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ea6  00000000  00000000  0001b435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010811  00000000  00000000  000352db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085030  00000000  00000000  00045aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cab1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b8c  00000000  00000000  000cab60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000cd6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000120 	.word	0x20000120
 8000128:	00000000 	.word	0x00000000
 800012c:	08008478 	.word	0x08008478

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000124 	.word	0x20000124
 8000148:	08008478 	.word	0x08008478

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f962 	bl	8000418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f806 	bl	8000164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f860 	bl	800021c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 fcda 	bl	8007b14 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	bf00      	nop
 8000162:	e7fd      	b.n	8000160 <main+0x14>

08000164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b094      	sub	sp, #80	@ 0x50
 8000168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800016e:	2228      	movs	r2, #40	@ 0x28
 8000170:	2100      	movs	r1, #0
 8000172:	4618      	mov	r0, r3
 8000174:	f008 f946 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000178:	f107 0314 	add.w	r3, r7, #20
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000194:	2301      	movs	r3, #1
 8000196:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000198:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800019c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019e:	2300      	movs	r3, #0
 80001a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a6:	2302      	movs	r3, #2
 80001a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80001b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 f9c6 	bl	800254c <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c6:	f000 f88d 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2101      	movs	r1, #1
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fc32 	bl	8002a50 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f2:	f000 f877 	bl	80002e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f6:	2310      	movs	r3, #16
 80001f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80001fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80001fe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fd80 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800020e:	f000 f869 	bl	80002e4 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3750      	adds	r7, #80	@ 0x50
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000230:	4b29      	ldr	r3, [pc, #164]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a28      	ldr	r2, [pc, #160]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b26      	ldr	r3, [pc, #152]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	4b23      	ldr	r3, [pc, #140]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a22      	ldr	r2, [pc, #136]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b20      	ldr	r3, [pc, #128]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0320 	and.w	r3, r3, #32
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000260:	4b1d      	ldr	r3, [pc, #116]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a1c      	ldr	r2, [pc, #112]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b1a      	ldr	r3, [pc, #104]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0304 	and.w	r3, r3, #4
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <MX_GPIO_Init+0xbc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	4811      	ldr	r0, [pc, #68]	@ (80002dc <MX_GPIO_Init+0xc0>)
 8000296:	f000 fbb3 	bl	8000a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800029a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800029e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a8:	f107 0310 	add.w	r3, r7, #16
 80002ac:	4619      	mov	r1, r3
 80002ae:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <MX_GPIO_Init+0xc4>)
 80002b0:	f000 fa22 	bl	80006f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002b4:	2320      	movs	r3, #32
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2302      	movs	r3, #2
 80002c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	4804      	ldr	r0, [pc, #16]	@ (80002dc <MX_GPIO_Init+0xc0>)
 80002cc:	f000 fa14 	bl	80006f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002d0:	bf00      	nop
 80002d2:	3720      	adds	r7, #32
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010800 	.word	0x40010800
 80002e0:	40011000 	.word	0x40011000

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <Error_Handler+0x8>

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	@ (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	@ (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	@ (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	@ (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <NMI_Handler+0x4>

0800035c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <HardFault_Handler+0x4>

08000364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <MemManage_Handler+0x4>

0800036c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <BusFault_Handler+0x4>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <UsageFault_Handler+0x4>

0800037c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a4:	f000 f87e 	bl	80004a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}

080003ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003b0:	4802      	ldr	r0, [pc, #8]	@ (80003bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003b2:	f000 fc59 	bl	8000c68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20002e08 	.word	0x20002e08

080003c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003cc:	f7ff fff8 	bl	80003c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	@ (8000400 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003d2:	490c      	ldr	r1, [pc, #48]	@ (8000404 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000408 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a09      	ldr	r2, [pc, #36]	@ (800040c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003e8:	4c09      	ldr	r4, [pc, #36]	@ (8000410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003f6:	f008 f80d 	bl	8008414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fa:	f7ff fea7 	bl	800014c <main>
  bx lr
 80003fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000408:	0800853c 	.word	0x0800853c
  ldr r2, =_sbss
 800040c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000410:	20003350 	.word	0x20003350

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041c:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <HAL_Init+0x28>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a07      	ldr	r2, [pc, #28]	@ (8000440 <HAL_Init+0x28>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000428:	2003      	movs	r0, #3
 800042a:	f000 f923 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800042e:	2000      	movs	r0, #0
 8000430:	f000 f808 	bl	8000444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000434:	f7ff ff5c 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40022000 	.word	0x40022000

08000444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800044c:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <HAL_InitTick+0x54>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <HAL_InitTick+0x58>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800045a:	fbb3 f3f1 	udiv	r3, r3, r1
 800045e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f93b 	bl	80006de <HAL_SYSTICK_Config>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
 8000470:	e00e      	b.n	8000490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b0f      	cmp	r3, #15
 8000476:	d80a      	bhi.n	800048e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000478:	2200      	movs	r2, #0
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	f04f 30ff 	mov.w	r0, #4294967295
 8000480:	f000 f903 	bl	800068a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000484:	4a06      	ldr	r2, [pc, #24]	@ (80004a0 <HAL_InitTick+0x5c>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800048a:	2300      	movs	r3, #0
 800048c:	e000      	b.n	8000490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800048e:	2301      	movs	r3, #1
}
 8000490:	4618      	mov	r0, r3
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000000 	.word	0x20000000
 800049c:	20000008 	.word	0x20000008
 80004a0:	20000004 	.word	0x20000004

080004a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <HAL_IncTick+0x1c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b05      	ldr	r3, [pc, #20]	@ (80004c4 <HAL_IncTick+0x20>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4413      	add	r3, r2
 80004b4:	4a03      	ldr	r2, [pc, #12]	@ (80004c4 <HAL_IncTick+0x20>)
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	20000008 	.word	0x20000008
 80004c4:	2000013c 	.word	0x2000013c

080004c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return uwTick;
 80004cc:	4b02      	ldr	r3, [pc, #8]	@ (80004d8 <HAL_GetTick+0x10>)
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	2000013c 	.word	0x2000013c

080004dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004f8:	4013      	ands	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800050c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800050e:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	60d3      	str	r3, [r2, #12]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <__NVIC_GetPriorityGrouping+0x18>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	f003 0307 	and.w	r3, r3, #7
}
 8000532:	4618      	mov	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db0b      	blt.n	800056a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4906      	ldr	r1, [pc, #24]	@ (8000574 <__NVIC_EnableIRQ+0x34>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100

08000578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	db0a      	blt.n	80005a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <__NVIC_SetPriority+0x4c>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	0112      	lsls	r2, r2, #4
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	440b      	add	r3, r1
 800059c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a0:	e00a      	b.n	80005b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4908      	ldr	r1, [pc, #32]	@ (80005c8 <__NVIC_SetPriority+0x50>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 030f 	and.w	r3, r3, #15
 80005ae:	3b04      	subs	r3, #4
 80005b0:	0112      	lsls	r2, r2, #4
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	440b      	add	r3, r1
 80005b6:	761a      	strb	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b089      	sub	sp, #36	@ 0x24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	f1c3 0307 	rsb	r3, r3, #7
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	bf28      	it	cs
 80005ea:	2304      	movcs	r3, #4
 80005ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3304      	adds	r3, #4
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d902      	bls.n	80005fc <NVIC_EncodePriority+0x30>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3b03      	subs	r3, #3
 80005fa:	e000      	b.n	80005fe <NVIC_EncodePriority+0x32>
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 32ff 	mov.w	r2, #4294967295
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43da      	mvns	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	401a      	ands	r2, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000614:	f04f 31ff 	mov.w	r1, #4294967295
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	43d9      	mvns	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	4313      	orrs	r3, r2
         );
}
 8000626:	4618      	mov	r0, r3
 8000628:	3724      	adds	r7, #36	@ 0x24
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3b01      	subs	r3, #1
 800063c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000640:	d301      	bcc.n	8000646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000642:	2301      	movs	r3, #1
 8000644:	e00f      	b.n	8000666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <SysTick_Config+0x40>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064e:	210f      	movs	r1, #15
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f7ff ff90 	bl	8000578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <SysTick_Config+0x40>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <SysTick_Config+0x40>)
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010

08000674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff2d 	bl	80004dc <__NVIC_SetPriorityGrouping>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800069c:	f7ff ff42 	bl	8000524 <__NVIC_GetPriorityGrouping>
 80006a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	68b9      	ldr	r1, [r7, #8]
 80006a6:	6978      	ldr	r0, [r7, #20]
 80006a8:	f7ff ff90 	bl	80005cc <NVIC_EncodePriority>
 80006ac:	4602      	mov	r2, r0
 80006ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff5f 	bl	8000578 <__NVIC_SetPriority>
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	4603      	mov	r3, r0
 80006ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff35 	bl	8000540 <__NVIC_EnableIRQ>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ffa2 	bl	8000630 <SysTick_Config>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b08b      	sub	sp, #44	@ 0x2c
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800070a:	e169      	b.n	80009e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800070c:	2201      	movs	r2, #1
 800070e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	69fa      	ldr	r2, [r7, #28]
 800071c:	4013      	ands	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	429a      	cmp	r2, r3
 8000726:	f040 8158 	bne.w	80009da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	4a9a      	ldr	r2, [pc, #616]	@ (8000998 <HAL_GPIO_Init+0x2a0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d05e      	beq.n	80007f2 <HAL_GPIO_Init+0xfa>
 8000734:	4a98      	ldr	r2, [pc, #608]	@ (8000998 <HAL_GPIO_Init+0x2a0>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d875      	bhi.n	8000826 <HAL_GPIO_Init+0x12e>
 800073a:	4a98      	ldr	r2, [pc, #608]	@ (800099c <HAL_GPIO_Init+0x2a4>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d058      	beq.n	80007f2 <HAL_GPIO_Init+0xfa>
 8000740:	4a96      	ldr	r2, [pc, #600]	@ (800099c <HAL_GPIO_Init+0x2a4>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d86f      	bhi.n	8000826 <HAL_GPIO_Init+0x12e>
 8000746:	4a96      	ldr	r2, [pc, #600]	@ (80009a0 <HAL_GPIO_Init+0x2a8>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d052      	beq.n	80007f2 <HAL_GPIO_Init+0xfa>
 800074c:	4a94      	ldr	r2, [pc, #592]	@ (80009a0 <HAL_GPIO_Init+0x2a8>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d869      	bhi.n	8000826 <HAL_GPIO_Init+0x12e>
 8000752:	4a94      	ldr	r2, [pc, #592]	@ (80009a4 <HAL_GPIO_Init+0x2ac>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d04c      	beq.n	80007f2 <HAL_GPIO_Init+0xfa>
 8000758:	4a92      	ldr	r2, [pc, #584]	@ (80009a4 <HAL_GPIO_Init+0x2ac>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d863      	bhi.n	8000826 <HAL_GPIO_Init+0x12e>
 800075e:	4a92      	ldr	r2, [pc, #584]	@ (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d046      	beq.n	80007f2 <HAL_GPIO_Init+0xfa>
 8000764:	4a90      	ldr	r2, [pc, #576]	@ (80009a8 <HAL_GPIO_Init+0x2b0>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d85d      	bhi.n	8000826 <HAL_GPIO_Init+0x12e>
 800076a:	2b12      	cmp	r3, #18
 800076c:	d82a      	bhi.n	80007c4 <HAL_GPIO_Init+0xcc>
 800076e:	2b12      	cmp	r3, #18
 8000770:	d859      	bhi.n	8000826 <HAL_GPIO_Init+0x12e>
 8000772:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <HAL_GPIO_Init+0x80>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	080007f3 	.word	0x080007f3
 800077c:	080007cd 	.word	0x080007cd
 8000780:	080007df 	.word	0x080007df
 8000784:	08000821 	.word	0x08000821
 8000788:	08000827 	.word	0x08000827
 800078c:	08000827 	.word	0x08000827
 8000790:	08000827 	.word	0x08000827
 8000794:	08000827 	.word	0x08000827
 8000798:	08000827 	.word	0x08000827
 800079c:	08000827 	.word	0x08000827
 80007a0:	08000827 	.word	0x08000827
 80007a4:	08000827 	.word	0x08000827
 80007a8:	08000827 	.word	0x08000827
 80007ac:	08000827 	.word	0x08000827
 80007b0:	08000827 	.word	0x08000827
 80007b4:	08000827 	.word	0x08000827
 80007b8:	08000827 	.word	0x08000827
 80007bc:	080007d5 	.word	0x080007d5
 80007c0:	080007e9 	.word	0x080007e9
 80007c4:	4a79      	ldr	r2, [pc, #484]	@ (80009ac <HAL_GPIO_Init+0x2b4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d013      	beq.n	80007f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007ca:	e02c      	b.n	8000826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	623b      	str	r3, [r7, #32]
          break;
 80007d2:	e029      	b.n	8000828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	3304      	adds	r3, #4
 80007da:	623b      	str	r3, [r7, #32]
          break;
 80007dc:	e024      	b.n	8000828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	3308      	adds	r3, #8
 80007e4:	623b      	str	r3, [r7, #32]
          break;
 80007e6:	e01f      	b.n	8000828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	330c      	adds	r3, #12
 80007ee:	623b      	str	r3, [r7, #32]
          break;
 80007f0:	e01a      	b.n	8000828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d102      	bne.n	8000800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007fa:	2304      	movs	r3, #4
 80007fc:	623b      	str	r3, [r7, #32]
          break;
 80007fe:	e013      	b.n	8000828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d105      	bne.n	8000814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000808:	2308      	movs	r3, #8
 800080a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	69fa      	ldr	r2, [r7, #28]
 8000810:	611a      	str	r2, [r3, #16]
          break;
 8000812:	e009      	b.n	8000828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000814:	2308      	movs	r3, #8
 8000816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	615a      	str	r2, [r3, #20]
          break;
 800081e:	e003      	b.n	8000828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
          break;
 8000824:	e000      	b.n	8000828 <HAL_GPIO_Init+0x130>
          break;
 8000826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	2bff      	cmp	r3, #255	@ 0xff
 800082c:	d801      	bhi.n	8000832 <HAL_GPIO_Init+0x13a>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	e001      	b.n	8000836 <HAL_GPIO_Init+0x13e>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3304      	adds	r3, #4
 8000836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d802      	bhi.n	8000844 <HAL_GPIO_Init+0x14c>
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	e002      	b.n	800084a <HAL_GPIO_Init+0x152>
 8000844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000846:	3b08      	subs	r3, #8
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	210f      	movs	r1, #15
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	401a      	ands	r2, r3
 800085c:	6a39      	ldr	r1, [r7, #32]
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	431a      	orrs	r2, r3
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000872:	2b00      	cmp	r3, #0
 8000874:	f000 80b1 	beq.w	80009da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000878:	4b4d      	ldr	r3, [pc, #308]	@ (80009b0 <HAL_GPIO_Init+0x2b8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a4c      	ldr	r2, [pc, #304]	@ (80009b0 <HAL_GPIO_Init+0x2b8>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b4a      	ldr	r3, [pc, #296]	@ (80009b0 <HAL_GPIO_Init+0x2b8>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000890:	4a48      	ldr	r2, [pc, #288]	@ (80009b4 <HAL_GPIO_Init+0x2bc>)
 8000892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	3302      	adds	r3, #2
 8000898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	220f      	movs	r2, #15
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a40      	ldr	r2, [pc, #256]	@ (80009b8 <HAL_GPIO_Init+0x2c0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d013      	beq.n	80008e4 <HAL_GPIO_Init+0x1ec>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a3f      	ldr	r2, [pc, #252]	@ (80009bc <HAL_GPIO_Init+0x2c4>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d00d      	beq.n	80008e0 <HAL_GPIO_Init+0x1e8>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a3e      	ldr	r2, [pc, #248]	@ (80009c0 <HAL_GPIO_Init+0x2c8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d007      	beq.n	80008dc <HAL_GPIO_Init+0x1e4>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a3d      	ldr	r2, [pc, #244]	@ (80009c4 <HAL_GPIO_Init+0x2cc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d101      	bne.n	80008d8 <HAL_GPIO_Init+0x1e0>
 80008d4:	2303      	movs	r3, #3
 80008d6:	e006      	b.n	80008e6 <HAL_GPIO_Init+0x1ee>
 80008d8:	2304      	movs	r3, #4
 80008da:	e004      	b.n	80008e6 <HAL_GPIO_Init+0x1ee>
 80008dc:	2302      	movs	r3, #2
 80008de:	e002      	b.n	80008e6 <HAL_GPIO_Init+0x1ee>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <HAL_GPIO_Init+0x1ee>
 80008e4:	2300      	movs	r3, #0
 80008e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e8:	f002 0203 	and.w	r2, r2, #3
 80008ec:	0092      	lsls	r2, r2, #2
 80008ee:	4093      	lsls	r3, r2
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008f6:	492f      	ldr	r1, [pc, #188]	@ (80009b4 <HAL_GPIO_Init+0x2bc>)
 80008f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	3302      	adds	r3, #2
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000910:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	492c      	ldr	r1, [pc, #176]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	608b      	str	r3, [r1, #8]
 800091c:	e006      	b.n	800092c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800091e:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	43db      	mvns	r3, r3
 8000926:	4928      	ldr	r1, [pc, #160]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000928:	4013      	ands	r3, r2
 800092a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000938:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 800093a:	68da      	ldr	r2, [r3, #12]
 800093c:	4922      	ldr	r1, [pc, #136]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	60cb      	str	r3, [r1, #12]
 8000944:	e006      	b.n	8000954 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	43db      	mvns	r3, r3
 800094e:	491e      	ldr	r1, [pc, #120]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000950:	4013      	ands	r3, r2
 8000952:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4918      	ldr	r1, [pc, #96]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	604b      	str	r3, [r1, #4]
 800096c:	e006      	b.n	800097c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	43db      	mvns	r3, r3
 8000976:	4914      	ldr	r1, [pc, #80]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 8000978:	4013      	ands	r3, r2
 800097a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d021      	beq.n	80009cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	490e      	ldr	r1, [pc, #56]	@ (80009c8 <HAL_GPIO_Init+0x2d0>)
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	600b      	str	r3, [r1, #0]
 8000994:	e021      	b.n	80009da <HAL_GPIO_Init+0x2e2>
 8000996:	bf00      	nop
 8000998:	10320000 	.word	0x10320000
 800099c:	10310000 	.word	0x10310000
 80009a0:	10220000 	.word	0x10220000
 80009a4:	10210000 	.word	0x10210000
 80009a8:	10120000 	.word	0x10120000
 80009ac:	10110000 	.word	0x10110000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010000 	.word	0x40010000
 80009b8:	40010800 	.word	0x40010800
 80009bc:	40010c00 	.word	0x40010c00
 80009c0:	40011000 	.word	0x40011000
 80009c4:	40011400 	.word	0x40011400
 80009c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <HAL_GPIO_Init+0x304>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	4909      	ldr	r1, [pc, #36]	@ (80009fc <HAL_GPIO_Init+0x304>)
 80009d6:	4013      	ands	r3, r2
 80009d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80009da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f47f ae8e 	bne.w	800070c <HAL_GPIO_Init+0x14>
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	372c      	adds	r7, #44	@ 0x2c
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40010400 	.word	0x40010400

08000a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a10:	787b      	ldrb	r3, [r7, #1]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a16:	887a      	ldrh	r2, [r7, #2]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a1c:	e003      	b.n	8000a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	041a      	lsls	r2, r3, #16
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	611a      	str	r2, [r3, #16]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e0e8      	b.n	8000c14 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d106      	bne.n	8000a5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f007 fa16 	bl	8007e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2203      	movs	r2, #3
 8000a60:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fa23 	bl	8002eba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a7e:	f002 f9f9 	bl	8002e74 <USB_CoreInit>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d005      	beq.n	8000a94 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e0bf      	b.n	8000c14 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 fa27 	bl	8002eee <USB_SetCurrentMode>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d005      	beq.n	8000ab2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e0b0      	b.n	8000c14 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e03e      	b.n	8000b36 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ab8:	7bfa      	ldrb	r2, [r7, #15]
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	440b      	add	r3, r1
 8000ac6:	3311      	adds	r3, #17
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000acc:	7bfa      	ldrb	r2, [r7, #15]
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	440b      	add	r3, r1
 8000ada:	3310      	adds	r3, #16
 8000adc:	7bfa      	ldrb	r2, [r7, #15]
 8000ade:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ae0:	7bfa      	ldrb	r2, [r7, #15]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	440b      	add	r3, r1
 8000aee:	3313      	adds	r3, #19
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000af4:	7bfa      	ldrb	r2, [r7, #15]
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3320      	adds	r3, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	440b      	add	r3, r1
 8000b16:	3324      	adds	r3, #36	@ 0x24
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	3301      	adds	r3, #1
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	7bfa      	ldrb	r2, [r7, #15]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d3bb      	bcc.n	8000ab8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e044      	b.n	8000bd0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b5c:	7bfa      	ldrb	r2, [r7, #15]
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	440b      	add	r3, r1
 8000b6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	440b      	add	r3, r1
 8000b80:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	440b      	add	r3, r1
 8000b96:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	440b      	add	r3, r1
 8000bac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	791b      	ldrb	r3, [r3, #4]
 8000bd4:	7bfa      	ldrb	r2, [r7, #15]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3b5      	bcc.n	8000b46 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be4:	f002 f98f 	bl	8002f06 <USB_DevInit>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d005      	beq.n	8000bfa <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00c      	b.n	8000c14 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fc24 	bl	800545a <USB_DevDisconnect>

  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <HAL_PCD_Start+0x16>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e016      	b.n	8000c60 <HAL_PCD_Start+0x44>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f925 	bl	8002e8e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c44:	2101      	movs	r1, #1
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f007 fba5 	bl	8008396 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 fbf8 	bl	8005446 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 fbfa 	bl	800546e <USB_ReadInterrupts>
 8000c7a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 fb47 	bl	800131a <PCD_EP_ISR_Handler>

    return;
 8000c8c:	e119      	b.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000caa:	b292      	uxth	r2, r2
 8000cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f007 f964 	bl	8007f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 f905 	bl	8000ec8 <HAL_PCD_SetAddress>

    return;
 8000cbe:	e100      	b.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00c      	beq.n	8000ce4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000ce2:	e0ee      	b.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00c      	beq.n	8000d08 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d00:	b292      	uxth	r2, r2
 8000d02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000d06:	e0dc      	b.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d027      	beq.n	8000d62 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0204 	bic.w	r2, r2, #4
 8000d24:	b292      	uxth	r2, r2
 8000d26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0208 	bic.w	r2, r2, #8
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f007 f954 	bl	8007ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d5a:	b292      	uxth	r2, r2
 8000d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000d60:	e0af      	b.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 8083 	beq.w	8000e74 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	77fb      	strb	r3, [r7, #31]
 8000d72:	e010      	b.n	8000d96 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	441a      	add	r2, r3
 8000d80:	7ffb      	ldrb	r3, [r7, #31]
 8000d82:	8812      	ldrh	r2, [r2, #0]
 8000d84:	b292      	uxth	r2, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	3320      	adds	r3, #32
 8000d8a:	443b      	add	r3, r7
 8000d8c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000d90:	7ffb      	ldrb	r3, [r7, #31]
 8000d92:	3301      	adds	r3, #1
 8000d94:	77fb      	strb	r3, [r7, #31]
 8000d96:	7ffb      	ldrb	r3, [r7, #31]
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	d9eb      	bls.n	8000d74 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0201 	orr.w	r2, r2, #1
 8000dae:	b292      	uxth	r2, r2
 8000db0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0201 	bic.w	r2, r2, #1
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000dcc:	bf00      	nop
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f6      	beq.n	8000dce <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000df2:	b292      	uxth	r2, r2
 8000df4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	77fb      	strb	r3, [r7, #31]
 8000dfc:	e00f      	b.n	8000e1e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000dfe:	7ffb      	ldrb	r3, [r7, #31]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	4611      	mov	r1, r2
 8000e06:	7ffa      	ldrb	r2, [r7, #31]
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	440a      	add	r2, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	3320      	adds	r3, #32
 8000e10:	443b      	add	r3, r7
 8000e12:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000e16:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000e18:	7ffb      	ldrb	r3, [r7, #31]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	77fb      	strb	r3, [r7, #31]
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d9ec      	bls.n	8000dfe <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0208 	orr.w	r2, r2, #8
 8000e36:	b292      	uxth	r2, r2
 8000e38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0204 	orr.w	r2, r2, #4
 8000e66:	b292      	uxth	r2, r2
 8000e68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f007 f8a5 	bl	8007fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e72:	e026      	b.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00f      	beq.n	8000e9e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000e90:	b292      	uxth	r2, r2
 8000e92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f007 f863 	bl	8007f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e9c:	e011      	b.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00c      	beq.n	8000ec2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000ec0:	bf00      	nop
  }
}
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d101      	bne.n	8000ee2 <HAL_PCD_SetAddress+0x1a>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e012      	b.n	8000f08 <HAL_PCD_SetAddress+0x40>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	78fa      	ldrb	r2, [r7, #3]
 8000eee:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	78fa      	ldrb	r2, [r7, #3]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 fa91 	bl	8005420 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	70fb      	strb	r3, [r7, #3]
 8000f22:	460b      	mov	r3, r1
 8000f24:	803b      	strh	r3, [r7, #0]
 8000f26:	4613      	mov	r3, r2
 8000f28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da0e      	bge.n	8000f54 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	f003 0207 	and.w	r2, r3, #7
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	3310      	adds	r3, #16
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	705a      	strb	r2, [r3, #1]
 8000f52:	e00e      	b.n	8000f72 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	f003 0207 	and.w	r2, r3, #7
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f7e:	883a      	ldrh	r2, [r7, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	78ba      	ldrb	r2, [r7, #2]
 8000f88:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f8a:	78bb      	ldrb	r3, [r7, #2]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d102      	bne.n	8000f96 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_PCD_EP_Open+0x94>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e00e      	b.n	8000fc2 <HAL_PCD_EP_Open+0xb2>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68f9      	ldr	r1, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 ffda 	bl	8002f6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da0e      	bge.n	8000ffc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	f003 0207 	and.w	r2, r3, #7
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	3310      	adds	r3, #16
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	705a      	strb	r2, [r3, #1]
 8000ffa:	e00e      	b.n	800101a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	f003 0207 	and.w	r2, r3, #7
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	b2da      	uxtb	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_PCD_EP_Close+0x6a>
 8001030:	2302      	movs	r3, #2
 8001032:	e00e      	b.n	8001052 <HAL_PCD_EP_Close+0x88>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68f9      	ldr	r1, [r7, #12]
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fb52 	bl	80036ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	460b      	mov	r3, r1
 8001068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	f003 0207 	and.w	r2, r3, #7
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2200      	movs	r2, #0
 8001098:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fd09 	bl	8003ac4 <USB_EPStartXfer>

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	f003 0207 	and.w	r2, r3, #7
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	440b      	add	r3, r1
 80010da:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	460b      	mov	r3, r1
 80010f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	f003 0207 	and.w	r2, r3, #7
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	3310      	adds	r3, #16
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4413      	add	r3, r2
 800110e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2201      	movs	r2, #1
 8001134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	b2da      	uxtb	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6979      	ldr	r1, [r7, #20]
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fcbb 	bl	8003ac4 <USB_EPStartXfer>

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	7912      	ldrb	r2, [r2, #4]
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e04c      	b.n	8001210 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da0e      	bge.n	800119c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	f003 0207 	and.w	r2, r3, #7
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	3310      	adds	r3, #16
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2201      	movs	r2, #1
 8001198:	705a      	strb	r2, [r3, #1]
 800119a:	e00c      	b.n	80011b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2201      	movs	r2, #1
 80011ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_PCD_EP_SetStall+0x7e>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e01c      	b.n	8001210 <HAL_PCD_EP_SetStall+0xb8>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 f81e 	bl	8005226 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80011fe:	4619      	mov	r1, r3
 8001200:	4610      	mov	r0, r2
 8001202:	f004 f943 	bl	800548c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	7912      	ldrb	r2, [r2, #4]
 800122e:	4293      	cmp	r3, r2
 8001230:	d901      	bls.n	8001236 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e040      	b.n	80012b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	da0e      	bge.n	800125c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	f003 0207 	and.w	r2, r3, #7
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	3310      	adds	r3, #16
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e00e      	b.n	800127a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	f003 0207 	and.w	r2, r3, #7
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	b2da      	uxtb	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_PCD_EP_ClrStall+0x82>
 8001296:	2302      	movs	r3, #2
 8001298:	e00e      	b.n	80012b8 <HAL_PCD_EP_ClrStall+0xa0>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68f9      	ldr	r1, [r7, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 f80c 	bl	80052c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_PCD_EP_Flush+0x1a>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e01b      	b.n	8001312 <HAL_PCD_EP_Flush+0x52>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  if ((ep_addr & 0x80U) == 0x80U)
 80012e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da09      	bge.n	80012fe <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4610      	mov	r0, r2
 80012f8:	f001 fe22 	bl	8002f40 <USB_FlushTxFifo>
 80012fc:	e004      	b.n	8001308 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fe27 	bl	8002f56 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b096      	sub	sp, #88	@ 0x58
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001322:	e3bb      	b.n	8001a9c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800132c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001330:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800133e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 8175 	bne.w	8001632 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001348:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	2b00      	cmp	r3, #0
 8001352:	d14e      	bne.n	80013f2 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001364:	81fb      	strh	r3, [r7, #14]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001374:	b29b      	uxth	r3, r3
 8001376:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3310      	adds	r3, #16
 800137c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001386:	b29b      	uxth	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	3302      	adds	r3, #2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	4413      	add	r3, r2
 800139c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80013aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	441a      	add	r2, r3
 80013b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013b8:	2100      	movs	r1, #0
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f006 fdb7 	bl	8007f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b5b      	ldrb	r3, [r3, #13]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8368 	beq.w	8001a9c <PCD_EP_ISR_Handler+0x782>
 80013cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 8363 	bne.w	8001a9c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7b5b      	ldrb	r3, [r3, #13]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	735a      	strb	r2, [r3, #13]
 80013f0:	e354      	b.n	8001a9c <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013f8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001404:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800140c:	2b00      	cmp	r3, #0
 800140e:	d034      	beq.n	800147a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	3306      	adds	r3, #6
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	4413      	add	r3, r2
 800142e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800143a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001448:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800144a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800144c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800144e:	b29b      	uxth	r3, r3
 8001450:	f004 f86c 	bl	800552c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29a      	uxth	r2, r3
 800145c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001460:	4013      	ands	r3, r2
 8001462:	823b      	strh	r3, [r7, #16]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	8a3a      	ldrh	r2, [r7, #16]
 800146a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800146e:	b292      	uxth	r2, r2
 8001470:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f006 fd2e 	bl	8007ed4 <HAL_PCD_SetupStageCallback>
 8001478:	e310      	b.n	8001a9c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800147a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800147e:	2b00      	cmp	r3, #0
 8001480:	f280 830c 	bge.w	8001a9c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001490:	4013      	ands	r3, r2
 8001492:	83fb      	strh	r3, [r7, #30]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	8bfa      	ldrh	r2, [r7, #30]
 800149a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800149e:	b292      	uxth	r2, r2
 80014a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	3306      	adds	r3, #6
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80014ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d019      	beq.n	800150a <PCD_EP_ISR_Handler+0x1f0>
 80014d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d015      	beq.n	800150a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e4:	6959      	ldr	r1, [r3, #20]
 80014e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f004 f81c 	bl	800552c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	441a      	add	r2, r3
 80014fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001500:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001502:	2100      	movs	r1, #0
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f006 fcf7 	bl	8007ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001514:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 82bd 	bne.w	8001a9c <PCD_EP_ISR_Handler+0x782>
 8001522:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001526:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800152a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800152e:	f000 82b5 	beq.w	8001a9c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	4413      	add	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155c:	b29a      	uxth	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	801a      	strh	r2, [r3, #0]
 8001562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b3e      	cmp	r3, #62	@ 0x3e
 8001568:	d91d      	bls.n	80015a6 <PCD_EP_ISR_Handler+0x28c>
 800156a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	647b      	str	r3, [r7, #68]	@ 0x44
 8001572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <PCD_EP_ISR_Handler+0x26a>
 800157e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001580:	3b01      	subs	r3, #1
 8001582:	647b      	str	r3, [r7, #68]	@ 0x44
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29a      	uxth	r2, r3
 800158a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800158c:	b29b      	uxth	r3, r3
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	b29b      	uxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800159a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800159e:	b29a      	uxth	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	801a      	strh	r2, [r3, #0]
 80015a4:	e026      	b.n	80015f4 <PCD_EP_ISR_Handler+0x2da>
 80015a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10a      	bne.n	80015c4 <PCD_EP_ISR_Handler+0x2aa>
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015bc:	b29a      	uxth	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	e017      	b.n	80015f4 <PCD_EP_ISR_Handler+0x2da>
 80015c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80015cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <PCD_EP_ISR_Handler+0x2c4>
 80015d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015da:	3301      	adds	r3, #1
 80015dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	029b      	lsls	r3, r3, #10
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001604:	827b      	strh	r3, [r7, #18]
 8001606:	8a7b      	ldrh	r3, [r7, #18]
 8001608:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800160c:	827b      	strh	r3, [r7, #18]
 800160e:	8a7b      	ldrh	r3, [r7, #18]
 8001610:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001614:	827b      	strh	r3, [r7, #18]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	8a7b      	ldrh	r3, [r7, #18]
 800161c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800162c:	b29b      	uxth	r3, r3
 800162e:	8013      	strh	r3, [r2, #0]
 8001630:	e234      	b.n	8001a9c <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001646:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800164a:	2b00      	cmp	r3, #0
 800164c:	f280 80fc 	bge.w	8001848 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b29a      	uxth	r2, r3
 8001662:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001666:	4013      	ands	r3, r2
 8001668:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800167e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001682:	b292      	uxth	r2, r2
 8001684:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001686:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800169c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800169e:	7b1b      	ldrb	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d125      	bne.n	80016f0 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	3306      	adds	r3, #6
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016cc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80016d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8092 	beq.w	80017fe <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e4:	88da      	ldrh	r2, [r3, #6]
 80016e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80016ea:	f003 ff1f 	bl	800552c <USB_ReadPMA>
 80016ee:	e086      	b.n	80017fe <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80016f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016f2:	78db      	ldrb	r3, [r3, #3]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d10a      	bne.n	800170e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80016f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016fc:	461a      	mov	r2, r3
 80016fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f9d9 	bl	8001ab8 <HAL_PCD_EP_DB_Receive>
 8001706:	4603      	mov	r3, r0
 8001708:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800170c:	e077      	b.n	80017fe <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001728:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	441a      	add	r2, r3
 800173a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800173e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800174a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800174e:	b29b      	uxth	r3, r3
 8001750:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d024      	beq.n	80017b6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	3302      	adds	r3, #2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001794:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001798:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800179c:	2b00      	cmp	r3, #0
 800179e:	d02e      	beq.n	80017fe <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a6:	6959      	ldr	r1, [r3, #20]
 80017a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017aa:	891a      	ldrh	r2, [r3, #8]
 80017ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017b0:	f003 febc 	bl	800552c <USB_ReadPMA>
 80017b4:	e023      	b.n	80017fe <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017be:	b29b      	uxth	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	3306      	adds	r3, #6
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80017e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f0:	6959      	ldr	r1, [r3, #20]
 80017f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f4:	895a      	ldrh	r2, [r3, #10]
 80017f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017fa:	f003 fe97 	bl	800552c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80017fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001806:	441a      	add	r2, r3
 8001808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800180c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001814:	441a      	add	r2, r3
 8001816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001818:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800181a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <PCD_EP_ISR_Handler+0x514>
 8001822:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	429a      	cmp	r2, r3
 800182c:	d206      	bcs.n	800183c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800182e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f006 fb5f 	bl	8007ef8 <HAL_PCD_DataOutStageCallback>
 800183a:	e005      	b.n	8001848 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001842:	4618      	mov	r0, r3
 8001844:	f002 f93e 	bl	8003ac4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800184c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8123 	beq.w	8001a9c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001856:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	3310      	adds	r3, #16
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001884:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	441a      	add	r2, r3
 8001896:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800189a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800189e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a8:	78db      	ldrb	r3, [r3, #3]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f040 80a2 	bne.w	80019f4 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80018b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80018b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b8:	7b1b      	ldrb	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8093 	beq.w	80019e6 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d046      	beq.n	800195a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d126      	bne.n	8001922 <PCD_EP_ISR_Handler+0x608>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	4413      	add	r3, r2
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	011a      	lsls	r2, r3, #4
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	4413      	add	r3, r2
 80018f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80018fa:	623b      	str	r3, [r7, #32]
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001906:	b29a      	uxth	r2, r3
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	801a      	strh	r2, [r3, #0]
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800191a:	b29a      	uxth	r2, r3
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	e061      	b.n	80019e6 <PCD_EP_ISR_Handler+0x6cc>
 8001922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d15d      	bne.n	80019e6 <PCD_EP_ISR_Handler+0x6cc>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001938:	b29b      	uxth	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193e:	4413      	add	r3, r2
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	011a      	lsls	r2, r3, #4
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	4413      	add	r3, r2
 800194c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	2200      	movs	r2, #0
 8001956:	801a      	strh	r2, [r3, #0]
 8001958:	e045      	b.n	80019e6 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d126      	bne.n	80019b6 <PCD_EP_ISR_Handler+0x69c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197c:	4413      	add	r3, r2
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	011a      	lsls	r2, r3, #4
 8001986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001988:	4413      	add	r3, r2
 800198a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800199a:	b29a      	uxth	r2, r3
 800199c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e017      	b.n	80019e6 <PCD_EP_ISR_Handler+0x6cc>
 80019b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d113      	bne.n	80019e6 <PCD_EP_ISR_Handler+0x6cc>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019cc:	4413      	add	r3, r2
 80019ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	011a      	lsls	r2, r3, #4
 80019d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d8:	4413      	add	r3, r2
 80019da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e2:	2200      	movs	r2, #0
 80019e4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f006 fa9e 	bl	8007f2e <HAL_PCD_DataInStageCallback>
 80019f2:	e053      	b.n	8001a9c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80019f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d146      	bne.n	8001a8e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	3302      	adds	r3, #2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a28:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d907      	bls.n	8001a48 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a40:	1ad2      	subs	r2, r2, r3
 8001a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a44:	619a      	str	r2, [r3, #24]
 8001a46:	e002      	b.n	8001a4e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f006 fa66 	bl	8007f2e <HAL_PCD_DataInStageCallback>
 8001a62:	e01b      	b.n	8001a9c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a6c:	441a      	add	r2, r3
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a70:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a7a:	441a      	add	r2, r3
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 f81c 	bl	8003ac4 <USB_EPStartXfer>
 8001a8c:	e006      	b.n	8001a9c <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a92:	461a      	mov	r2, r3
 8001a94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f91b 	bl	8001cd2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f6ff ac3b 	blt.w	8001324 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3758      	adds	r7, #88	@ 0x58
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d07e      	beq.n	8001bce <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	8b7b      	ldrh	r3, [r7, #26]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d306      	bcc.n	8001b12 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	699a      	ldr	r2, [r3, #24]
 8001b08:	8b7b      	ldrh	r3, [r7, #26]
 8001b0a:	1ad2      	subs	r2, r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	619a      	str	r2, [r3, #24]
 8001b10:	e002      	b.n	8001b18 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d123      	bne.n	8001b68 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b3a:	833b      	strh	r3, [r7, #24]
 8001b3c:	8b3b      	ldrh	r3, [r7, #24]
 8001b3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b42:	833b      	strh	r3, [r7, #24]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	441a      	add	r2, r3
 8001b52:	8b3b      	ldrh	r3, [r7, #24]
 8001b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01f      	beq.n	8001bb2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b8c:	82fb      	strh	r3, [r7, #22]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	441a      	add	r2, r3
 8001b9c:	8afb      	ldrh	r3, [r7, #22]
 8001b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001baa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001bb2:	8b7b      	ldrh	r3, [r7, #26]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8087 	beq.w	8001cc8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	6959      	ldr	r1, [r3, #20]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	891a      	ldrh	r2, [r3, #8]
 8001bc6:	8b7b      	ldrh	r3, [r7, #26]
 8001bc8:	f003 fcb0 	bl	800552c <USB_ReadPMA>
 8001bcc:	e07c      	b.n	8001cc8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	3306      	adds	r3, #6
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	8b7b      	ldrh	r3, [r7, #26]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d306      	bcc.n	8001c10 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	8b7b      	ldrh	r3, [r7, #26]
 8001c08:	1ad2      	subs	r2, r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	e002      	b.n	8001c16 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d123      	bne.n	8001c66 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c38:	83fb      	strh	r3, [r7, #30]
 8001c3a:	8bfb      	ldrh	r3, [r7, #30]
 8001c3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c40:	83fb      	strh	r3, [r7, #30]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	441a      	add	r2, r3
 8001c50:	8bfb      	ldrh	r3, [r7, #30]
 8001c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c8a:	83bb      	strh	r3, [r7, #28]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	441a      	add	r2, r3
 8001c9a:	8bbb      	ldrh	r3, [r7, #28]
 8001c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ca8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cb0:	8b7b      	ldrh	r3, [r7, #26]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	6959      	ldr	r1, [r3, #20]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	895a      	ldrh	r2, [r3, #10]
 8001cc2:	8b7b      	ldrh	r3, [r7, #26]
 8001cc4:	f003 fc32 	bl	800552c <USB_ReadPMA>
    }
  }

  return count;
 8001cc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b0a4      	sub	sp, #144	@ 0x90
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 81dd 	beq.w	80020a6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	3302      	adds	r3, #2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d14:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d907      	bls.n	8001d34 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	619a      	str	r2, [r3, #24]
 8001d32:	e002      	b.n	8001d3a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 80b9 	bne.w	8001eb6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d126      	bne.n	8001d9a <HAL_PCD_EP_DB_Transmit+0xc8>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d60:	4413      	add	r3, r2
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	011a      	lsls	r2, r3, #4
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d96:	801a      	strh	r2, [r3, #0]
 8001d98:	e01a      	b.n	8001dd0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d116      	bne.n	8001dd0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db6:	4413      	add	r3, r2
 8001db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	011a      	lsls	r2, r3, #4
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d126      	bne.n	8001e2c <HAL_PCD_EP_DB_Transmit+0x15a>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	011a      	lsls	r2, r3, #4
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	e017      	b.n	8001e5c <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d113      	bne.n	8001e5c <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	4413      	add	r3, r2
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	011a      	lsls	r2, r3, #4
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	4413      	add	r3, r2
 8001e50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f006 f863 	bl	8007f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 82fc 	beq.w	800246c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8e:	82fb      	strh	r3, [r7, #22]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	441a      	add	r2, r3
 8001e9e:	8afb      	ldrh	r3, [r7, #22]
 8001ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ea8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	8013      	strh	r3, [r2, #0]
 8001eb4:	e2da      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d021      	beq.n	8001f04 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eda:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	441a      	add	r2, r3
 8001eec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	f040 82ae 	bne.w	800246c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f18:	441a      	add	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f26:	441a      	add	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d30b      	bcc.n	8001f50 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f48:	1ad2      	subs	r2, r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	621a      	str	r2, [r3, #32]
 8001f4e:	e017      	b.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d108      	bne.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001f58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001f68:	e00a      	b.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d165      	bne.n	8002054 <HAL_PCD_EP_DB_Transmit+0x382>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f9c:	4413      	add	r3, r2
 8001f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	011a      	lsls	r2, r3, #4
 8001fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa8:	4413      	add	r3, r2
 8001faa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001fae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbe:	801a      	strh	r2, [r3, #0]
 8001fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fc6:	d91d      	bls.n	8002004 <HAL_PCD_EP_DB_Transmit+0x332>
 8001fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0x310>
 8001fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	029b      	lsls	r3, r3, #10
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	e044      	b.n	800208e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <HAL_PCD_EP_DB_Transmit+0x350>
 800200c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201a:	b29a      	uxth	r2, r3
 800201c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201e:	801a      	strh	r2, [r3, #0]
 8002020:	e035      	b.n	800208e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800202a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002038:	3301      	adds	r3, #1
 800203a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29a      	uxth	r2, r3
 8002042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002044:	b29b      	uxth	r3, r3
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	b29b      	uxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b29a      	uxth	r2, r3
 800204e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	e01c      	b.n	800208e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d118      	bne.n	800208e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	647b      	str	r3, [r7, #68]	@ 0x44
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002070:	4413      	add	r3, r2
 8002072:	647b      	str	r3, [r7, #68]	@ 0x44
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	011a      	lsls	r2, r3, #4
 800207a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207c:	4413      	add	r3, r2
 800207e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002082:	643b      	str	r3, [r7, #64]	@ 0x40
 8002084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002088:	b29a      	uxth	r2, r3
 800208a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800208c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	6959      	ldr	r1, [r3, #20]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	891a      	ldrh	r2, [r3, #8]
 800209a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f003 f9ff 	bl	80054a2 <USB_WritePMA>
 80020a4:	e1e2      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	3306      	adds	r3, #6
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ce:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020da:	429a      	cmp	r2, r3
 80020dc:	d307      	bcc.n	80020ee <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020e6:	1ad2      	subs	r2, r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	619a      	str	r2, [r3, #24]
 80020ec:	e002      	b.n	80020f4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 80c0 	bne.w	800227e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d126      	bne.n	8002154 <HAL_PCD_EP_DB_Transmit+0x482>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800211a:	4413      	add	r3, r2
 800211c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	011a      	lsls	r2, r3, #4
 8002124:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002126:	4413      	add	r3, r2
 8002128:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800212c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800212e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002138:	b29a      	uxth	r2, r3
 800213a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800213c:	801a      	strh	r2, [r3, #0]
 800213e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800214c:	b29a      	uxth	r2, r3
 800214e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	e01a      	b.n	800218a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d116      	bne.n	800218a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	667b      	str	r3, [r7, #100]	@ 0x64
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002170:	4413      	add	r3, r2
 8002172:	667b      	str	r3, [r7, #100]	@ 0x64
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	011a      	lsls	r2, r3, #4
 800217a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800217c:	4413      	add	r3, r2
 800217e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002182:	663b      	str	r3, [r7, #96]	@ 0x60
 8002184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002186:	2200      	movs	r2, #0
 8002188:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d12b      	bne.n	80021f0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ac:	4413      	add	r3, r2
 80021ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	011a      	lsls	r2, r3, #4
 80021b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b8:	4413      	add	r3, r2
 80021ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	e017      	b.n	8002220 <HAL_PCD_EP_DB_Transmit+0x54e>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d113      	bne.n	8002220 <HAL_PCD_EP_DB_Transmit+0x54e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002200:	b29b      	uxth	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002206:	4413      	add	r3, r2
 8002208:	677b      	str	r3, [r7, #116]	@ 0x74
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	011a      	lsls	r2, r3, #4
 8002210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002212:	4413      	add	r3, r2
 8002214:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002218:	673b      	str	r3, [r7, #112]	@ 0x70
 800221a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800221c:	2200      	movs	r2, #0
 800221e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f005 fe81 	bl	8007f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 811a 	bne.w	800246c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800224e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002252:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]
 800227c:	e0f6      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d121      	bne.n	80022cc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800229e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	441a      	add	r2, r3
 80022b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80022b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 80ca 	bne.w	800246c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022e0:	441a      	add	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022ee:	441a      	add	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d30b      	bcc.n	8002318 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002310:	1ad2      	subs	r2, r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	621a      	str	r2, [r3, #32]
 8002316:	e017      	b.n	8002348 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d108      	bne.n	8002332 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002320:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002324:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002330:	e00a      	b.n	8002348 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	657b      	str	r3, [r7, #84]	@ 0x54
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	785b      	ldrb	r3, [r3, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d165      	bne.n	8002422 <HAL_PCD_EP_DB_Transmit+0x750>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800236a:	4413      	add	r3, r2
 800236c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	011a      	lsls	r2, r3, #4
 8002374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002376:	4413      	add	r3, r2
 8002378:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800237c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800237e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002388:	b29a      	uxth	r2, r3
 800238a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800238c:	801a      	strh	r2, [r3, #0]
 800238e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002392:	2b3e      	cmp	r3, #62	@ 0x3e
 8002394:	d91d      	bls.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x700>
 8002396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800239e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x6de>
 80023aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ac:	3b01      	subs	r3, #1
 80023ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ce:	801a      	strh	r2, [r3, #0]
 80023d0:	e041      	b.n	8002456 <HAL_PCD_EP_DB_Transmit+0x784>
 80023d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <HAL_PCD_EP_DB_Transmit+0x71e>
 80023da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	e032      	b.n	8002456 <HAL_PCD_EP_DB_Transmit+0x784>
 80023f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_PCD_EP_DB_Transmit+0x738>
 8002404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002406:	3301      	adds	r3, #1
 8002408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800240a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29a      	uxth	r2, r3
 8002410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002412:	b29b      	uxth	r3, r3
 8002414:	029b      	lsls	r3, r3, #10
 8002416:	b29b      	uxth	r3, r3
 8002418:	4313      	orrs	r3, r2
 800241a:	b29a      	uxth	r2, r3
 800241c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	e019      	b.n	8002456 <HAL_PCD_EP_DB_Transmit+0x784>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d115      	bne.n	8002456 <HAL_PCD_EP_DB_Transmit+0x784>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002438:	4413      	add	r3, r2
 800243a:	657b      	str	r3, [r7, #84]	@ 0x54
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	011a      	lsls	r2, r3, #4
 8002442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002444:	4413      	add	r3, r2
 8002446:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800244a:	653b      	str	r3, [r7, #80]	@ 0x50
 800244c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002450:	b29a      	uxth	r2, r3
 8002452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002454:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6959      	ldr	r1, [r3, #20]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	895a      	ldrh	r2, [r3, #10]
 8002462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002466:	b29b      	uxth	r3, r3
 8002468:	f003 f81b 	bl	80054a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002486:	82bb      	strh	r3, [r7, #20]
 8002488:	8abb      	ldrh	r3, [r7, #20]
 800248a:	f083 0310 	eor.w	r3, r3, #16
 800248e:	82bb      	strh	r3, [r7, #20]
 8002490:	8abb      	ldrh	r3, [r7, #20]
 8002492:	f083 0320 	eor.w	r3, r3, #32
 8002496:	82bb      	strh	r3, [r7, #20]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	441a      	add	r2, r3
 80024a6:	8abb      	ldrh	r3, [r7, #20]
 80024a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3790      	adds	r7, #144	@ 0x90
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b087      	sub	sp, #28
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	817b      	strh	r3, [r7, #10]
 80024d4:	4613      	mov	r3, r2
 80024d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80024d8:	897b      	ldrh	r3, [r7, #10]
 80024da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e4:	897b      	ldrh	r3, [r7, #10]
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	3310      	adds	r3, #16
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e009      	b.n	8002510 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024fc:	897a      	ldrh	r2, [r7, #10]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002510:	893b      	ldrh	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	b29a      	uxth	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	80da      	strh	r2, [r3, #6]
 8002524:	e00b      	b.n	800253e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2201      	movs	r2, #1
 800252a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	b29a      	uxth	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	b29a      	uxth	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e272      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8087 	beq.w	800267a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800256c:	4b92      	ldr	r3, [pc, #584]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b04      	cmp	r3, #4
 8002576:	d00c      	beq.n	8002592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002578:	4b8f      	ldr	r3, [pc, #572]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d112      	bne.n	80025aa <HAL_RCC_OscConfig+0x5e>
 8002584:	4b8c      	ldr	r3, [pc, #560]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d10b      	bne.n	80025aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002592:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d06c      	beq.n	8002678 <HAL_RCC_OscConfig+0x12c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d168      	bne.n	8002678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e24c      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x76>
 80025b4:	4b80      	ldr	r3, [pc, #512]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a7f      	ldr	r2, [pc, #508]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e02e      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b7b      	ldr	r3, [pc, #492]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7a      	ldr	r2, [pc, #488]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b78      	ldr	r3, [pc, #480]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a77      	ldr	r2, [pc, #476]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0xbc>
 80025ee:	4b72      	ldr	r3, [pc, #456]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a71      	ldr	r2, [pc, #452]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6f      	ldr	r3, [pc, #444]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6e      	ldr	r2, [pc, #440]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 8002608:	4b6b      	ldr	r3, [pc, #428]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a6a      	ldr	r2, [pc, #424]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b68      	ldr	r3, [pc, #416]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a67      	ldr	r2, [pc, #412]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fd ff4e 	bl	80004c8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fd ff4a 	bl	80004c8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	@ 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e200      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b5d      	ldr	r3, [pc, #372]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xe4>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fd ff3a 	bl	80004c8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fd ff36 	bl	80004c8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	@ 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1ec      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x10c>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002686:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002692:	4b49      	ldr	r3, [pc, #292]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x18c>
 800269e:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x176>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1c0      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b3d      	ldr	r3, [pc, #244]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4939      	ldr	r1, [pc, #228]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <HAL_RCC_OscConfig+0x270>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fd feef 	bl	80004c8 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fd feeb 	bl	80004c8 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1a1      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b2d      	ldr	r3, [pc, #180]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b2a      	ldr	r3, [pc, #168]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4927      	ldr	r1, [pc, #156]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <HAL_RCC_OscConfig+0x270>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fd fece 	bl	80004c8 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002730:	f7fd feca 	bl	80004c8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e180      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d03a      	beq.n	80027d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d019      	beq.n	8002796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_RCC_OscConfig+0x274>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fd feae 	bl	80004c8 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fd feaa 	bl	80004c8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e160      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800278e:	2001      	movs	r0, #1
 8002790:	f000 fa9c 	bl	8002ccc <RCC_Delay>
 8002794:	e01c      	b.n	80027d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002796:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <HAL_RCC_OscConfig+0x274>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fd fe94 	bl	80004c8 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a2:	e00f      	b.n	80027c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fd fe90 	bl	80004c8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d908      	bls.n	80027c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e146      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	42420000 	.word	0x42420000
 80027c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	4b92      	ldr	r3, [pc, #584]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e9      	bne.n	80027a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a6 	beq.w	800292a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b88      	ldr	r3, [pc, #544]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a87      	ldr	r2, [pc, #540]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b85      	ldr	r3, [pc, #532]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	4b82      	ldr	r3, [pc, #520]	@ (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002816:	4b7f      	ldr	r3, [pc, #508]	@ (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002822:	f7fd fe51 	bl	80004c8 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fd fe4d 	bl	80004c8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	@ 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e103      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b75      	ldr	r3, [pc, #468]	@ (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x312>
 8002850:	4b6f      	ldr	r3, [pc, #444]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a6e      	ldr	r2, [pc, #440]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e02d      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x334>
 8002866:	4b6a      	ldr	r3, [pc, #424]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a69      	ldr	r2, [pc, #420]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	4b67      	ldr	r3, [pc, #412]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a66      	ldr	r2, [pc, #408]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	e01c      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x356>
 8002888:	4b61      	ldr	r3, [pc, #388]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a60      	ldr	r2, [pc, #384]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	4b5e      	ldr	r3, [pc, #376]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a5d      	ldr	r2, [pc, #372]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 80028a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6213      	str	r3, [r2, #32]
 80028ae:	4b58      	ldr	r3, [pc, #352]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a57      	ldr	r2, [pc, #348]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d015      	beq.n	80028ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fd fe01 	bl	80004c8 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fd fdfd 	bl	80004c8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0b1      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ee      	beq.n	80028ca <HAL_RCC_OscConfig+0x37e>
 80028ec:	e014      	b.n	8002918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fd fdeb 	bl	80004c8 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fd fde7 	bl	80004c8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e09b      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290c:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a3b      	ldr	r2, [pc, #236]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8087 	beq.w	8002a42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002934:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d061      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d146      	bne.n	80029d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b33      	ldr	r3, [pc, #204]	@ (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fd fdbb 	bl	80004c8 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7fd fdb7 	bl	80004c8 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e06d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002968:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297c:	d108      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800297e:	4b24      	ldr	r3, [pc, #144]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4921      	ldr	r1, [pc, #132]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002990:	4b1f      	ldr	r3, [pc, #124]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a19      	ldr	r1, [r3, #32]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	430b      	orrs	r3, r1
 80029a2:	491b      	ldr	r1, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fd fd8b 	bl	80004c8 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fd fd87 	bl	80004c8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e03d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x46a>
 80029d4:	e035      	b.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fd fd74 	bl	80004c8 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fd fd70 	bl	80004c8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e026      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x498>
 8002a02:	e01e      	b.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e019      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_OscConfig+0x500>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d0      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b6a      	ldr	r3, [pc, #424]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b67      	ldr	r3, [pc, #412]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4965      	ldr	r1, [pc, #404]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d040      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b41      	ldr	r3, [pc, #260]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e073      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b39      	ldr	r3, [pc, #228]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4936      	ldr	r1, [pc, #216]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7fd fcc2 	bl	80004c8 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7fd fcbe 	bl	80004c8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e053      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d210      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4922      	ldr	r1, [pc, #136]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_RCC_ClockConfig+0x1cc>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_RCC_ClockConfig+0x1d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc20 	bl	8000444 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40021000 	.word	0x40021000
 8002c18:	080084d4 	.word	0x080084d4
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d002      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x30>
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x36>
 8002c52:	e027      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c56:	613b      	str	r3, [r7, #16]
      break;
 8002c58:	e027      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0c5b      	lsrs	r3, r3, #17
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	fb03 f202 	mul.w	r2, r3, r2
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e004      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	613b      	str	r3, [r7, #16]
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002caa:	693b      	ldr	r3, [r7, #16]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	007a1200 	.word	0x007a1200
 8002cc0:	080084e4 	.word	0x080084e4
 8002cc4:	080084f4 	.word	0x080084f4
 8002cc8:	003d0900 	.word	0x003d0900

08002ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <RCC_Delay+0x34>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <RCC_Delay+0x38>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0a5b      	lsrs	r3, r3, #9
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce8:	bf00      	nop
  }
  while (Delay --);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	60fa      	str	r2, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <RCC_Delay+0x1c>
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000000 	.word	0x20000000
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d07d      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d28:	4b4f      	ldr	r3, [pc, #316]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b4c      	ldr	r3, [pc, #304]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a4b      	ldr	r2, [pc, #300]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	61d3      	str	r3, [r2, #28]
 8002d40:	4b49      	ldr	r3, [pc, #292]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b46      	ldr	r3, [pc, #280]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d118      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5c:	4b43      	ldr	r3, [pc, #268]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a42      	ldr	r2, [pc, #264]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d68:	f7fd fbae 	bl	80004c8 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	e008      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fd fbaa 	bl	80004c8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e06d      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b3a      	ldr	r3, [pc, #232]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d8e:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02e      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d027      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dac:	4b2e      	ldr	r3, [pc, #184]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dc2:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d014      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fd fb79 	bl	80004c8 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fd fb75 	bl	80004c8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e036      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4917      	ldr	r1, [pc, #92]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a13      	ldr	r2, [pc, #76]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	490b      	ldr	r1, [pc, #44]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4904      	ldr	r1, [pc, #16]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42420440 	.word	0x42420440

08002e74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4638      	mov	r0, r7
 8002e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e9e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002ea2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ec2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002ec6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	4638      	mov	r0, r7
 8002f10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
	...

08002f6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b09d      	sub	sp, #116	@ 0x74
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f92:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	78db      	ldrb	r3, [r3, #3]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d81f      	bhi.n	8002fde <USB_ActivateEndpoint+0x72>
 8002f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <USB_ActivateEndpoint+0x38>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fd1 	.word	0x08002fd1
 8002fac:	08002fe7 	.word	0x08002fe7
 8002fb0:	08002fc3 	.word	0x08002fc3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002fb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002fb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002fc0:	e012      	b.n	8002fe8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002fc2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002fc6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002fca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002fce:	e00b      	b.n	8002fe8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002fd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002fd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002fdc:	e004      	b.n	8002fe8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8002fe4:	e000      	b.n	8002fe8 <USB_ActivateEndpoint+0x7c>
      break;
 8002fe6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003006:	b29b      	uxth	r3, r3
 8003008:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800301c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003020:	b29b      	uxth	r3, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800303a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800303e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	7b1b      	ldrb	r3, [r3, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 8178 	bne.w	8003348 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	785b      	ldrb	r3, [r3, #1]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8084 	beq.w	800316a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800306c:	b29b      	uxth	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4413      	add	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	011a      	lsls	r2, r3, #4
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	88db      	ldrh	r3, [r3, #6]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	b29b      	uxth	r3, r3
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	827b      	strh	r3, [r7, #18]
 80030a4:	8a7b      	ldrh	r3, [r7, #18]
 80030a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01b      	beq.n	80030e6 <USB_ActivateEndpoint+0x17a>
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c4:	823b      	strh	r3, [r7, #16]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	8a3b      	ldrh	r3, [r7, #16]
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	78db      	ldrb	r3, [r3, #3]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d020      	beq.n	8003130 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003104:	81bb      	strh	r3, [r7, #12]
 8003106:	89bb      	ldrh	r3, [r7, #12]
 8003108:	f083 0320 	eor.w	r3, r3, #32
 800310c:	81bb      	strh	r3, [r7, #12]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	89bb      	ldrh	r3, [r7, #12]
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
 800312e:	e2d5      	b.n	80036dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003146:	81fb      	strh	r3, [r7, #14]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	89fb      	ldrh	r3, [r7, #14]
 8003154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800315c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003164:	b29b      	uxth	r3, r3
 8003166:	8013      	strh	r3, [r2, #0]
 8003168:	e2b8      	b.n	80036dc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	633b      	str	r3, [r7, #48]	@ 0x30
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	4413      	add	r3, r2
 800317c:	633b      	str	r3, [r7, #48]	@ 0x30
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	011a      	lsls	r2, r3, #4
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	4413      	add	r3, r2
 8003188:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800318c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	88db      	ldrh	r3, [r3, #6]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	4413      	add	r3, r2
 80031b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	011a      	lsls	r2, r3, #4
 80031b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ba:	4413      	add	r3, r2
 80031bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80031d8:	d91d      	bls.n	8003216 <USB_ActivateEndpoint+0x2aa>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <USB_ActivateEndpoint+0x288>
 80031ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031f0:	3b01      	subs	r3, #1
 80031f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	029b      	lsls	r3, r3, #10
 8003200:	b29b      	uxth	r3, r3
 8003202:	4313      	orrs	r3, r2
 8003204:	b29b      	uxth	r3, r3
 8003206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800320e:	b29a      	uxth	r2, r3
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	e026      	b.n	8003264 <USB_ActivateEndpoint+0x2f8>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <USB_ActivateEndpoint+0x2c8>
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322c:	b29a      	uxth	r2, r3
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	e017      	b.n	8003264 <USB_ActivateEndpoint+0x2f8>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <USB_ActivateEndpoint+0x2e2>
 8003248:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800324a:	3301      	adds	r3, #1
 800324c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29a      	uxth	r2, r3
 8003254:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003256:	b29b      	uxth	r3, r3
 8003258:	029b      	lsls	r3, r3, #10
 800325a:	b29b      	uxth	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b29a      	uxth	r2, r3
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003272:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <USB_ActivateEndpoint+0x348>
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800328e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003292:	843b      	strh	r3, [r7, #32]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	8c3b      	ldrh	r3, [r7, #32]
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d124      	bne.n	8003306 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d2:	83bb      	strh	r3, [r7, #28]
 80032d4:	8bbb      	ldrh	r3, [r7, #28]
 80032d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80032da:	83bb      	strh	r3, [r7, #28]
 80032dc:	8bbb      	ldrh	r3, [r7, #28]
 80032de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032e2:	83bb      	strh	r3, [r7, #28]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	8bbb      	ldrh	r3, [r7, #28]
 80032f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003300:	b29b      	uxth	r3, r3
 8003302:	8013      	strh	r3, [r2, #0]
 8003304:	e1ea      	b.n	80036dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800331c:	83fb      	strh	r3, [r7, #30]
 800331e:	8bfb      	ldrh	r3, [r7, #30]
 8003320:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003324:	83fb      	strh	r3, [r7, #30]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	441a      	add	r2, r3
 8003330:	8bfb      	ldrh	r3, [r7, #30]
 8003332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800333a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800333e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003342:	b29b      	uxth	r3, r3
 8003344:	8013      	strh	r3, [r2, #0]
 8003346:	e1c9      	b.n	80036dc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	78db      	ldrb	r3, [r3, #3]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d11e      	bne.n	800338e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003366:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800337c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003380:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003388:	b29b      	uxth	r3, r3
 800338a:	8013      	strh	r3, [r2, #0]
 800338c:	e01d      	b.n	80033ca <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80033a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80033b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033da:	4413      	add	r3, r2
 80033dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	011a      	lsls	r2, r3, #4
 80033e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	891b      	ldrh	r3, [r3, #8]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	657b      	str	r3, [r7, #84]	@ 0x54
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340e:	4413      	add	r3, r2
 8003410:	657b      	str	r3, [r7, #84]	@ 0x54
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	011a      	lsls	r2, r3, #4
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	4413      	add	r3, r2
 800341c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003420:	653b      	str	r3, [r7, #80]	@ 0x50
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	895b      	ldrh	r3, [r3, #10]
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	b29b      	uxth	r3, r3
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003430:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 8093 	bne.w	8003562 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800344c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01b      	beq.n	8003490 <USB_ActivateEndpoint+0x524>
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800346a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800347c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003484:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800348c:	b29b      	uxth	r3, r3
 800348e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800349e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80034a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <USB_ActivateEndpoint+0x574>
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034be:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80034f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80034fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003500:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003502:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003506:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800351c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003524:	b29b      	uxth	r3, r3
 8003526:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800353e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800354c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355c:	b29b      	uxth	r3, r3
 800355e:	8013      	strh	r3, [r2, #0]
 8003560:	e0bc      	b.n	80036dc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01d      	beq.n	80035ba <USB_ActivateEndpoint+0x64e>
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003594:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80035a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80035ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01d      	beq.n	8003612 <USB_ActivateEndpoint+0x6a6>
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80035fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800360a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800360e:	b29b      	uxth	r3, r3
 8003610:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	78db      	ldrb	r3, [r3, #3]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d024      	beq.n	8003664 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800362c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003630:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003634:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003638:	f083 0320 	eor.w	r3, r3, #32
 800363c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	441a      	add	r2, r3
 800364a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800365a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]
 8003662:	e01d      	b.n	80036a0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800367a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	441a      	add	r2, r3
 8003688:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800368c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80036c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d8:	b29b      	uxth	r3, r3
 80036da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80036dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3774      	adds	r7, #116	@ 0x74
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b08d      	sub	sp, #52	@ 0x34
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	7b1b      	ldrb	r3, [r3, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 808e 	bne.w	800381c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d044      	beq.n	8003792 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	81bb      	strh	r3, [r7, #12]
 8003716:	89bb      	ldrh	r3, [r7, #12]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <USB_DeactivateEndpoint+0x6c>
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003736:	817b      	strh	r3, [r7, #10]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800374c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003750:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800376a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376e:	813b      	strh	r3, [r7, #8]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	893b      	ldrh	r3, [r7, #8]
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
 8003790:	e192      	b.n	8003ab8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	827b      	strh	r3, [r7, #18]
 80037a0:	8a7b      	ldrh	r3, [r7, #18]
 80037a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01b      	beq.n	80037e2 <USB_DeactivateEndpoint+0xf6>
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c0:	823b      	strh	r3, [r7, #16]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	8a3b      	ldrh	r3, [r7, #16]
 80037ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037de:	b29b      	uxth	r3, r3
 80037e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f8:	81fb      	strh	r3, [r7, #14]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	441a      	add	r2, r3
 8003804:	89fb      	ldrh	r3, [r7, #14]
 8003806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800380a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800380e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003816:	b29b      	uxth	r3, r3
 8003818:	8013      	strh	r3, [r2, #0]
 800381a:	e14d      	b.n	8003ab8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 80a5 	bne.w	8003970 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	843b      	strh	r3, [r7, #32]
 8003834:	8c3b      	ldrh	r3, [r7, #32]
 8003836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01b      	beq.n	8003876 <USB_DeactivateEndpoint+0x18a>
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003854:	83fb      	strh	r3, [r7, #30]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	441a      	add	r2, r3
 8003860:	8bfb      	ldrh	r3, [r7, #30]
 8003862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800386a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800386e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003872:	b29b      	uxth	r3, r3
 8003874:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	83bb      	strh	r3, [r7, #28]
 8003884:	8bbb      	ldrh	r3, [r7, #28]
 8003886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <USB_DeactivateEndpoint+0x1da>
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a4:	837b      	strh	r3, [r7, #26]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	8b7b      	ldrh	r3, [r7, #26]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038dc:	833b      	strh	r3, [r7, #24]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	441a      	add	r2, r3
 80038e8:	8b3b      	ldrh	r3, [r7, #24]
 80038ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003914:	82fb      	strh	r3, [r7, #22]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	8afb      	ldrh	r3, [r7, #22]
 8003922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800392a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394c:	82bb      	strh	r3, [r7, #20]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	8abb      	ldrh	r3, [r7, #20]
 800395a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800395e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800396a:	b29b      	uxth	r3, r3
 800396c:	8013      	strh	r3, [r2, #0]
 800396e:	e0a3      	b.n	8003ab8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800397e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <USB_DeactivateEndpoint+0x2d4>
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800399a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80039ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80039ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <USB_DeactivateEndpoint+0x324>
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80039fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	441a      	add	r2, r3
 8003a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a96:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3734      	adds	r7, #52	@ 0x34
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b0c2      	sub	sp, #264	@ 0x108
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ad2:	6018      	str	r0, [r3, #0]
 8003ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003adc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	785b      	ldrb	r3, [r3, #1]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	f040 86b7 	bne.w	800485e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d908      	bls.n	8003b1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b1c:	e007      	b.n	8003b2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	7b1b      	ldrb	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13a      	bne.n	8003bb4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6959      	ldr	r1, [r3, #20]
 8003b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	88da      	ldrh	r2, [r3, #6]
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003b60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003b64:	6800      	ldr	r0, [r0, #0]
 8003b66:	f001 fc9c 	bl	80054a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	011a      	lsls	r2, r3, #4
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	f000 be1f 	b.w	80047f2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	78db      	ldrb	r3, [r3, #3]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	f040 8462 	bne.w	800448a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f240 83df 	bls.w	80043a2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c34:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c50:	1ad2      	subs	r2, r2, r3
 8003c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 81c7 	beq.w	8004014 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d177      	bne.n	8003d92 <USB_EPStartXfer+0x2ce>
 8003ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	4413      	add	r3, r2
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cf4:	d921      	bls.n	8003d3a <USB_EPStartXfer+0x276>
 8003cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <USB_EPStartXfer+0x252>
 8003d0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003d10:	3b01      	subs	r3, #1
 8003d12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	029b      	lsls	r3, r3, #10
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4313      	orrs	r3, r2
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	e050      	b.n	8003ddc <USB_EPStartXfer+0x318>
 8003d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <USB_EPStartXfer+0x294>
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	e041      	b.n	8003ddc <USB_EPStartXfer+0x318>
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <USB_EPStartXfer+0x2b4>
 8003d6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003d72:	3301      	adds	r3, #1
 8003d74:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	029b      	lsls	r3, r3, #10
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	e024      	b.n	8003ddc <USB_EPStartXfer+0x318>
 8003d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d11c      	bne.n	8003ddc <USB_EPStartXfer+0x318>
 8003da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	4413      	add	r3, r2
 8003db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	011a      	lsls	r2, r3, #4
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	895b      	ldrh	r3, [r3, #10]
 8003de8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6959      	ldr	r1, [r3, #20]
 8003df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003e02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003e06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	f001 fb49 	bl	80054a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8003e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e20:	441a      	add	r2, r3
 8003e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d90f      	bls.n	8003e6a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	621a      	str	r2, [r3, #32]
 8003e68:	e00e      	b.n	8003e88 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	785b      	ldrb	r3, [r3, #1]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d177      	bne.n	8003f88 <USB_EPStartXfer+0x4c4>
 8003e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	4413      	add	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	011a      	lsls	r2, r3, #4
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eea:	d921      	bls.n	8003f30 <USB_EPStartXfer+0x46c>
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <USB_EPStartXfer+0x448>
 8003f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	029b      	lsls	r3, r3, #10
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	e056      	b.n	8003fde <USB_EPStartXfer+0x51a>
 8003f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <USB_EPStartXfer+0x48a>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	e047      	b.n	8003fde <USB_EPStartXfer+0x51a>
 8003f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <USB_EPStartXfer+0x4aa>
 8003f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	029b      	lsls	r3, r3, #10
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	e02a      	b.n	8003fde <USB_EPStartXfer+0x51a>
 8003f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d122      	bne.n	8003fde <USB_EPStartXfer+0x51a>
 8003f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	4413      	add	r3, r2
 8003fba:	623b      	str	r3, [r7, #32]
 8003fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	011a      	lsls	r2, r3, #4
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	891b      	ldrh	r3, [r3, #8]
 8003fea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6959      	ldr	r1, [r3, #20]
 8003ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004004:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004008:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800400c:	6800      	ldr	r0, [r0, #0]
 800400e:	f001 fa48 	bl	80054a2 <USB_WritePMA>
 8004012:	e3ee      	b.n	80047f2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d177      	bne.n	8004114 <USB_EPStartXfer+0x650>
 8004024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004034:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004044:	4413      	add	r3, r2
 8004046:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800404c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	011a      	lsls	r2, r3, #4
 8004056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004058:	4413      	add	r3, r2
 800405a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800405e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406a:	b29a      	uxth	r2, r3
 800406c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004074:	2b3e      	cmp	r3, #62	@ 0x3e
 8004076:	d921      	bls.n	80040bc <USB_EPStartXfer+0x5f8>
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <USB_EPStartXfer+0x5d4>
 800408e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004092:	3b01      	subs	r3, #1
 8004094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29a      	uxth	r2, r3
 800409e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	029b      	lsls	r3, r3, #10
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4313      	orrs	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	e056      	b.n	800416a <USB_EPStartXfer+0x6a6>
 80040bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <USB_EPStartXfer+0x616>
 80040c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	e047      	b.n	800416a <USB_EPStartXfer+0x6a6>
 80040da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <USB_EPStartXfer+0x636>
 80040f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040f4:	3301      	adds	r3, #1
 80040f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80040fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004104:	b29b      	uxth	r3, r3
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	b29b      	uxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b29a      	uxth	r2, r3
 800410e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	e02a      	b.n	800416a <USB_EPStartXfer+0x6a6>
 8004114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d122      	bne.n	800416a <USB_EPStartXfer+0x6a6>
 8004124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004144:	4413      	add	r3, r2
 8004146:	653b      	str	r3, [r7, #80]	@ 0x50
 8004148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800414c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	011a      	lsls	r2, r3, #4
 8004156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004158:	4413      	add	r3, r2
 800415a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800415e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004164:	b29a      	uxth	r2, r3
 8004166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004168:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800416a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800416e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	891b      	ldrh	r3, [r3, #8]
 8004176:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800417a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800417e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6959      	ldr	r1, [r3, #20]
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418a:	b29b      	uxth	r3, r3
 800418c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004190:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004194:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004198:	6800      	ldr	r0, [r0, #0]
 800419a:	f001 f982 	bl	80054a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800419e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ae:	441a      	add	r2, r3
 80041b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80041bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d90f      	bls.n	80041f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80041d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e8:	1ad2      	subs	r2, r2, r3
 80041ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	621a      	str	r2, [r3, #32]
 80041f6:	e00e      	b.n	8004216 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80041f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800420c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800421a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	643b      	str	r3, [r7, #64]	@ 0x40
 8004222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	785b      	ldrb	r3, [r3, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d177      	bne.n	8004322 <USB_EPStartXfer+0x85e>
 8004232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800423e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800424c:	b29b      	uxth	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004252:	4413      	add	r3, r2
 8004254:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800425a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	011a      	lsls	r2, r3, #4
 8004264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004266:	4413      	add	r3, r2
 8004268:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
 800426e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004278:	b29a      	uxth	r2, r3
 800427a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004282:	2b3e      	cmp	r3, #62	@ 0x3e
 8004284:	d921      	bls.n	80042ca <USB_EPStartXfer+0x806>
 8004286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <USB_EPStartXfer+0x7e2>
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	3b01      	subs	r3, #1
 80042a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80042a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	e050      	b.n	800436c <USB_EPStartXfer+0x8a8>
 80042ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <USB_EPStartXfer+0x824>
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	801a      	strh	r2, [r3, #0]
 80042e6:	e041      	b.n	800436c <USB_EPStartXfer+0x8a8>
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80042f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <USB_EPStartXfer+0x844>
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004302:	3301      	adds	r3, #1
 8004304:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29a      	uxth	r2, r3
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	b29b      	uxth	r3, r3
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	b29b      	uxth	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	b29a      	uxth	r2, r3
 800431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	e024      	b.n	800436c <USB_EPStartXfer+0x8a8>
 8004322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d11c      	bne.n	800436c <USB_EPStartXfer+0x8a8>
 8004332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004346:	4413      	add	r3, r2
 8004348:	643b      	str	r3, [r7, #64]	@ 0x40
 800434a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800434e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	011a      	lsls	r2, r3, #4
 8004358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800435a:	4413      	add	r3, r2
 800435c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004366:	b29a      	uxth	r2, r3
 8004368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800436c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	895b      	ldrh	r3, [r3, #10]
 8004378:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800437c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6959      	ldr	r1, [r3, #20]
 8004388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800438c:	b29b      	uxth	r3, r3
 800438e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004392:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004396:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	f001 f881 	bl	80054a2 <USB_WritePMA>
 80043a0:	e227      	b.n	80047f2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80043a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80043b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80043d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80043dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80043fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800440e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800441a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800441e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800442e:	4413      	add	r3, r2
 8004430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	011a      	lsls	r2, r3, #4
 8004440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004442:	4413      	add	r3, r2
 8004444:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004448:	65bb      	str	r3, [r7, #88]	@ 0x58
 800444a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444e:	b29a      	uxth	r2, r3
 8004450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004452:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	891b      	ldrh	r3, [r3, #8]
 8004460:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6959      	ldr	r1, [r3, #20]
 8004470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004474:	b29b      	uxth	r3, r3
 8004476:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800447a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800447e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	f001 f80d 	bl	80054a2 <USB_WritePMA>
 8004488:	e1b3      	b.n	80047f2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800448a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a1a      	ldr	r2, [r3, #32]
 8004496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449a:	1ad2      	subs	r2, r2, r3
 800449c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80c6 	beq.w	800465c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	673b      	str	r3, [r7, #112]	@ 0x70
 80044dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d177      	bne.n	80045dc <USB_EPStartXfer+0xb18>
 80044ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800450c:	4413      	add	r3, r2
 800450e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	011a      	lsls	r2, r3, #4
 800451e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004520:	4413      	add	r3, r2
 8004522:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004526:	667b      	str	r3, [r7, #100]	@ 0x64
 8004528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004532:	b29a      	uxth	r2, r3
 8004534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453c:	2b3e      	cmp	r3, #62	@ 0x3e
 800453e:	d921      	bls.n	8004584 <USB_EPStartXfer+0xac0>
 8004540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <USB_EPStartXfer+0xa9c>
 8004556:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800455a:	3b01      	subs	r3, #1
 800455c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29a      	uxth	r2, r3
 8004566:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800456a:	b29b      	uxth	r3, r3
 800456c:	029b      	lsls	r3, r3, #10
 800456e:	b29b      	uxth	r3, r3
 8004570:	4313      	orrs	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457c:	b29a      	uxth	r2, r3
 800457e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	e050      	b.n	8004626 <USB_EPStartXfer+0xb62>
 8004584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <USB_EPStartXfer+0xade>
 800458c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459a:	b29a      	uxth	r2, r3
 800459c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	e041      	b.n	8004626 <USB_EPStartXfer+0xb62>
 80045a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <USB_EPStartXfer+0xafe>
 80045b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80045bc:	3301      	adds	r3, #1
 80045be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80045c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	029b      	lsls	r3, r3, #10
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	e024      	b.n	8004626 <USB_EPStartXfer+0xb62>
 80045dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d11c      	bne.n	8004626 <USB_EPStartXfer+0xb62>
 80045ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004600:	4413      	add	r3, r2
 8004602:	673b      	str	r3, [r7, #112]	@ 0x70
 8004604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	011a      	lsls	r2, r3, #4
 8004612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004614:	4413      	add	r3, r2
 8004616:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800461a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800461c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004620:	b29a      	uxth	r2, r3
 8004622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004624:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800462a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	895b      	ldrh	r3, [r3, #10]
 8004632:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800463a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6959      	ldr	r1, [r3, #20]
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004646:	b29b      	uxth	r3, r3
 8004648:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800464c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004650:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004654:	6800      	ldr	r0, [r0, #0]
 8004656:	f000 ff24 	bl	80054a2 <USB_WritePMA>
 800465a:	e0ca      	b.n	80047f2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800465c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d177      	bne.n	800475c <USB_EPStartXfer+0xc98>
 800466c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800467c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800468c:	4413      	add	r3, r2
 800468e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	011a      	lsls	r2, r3, #4
 800469e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046a0:	4413      	add	r3, r2
 80046a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80046a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80046be:	d921      	bls.n	8004704 <USB_EPStartXfer+0xc40>
 80046c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80046ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <USB_EPStartXfer+0xc1c>
 80046d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80046da:	3b01      	subs	r3, #1
 80046dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80046e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	029b      	lsls	r3, r3, #10
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	e05c      	b.n	80047be <USB_EPStartXfer+0xcfa>
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <USB_EPStartXfer+0xc5e>
 800470c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471a:	b29a      	uxth	r2, r3
 800471c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	e04d      	b.n	80047be <USB_EPStartXfer+0xcfa>
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <USB_EPStartXfer+0xc7e>
 8004738:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800473c:	3301      	adds	r3, #1
 800473e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004742:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29a      	uxth	r2, r3
 8004748:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29b      	uxth	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b29a      	uxth	r2, r3
 8004756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	e030      	b.n	80047be <USB_EPStartXfer+0xcfa>
 800475c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d128      	bne.n	80047be <USB_EPStartXfer+0xcfa>
 800476c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800477a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800477e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004790:	4413      	add	r3, r2
 8004792:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800479a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	011a      	lsls	r2, r3, #4
 80047a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047a8:	4413      	add	r3, r2
 80047aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80047be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	891b      	ldrh	r3, [r3, #8]
 80047ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6959      	ldr	r1, [r3, #20]
 80047da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80047e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80047e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80047ec:	6800      	ldr	r0, [r0, #0]
 80047ee:	f000 fe58 	bl	80054a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80047f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004818:	817b      	strh	r3, [r7, #10]
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	f083 0310 	eor.w	r3, r3, #16
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	f083 0320 	eor.w	r3, r3, #32
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800482e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	897b      	ldrh	r3, [r7, #10]
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]
 800485a:	f000 bcde 	b.w	800521a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800485e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	7b1b      	ldrb	r3, [r3, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f040 80bb 	bne.w	80049e6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d917      	bls.n	80048bc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800488c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800489c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ac:	1ad2      	subs	r2, r2, r3
 80048ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	619a      	str	r2, [r3, #24]
 80048ba:	e00e      	b.n	80048da <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80048bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80048cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80048da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048fe:	4413      	add	r3, r2
 8004900:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	011a      	lsls	r2, r3, #4
 8004912:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004916:	4413      	add	r3, r2
 8004918:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800491c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004920:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800492c:	b29a      	uxth	r2, r3
 800492e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004938:	2b3e      	cmp	r3, #62	@ 0x3e
 800493a:	d924      	bls.n	8004986 <USB_EPStartXfer+0xec2>
 800493c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <USB_EPStartXfer+0xe98>
 8004952:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004956:	3b01      	subs	r3, #1
 8004958:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800495c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29a      	uxth	r2, r3
 8004964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004968:	b29b      	uxth	r3, r3
 800496a:	029b      	lsls	r3, r3, #10
 800496c:	b29b      	uxth	r3, r3
 800496e:	4313      	orrs	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497a:	b29a      	uxth	r2, r3
 800497c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	f000 bc10 	b.w	80051a6 <USB_EPStartXfer+0x16e2>
 8004986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10c      	bne.n	80049a8 <USB_EPStartXfer+0xee4>
 800498e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800499a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499e:	b29a      	uxth	r2, r3
 80049a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e3fe      	b.n	80051a6 <USB_EPStartXfer+0x16e2>
 80049a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <USB_EPStartXfer+0xf04>
 80049be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80049c2:	3301      	adds	r3, #1
 80049c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	029b      	lsls	r3, r3, #10
 80049d8:	b29b      	uxth	r3, r3
 80049da:	4313      	orrs	r3, r2
 80049dc:	b29a      	uxth	r2, r3
 80049de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e2:	801a      	strh	r2, [r3, #0]
 80049e4:	e3df      	b.n	80051a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80049e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	78db      	ldrb	r3, [r3, #3]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	f040 8218 	bne.w	8004e28 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80049f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 809d 	bne.w	8004b44 <USB_EPStartXfer+0x1080>
 8004a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a2e:	4413      	add	r3, r2
 8004a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	011a      	lsls	r2, r3, #4
 8004a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a46:	4413      	add	r3, r2
 8004a48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a62:	801a      	strh	r2, [r3, #0]
 8004a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a72:	d92b      	bls.n	8004acc <USB_EPStartXfer+0x1008>
 8004a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <USB_EPStartXfer+0xfe0>
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004aa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	029b      	lsls	r3, r3, #10
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	e070      	b.n	8004bae <USB_EPStartXfer+0x10ea>
 8004acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10c      	bne.n	8004af6 <USB_EPStartXfer+0x1032>
 8004adc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	e05b      	b.n	8004bae <USB_EPStartXfer+0x10ea>
 8004af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <USB_EPStartXfer+0x1062>
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b20:	3301      	adds	r3, #1
 8004b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e034      	b.n	8004bae <USB_EPStartXfer+0x10ea>
 8004b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d12c      	bne.n	8004bae <USB_EPStartXfer+0x10ea>
 8004b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b78:	4413      	add	r3, r2
 8004b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	011a      	lsls	r2, r3, #4
 8004b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 809d 	bne.w	8004d08 <USB_EPStartXfer+0x1244>
 8004bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	011a      	lsls	r2, r3, #4
 8004c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c36:	d92b      	bls.n	8004c90 <USB_EPStartXfer+0x11cc>
 8004c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <USB_EPStartXfer+0x11a4>
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c62:	3b01      	subs	r3, #1
 8004c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	029b      	lsls	r3, r3, #10
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	e069      	b.n	8004d64 <USB_EPStartXfer+0x12a0>
 8004c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10c      	bne.n	8004cba <USB_EPStartXfer+0x11f6>
 8004ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	e054      	b.n	8004d64 <USB_EPStartXfer+0x12a0>
 8004cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <USB_EPStartXfer+0x1226>
 8004ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d04:	801a      	strh	r2, [r3, #0]
 8004d06:	e02d      	b.n	8004d64 <USB_EPStartXfer+0x12a0>
 8004d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d125      	bne.n	8004d64 <USB_EPStartXfer+0x12a0>
 8004d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d2e:	4413      	add	r3, r2
 8004d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	011a      	lsls	r2, r3, #4
 8004d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d46:	4413      	add	r3, r2
 8004d48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d62:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8218 	beq.w	80051a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004d96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <USB_EPStartXfer+0x12ea>
 8004da2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004dae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 81f5 	bne.w	80051a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004dbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 81ee 	bne.w	80051a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
 8004e26:	e1be      	b.n	80051a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	78db      	ldrb	r3, [r3, #3]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	f040 81b4 	bne.w	80051a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d917      	bls.n	8004e86 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	619a      	str	r2, [r3, #24]
 8004e84:	e00e      	b.n	8004ea4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f040 8085 	bne.w	8004fc0 <USB_EPStartXfer+0x14fc>
 8004eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eda:	4413      	add	r3, r2
 8004edc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004efc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f14:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f16:	d923      	bls.n	8004f60 <USB_EPStartXfer+0x149c>
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <USB_EPStartXfer+0x1474>
 8004f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f32:	3b01      	subs	r3, #1
 8004f34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	e060      	b.n	8005022 <USB_EPStartXfer+0x155e>
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10c      	bne.n	8004f82 <USB_EPStartXfer+0x14be>
 8004f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e04f      	b.n	8005022 <USB_EPStartXfer+0x155e>
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <USB_EPStartXfer+0x14de>
 8004f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e030      	b.n	8005022 <USB_EPStartXfer+0x155e>
 8004fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d128      	bne.n	8005022 <USB_EPStartXfer+0x155e>
 8004fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	011a      	lsls	r2, r3, #4
 8005008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800500c:	4413      	add	r3, r2
 800500e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005012:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501a:	b29a      	uxth	r2, r3
 800501c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 8085 	bne.w	800514c <USB_EPStartXfer+0x1688>
 8005042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005066:	4413      	add	r3, r2
 8005068:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800506c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	011a      	lsls	r2, r3, #4
 800507a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800507e:	4413      	add	r3, r2
 8005080:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80050a2:	d923      	bls.n	80050ec <USB_EPStartXfer+0x1628>
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <USB_EPStartXfer+0x1600>
 80050ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050be:	3b01      	subs	r3, #1
 80050c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	029b      	lsls	r3, r3, #10
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050e8:	801a      	strh	r2, [r3, #0]
 80050ea:	e05c      	b.n	80051a6 <USB_EPStartXfer+0x16e2>
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10c      	bne.n	800510e <USB_EPStartXfer+0x164a>
 80050f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005104:	b29a      	uxth	r2, r3
 8005106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e04b      	b.n	80051a6 <USB_EPStartXfer+0x16e2>
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <USB_EPStartXfer+0x166a>
 8005124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005128:	3301      	adds	r3, #1
 800512a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800512e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29a      	uxth	r2, r3
 8005136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800513a:	b29b      	uxth	r3, r3
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	b29b      	uxth	r3, r3
 8005140:	4313      	orrs	r3, r2
 8005142:	b29a      	uxth	r2, r3
 8005144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e02c      	b.n	80051a6 <USB_EPStartXfer+0x16e2>
 800514c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d124      	bne.n	80051a6 <USB_EPStartXfer+0x16e2>
 800515c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005172:	4413      	add	r3, r2
 8005174:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800517c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	011a      	lsls	r2, r3, #4
 8005186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800518a:	4413      	add	r3, r2
 800518c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005198:	b29a      	uxth	r2, r3
 800519a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800519e:	801a      	strh	r2, [r3, #0]
 80051a0:	e001      	b.n	80051a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e03a      	b.n	800521c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80051d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80051d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80051d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80051dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80051e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	785b      	ldrb	r3, [r3, #1]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800524a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800524e:	81bb      	strh	r3, [r7, #12]
 8005250:	89bb      	ldrh	r3, [r7, #12]
 8005252:	f083 0310 	eor.w	r3, r3, #16
 8005256:	81bb      	strh	r3, [r7, #12]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	89bb      	ldrh	r3, [r7, #12]
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800526c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]
 8005278:	e01f      	b.n	80052ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800528c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005290:	81fb      	strh	r3, [r7, #14]
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005298:	81fb      	strh	r3, [r7, #14]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr

080052c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	7b1b      	ldrb	r3, [r3, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f040 809d 	bne.w	8005414 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d04c      	beq.n	800537c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	823b      	strh	r3, [r7, #16]
 80052f0:	8a3b      	ldrh	r3, [r7, #16]
 80052f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01b      	beq.n	8005332 <USB_EPClearStall+0x6c>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005310:	81fb      	strh	r3, [r7, #14]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	89fb      	ldrh	r3, [r7, #14]
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800532a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	78db      	ldrb	r3, [r3, #3]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d06c      	beq.n	8005414 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800534c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005350:	81bb      	strh	r3, [r7, #12]
 8005352:	89bb      	ldrh	r3, [r7, #12]
 8005354:	f083 0320 	eor.w	r3, r3, #32
 8005358:	81bb      	strh	r3, [r7, #12]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	89bb      	ldrh	r3, [r7, #12]
 8005366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800536a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800536e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005376:	b29b      	uxth	r3, r3
 8005378:	8013      	strh	r3, [r2, #0]
 800537a:	e04b      	b.n	8005414 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	82fb      	strh	r3, [r7, #22]
 800538a:	8afb      	ldrh	r3, [r7, #22]
 800538c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <USB_EPClearStall+0x106>
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053aa:	82bb      	strh	r3, [r7, #20]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	8abb      	ldrh	r3, [r7, #20]
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e2:	827b      	strh	r3, [r7, #18]
 80053e4:	8a7b      	ldrh	r3, [r7, #18]
 80053e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053ea:	827b      	strh	r3, [r7, #18]
 80053ec:	8a7b      	ldrh	r3, [r7, #18]
 80053ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053f2:	827b      	strh	r3, [r7, #18]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	8a7b      	ldrh	r3, [r7, #18]
 8005400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005410:	b29b      	uxth	r3, r3
 8005412:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d103      	bne.n	800543a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2280      	movs	r2, #128	@ 0x80
 8005436:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr

08005446 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800547c:	b29b      	uxth	r3, r3
 800547e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b08b      	sub	sp, #44	@ 0x2c
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	4611      	mov	r1, r2
 80054ae:	461a      	mov	r2, r3
 80054b0:	460b      	mov	r3, r1
 80054b2:	80fb      	strh	r3, [r7, #6]
 80054b4:	4613      	mov	r3, r2
 80054b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80054b8:	88bb      	ldrh	r3, [r7, #4]
 80054ba:	3301      	adds	r3, #1
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	005a      	lsls	r2, r3, #1
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054da:	e01e      	b.n	800551a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3301      	adds	r3, #1
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	b21a      	sxth	r2, r3
 80054ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	b21b      	sxth	r3, r3
 80054f4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	8a7a      	ldrh	r2, [r7, #18]
 80054fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	3302      	adds	r3, #2
 8005500:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	3302      	adds	r3, #2
 8005506:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	3301      	adds	r3, #1
 800550c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3301      	adds	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	3b01      	subs	r3, #1
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1dd      	bne.n	80054dc <USB_WritePMA+0x3a>
  }
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	372c      	adds	r7, #44	@ 0x2c
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800552c:	b480      	push	{r7}
 800552e:	b08b      	sub	sp, #44	@ 0x2c
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	460b      	mov	r3, r1
 800553c:	80fb      	strh	r3, [r7, #6]
 800553e:	4613      	mov	r3, r2
 8005540:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005542:	88bb      	ldrh	r3, [r7, #4]
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	005a      	lsls	r2, r3, #1
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800555e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	e01b      	b.n	800559e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	3302      	adds	r3, #2
 8005572:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	b2da      	uxtb	r2, r3
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	3302      	adds	r3, #2
 8005596:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	3b01      	subs	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e0      	bne.n	8005566 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80055a4:	88bb      	ldrh	r3, [r7, #4]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	701a      	strb	r2, [r3, #0]
  }
}
 80055c0:	bf00      	nop
 80055c2:	372c      	adds	r7, #44	@ 0x2c
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr

080055ca <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	460b      	mov	r3, r1
 80055d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	7c1b      	ldrb	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d115      	bne.n	800560a <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80055de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055e2:	2202      	movs	r2, #2
 80055e4:	2101      	movs	r1, #1
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f002 fd7b 	bl	80080e2 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80055f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055f8:	2202      	movs	r2, #2
 80055fa:	2181      	movs	r1, #129	@ 0x81
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f002 fd70 	bl	80080e2 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005608:	e012      	b.n	8005630 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800560a:	2340      	movs	r3, #64	@ 0x40
 800560c:	2202      	movs	r2, #2
 800560e:	2101      	movs	r1, #1
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f002 fd66 	bl	80080e2 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800561e:	2340      	movs	r3, #64	@ 0x40
 8005620:	2202      	movs	r2, #2
 8005622:	2181      	movs	r1, #129	@ 0x81
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f002 fd5c 	bl	80080e2 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005630:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8005634:	f002 fe9a 	bl	800836c <USBD_static_malloc>
 8005638:	4602      	mov	r2, r0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 800564a:	2302      	movs	r3, #2
 800564c:	e003      	b.n	8005656 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9da 	bl	8005a08 <MSC_BOT_Init>

  return USBD_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800566a:	2101      	movs	r1, #1
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f002 fd5e 	bl	800812e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800567a:	2181      	movs	r1, #129	@ 0x81
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f002 fd56 	bl	800812e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa07 	bl	8005a9c <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 fe70 	bl	8008384 <USBD_static_free>
    pdev->pClassData  = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056c8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d04d      	beq.n	800577a <USBD_MSC_Setup+0xc2>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	f040 8113 	bne.w	800590a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80056ea:	d002      	beq.n	80056f2 <USBD_MSC_Setup+0x3a>
 80056ec:	2bff      	cmp	r3, #255	@ 0xff
 80056ee:	d024      	beq.n	800573a <USBD_MSC_Setup+0x82>
 80056f0:	e03b      	b.n	800576a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	885b      	ldrh	r3, [r3, #2]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d118      	bne.n	800572c <USBD_MSC_Setup+0x74>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	88db      	ldrh	r3, [r3, #6]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d114      	bne.n	800572c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005708:	2b00      	cmp	r3, #0
 800570a:	da0f      	bge.n	800572c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	4798      	blx	r3
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2201      	movs	r2, #1
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f002 f98f 	bl	8007a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800572a:	e025      	b.n	8005778 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f002 f920 	bl	8007974 <USBD_CtlError>
            ret = USBD_FAIL;
 8005734:	2302      	movs	r3, #2
 8005736:	75fb      	strb	r3, [r7, #23]
          break;
 8005738:	e01e      	b.n	8005778 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	885b      	ldrh	r3, [r3, #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10c      	bne.n	800575c <USBD_MSC_Setup+0xa4>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	88db      	ldrh	r3, [r3, #6]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d108      	bne.n	800575c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005750:	2b00      	cmp	r3, #0
 8005752:	db03      	blt.n	800575c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f987 	bl	8005a68 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800575a:	e00d      	b.n	8005778 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f002 f908 	bl	8007974 <USBD_CtlError>
            ret = USBD_FAIL;
 8005764:	2302      	movs	r3, #2
 8005766:	75fb      	strb	r3, [r7, #23]
          break;
 8005768:	e006      	b.n	8005778 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 f901 	bl	8007974 <USBD_CtlError>
          ret = USBD_FAIL;
 8005772:	2302      	movs	r3, #2
 8005774:	75fb      	strb	r3, [r7, #23]
          break;
 8005776:	bf00      	nop
      }
      break;
 8005778:	e0ce      	b.n	8005918 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	2b0b      	cmp	r3, #11
 8005780:	f200 80bb 	bhi.w	80058fa <USBD_MSC_Setup+0x242>
 8005784:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <USBD_MSC_Setup+0xd4>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	080057bd 	.word	0x080057bd
 8005790:	08005833 	.word	0x08005833
 8005794:	080058fb 	.word	0x080058fb
 8005798:	080058fb 	.word	0x080058fb
 800579c:	080058fb 	.word	0x080058fb
 80057a0:	080058fb 	.word	0x080058fb
 80057a4:	080058fb 	.word	0x080058fb
 80057a8:	080058fb 	.word	0x080058fb
 80057ac:	080058fb 	.word	0x080058fb
 80057b0:	080058fb 	.word	0x080058fb
 80057b4:	080057e5 	.word	0x080057e5
 80057b8:	0800580d 	.word	0x0800580d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80057c6:	f107 030e 	add.w	r3, r7, #14
 80057ca:	2202      	movs	r2, #2
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f002 f93a 	bl	8007a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057d4:	e098      	b.n	8005908 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f002 f8cb 	bl	8007974 <USBD_CtlError>
            ret = USBD_FAIL;
 80057de:	2302      	movs	r3, #2
 80057e0:	75fb      	strb	r3, [r7, #23]
          break;
 80057e2:	e091      	b.n	8005908 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d107      	bne.n	80057fe <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2201      	movs	r2, #1
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f002 f926 	bl	8007a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057fc:	e084      	b.n	8005908 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f002 f8b7 	bl	8007974 <USBD_CtlError>
            ret = USBD_FAIL;
 8005806:	2302      	movs	r3, #2
 8005808:	75fb      	strb	r3, [r7, #23]
          break;
 800580a:	e07d      	b.n	8005908 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005812:	2b03      	cmp	r3, #3
 8005814:	d106      	bne.n	8005824 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	885b      	ldrh	r3, [r3, #2]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005822:	e071      	b.n	8005908 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f002 f8a4 	bl	8007974 <USBD_CtlError>
            ret = USBD_FAIL;
 800582c:	2302      	movs	r3, #2
 800582e:	75fb      	strb	r3, [r7, #23]
          break;
 8005830:	e06a      	b.n	8005908 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	889b      	ldrh	r3, [r3, #4]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f002 fc96 	bl	800816c <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	889b      	ldrh	r3, [r3, #4]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f002 fc70 	bl	800812e <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	889b      	ldrh	r3, [r3, #4]
 8005852:	b25b      	sxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	da23      	bge.n	80058a0 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	889b      	ldrh	r3, [r3, #4]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 020f 	and.w	r2, r3, #15
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3318      	adds	r3, #24
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	7c1b      	ldrb	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d107      	bne.n	800588c <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800587c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005880:	2202      	movs	r2, #2
 8005882:	2181      	movs	r1, #129	@ 0x81
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f002 fc2c 	bl	80080e2 <USBD_LL_OpenEP>
 800588a:	e005      	b.n	8005898 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800588c:	2340      	movs	r3, #64	@ 0x40
 800588e:	2202      	movs	r2, #2
 8005890:	2181      	movs	r1, #129	@ 0x81
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f002 fc25 	bl	80080e2 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800589e:	e024      	b.n	80058ea <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	889b      	ldrh	r3, [r3, #4]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 020f 	and.w	r2, r3, #15
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7c1b      	ldrb	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d107      	bne.n	80058d6 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80058c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058ca:	2202      	movs	r2, #2
 80058cc:	2101      	movs	r1, #1
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f002 fc07 	bl	80080e2 <USBD_LL_OpenEP>
 80058d4:	e005      	b.n	80058e2 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80058d6:	2340      	movs	r3, #64	@ 0x40
 80058d8:	2202      	movs	r2, #2
 80058da:	2101      	movs	r1, #1
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f002 fc00 	bl	80080e2 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	889b      	ldrh	r3, [r3, #4]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa52 	bl	8005d9c <MSC_BOT_CplClrFeature>
          break;
 80058f8:	e006      	b.n	8005908 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f002 f839 	bl	8007974 <USBD_CtlError>
          ret = USBD_FAIL;
 8005902:	2302      	movs	r3, #2
 8005904:	75fb      	strb	r3, [r7, #23]
          break;
 8005906:	bf00      	nop
      }
      break;
 8005908:	e006      	b.n	8005918 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f002 f831 	bl	8007974 <USBD_CtlError>
      ret = USBD_FAIL;
 8005912:	2302      	movs	r3, #2
 8005914:	75fb      	strb	r3, [r7, #23]
      break;
 8005916:	bf00      	nop
  }

  return ret;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop

08005924 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8c1 	bl	8005abc <MSC_BOT_DataIn>

  return USBD_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8e3 	bl	8005b20 <MSC_BOT_DataOut>

  return USBD_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8005972:	4b03      	ldr	r3, [pc, #12]	@ (8005980 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000044 	.word	0x20000044

08005984 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8005992:	4b03      	ldr	r3, [pc, #12]	@ (80059a0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000064 	.word	0x20000064

080059a4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80059b2:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000084 	.word	0x20000084

080059c4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	220a      	movs	r2, #10
 80059d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80059d2:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	200000a4 	.word	0x200000a4

080059e4 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return USBD_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a16:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  hmsc->scsi_sense_head = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005a40:	2101      	movs	r1, #1
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f002 fb92 	bl	800816c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005a48:	2181      	movs	r1, #129	@ 0x81
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 fb8e 	bl	800816c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8005a56:	231f      	movs	r3, #31
 8005a58:	2101      	movs	r1, #1
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f002 fc50 	bl	8008300 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a76:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8005a8a:	231f      	movs	r3, #31
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f002 fc36 	bl	8008300 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005a94:	bf00      	nop
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aaa:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	721a      	strb	r2, [r3, #8]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ace:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	7a1b      	ldrb	r3, [r3, #8]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d005      	beq.n	8005ae4 <MSC_BOT_DataIn+0x28>
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	db1a      	blt.n	8005b12 <MSC_BOT_DataIn+0x56>
 8005adc:	3b03      	subs	r3, #3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d817      	bhi.n	8005b12 <MSC_BOT_DataIn+0x56>
 8005ae2:	e011      	b.n	8005b08 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8005af0:	461a      	mov	r2, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f97a 	bl	8005dec <SCSI_ProcessCmd>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da0b      	bge.n	8005b16 <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005afe:	2101      	movs	r1, #1
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f8f1 	bl	8005ce8 <MSC_BOT_SendCSW>
      }
      break;
 8005b06:	e006      	b.n	8005b16 <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005b08:	2100      	movs	r1, #0
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8ec 	bl	8005ce8 <MSC_BOT_SendCSW>
      break;
 8005b10:	e002      	b.n	8005b18 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <MSC_BOT_DataIn+0x5c>
      break;
 8005b16:	bf00      	nop
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b32:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	7a1b      	ldrb	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <MSC_BOT_DataOut+0x22>
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d004      	beq.n	8005b4a <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005b40:	e015      	b.n	8005b6e <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f818 	bl	8005b78 <MSC_BOT_CBW_Decode>
      break;
 8005b48:	e011      	b.n	8005b6e <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8005b56:	461a      	mov	r2, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f947 	bl	8005dec <SCSI_ProcessCmd>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da03      	bge.n	8005b6c <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005b64:	2101      	movs	r1, #1
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8be 	bl	8005ce8 <MSC_BOT_SendCSW>
      break;
 8005b6c:	bf00      	nop
  }
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b86:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f002 fbcf 	bl	8008346 <USBD_LL_GetRxDataSize>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b1f      	cmp	r3, #31
 8005bac:	d114      	bne.n	8005bd8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005bb4:	4a32      	ldr	r2, [pc, #200]	@ (8005c80 <MSC_BOT_CBW_Decode+0x108>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10e      	bne.n	8005bd8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d809      	bhi.n	8005bd8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d90e      	bls.n	8005bf6 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8005bde:	2320      	movs	r3, #32
 8005be0:	2205      	movs	r2, #5
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fc48 	bl	8006478 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2202      	movs	r2, #2
 8005bec:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f8a6 	bl	8005d40 <MSC_BOT_Abort>
 8005bf4:	e041      	b.n	8005c7a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8005c02:	461a      	mov	r2, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f8f1 	bl	8005dec <SCSI_ProcessCmd>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da0c      	bge.n	8005c2a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	7a1b      	ldrb	r3, [r3, #8]
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	d104      	bne.n	8005c22 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005c18:	2101      	movs	r1, #1
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f864 	bl	8005ce8 <MSC_BOT_SendCSW>
 8005c20:	e02b      	b.n	8005c7a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f88c 	bl	8005d40 <MSC_BOT_Abort>
 8005c28:	e027      	b.n	8005c7a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	7a1b      	ldrb	r3, [r3, #8]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d022      	beq.n	8005c78 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d01e      	beq.n	8005c78 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d01a      	beq.n	8005c78 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	895b      	ldrh	r3, [r3, #10]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f103 010c 	add.w	r1, r3, #12
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	895b      	ldrh	r3, [r3, #10]
 8005c54:	461a      	mov	r2, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f814 	bl	8005c84 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005c5c:	e00d      	b.n	8005c7a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	895b      	ldrh	r3, [r3, #10]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005c66:	2100      	movs	r1, #0
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f83d 	bl	8005ce8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005c6e:	e004      	b.n	8005c7a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f865 	bl	8005d40 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005c76:	e000      	b.n	8005c7a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8005c78:	bf00      	nop
    }
  }
}
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	43425355 	.word	0x43425355

08005c84 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c98:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d204      	bcs.n	8005cb0 <MSC_BOT_SendData+0x2c>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	e000      	b.n	8005cb2 <MSC_BOT_SendData+0x2e>
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	1ad2      	subs	r2, r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8005cd2:	8a7b      	ldrh	r3, [r7, #18]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	2181      	movs	r1, #129	@ 0x81
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f002 faee 	bl	80082ba <USBD_LL_Transmit>
}
 8005cde:	bf00      	nop
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cfa:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8005d3c <MSC_BOT_SendCSW+0x54>)
 8005d00:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
 8005d18:	230d      	movs	r3, #13
 8005d1a:	2181      	movs	r1, #129	@ 0x81
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f002 facc 	bl	80082ba <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8005d28:	231f      	movs	r3, #31
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f002 fae7 	bl	8008300 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	53425355 	.word	0x53425355

08005d40 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d4e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10c      	bne.n	8005d74 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d103      	bne.n	8005d74 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 fa1b 	bl	80081aa <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005d74:	2181      	movs	r1, #129	@ 0x81
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f002 fa17 	bl	80081aa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	7a5b      	ldrb	r3, [r3, #9]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d107      	bne.n	8005d94 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 7203 	add.w	r2, r3, #524	@ 0x20c
 8005d8a:	231f      	movs	r3, #31
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f002 fab6 	bl	8008300 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dae:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	7a5b      	ldrb	r3, [r3, #9]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d107      	bne.n	8005dc8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005db8:	2181      	movs	r1, #129	@ 0x81
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f002 f9f5 	bl	80081aa <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	725a      	strb	r2, [r3, #9]
 8005dc6:	e00d      	b.n	8005de4 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	da08      	bge.n	8005de2 <MSC_BOT_CplClrFeature+0x46>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	7a5b      	ldrb	r3, [r3, #9]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d004      	beq.n	8005de2 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005dd8:	2101      	movs	r1, #1
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff ff84 	bl	8005ce8 <MSC_BOT_SendCSW>
 8005de0:	e000      	b.n	8005de4 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8005de2:	bf00      	nop
  }
}
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	460b      	mov	r3, r1
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b5a      	cmp	r3, #90	@ 0x5a
 8005e00:	f200 810e 	bhi.w	8006020 <SCSI_ProcessCmd+0x234>
 8005e04:	a201      	add	r2, pc, #4	@ (adr r2, 8005e0c <SCSI_ProcessCmd+0x20>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005f79 	.word	0x08005f79
 8005e10:	08006021 	.word	0x08006021
 8005e14:	08006021 	.word	0x08006021
 8005e18:	08005f87 	.word	0x08005f87
 8005e1c:	08006021 	.word	0x08006021
 8005e20:	08006021 	.word	0x08006021
 8005e24:	08006021 	.word	0x08006021
 8005e28:	08006021 	.word	0x08006021
 8005e2c:	08006021 	.word	0x08006021
 8005e30:	08006021 	.word	0x08006021
 8005e34:	08006021 	.word	0x08006021
 8005e38:	08006021 	.word	0x08006021
 8005e3c:	08006021 	.word	0x08006021
 8005e40:	08006021 	.word	0x08006021
 8005e44:	08006021 	.word	0x08006021
 8005e48:	08006021 	.word	0x08006021
 8005e4c:	08006021 	.word	0x08006021
 8005e50:	08006021 	.word	0x08006021
 8005e54:	08005f95 	.word	0x08005f95
 8005e58:	08006021 	.word	0x08006021
 8005e5c:	08006021 	.word	0x08006021
 8005e60:	08006021 	.word	0x08006021
 8005e64:	08006021 	.word	0x08006021
 8005e68:	08006021 	.word	0x08006021
 8005e6c:	08006021 	.word	0x08006021
 8005e70:	08006021 	.word	0x08006021
 8005e74:	08005fbf 	.word	0x08005fbf
 8005e78:	08005fa3 	.word	0x08005fa3
 8005e7c:	08006021 	.word	0x08006021
 8005e80:	08006021 	.word	0x08006021
 8005e84:	08005fb1 	.word	0x08005fb1
 8005e88:	08006021 	.word	0x08006021
 8005e8c:	08006021 	.word	0x08006021
 8005e90:	08006021 	.word	0x08006021
 8005e94:	08006021 	.word	0x08006021
 8005e98:	08005fdb 	.word	0x08005fdb
 8005e9c:	08006021 	.word	0x08006021
 8005ea0:	08005fe9 	.word	0x08005fe9
 8005ea4:	08006021 	.word	0x08006021
 8005ea8:	08006021 	.word	0x08006021
 8005eac:	08005ff7 	.word	0x08005ff7
 8005eb0:	08006021 	.word	0x08006021
 8005eb4:	08006005 	.word	0x08006005
 8005eb8:	08006021 	.word	0x08006021
 8005ebc:	08006021 	.word	0x08006021
 8005ec0:	08006021 	.word	0x08006021
 8005ec4:	08006021 	.word	0x08006021
 8005ec8:	08006013 	.word	0x08006013
 8005ecc:	08006021 	.word	0x08006021
 8005ed0:	08006021 	.word	0x08006021
 8005ed4:	08006021 	.word	0x08006021
 8005ed8:	08006021 	.word	0x08006021
 8005edc:	08006021 	.word	0x08006021
 8005ee0:	08006021 	.word	0x08006021
 8005ee4:	08006021 	.word	0x08006021
 8005ee8:	08006021 	.word	0x08006021
 8005eec:	08006021 	.word	0x08006021
 8005ef0:	08006021 	.word	0x08006021
 8005ef4:	08006021 	.word	0x08006021
 8005ef8:	08006021 	.word	0x08006021
 8005efc:	08006021 	.word	0x08006021
 8005f00:	08006021 	.word	0x08006021
 8005f04:	08006021 	.word	0x08006021
 8005f08:	08006021 	.word	0x08006021
 8005f0c:	08006021 	.word	0x08006021
 8005f10:	08006021 	.word	0x08006021
 8005f14:	08006021 	.word	0x08006021
 8005f18:	08006021 	.word	0x08006021
 8005f1c:	08006021 	.word	0x08006021
 8005f20:	08006021 	.word	0x08006021
 8005f24:	08006021 	.word	0x08006021
 8005f28:	08006021 	.word	0x08006021
 8005f2c:	08006021 	.word	0x08006021
 8005f30:	08006021 	.word	0x08006021
 8005f34:	08006021 	.word	0x08006021
 8005f38:	08006021 	.word	0x08006021
 8005f3c:	08006021 	.word	0x08006021
 8005f40:	08006021 	.word	0x08006021
 8005f44:	08006021 	.word	0x08006021
 8005f48:	08006021 	.word	0x08006021
 8005f4c:	08006021 	.word	0x08006021
 8005f50:	08006021 	.word	0x08006021
 8005f54:	08006021 	.word	0x08006021
 8005f58:	08006021 	.word	0x08006021
 8005f5c:	08006021 	.word	0x08006021
 8005f60:	08006021 	.word	0x08006021
 8005f64:	08006021 	.word	0x08006021
 8005f68:	08006021 	.word	0x08006021
 8005f6c:	08006021 	.word	0x08006021
 8005f70:	08006021 	.word	0x08006021
 8005f74:	08005fcd 	.word	0x08005fcd
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f85c 	bl	800603c <SCSI_TestUnitReady>
      break;
 8005f84:	e055      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fa09 	bl	80063a4 <SCSI_RequestSense>
      break;
 8005f92:	e04e      	b.n	8006032 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f888 	bl	80060b0 <SCSI_Inquiry>
      break;
 8005fa0:	e047      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fa9e 	bl	80064ea <SCSI_StartStopUnit>
      break;
 8005fae:	e040      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fa97 	bl	80064ea <SCSI_StartStopUnit>
      break;
 8005fbc:	e039      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f99d 	bl	8006304 <SCSI_ModeSense6>
      break;
 8005fca:	e032      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f9be 	bl	8006354 <SCSI_ModeSense10>
      break;
 8005fd8:	e02b      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f92a 	bl	800623a <SCSI_ReadFormatCapacity>
      break;
 8005fe6:	e024      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8005fe8:	7afb      	ldrb	r3, [r7, #11]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4619      	mov	r1, r3
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f8bc 	bl	800616c <SCSI_ReadCapacity10>
      break;
 8005ff4:	e01d      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8005ff6:	7afb      	ldrb	r3, [r7, #11]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fa88 	bl	8006512 <SCSI_Read10>
      break;
 8006002:	e016      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006004:	7afb      	ldrb	r3, [r7, #11]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4619      	mov	r1, r3
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fb0d 	bl	800662a <SCSI_Write10>
      break;
 8006010:	e00f      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fbb6 	bl	800678a <SCSI_Verify10>
      break;
 800601e:	e008      	b.n	8006032 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006020:	7af9      	ldrb	r1, [r7, #11]
 8006022:	2320      	movs	r3, #32
 8006024:	2205      	movs	r2, #5
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fa26 	bl	8006478 <SCSI_SenseCode>
      return -1;
 800602c:	f04f 33ff 	mov.w	r3, #4294967295
 8006030:	e000      	b.n	8006034 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	460b      	mov	r3, r1
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006050:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006062:	2320      	movs	r3, #32
 8006064:	2205      	movs	r2, #5
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fa06 	bl	8006478 <SCSI_SenseCode>

    return -1;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	e019      	b.n	80060a6 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	7afa      	ldrb	r2, [r7, #11]
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006086:	7af9      	ldrb	r1, [r7, #11]
 8006088:	233a      	movs	r3, #58	@ 0x3a
 800608a:	2202      	movs	r2, #2
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f9f3 	bl	8006478 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2205      	movs	r2, #5
 8006096:	721a      	strb	r2, [r3, #8]

    return -1;
 8006098:	f04f 33ff 	mov.w	r3, #4294967295
 800609c:	e003      	b.n	80060a6 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2200      	movs	r2, #0
 80060a2:	815a      	strh	r2, [r3, #10]

  return 0;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b089      	sub	sp, #36	@ 0x24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	460b      	mov	r3, r1
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060c4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3301      	adds	r3, #1
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d014      	beq.n	80060fe <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80060d4:	2307      	movs	r3, #7
 80060d6:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	8bfa      	ldrh	r2, [r7, #30]
 80060dc:	815a      	strh	r2, [r3, #10]

    while (len)
 80060de:	e00a      	b.n	80060f6 <SCSI_Inquiry+0x46>
    {
      len--;
 80060e0:	8bfb      	ldrh	r3, [r7, #30]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80060e6:	8bfa      	ldrh	r2, [r7, #30]
 80060e8:	8bfb      	ldrh	r3, [r7, #30]
 80060ea:	491f      	ldr	r1, [pc, #124]	@ (8006168 <SCSI_Inquiry+0xb8>)
 80060ec:	5c89      	ldrb	r1, [r1, r2]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4413      	add	r3, r2
 80060f2:	460a      	mov	r2, r1
 80060f4:	731a      	strb	r2, [r3, #12]
    while (len)
 80060f6:	8bfb      	ldrh	r3, [r7, #30]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f1      	bne.n	80060e0 <SCSI_Inquiry+0x30>
 80060fc:	e02d      	b.n	800615a <SCSI_Inquiry+0xaa>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006104:	69d9      	ldr	r1, [r3, #28]
 8006106:	7afa      	ldrb	r2, [r7, #11]
 8006108:	4613      	mov	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	3304      	adds	r3, #4
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	3305      	adds	r3, #5
 800611c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	8bfb      	ldrh	r3, [r7, #30]
 8006128:	4293      	cmp	r3, r2
 800612a:	d303      	bcc.n	8006134 <SCSI_Inquiry+0x84>
    {
      len = params[4];
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	8bfa      	ldrh	r2, [r7, #30]
 8006138:	815a      	strh	r2, [r3, #10]

    while (len)
 800613a:	e00b      	b.n	8006154 <SCSI_Inquiry+0xa4>
    {
      len--;
 800613c:	8bfb      	ldrh	r3, [r7, #30]
 800613e:	3b01      	subs	r3, #1
 8006140:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8006142:	8bfb      	ldrh	r3, [r7, #30]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	441a      	add	r2, r3
 8006148:	8bfb      	ldrh	r3, [r7, #30]
 800614a:	7811      	ldrb	r1, [r2, #0]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4413      	add	r3, r2
 8006150:	460a      	mov	r2, r1
 8006152:	731a      	strb	r2, [r3, #12]
    while (len)
 8006154:	8bfb      	ldrh	r3, [r7, #30]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <SCSI_Inquiry+0x8c>
    }
  }

  return 0;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3724      	adds	r7, #36	@ 0x24
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	080084f8 	.word	0x080084f8

0800616c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	460b      	mov	r3, r1
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006180:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	f502 7118 	add.w	r1, r2, #608	@ 0x260
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	f202 225e 	addw	r2, r2, #606	@ 0x25e
 8006196:	7af8      	ldrb	r0, [r7, #11]
 8006198:	4798      	blx	r3
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80061a0:	7af9      	ldrb	r1, [r7, #11]
 80061a2:	233a      	movs	r3, #58	@ 0x3a
 80061a4:	2202      	movs	r2, #2
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f966 	bl	8006478 <SCSI_SenseCode>
    return -1;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295
 80061b0:	e03f      	b.n	8006232 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80061b8:	3b01      	subs	r3, #1
 80061ba:	0e1b      	lsrs	r3, r3, #24
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80061c8:	3b01      	subs	r3, #1
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80061d8:	3b01      	subs	r3, #1
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80061f8:	161b      	asrs	r3, r3, #24
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006206:	141b      	asrs	r3, r3, #16
 8006208:	b2da      	uxtb	r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	b29b      	uxth	r3, r3
 8006218:	b2da      	uxtb	r2, r3
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006224:	b2da      	uxtb	r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2208      	movs	r2, #8
 800622e:	815a      	strh	r2, [r3, #10]
    return 0;
 8006230:	2300      	movs	r3, #0
  }
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b088      	sub	sp, #32
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	460b      	mov	r3, r1
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800624e:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8006250:	2300      	movs	r3, #0
 8006252:	83fb      	strh	r3, [r7, #30]
 8006254:	e007      	b.n	8006266 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8006256:	8bfb      	ldrh	r3, [r7, #30]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4413      	add	r3, r2
 800625c:	2200      	movs	r2, #0
 800625e:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8006260:	8bfb      	ldrh	r3, [r7, #30]
 8006262:	3301      	adds	r3, #1
 8006264:	83fb      	strh	r3, [r7, #30]
 8006266:	8bfb      	ldrh	r3, [r7, #30]
 8006268:	2b0b      	cmp	r3, #11
 800626a:	d9f4      	bls.n	8006256 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f107 0216 	add.w	r2, r7, #22
 8006278:	f107 0110 	add.w	r1, r7, #16
 800627c:	7af8      	ldrb	r0, [r7, #11]
 800627e:	4798      	blx	r3
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006286:	7af9      	ldrb	r1, [r7, #11]
 8006288:	233a      	movs	r3, #58	@ 0x3a
 800628a:	2202      	movs	r2, #2
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f8f3 	bl	8006478 <SCSI_SenseCode>
    return -1;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	e030      	b.n	80062fa <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2208      	movs	r2, #8
 800629c:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	0e1b      	lsrs	r3, r3, #24
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2202      	movs	r2, #2
 80062d2:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80062d4:	8afb      	ldrh	r3, [r7, #22]
 80062d6:	141b      	asrs	r3, r3, #16
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80062de:	8afb      	ldrh	r3, [r7, #22]
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80062ea:	8afb      	ldrh	r3, [r7, #22]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	220c      	movs	r2, #12
 80062f6:	815a      	strh	r2, [r3, #10]
    return 0;
 80062f8:	2300      	movs	r3, #0
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	460b      	mov	r3, r1
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006318:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800631a:	2308      	movs	r3, #8
 800631c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	8afa      	ldrh	r2, [r7, #22]
 8006322:	815a      	strh	r2, [r3, #10]

  while (len)
 8006324:	e00a      	b.n	800633c <SCSI_ModeSense6+0x38>
  {
    len--;
 8006326:	8afb      	ldrh	r3, [r7, #22]
 8006328:	3b01      	subs	r3, #1
 800632a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800632c:	8afa      	ldrh	r2, [r7, #22]
 800632e:	8afb      	ldrh	r3, [r7, #22]
 8006330:	4907      	ldr	r1, [pc, #28]	@ (8006350 <SCSI_ModeSense6+0x4c>)
 8006332:	5c89      	ldrb	r1, [r1, r2]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	460a      	mov	r2, r1
 800633a:	731a      	strb	r2, [r3, #12]
  while (len)
 800633c:	8afb      	ldrh	r3, [r7, #22]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f1      	bne.n	8006326 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	08008500 	.word	0x08008500

08006354 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	460b      	mov	r3, r1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8006362:	2308      	movs	r3, #8
 8006364:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800636c:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	8afa      	ldrh	r2, [r7, #22]
 8006372:	815a      	strh	r2, [r3, #10]

  while (len)
 8006374:	e00a      	b.n	800638c <SCSI_ModeSense10+0x38>
  {
    len--;
 8006376:	8afb      	ldrh	r3, [r7, #22]
 8006378:	3b01      	subs	r3, #1
 800637a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800637c:	8afa      	ldrh	r2, [r7, #22]
 800637e:	8afb      	ldrh	r3, [r7, #22]
 8006380:	4907      	ldr	r1, [pc, #28]	@ (80063a0 <SCSI_ModeSense10+0x4c>)
 8006382:	5c89      	ldrb	r1, [r1, r2]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	460a      	mov	r2, r1
 800638a:	731a      	strb	r2, [r3, #12]
  while (len)
 800638c:	8afb      	ldrh	r3, [r7, #22]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f1      	bne.n	8006376 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	08008508 	.word	0x08008508

080063a4 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	460b      	mov	r3, r1
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063b8:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]
 80063be:	e007      	b.n	80063d0 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4413      	add	r3, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
 80063cc:	3301      	adds	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
 80063d2:	2b11      	cmp	r3, #17
 80063d4:	d9f4      	bls.n	80063c0 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2270      	movs	r2, #112	@ 0x70
 80063da:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	220c      	movs	r2, #12
 80063e0:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f893 225c 	ldrb.w	r2, [r3, #604]	@ 0x25c
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d02e      	beq.n	8006450 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	3347      	adds	r3, #71	@ 0x47
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4413      	add	r3, r2
 8006400:	791a      	ldrb	r2, [r3, #4]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	3347      	adds	r3, #71	@ 0x47
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4413      	add	r3, r2
 8006414:	7a5a      	ldrb	r2, [r3, #9]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	3347      	adds	r3, #71	@ 0x47
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	7a1a      	ldrb	r2, [r3, #8]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006434:	3301      	adds	r3, #1
 8006436:	b2da      	uxtb	r2, r3
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f893 325c 	ldrb.w	r3, [r3, #604]	@ 0x25c
 8006444:	2b04      	cmp	r3, #4
 8006446:	d103      	bne.n	8006450 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2212      	movs	r2, #18
 8006454:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3304      	adds	r3, #4
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b12      	cmp	r3, #18
 800645e:	d805      	bhi.n	800646c <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr

08006478 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4603      	mov	r3, r0
 8006488:	70fb      	strb	r3, [r7, #3]
 800648a:	460b      	mov	r3, r1
 800648c:	70bb      	strb	r3, [r7, #2]
 800648e:	4613      	mov	r3, r2
 8006490:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006498:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	3347      	adds	r3, #71	@ 0x47
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	4413      	add	r3, r2
 80064a8:	78ba      	ldrb	r2, [r7, #2]
 80064aa:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	3347      	adds	r3, #71	@ 0x47
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 325d 	ldrb.w	r3, [r3, #605]	@ 0x25d
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d103      	bne.n	80064e0 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 225d 	strb.w	r2, [r3, #605]	@ 0x25d
  }
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr

080064ea <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	460b      	mov	r3, r1
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064fe:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	815a      	strh	r2, [r3, #10]
  return 0;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr

08006512 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	460b      	mov	r3, r1
 800651c:	607a      	str	r2, [r7, #4]
 800651e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006526:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	7a1b      	ldrb	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d16e      	bne.n	800660e <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8006536:	b25b      	sxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	db0a      	blt.n	8006552 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 8006542:	2320      	movs	r3, #32
 8006544:	2205      	movs	r2, #5
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff ff96 	bl	8006478 <SCSI_SenseCode>
      return -1;
 800654c:	f04f 33ff 	mov.w	r3, #4294967295
 8006550:	e067      	b.n	8006622 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	7afa      	ldrb	r2, [r7, #11]
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006566:	7af9      	ldrb	r1, [r7, #11]
 8006568:	233a      	movs	r3, #58	@ 0x3a
 800656a:	2202      	movs	r2, #2
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff ff83 	bl	8006478 <SCSI_SenseCode>
      return -1;
 8006572:	f04f 33ff 	mov.w	r3, #4294967295
 8006576:	e054      	b.n	8006622 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3302      	adds	r3, #2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3303      	adds	r3, #3
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006588:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3304      	adds	r3, #4
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006592:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	3205      	adds	r2, #5
 8006598:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800659a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3307      	adds	r3, #7
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	3208      	adds	r2, #8
 80065ae:	7812      	ldrb	r2, [r2, #0]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80065c4:	7af9      	ldrb	r1, [r7, #11]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f912 	bl	80067f0 <SCSI_CheckAddressRange>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da02      	bge.n	80065d8 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80065d2:	f04f 33ff 	mov.w	r3, #4294967295
 80065d6:	e024      	b.n	8006622 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2202      	movs	r2, #2
 80065dc:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80065ea:	6979      	ldr	r1, [r7, #20]
 80065ec:	f8b1 125e 	ldrh.w	r1, [r1, #606]	@ 0x25e
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d00a      	beq.n	800660e <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 80065fe:	2320      	movs	r3, #32
 8006600:	2205      	movs	r2, #5
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff ff38 	bl	8006478 <SCSI_SenseCode>
      return -1;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	e009      	b.n	8006622 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006614:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	4619      	mov	r1, r3
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f90a 	bl	8006834 <SCSI_ProcessRead>
 8006620:	4603      	mov	r3, r0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	460b      	mov	r3, r1
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800663e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	7a1b      	ldrb	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8096 	bne.w	8006776 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8006650:	b25b      	sxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	da0a      	bge.n	800666c <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 800665c:	2320      	movs	r3, #32
 800665e:	2205      	movs	r2, #5
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff ff09 	bl	8006478 <SCSI_SenseCode>
      return -1;
 8006666:	f04f 33ff 	mov.w	r3, #4294967295
 800666a:	e08a      	b.n	8006782 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	7afa      	ldrb	r2, [r7, #11]
 8006676:	4610      	mov	r0, r2
 8006678:	4798      	blx	r3
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006680:	7af9      	ldrb	r1, [r7, #11]
 8006682:	233a      	movs	r3, #58	@ 0x3a
 8006684:	2202      	movs	r2, #2
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff fef6 	bl	8006478 <SCSI_SenseCode>
      return -1;
 800668c:	f04f 33ff 	mov.w	r3, #4294967295
 8006690:	e077      	b.n	8006782 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	7afa      	ldrb	r2, [r7, #11]
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80066a6:	7af9      	ldrb	r1, [r7, #11]
 80066a8:	2327      	movs	r3, #39	@ 0x27
 80066aa:	2202      	movs	r2, #2
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff fee3 	bl	8006478 <SCSI_SenseCode>
      return -1;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	e064      	b.n	8006782 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3302      	adds	r3, #2
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3303      	adds	r3, #3
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066c8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80066d2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	3205      	adds	r2, #5
 80066d8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80066da:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3307      	adds	r3, #7
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	3208      	adds	r2, #8
 80066ee:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80066f0:	431a      	orrs	r2, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006704:	7af9      	ldrb	r1, [r7, #11]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f872 	bl	80067f0 <SCSI_CheckAddressRange>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	da02      	bge.n	8006718 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
 8006716:	e034      	b.n	8006782 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8006724:	fb02 f303 	mul.w	r3, r2, r3
 8006728:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	429a      	cmp	r2, r3
 8006734:	d00a      	beq.n	800674c <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f893 1219 	ldrb.w	r1, [r3, #537]	@ 0x219
 800673c:	2320      	movs	r3, #32
 800673e:	2205      	movs	r2, #5
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fe99 	bl	8006478 <SCSI_SenseCode>
      return -1;
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	e01a      	b.n	8006782 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006752:	bf28      	it	cs
 8006754:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006758:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2201      	movs	r2, #1
 800675e:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f103 020c 	add.w	r2, r3, #12
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	b29b      	uxth	r3, r3
 800676a:	2101      	movs	r1, #1
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f001 fdc7 	bl	8008300 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8006772:	2300      	movs	r3, #0
 8006774:	e005      	b.n	8006782 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8006776:	7afb      	ldrb	r3, [r7, #11]
 8006778:	4619      	mov	r1, r3
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f8ce 	bl	800691c <SCSI_ProcessWrite>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b086      	sub	sp, #24
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	460b      	mov	r3, r1
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800679e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3301      	adds	r3, #1
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80067ae:	7af9      	ldrb	r1, [r7, #11]
 80067b0:	2324      	movs	r3, #36	@ 0x24
 80067b2:	2205      	movs	r2, #5
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff fe5f 	bl	8006478 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80067ba:	f04f 33ff 	mov.w	r3, #4294967295
 80067be:	e013      	b.n	80067e8 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80067cc:	7af9      	ldrb	r1, [r7, #11]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f80e 	bl	80067f0 <SCSI_CheckAddressRange>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da02      	bge.n	80067e0 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	e003      	b.n	80067e8 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2200      	movs	r2, #0
 80067e4:	815a      	strh	r2, [r3, #10]
  return 0;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	460b      	mov	r3, r1
 80067fe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006806:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	441a      	add	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8006814:	429a      	cmp	r2, r3
 8006816:	d908      	bls.n	800682a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006818:	7af9      	ldrb	r1, [r7, #11]
 800681a:	2321      	movs	r3, #33	@ 0x21
 800681c:	2205      	movs	r2, #5
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fe2a 	bl	8006478 <SCSI_SenseCode>
    return -1;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	e000      	b.n	800682c <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8006834:	b590      	push	{r4, r7, lr}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006846:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 8006854:	fb02 f303 	mul.w	r3, r2, r3
 8006858:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006860:	bf28      	it	cs
 8006862:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006866:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800686e:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 8006882:	4618      	mov	r0, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800688a:	b29b      	uxth	r3, r3
 800688c:	78f8      	ldrb	r0, [r7, #3]
 800688e:	47a0      	blx	r4
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	da08      	bge.n	80068a8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006896:	78f9      	ldrb	r1, [r7, #3]
 8006898:	2311      	movs	r3, #17
 800689a:	2204      	movs	r2, #4
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fdeb 	bl	8006478 <SCSI_SenseCode>
    return -1;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	e035      	b.n	8006914 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f103 020c 	add.w	r2, r3, #12
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2181      	movs	r1, #129	@ 0x81
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fd00 	bl	80082ba <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80068c6:	4619      	mov	r1, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ce:	441a      	add	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80068e2:	4619      	mov	r1, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ea:	1ad2      	subs	r2, r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2203      	movs	r2, #3
 8006910:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	bd90      	pop	{r4, r7, pc}

0800691c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800691c:	b590      	push	{r4, r7, lr}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800692e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 800693c:	fb02 f303 	mul.w	r3, r2, r3
 8006940:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006948:	bf28      	it	cs
 800694a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800694e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006956:	695c      	ldr	r4, [r3, #20]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f103 010c 	add.w	r1, r3, #12
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800696a:	4618      	mov	r0, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006972:	b29b      	uxth	r3, r3
 8006974:	78f8      	ldrb	r0, [r7, #3]
 8006976:	47a0      	blx	r4
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	da08      	bge.n	8006990 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800697e:	78f9      	ldrb	r1, [r7, #3]
 8006980:	2303      	movs	r3, #3
 8006982:	2204      	movs	r2, #4
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fd77 	bl	8006478 <SCSI_SenseCode>

    return -1;
 800698a:	f04f 33ff 	mov.w	r3, #4294967295
 800698e:	e045      	b.n	8006a1c <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 800699c:	4619      	mov	r1, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80069a4:	441a      	add	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	@ 0x25e
 80069b8:	4619      	mov	r1, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80069c0:	1ad2      	subs	r2, r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234

  if (hmsc->scsi_blk_len == 0U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80069e2:	2100      	movs	r1, #0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff f97f 	bl	8005ce8 <MSC_BOT_SendCSW>
 80069ea:	e016      	b.n	8006a1a <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	@ 0x25e
 80069f8:	fb02 f303 	mul.w	r3, r2, r3
 80069fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a00:	bf28      	it	cs
 8006a02:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006a06:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f103 020c 	add.w	r2, r3, #12
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2101      	movs	r1, #1
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fc73 	bl	8008300 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}

08006a24 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e01a      	b.n	8006a72 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	79fa      	ldrb	r2, [r7, #7]
 8006a68:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f001 face 	bl	800800c <USBD_LL_Init>

  return USBD_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d006      	beq.n	8006a9c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
 8006a9a:	e001      	b.n	8006aa0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 faf9 	bl	80080ac <USBD_LL_Start>

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00c      	beq.n	8006b0c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	78fa      	ldrb	r2, [r7, #3]
 8006afc:	4611      	mov	r1, r2
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3

  return USBD_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fed7 	bl	8007902 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d016      	beq.n	8006ba6 <USBD_LL_SetupStage+0x6a>
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d81c      	bhi.n	8006bb6 <USBD_LL_SetupStage+0x7a>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <USBD_LL_SetupStage+0x4a>
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d008      	beq.n	8006b96 <USBD_LL_SetupStage+0x5a>
 8006b84:	e017      	b.n	8006bb6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9ca 	bl	8006f28 <USBD_StdDevReq>
      break;
 8006b94:	e01a      	b.n	8006bcc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa2c 	bl	8006ffc <USBD_StdItfReq>
      break;
 8006ba4:	e012      	b.n	8006bcc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa6c 	bl	800708c <USBD_StdEPReq>
      break;
 8006bb4:	e00a      	b.n	8006bcc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006bbc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 faf0 	bl	80081aa <USBD_LL_StallEP>
      break;
 8006bca:	bf00      	nop
  }

  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b086      	sub	sp, #24
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	460b      	mov	r3, r1
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d14b      	bne.n	8006c82 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006bf0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d134      	bne.n	8006c66 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d919      	bls.n	8006c3c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	1ad2      	subs	r2, r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d203      	bcs.n	8006c2a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	e002      	b.n	8006c30 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 ff35 	bl	8007aa4 <USBD_CtlContinueRx>
 8006c3a:	e038      	b.n	8006cae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d105      	bne.n	8006c5e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 ff32 	bl	8007ac8 <USBD_CtlSendStatus>
 8006c64:	e023      	b.n	8006cae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	d11e      	bne.n	8006cae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 fa95 	bl	80081aa <USBD_LL_StallEP>
 8006c80:	e015      	b.n	8006cae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d108      	bne.n	8006caa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	7afa      	ldrb	r2, [r7, #11]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	4798      	blx	r3
 8006ca8:	e001      	b.n	8006cae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006caa:	2302      	movs	r3, #2
 8006cac:	e000      	b.n	8006cb0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cc6:	7afb      	ldrb	r3, [r7, #11]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d17f      	bne.n	8006dcc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3314      	adds	r3, #20
 8006cd0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d15c      	bne.n	8006d96 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d915      	bls.n	8006d14 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	1ad2      	subs	r2, r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 febd 	bl	8007a80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d06:	2300      	movs	r3, #0
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f001 faf7 	bl	8008300 <USBD_LL_PrepareReceive>
 8006d12:	e04e      	b.n	8006db2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	6912      	ldr	r2, [r2, #16]
 8006d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d20:	fb01 f202 	mul.w	r2, r1, r2
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d11c      	bne.n	8006d64 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d316      	bcc.n	8006d64 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d20f      	bcs.n	8006d64 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d44:	2200      	movs	r2, #0
 8006d46:	2100      	movs	r1, #0
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fe99 	bl	8007a80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d56:	2300      	movs	r3, #0
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f001 facf 	bl	8008300 <USBD_LL_PrepareReceive>
 8006d62:	e026      	b.n	8006db2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d105      	bne.n	8006d86 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d86:	2180      	movs	r1, #128	@ 0x80
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f001 fa0e 	bl	80081aa <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fead 	bl	8007aee <USBD_CtlReceiveStatus>
 8006d94:	e00d      	b.n	8006db2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d004      	beq.n	8006daa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f001 f9fc 	bl	80081aa <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d11d      	bne.n	8006df8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fe81 	bl	8006ac4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006dca:	e015      	b.n	8006df8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d108      	bne.n	8006df4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	7afa      	ldrb	r2, [r7, #11]
 8006dec:	4611      	mov	r1, r2
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	4798      	blx	r3
 8006df2:	e001      	b.n	8006df8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006df4:	2302      	movs	r3, #2
 8006df6:	e000      	b.n	8006dfa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e0a:	2340      	movs	r3, #64	@ 0x40
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2100      	movs	r1, #0
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f966 	bl	80080e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2240      	movs	r2, #64	@ 0x40
 8006e22:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e26:	2340      	movs	r3, #64	@ 0x40
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2180      	movs	r1, #128	@ 0x80
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f958 	bl	80080e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2240      	movs	r2, #64	@ 0x40
 8006e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6852      	ldr	r2, [r2, #4]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	4611      	mov	r1, r2
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
  }

  return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2204      	movs	r2, #4
 8006eba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc80      	pop	{r7}
 8006ec8:	4770      	bx	lr

08006eca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d105      	bne.n	8006ee8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d10b      	bne.n	8006f1e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f3e:	2b40      	cmp	r3, #64	@ 0x40
 8006f40:	d005      	beq.n	8006f4e <USBD_StdDevReq+0x26>
 8006f42:	2b40      	cmp	r3, #64	@ 0x40
 8006f44:	d84f      	bhi.n	8006fe6 <USBD_StdDevReq+0xbe>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <USBD_StdDevReq+0x36>
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d14b      	bne.n	8006fe6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
      break;
 8006f5c:	e048      	b.n	8006ff0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	d839      	bhi.n	8006fda <USBD_StdDevReq+0xb2>
 8006f66:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <USBD_StdDevReq+0x44>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fbd 	.word	0x08006fbd
 8006f70:	08006fd1 	.word	0x08006fd1
 8006f74:	08006fdb 	.word	0x08006fdb
 8006f78:	08006fc7 	.word	0x08006fc7
 8006f7c:	08006fdb 	.word	0x08006fdb
 8006f80:	08006f9f 	.word	0x08006f9f
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006fdb 	.word	0x08006fdb
 8006f8c:	08006fb3 	.word	0x08006fb3
 8006f90:	08006fa9 	.word	0x08006fa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9dc 	bl	8007354 <USBD_GetDescriptor>
          break;
 8006f9c:	e022      	b.n	8006fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fb3f 	bl	8007624 <USBD_SetAddress>
          break;
 8006fa6:	e01d      	b.n	8006fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fb7e 	bl	80076ac <USBD_SetConfig>
          break;
 8006fb0:	e018      	b.n	8006fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fc07 	bl	80077c8 <USBD_GetConfig>
          break;
 8006fba:	e013      	b.n	8006fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fc37 	bl	8007832 <USBD_GetStatus>
          break;
 8006fc4:	e00e      	b.n	8006fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fc65 	bl	8007898 <USBD_SetFeature>
          break;
 8006fce:	e009      	b.n	8006fe4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc74 	bl	80078c0 <USBD_ClrFeature>
          break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fcc9 	bl	8007974 <USBD_CtlError>
          break;
 8006fe2:	bf00      	nop
      }
      break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fcc3 	bl	8007974 <USBD_CtlError>
      break;
 8006fee:	bf00      	nop
  }

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop

08006ffc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007012:	2b40      	cmp	r3, #64	@ 0x40
 8007014:	d005      	beq.n	8007022 <USBD_StdItfReq+0x26>
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d82e      	bhi.n	8007078 <USBD_StdItfReq+0x7c>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <USBD_StdItfReq+0x26>
 800701e:	2b20      	cmp	r3, #32
 8007020:	d12a      	bne.n	8007078 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007028:	3b01      	subs	r3, #1
 800702a:	2b02      	cmp	r3, #2
 800702c:	d81d      	bhi.n	800706a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	889b      	ldrh	r3, [r3, #4]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	d813      	bhi.n	8007060 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	88db      	ldrh	r3, [r3, #6]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d110      	bne.n	8007074 <USBD_StdItfReq+0x78>
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10d      	bne.n	8007074 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fd35 	bl	8007ac8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800705e:	e009      	b.n	8007074 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fc86 	bl	8007974 <USBD_CtlError>
          break;
 8007068:	e004      	b.n	8007074 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fc81 	bl	8007974 <USBD_CtlError>
          break;
 8007072:	e000      	b.n	8007076 <USBD_StdItfReq+0x7a>
          break;
 8007074:	bf00      	nop
      }
      break;
 8007076:	e004      	b.n	8007082 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fc7a 	bl	8007974 <USBD_CtlError>
      break;
 8007080:	bf00      	nop
  }

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	889b      	ldrh	r3, [r3, #4]
 800709e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070a8:	2b40      	cmp	r3, #64	@ 0x40
 80070aa:	d007      	beq.n	80070bc <USBD_StdEPReq+0x30>
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	f200 8146 	bhi.w	800733e <USBD_StdEPReq+0x2b2>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <USBD_StdEPReq+0x40>
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	f040 8141 	bne.w	800733e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
      break;
 80070ca:	e13d      	b.n	8007348 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	d10a      	bne.n	80070ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	e12d      	b.n	800734a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d007      	beq.n	8007106 <USBD_StdEPReq+0x7a>
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	f300 811b 	bgt.w	8007332 <USBD_StdEPReq+0x2a6>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d072      	beq.n	80071e6 <USBD_StdEPReq+0x15a>
 8007100:	2b01      	cmp	r3, #1
 8007102:	d03a      	beq.n	800717a <USBD_StdEPReq+0xee>
 8007104:	e115      	b.n	8007332 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800710c:	2b02      	cmp	r3, #2
 800710e:	d002      	beq.n	8007116 <USBD_StdEPReq+0x8a>
 8007110:	2b03      	cmp	r3, #3
 8007112:	d015      	beq.n	8007140 <USBD_StdEPReq+0xb4>
 8007114:	e02b      	b.n	800716e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00c      	beq.n	8007136 <USBD_StdEPReq+0xaa>
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	2b80      	cmp	r3, #128	@ 0x80
 8007120:	d009      	beq.n	8007136 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 f83f 	bl	80081aa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800712c:	2180      	movs	r1, #128	@ 0x80
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f83b 	bl	80081aa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007134:	e020      	b.n	8007178 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fc1b 	bl	8007974 <USBD_CtlError>
              break;
 800713e:	e01b      	b.n	8007178 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	885b      	ldrh	r3, [r3, #2]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10e      	bne.n	8007166 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <USBD_StdEPReq+0xda>
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b80      	cmp	r3, #128	@ 0x80
 8007152:	d008      	beq.n	8007166 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	88db      	ldrh	r3, [r3, #6]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 f822 	bl	80081aa <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fcae 	bl	8007ac8 <USBD_CtlSendStatus>

              break;
 800716c:	e004      	b.n	8007178 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fbff 	bl	8007974 <USBD_CtlError>
              break;
 8007176:	bf00      	nop
          }
          break;
 8007178:	e0e0      	b.n	800733c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007180:	2b02      	cmp	r3, #2
 8007182:	d002      	beq.n	800718a <USBD_StdEPReq+0xfe>
 8007184:	2b03      	cmp	r3, #3
 8007186:	d015      	beq.n	80071b4 <USBD_StdEPReq+0x128>
 8007188:	e026      	b.n	80071d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00c      	beq.n	80071aa <USBD_StdEPReq+0x11e>
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b80      	cmp	r3, #128	@ 0x80
 8007194:	d009      	beq.n	80071aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 f805 	bl	80081aa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 f801 	bl	80081aa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071a8:	e01c      	b.n	80071e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fbe1 	bl	8007974 <USBD_CtlError>
              break;
 80071b2:	e017      	b.n	80071e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	885b      	ldrh	r3, [r3, #2]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d112      	bne.n	80071e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 f80c 	bl	80081e8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc79 	bl	8007ac8 <USBD_CtlSendStatus>
              }
              break;
 80071d6:	e004      	b.n	80071e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fbca 	bl	8007974 <USBD_CtlError>
              break;
 80071e0:	e000      	b.n	80071e4 <USBD_StdEPReq+0x158>
              break;
 80071e2:	bf00      	nop
          }
          break;
 80071e4:	e0aa      	b.n	800733c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d002      	beq.n	80071f6 <USBD_StdEPReq+0x16a>
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d032      	beq.n	800725a <USBD_StdEPReq+0x1ce>
 80071f4:	e097      	b.n	8007326 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <USBD_StdEPReq+0x180>
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	d004      	beq.n	800720c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fbb5 	bl	8007974 <USBD_CtlError>
                break;
 800720a:	e091      	b.n	8007330 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800720c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007210:	2b00      	cmp	r3, #0
 8007212:	da0b      	bge.n	800722c <USBD_StdEPReq+0x1a0>
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	3310      	adds	r3, #16
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	3304      	adds	r3, #4
 800722a:	e00b      	b.n	8007244 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	3304      	adds	r3, #4
 8007244:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2202      	movs	r2, #2
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fbf8 	bl	8007a48 <USBD_CtlSendData>
              break;
 8007258:	e06a      	b.n	8007330 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800725a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	da11      	bge.n	8007286 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	3318      	adds	r3, #24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d117      	bne.n	80072ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fb78 	bl	8007974 <USBD_CtlError>
                  break;
 8007284:	e054      	b.n	8007330 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d104      	bne.n	80072ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb65 	bl	8007974 <USBD_CtlError>
                  break;
 80072aa:	e041      	b.n	8007330 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da0b      	bge.n	80072cc <USBD_StdEPReq+0x240>
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	3310      	adds	r3, #16
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4413      	add	r3, r2
 80072c8:	3304      	adds	r3, #4
 80072ca:	e00b      	b.n	80072e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4413      	add	r3, r2
 80072e2:	3304      	adds	r3, #4
 80072e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <USBD_StdEPReq+0x266>
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b80      	cmp	r3, #128	@ 0x80
 80072f0:	d103      	bne.n	80072fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	e00e      	b.n	8007318 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 ff91 	bl	8008226 <USBD_LL_IsStallEP>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2201      	movs	r2, #1
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e002      	b.n	8007318 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2202      	movs	r2, #2
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fb92 	bl	8007a48 <USBD_CtlSendData>
              break;
 8007324:	e004      	b.n	8007330 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fb23 	bl	8007974 <USBD_CtlError>
              break;
 800732e:	bf00      	nop
          }
          break;
 8007330:	e004      	b.n	800733c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fb1d 	bl	8007974 <USBD_CtlError>
          break;
 800733a:	bf00      	nop
      }
      break;
 800733c:	e004      	b.n	8007348 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb17 	bl	8007974 <USBD_CtlError>
      break;
 8007346:	bf00      	nop
  }

  return ret;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	2b06      	cmp	r3, #6
 8007376:	f200 8128 	bhi.w	80075ca <USBD_GetDescriptor+0x276>
 800737a:	a201      	add	r2, pc, #4	@ (adr r2, 8007380 <USBD_GetDescriptor+0x2c>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	0800739d 	.word	0x0800739d
 8007384:	080073b5 	.word	0x080073b5
 8007388:	080073f5 	.word	0x080073f5
 800738c:	080075cb 	.word	0x080075cb
 8007390:	080075cb 	.word	0x080075cb
 8007394:	0800756b 	.word	0x0800756b
 8007398:	08007597 	.word	0x08007597
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
      break;
 80073b2:	e112      	b.n	80075da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	7c1b      	ldrb	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10d      	bne.n	80073d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c4:	f107 0208 	add.w	r2, r7, #8
 80073c8:	4610      	mov	r0, r2
 80073ca:	4798      	blx	r3
 80073cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	2202      	movs	r2, #2
 80073d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073d6:	e100      	b.n	80075da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	f107 0208 	add.w	r2, r7, #8
 80073e4:	4610      	mov	r0, r2
 80073e6:	4798      	blx	r3
 80073e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	2202      	movs	r2, #2
 80073f0:	701a      	strb	r2, [r3, #0]
      break;
 80073f2:	e0f2      	b.n	80075da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	885b      	ldrh	r3, [r3, #2]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	f200 80ac 	bhi.w	8007558 <USBD_GetDescriptor+0x204>
 8007400:	a201      	add	r2, pc, #4	@ (adr r2, 8007408 <USBD_GetDescriptor+0xb4>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	08007421 	.word	0x08007421
 800740c:	08007455 	.word	0x08007455
 8007410:	08007489 	.word	0x08007489
 8007414:	080074bd 	.word	0x080074bd
 8007418:	080074f1 	.word	0x080074f1
 800741c:	08007525 	.word	0x08007525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7c12      	ldrb	r2, [r2, #16]
 8007438:	f107 0108 	add.w	r1, r7, #8
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007442:	e091      	b.n	8007568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa94 	bl	8007974 <USBD_CtlError>
            err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
          break;
 8007452:	e089      	b.n	8007568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	7c12      	ldrb	r2, [r2, #16]
 800746c:	f107 0108 	add.w	r1, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007476:	e077      	b.n	8007568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa7a 	bl	8007974 <USBD_CtlError>
            err++;
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	3301      	adds	r3, #1
 8007484:	72fb      	strb	r3, [r7, #11]
          break;
 8007486:	e06f      	b.n	8007568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7c12      	ldrb	r2, [r2, #16]
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074aa:	e05d      	b.n	8007568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa60 	bl	8007974 <USBD_CtlError>
            err++;
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	3301      	adds	r3, #1
 80074b8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ba:	e055      	b.n	8007568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	7c12      	ldrb	r2, [r2, #16]
 80074d4:	f107 0108 	add.w	r1, r7, #8
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
 80074dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074de:	e043      	b.n	8007568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa46 	bl	8007974 <USBD_CtlError>
            err++;
 80074e8:	7afb      	ldrb	r3, [r7, #11]
 80074ea:	3301      	adds	r3, #1
 80074ec:	72fb      	strb	r3, [r7, #11]
          break;
 80074ee:	e03b      	b.n	8007568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	7c12      	ldrb	r2, [r2, #16]
 8007508:	f107 0108 	add.w	r1, r7, #8
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007512:	e029      	b.n	8007568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa2c 	bl	8007974 <USBD_CtlError>
            err++;
 800751c:	7afb      	ldrb	r3, [r7, #11]
 800751e:	3301      	adds	r3, #1
 8007520:	72fb      	strb	r3, [r7, #11]
          break;
 8007522:	e021      	b.n	8007568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	7c12      	ldrb	r2, [r2, #16]
 800753c:	f107 0108 	add.w	r1, r7, #8
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
 8007544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007546:	e00f      	b.n	8007568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa12 	bl	8007974 <USBD_CtlError>
            err++;
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	3301      	adds	r3, #1
 8007554:	72fb      	strb	r3, [r7, #11]
          break;
 8007556:	e007      	b.n	8007568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa0a 	bl	8007974 <USBD_CtlError>
          err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007566:	e038      	b.n	80075da <USBD_GetDescriptor+0x286>
 8007568:	e037      	b.n	80075da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7c1b      	ldrb	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800757a:	f107 0208 	add.w	r2, r7, #8
 800757e:	4610      	mov	r0, r2
 8007580:	4798      	blx	r3
 8007582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007584:	e029      	b.n	80075da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9f3 	bl	8007974 <USBD_CtlError>
        err++;
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	3301      	adds	r3, #1
 8007592:	72fb      	strb	r3, [r7, #11]
      break;
 8007594:	e021      	b.n	80075da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	7c1b      	ldrb	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10d      	bne.n	80075ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a6:	f107 0208 	add.w	r2, r7, #8
 80075aa:	4610      	mov	r0, r2
 80075ac:	4798      	blx	r3
 80075ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	2207      	movs	r2, #7
 80075b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075b8:	e00f      	b.n	80075da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f9d9 	bl	8007974 <USBD_CtlError>
        err++;
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	3301      	adds	r3, #1
 80075c6:	72fb      	strb	r3, [r7, #11]
      break;
 80075c8:	e007      	b.n	80075da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9d1 	bl	8007974 <USBD_CtlError>
      err++;
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	3301      	adds	r3, #1
 80075d6:	72fb      	strb	r3, [r7, #11]
      break;
 80075d8:	bf00      	nop
  }

  if (err != 0U)
 80075da:	7afb      	ldrb	r3, [r7, #11]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d11c      	bne.n	800761a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80075e0:	893b      	ldrh	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d011      	beq.n	800760a <USBD_GetDescriptor+0x2b6>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00d      	beq.n	800760a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88da      	ldrh	r2, [r3, #6]
 80075f2:	893b      	ldrh	r3, [r7, #8]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	bf28      	it	cs
 80075f8:	4613      	movcs	r3, r2
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075fe:	893b      	ldrh	r3, [r7, #8]
 8007600:	461a      	mov	r2, r3
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa1f 	bl	8007a48 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	88db      	ldrh	r3, [r3, #6]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d104      	bne.n	800761c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa58 	bl	8007ac8 <USBD_CtlSendStatus>
 8007618:	e000      	b.n	800761c <USBD_GetDescriptor+0x2c8>
    return;
 800761a:	bf00      	nop
    }
  }
}
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop

08007624 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	889b      	ldrh	r3, [r3, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d130      	bne.n	8007698 <USBD_SetAddress+0x74>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	88db      	ldrh	r3, [r3, #6]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d12c      	bne.n	8007698 <USBD_SetAddress+0x74>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	885b      	ldrh	r3, [r3, #2]
 8007642:	2b7f      	cmp	r3, #127	@ 0x7f
 8007644:	d828      	bhi.n	8007698 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	885b      	ldrh	r3, [r3, #2]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007658:	2b03      	cmp	r3, #3
 800765a:	d104      	bne.n	8007666 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f988 	bl	8007974 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007664:	e01d      	b.n	80076a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7bfa      	ldrb	r2, [r7, #15]
 800766a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fe02 	bl	800827c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fa25 	bl	8007ac8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800768c:	e009      	b.n	80076a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007696:	e004      	b.n	80076a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f96a 	bl	8007974 <USBD_CtlError>
  }
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	4b41      	ldr	r3, [pc, #260]	@ (80077c4 <USBD_SetConfig+0x118>)
 80076be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076c0:	4b40      	ldr	r3, [pc, #256]	@ (80077c4 <USBD_SetConfig+0x118>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d904      	bls.n	80076d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f952 	bl	8007974 <USBD_CtlError>
 80076d0:	e075      	b.n	80077be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d002      	beq.n	80076e2 <USBD_SetConfig+0x36>
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d023      	beq.n	8007728 <USBD_SetConfig+0x7c>
 80076e0:	e062      	b.n	80077a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80076e2:	4b38      	ldr	r3, [pc, #224]	@ (80077c4 <USBD_SetConfig+0x118>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d01a      	beq.n	8007720 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80076ea:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <USBD_SetConfig+0x118>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2203      	movs	r2, #3
 80076f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076fc:	4b31      	ldr	r3, [pc, #196]	@ (80077c4 <USBD_SetConfig+0x118>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff f9e8 	bl	8006ad8 <USBD_SetClassConfig>
 8007708:	4603      	mov	r3, r0
 800770a:	2b02      	cmp	r3, #2
 800770c:	d104      	bne.n	8007718 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f92f 	bl	8007974 <USBD_CtlError>
            return;
 8007716:	e052      	b.n	80077be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f9d5 	bl	8007ac8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800771e:	e04e      	b.n	80077be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9d1 	bl	8007ac8 <USBD_CtlSendStatus>
        break;
 8007726:	e04a      	b.n	80077be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007728:	4b26      	ldr	r3, [pc, #152]	@ (80077c4 <USBD_SetConfig+0x118>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d112      	bne.n	8007756 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007738:	4b22      	ldr	r3, [pc, #136]	@ (80077c4 <USBD_SetConfig+0x118>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007742:	4b20      	ldr	r3, [pc, #128]	@ (80077c4 <USBD_SetConfig+0x118>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff f9e4 	bl	8006b16 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f9ba 	bl	8007ac8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007754:	e033      	b.n	80077be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007756:	4b1b      	ldr	r3, [pc, #108]	@ (80077c4 <USBD_SetConfig+0x118>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d01d      	beq.n	80077a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff f9d2 	bl	8006b16 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007772:	4b14      	ldr	r3, [pc, #80]	@ (80077c4 <USBD_SetConfig+0x118>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800777c:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <USBD_SetConfig+0x118>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff f9a8 	bl	8006ad8 <USBD_SetClassConfig>
 8007788:	4603      	mov	r3, r0
 800778a:	2b02      	cmp	r3, #2
 800778c:	d104      	bne.n	8007798 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8ef 	bl	8007974 <USBD_CtlError>
            return;
 8007796:	e012      	b.n	80077be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f995 	bl	8007ac8 <USBD_CtlSendStatus>
        break;
 800779e:	e00e      	b.n	80077be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f991 	bl	8007ac8 <USBD_CtlSendStatus>
        break;
 80077a6:	e00a      	b.n	80077be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f8e2 	bl	8007974 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80077b0:	4b04      	ldr	r3, [pc, #16]	@ (80077c4 <USBD_SetConfig+0x118>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff f9ad 	bl	8006b16 <USBD_ClrClassConfig>
        break;
 80077bc:	bf00      	nop
    }
  }
}
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000140 	.word	0x20000140

080077c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	88db      	ldrh	r3, [r3, #6]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d004      	beq.n	80077e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f8c9 	bl	8007974 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077e2:	e022      	b.n	800782a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	dc02      	bgt.n	80077f4 <USBD_GetConfig+0x2c>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dc03      	bgt.n	80077fa <USBD_GetConfig+0x32>
 80077f2:	e015      	b.n	8007820 <USBD_GetConfig+0x58>
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d00b      	beq.n	8007810 <USBD_GetConfig+0x48>
 80077f8:	e012      	b.n	8007820 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3308      	adds	r3, #8
 8007804:	2201      	movs	r2, #1
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f91d 	bl	8007a48 <USBD_CtlSendData>
        break;
 800780e:	e00c      	b.n	800782a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3304      	adds	r3, #4
 8007814:	2201      	movs	r2, #1
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f915 	bl	8007a48 <USBD_CtlSendData>
        break;
 800781e:	e004      	b.n	800782a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8a6 	bl	8007974 <USBD_CtlError>
        break;
 8007828:	bf00      	nop
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007842:	3b01      	subs	r3, #1
 8007844:	2b02      	cmp	r3, #2
 8007846:	d81e      	bhi.n	8007886 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	88db      	ldrh	r3, [r3, #6]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d004      	beq.n	800785a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f88e 	bl	8007974 <USBD_CtlError>
        break;
 8007858:	e01a      	b.n	8007890 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f043 0202 	orr.w	r2, r3, #2
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	330c      	adds	r3, #12
 800787a:	2202      	movs	r2, #2
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8e2 	bl	8007a48 <USBD_CtlSendData>
      break;
 8007884:	e004      	b.n	8007890 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f873 	bl	8007974 <USBD_CtlError>
      break;
 800788e:	bf00      	nop
  }
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	885b      	ldrh	r3, [r3, #2]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d106      	bne.n	80078b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f908 	bl	8007ac8 <USBD_CtlSendStatus>
  }
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d0:	3b01      	subs	r3, #1
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d80b      	bhi.n	80078ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	885b      	ldrh	r3, [r3, #2]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d10c      	bne.n	80078f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f8ee 	bl	8007ac8 <USBD_CtlSendStatus>
      }
      break;
 80078ec:	e004      	b.n	80078f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f83f 	bl	8007974 <USBD_CtlError>
      break;
 80078f6:	e000      	b.n	80078fa <USBD_ClrFeature+0x3a>
      break;
 80078f8:	bf00      	nop
  }
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781a      	ldrb	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	785a      	ldrb	r2, [r3, #1]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	3302      	adds	r3, #2
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	3303      	adds	r3, #3
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	b29b      	uxth	r3, r3
 800792e:	4413      	add	r3, r2
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	3304      	adds	r3, #4
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	3305      	adds	r3, #5
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	b29b      	uxth	r3, r3
 8007948:	4413      	add	r3, r2
 800794a:	b29a      	uxth	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	3306      	adds	r3, #6
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	3307      	adds	r3, #7
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	4413      	add	r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	80da      	strh	r2, [r3, #6]

}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	bc80      	pop	{r7}
 8007972:	4770      	bx	lr

08007974 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800797e:	2180      	movs	r1, #128	@ 0x80
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc12 	bl	80081aa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007986:	2100      	movs	r1, #0
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc0e 	bl	80081aa <USBD_LL_StallEP>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b086      	sub	sp, #24
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d032      	beq.n	8007a12 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f834 	bl	8007a1a <USBD_GetLen>
 80079b2:	4603      	mov	r3, r0
 80079b4:	3301      	adds	r3, #1
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	75fa      	strb	r2, [r7, #23]
 80079c6:	461a      	mov	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4413      	add	r3, r2
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	75fa      	strb	r2, [r7, #23]
 80079d8:	461a      	mov	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4413      	add	r3, r2
 80079de:	2203      	movs	r2, #3
 80079e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079e2:	e012      	b.n	8007a0a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	60fa      	str	r2, [r7, #12]
 80079ea:	7dfa      	ldrb	r2, [r7, #23]
 80079ec:	1c51      	adds	r1, r2, #1
 80079ee:	75f9      	strb	r1, [r7, #23]
 80079f0:	4611      	mov	r1, r2
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	440a      	add	r2, r1
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	75fa      	strb	r2, [r7, #23]
 8007a00:	461a      	mov	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	4413      	add	r3, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e8      	bne.n	80079e4 <USBD_GetString+0x4e>
    }
  }
}
 8007a12:	bf00      	nop
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b085      	sub	sp, #20
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007a26:	e005      	b.n	8007a34 <USBD_GetLen+0x1a>
  {
    len++;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3301      	adds	r3, #1
 8007a32:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f5      	bne.n	8007a28 <USBD_GetLen+0xe>
  }

  return len;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr

08007a48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007a5e:	88fa      	ldrh	r2, [r7, #6]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fc22 	bl	80082ba <USBD_LL_Transmit>

  return USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	2100      	movs	r1, #0
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fc10 	bl	80082ba <USBD_LL_Transmit>

  return USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fc21 	bl	8008300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2200      	movs	r2, #0
 8007adc:	2100      	movs	r1, #0
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fbeb 	bl	80082ba <USBD_LL_Transmit>

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2205      	movs	r2, #5
 8007afa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007afe:	2300      	movs	r3, #0
 8007b00:	2200      	movs	r2, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbfb 	bl	8008300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4912      	ldr	r1, [pc, #72]	@ (8007b64 <MX_USB_DEVICE_Init+0x50>)
 8007b1c:	4812      	ldr	r0, [pc, #72]	@ (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b1e:	f7fe ff81 	bl	8006a24 <USBD_Init>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b28:	f7f8 fbdc 	bl	80002e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007b2c:	490f      	ldr	r1, [pc, #60]	@ (8007b6c <MX_USB_DEVICE_Init+0x58>)
 8007b2e:	480e      	ldr	r0, [pc, #56]	@ (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b30:	f7fe ffa3 	bl	8006a7a <USBD_RegisterClass>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b3a:	f7f8 fbd3 	bl	80002e4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007b3e:	490c      	ldr	r1, [pc, #48]	@ (8007b70 <MX_USB_DEVICE_Init+0x5c>)
 8007b40:	4809      	ldr	r0, [pc, #36]	@ (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b42:	f7fd ff4f 	bl	80059e4 <USBD_MSC_RegisterStorage>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b4c:	f7f8 fbca 	bl	80002e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b50:	4805      	ldr	r0, [pc, #20]	@ (8007b68 <MX_USB_DEVICE_Init+0x54>)
 8007b52:	f7fe ffab 	bl	8006aac <USBD_Start>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b5c:	f7f8 fbc2 	bl	80002e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b60:	bf00      	nop
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	200000b0 	.word	0x200000b0
 8007b68:	20000144 	.word	0x20000144
 8007b6c:	2000000c 	.word	0x2000000c
 8007b70:	20000100 	.word	0x20000100

08007b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2212      	movs	r2, #18
 8007b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b86:	4b03      	ldr	r3, [pc, #12]	@ (8007b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	200000cc 	.word	0x200000cc

08007b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007baa:	4b03      	ldr	r3, [pc, #12]	@ (8007bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	200000e0 	.word	0x200000e0

08007bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d105      	bne.n	8007bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4907      	ldr	r1, [pc, #28]	@ (8007bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bd2:	4808      	ldr	r0, [pc, #32]	@ (8007bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd4:	f7ff fedf 	bl	8007996 <USBD_GetString>
 8007bd8:	e004      	b.n	8007be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	4904      	ldr	r1, [pc, #16]	@ (8007bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bde:	4805      	ldr	r0, [pc, #20]	@ (8007bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007be0:	f7ff fed9 	bl	8007996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be4:	4b02      	ldr	r3, [pc, #8]	@ (8007bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000408 	.word	0x20000408
 8007bf4:	08008490 	.word	0x08008490

08007bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	6039      	str	r1, [r7, #0]
 8007c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	4904      	ldr	r1, [pc, #16]	@ (8007c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c08:	4804      	ldr	r0, [pc, #16]	@ (8007c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c0a:	f7ff fec4 	bl	8007996 <USBD_GetString>
  return USBD_StrDesc;
 8007c0e:	4b02      	ldr	r3, [pc, #8]	@ (8007c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000408 	.word	0x20000408
 8007c1c:	080084a4 	.word	0x080084a4

08007c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	221a      	movs	r2, #26
 8007c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c32:	f000 f843 	bl	8007cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c36:	4b02      	ldr	r3, [pc, #8]	@ (8007c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	200000e4 	.word	0x200000e4

08007c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4907      	ldr	r1, [pc, #28]	@ (8007c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c5a:	4808      	ldr	r0, [pc, #32]	@ (8007c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c5c:	f7ff fe9b 	bl	8007996 <USBD_GetString>
 8007c60:	e004      	b.n	8007c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4904      	ldr	r1, [pc, #16]	@ (8007c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c66:	4805      	ldr	r0, [pc, #20]	@ (8007c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c68:	f7ff fe95 	bl	8007996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c6c:	4b02      	ldr	r3, [pc, #8]	@ (8007c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000408 	.word	0x20000408
 8007c7c:	080084b8 	.word	0x080084b8

08007c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	6039      	str	r1, [r7, #0]
 8007c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4907      	ldr	r1, [pc, #28]	@ (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c96:	4808      	ldr	r0, [pc, #32]	@ (8007cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c98:	f7ff fe7d 	bl	8007996 <USBD_GetString>
 8007c9c:	e004      	b.n	8007ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4904      	ldr	r1, [pc, #16]	@ (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ca2:	4805      	ldr	r0, [pc, #20]	@ (8007cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ca4:	f7ff fe77 	bl	8007996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca8:	4b02      	ldr	r3, [pc, #8]	@ (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000408 	.word	0x20000408
 8007cb8:	080084c4 	.word	0x080084c4

08007cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d00 <Get_SerialNum+0x44>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d04 <Get_SerialNum+0x48>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cce:	4b0e      	ldr	r3, [pc, #56]	@ (8007d08 <Get_SerialNum+0x4c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4413      	add	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ce2:	2208      	movs	r2, #8
 8007ce4:	4909      	ldr	r1, [pc, #36]	@ (8007d0c <Get_SerialNum+0x50>)
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f814 	bl	8007d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cec:	2204      	movs	r2, #4
 8007cee:	4908      	ldr	r1, [pc, #32]	@ (8007d10 <Get_SerialNum+0x54>)
 8007cf0:	68b8      	ldr	r0, [r7, #8]
 8007cf2:	f000 f80f 	bl	8007d14 <IntToUnicode>
  }
}
 8007cf6:	bf00      	nop
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	1ffff7e8 	.word	0x1ffff7e8
 8007d04:	1ffff7ec 	.word	0x1ffff7ec
 8007d08:	1ffff7f0 	.word	0x1ffff7f0
 8007d0c:	200000e6 	.word	0x200000e6
 8007d10:	200000f6 	.word	0x200000f6

08007d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	75fb      	strb	r3, [r7, #23]
 8007d2a:	e027      	b.n	8007d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	0f1b      	lsrs	r3, r3, #28
 8007d30:	2b09      	cmp	r3, #9
 8007d32:	d80b      	bhi.n	8007d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	0f1b      	lsrs	r3, r3, #28
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4619      	mov	r1, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	440b      	add	r3, r1
 8007d44:	3230      	adds	r2, #48	@ 0x30
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e00a      	b.n	8007d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	0f1b      	lsrs	r3, r3, #28
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	4619      	mov	r1, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	440b      	add	r3, r1
 8007d5c:	3237      	adds	r2, #55	@ 0x37
 8007d5e:	b2d2      	uxtb	r2, r2
 8007d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	4413      	add	r3, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	75fb      	strb	r3, [r7, #23]
 8007d7c:	7dfa      	ldrb	r2, [r7, #23]
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d3d3      	bcc.n	8007d2c <IntToUnicode+0x18>
  }
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	memset(ram_storage, 0, sizeof(ram_storage));
 8007d9a:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4803      	ldr	r0, [pc, #12]	@ (8007db0 <STORAGE_Init_FS+0x20>)
 8007da2:	f000 fb2f 	bl	8008404 <memset>
  return (USBD_OK);
 8007da6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000608 	.word	0x20000608

08007db4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2214      	movs	r2, #20
 8007dc6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dce:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007dd0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr

08007ddc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007de6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	4603      	mov	r3, r0
 8007dfa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007dfc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	461a      	mov	r2, r3
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	memcpy(buf, &ram_storage[blk_addr * STORAGE_BLK_SIZ], blk_len * STORAGE_BLK_SIZ);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	025b      	lsls	r3, r3, #9
 8007e20:	4a06      	ldr	r2, [pc, #24]	@ (8007e3c <STORAGE_Read_FS+0x34>)
 8007e22:	1899      	adds	r1, r3, r2
 8007e24:	89bb      	ldrh	r3, [r7, #12]
 8007e26:	025b      	lsls	r3, r3, #9
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68b8      	ldr	r0, [r7, #8]
 8007e2c:	f000 fb16 	bl	800845c <memcpy>
	return (USBD_OK);
 8007e30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000608 	.word	0x20000608

08007e40 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	607a      	str	r2, [r7, #4]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73fb      	strb	r3, [r7, #15]
 8007e50:	4613      	mov	r3, r2
 8007e52:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	memcpy(&ram_storage[blk_addr * STORAGE_BLK_SIZ], buf, blk_len * STORAGE_BLK_SIZ);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	025b      	lsls	r3, r3, #9
 8007e58:	4a06      	ldr	r2, [pc, #24]	@ (8007e74 <STORAGE_Write_FS+0x34>)
 8007e5a:	1898      	adds	r0, r3, r2
 8007e5c:	89bb      	ldrh	r3, [r7, #12]
 8007e5e:	025b      	lsls	r3, r3, #9
 8007e60:	461a      	mov	r2, r3
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	f000 fafa 	bl	800845c <memcpy>
  return (USBD_OK);
 8007e68:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000608 	.word	0x20000608

08007e78 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007e7c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
	...

08007e88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a0d      	ldr	r2, [pc, #52]	@ (8007ecc <HAL_PCD_MspInit+0x44>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d113      	bne.n	8007ec2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <HAL_PCD_MspInit+0x48>)
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ed0 <HAL_PCD_MspInit+0x48>)
 8007ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ea4:	61d3      	str	r3, [r2, #28]
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <HAL_PCD_MspInit+0x48>)
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	2014      	movs	r0, #20
 8007eb8:	f7f8 fbe7 	bl	800068a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ebc:	2014      	movs	r0, #20
 8007ebe:	f7f8 fc00 	bl	80006c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	40005c00 	.word	0x40005c00
 8007ed0:	40021000 	.word	0x40021000

08007ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7fe fe26 	bl	8006b3c <USBD_LL_SetupStage>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	440b      	add	r3, r1
 8007f18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	4619      	mov	r1, r3
 8007f22:	f7fe fe58 	bl	8006bd6 <USBD_LL_DataOutStage>
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	440b      	add	r3, r1
 8007f4e:	3324      	adds	r3, #36	@ 0x24
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	4619      	mov	r1, r3
 8007f56:	f7fe feaf 	bl	8006cb8 <USBD_LL_DataInStage>
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe ffbf 	bl	8006ef4 <USBD_LL_SOF>
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f86:	2301      	movs	r3, #1
 8007f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	799b      	ldrb	r3, [r3, #6]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d001      	beq.n	8007f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f92:	f7f8 f9a7 	bl	80002e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f9c:	7bfa      	ldrb	r2, [r7, #15]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe ff6f 	bl	8006e84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe ff28 	bl	8006e02 <USBD_LL_Reset>
}
 8007fb2:	bf00      	nop
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe ff69 	bl	8006ea2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7a9b      	ldrb	r3, [r3, #10]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fd8:	4b04      	ldr	r3, [pc, #16]	@ (8007fec <HAL_PCD_SuspendCallback+0x30>)
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	4a03      	ldr	r2, [pc, #12]	@ (8007fec <HAL_PCD_SuspendCallback+0x30>)
 8007fde:	f043 0306 	orr.w	r3, r3, #6
 8007fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	e000ed00 	.word	0xe000ed00

08007ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe ff63 	bl	8006eca <USBD_LL_Resume>
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008014:	4a23      	ldr	r2, [pc, #140]	@ (80080a4 <USBD_LL_Init+0x98>)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a21      	ldr	r2, [pc, #132]	@ (80080a4 <USBD_LL_Init+0x98>)
 8008020:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008024:	4b1f      	ldr	r3, [pc, #124]	@ (80080a4 <USBD_LL_Init+0x98>)
 8008026:	4a20      	ldr	r2, [pc, #128]	@ (80080a8 <USBD_LL_Init+0x9c>)
 8008028:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800802a:	4b1e      	ldr	r3, [pc, #120]	@ (80080a4 <USBD_LL_Init+0x98>)
 800802c:	2208      	movs	r2, #8
 800802e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008030:	4b1c      	ldr	r3, [pc, #112]	@ (80080a4 <USBD_LL_Init+0x98>)
 8008032:	2202      	movs	r2, #2
 8008034:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008036:	4b1b      	ldr	r3, [pc, #108]	@ (80080a4 <USBD_LL_Init+0x98>)
 8008038:	2200      	movs	r2, #0
 800803a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800803c:	4b19      	ldr	r3, [pc, #100]	@ (80080a4 <USBD_LL_Init+0x98>)
 800803e:	2200      	movs	r2, #0
 8008040:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008042:	4b18      	ldr	r3, [pc, #96]	@ (80080a4 <USBD_LL_Init+0x98>)
 8008044:	2200      	movs	r2, #0
 8008046:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008048:	4816      	ldr	r0, [pc, #88]	@ (80080a4 <USBD_LL_Init+0x98>)
 800804a:	f7f8 fcf1 	bl	8000a30 <HAL_PCD_Init>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008054:	f7f8 f946 	bl	80002e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800805e:	2318      	movs	r3, #24
 8008060:	2200      	movs	r2, #0
 8008062:	2100      	movs	r1, #0
 8008064:	f7fa fa2f 	bl	80024c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800806e:	2358      	movs	r3, #88	@ 0x58
 8008070:	2200      	movs	r2, #0
 8008072:	2180      	movs	r1, #128	@ 0x80
 8008074:	f7fa fa27 	bl	80024c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800807e:	2398      	movs	r3, #152	@ 0x98
 8008080:	2200      	movs	r2, #0
 8008082:	2181      	movs	r1, #129	@ 0x81
 8008084:	f7fa fa1f 	bl	80024c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800808e:	23d8      	movs	r3, #216	@ 0xd8
 8008090:	2200      	movs	r2, #0
 8008092:	2101      	movs	r1, #1
 8008094:	f7fa fa17 	bl	80024c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20002e08 	.word	0x20002e08
 80080a8:	40005c00 	.word	0x40005c00

080080ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f8 fdaa 	bl	8000c1c <HAL_PCD_Start>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f96c 	bl	80083ac <USBD_Get_USB_Status>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	461a      	mov	r2, r3
 80080f0:	4603      	mov	r3, r0
 80080f2:	70fb      	strb	r3, [r7, #3]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70bb      	strb	r3, [r7, #2]
 80080f8:	4613      	mov	r3, r2
 80080fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800810a:	78bb      	ldrb	r3, [r7, #2]
 800810c:	883a      	ldrh	r2, [r7, #0]
 800810e:	78f9      	ldrb	r1, [r7, #3]
 8008110:	f7f8 fefe 	bl	8000f10 <HAL_PCD_EP_Open>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f946 	bl	80083ac <USBD_Get_USB_Status>
 8008120:	4603      	mov	r3, r0
 8008122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008124:	7bbb      	ldrb	r3, [r7, #14]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	460b      	mov	r3, r1
 8008138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	4611      	mov	r1, r2
 800814c:	4618      	mov	r0, r3
 800814e:	f7f8 ff3c 	bl	8000fca <HAL_PCD_EP_Close>
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f927 	bl	80083ac <USBD_Get_USB_Status>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008162:	7bbb      	ldrb	r3, [r7, #14]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7f9 f898 	bl	80012c0 <HAL_PCD_EP_Flush>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 f908 	bl	80083ac <USBD_Get_USB_Status>
 800819c:	4603      	mov	r3, r0
 800819e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081c4:	78fa      	ldrb	r2, [r7, #3]
 80081c6:	4611      	mov	r1, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7f8 ffc5 	bl	8001158 <HAL_PCD_EP_SetStall>
 80081ce:	4603      	mov	r3, r0
 80081d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 f8e9 	bl	80083ac <USBD_Get_USB_Status>
 80081da:	4603      	mov	r3, r0
 80081dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081de:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f7f9 f806 	bl	8001218 <HAL_PCD_EP_ClrStall>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f8ca 	bl	80083ac <USBD_Get_USB_Status>
 8008218:	4603      	mov	r3, r0
 800821a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800821c:	7bbb      	ldrb	r3, [r7, #14]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008238:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800823a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800823e:	2b00      	cmp	r3, #0
 8008240:	da0b      	bge.n	800825a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	440b      	add	r3, r1
 8008254:	3312      	adds	r3, #18
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	e00b      	b.n	8008272 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	440b      	add	r3, r1
 800826c:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008270:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7f8 fe14 	bl	8000ec8 <HAL_PCD_SetAddress>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f880 	bl	80083ac <USBD_Get_USB_Status>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	461a      	mov	r2, r3
 80082c6:	460b      	mov	r3, r1
 80082c8:	72fb      	strb	r3, [r7, #11]
 80082ca:	4613      	mov	r3, r2
 80082cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80082dc:	893b      	ldrh	r3, [r7, #8]
 80082de:	7af9      	ldrb	r1, [r7, #11]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	f7f8 ff02 	bl	80010ea <HAL_PCD_EP_Transmit>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 f85d 	bl	80083ac <USBD_Get_USB_Status>
 80082f2:	4603      	mov	r3, r0
 80082f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	607a      	str	r2, [r7, #4]
 800830a:	461a      	mov	r2, r3
 800830c:	460b      	mov	r3, r1
 800830e:	72fb      	strb	r3, [r7, #11]
 8008310:	4613      	mov	r3, r2
 8008312:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	7af9      	ldrb	r1, [r7, #11]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	f7f8 fe97 	bl	800105a <HAL_PCD_EP_Receive>
 800832c:	4603      	mov	r3, r0
 800832e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f83a 	bl	80083ac <USBD_Get_USB_Status>
 8008338:	4603      	mov	r3, r0
 800833a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800833c:	7dbb      	ldrb	r3, [r7, #22]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008358:	78fa      	ldrb	r2, [r7, #3]
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f7f8 fead 	bl	80010bc <HAL_PCD_EP_GetRxCount>
 8008362:	4603      	mov	r3, r0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008374:	4b02      	ldr	r3, [pc, #8]	@ (8008380 <USBD_static_malloc+0x14>)
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr
 8008380:	200030e0 	.word	0x200030e0

08008384 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]

}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d817      	bhi.n	80083f0 <USBD_Get_USB_Status+0x44>
 80083c0:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <USBD_Get_USB_Status+0x1c>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083df 	.word	0x080083df
 80083d0:	080083e5 	.word	0x080083e5
 80083d4:	080083eb 	.word	0x080083eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
    break;
 80083dc:	e00b      	b.n	80083f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083de:	2302      	movs	r3, #2
 80083e0:	73fb      	strb	r3, [r7, #15]
    break;
 80083e2:	e008      	b.n	80083f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
    break;
 80083e8:	e005      	b.n	80083f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ea:	2302      	movs	r3, #2
 80083ec:	73fb      	strb	r3, [r7, #15]
    break;
 80083ee:	e002      	b.n	80083f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083f0:	2302      	movs	r3, #2
 80083f2:	73fb      	strb	r3, [r7, #15]
    break;
 80083f4:	bf00      	nop
  }
  return usb_status;
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop

08008404 <memset>:
 8008404:	4603      	mov	r3, r0
 8008406:	4402      	add	r2, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <__libc_init_array>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	2600      	movs	r6, #0
 8008418:	4d0c      	ldr	r5, [pc, #48]	@ (800844c <__libc_init_array+0x38>)
 800841a:	4c0d      	ldr	r4, [pc, #52]	@ (8008450 <__libc_init_array+0x3c>)
 800841c:	1b64      	subs	r4, r4, r5
 800841e:	10a4      	asrs	r4, r4, #2
 8008420:	42a6      	cmp	r6, r4
 8008422:	d109      	bne.n	8008438 <__libc_init_array+0x24>
 8008424:	f000 f828 	bl	8008478 <_init>
 8008428:	2600      	movs	r6, #0
 800842a:	4d0a      	ldr	r5, [pc, #40]	@ (8008454 <__libc_init_array+0x40>)
 800842c:	4c0a      	ldr	r4, [pc, #40]	@ (8008458 <__libc_init_array+0x44>)
 800842e:	1b64      	subs	r4, r4, r5
 8008430:	10a4      	asrs	r4, r4, #2
 8008432:	42a6      	cmp	r6, r4
 8008434:	d105      	bne.n	8008442 <__libc_init_array+0x2e>
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	f855 3b04 	ldr.w	r3, [r5], #4
 800843c:	4798      	blx	r3
 800843e:	3601      	adds	r6, #1
 8008440:	e7ee      	b.n	8008420 <__libc_init_array+0xc>
 8008442:	f855 3b04 	ldr.w	r3, [r5], #4
 8008446:	4798      	blx	r3
 8008448:	3601      	adds	r6, #1
 800844a:	e7f2      	b.n	8008432 <__libc_init_array+0x1e>
 800844c:	08008534 	.word	0x08008534
 8008450:	08008534 	.word	0x08008534
 8008454:	08008534 	.word	0x08008534
 8008458:	08008538 	.word	0x08008538

0800845c <memcpy>:
 800845c:	440a      	add	r2, r1
 800845e:	4291      	cmp	r1, r2
 8008460:	f100 33ff 	add.w	r3, r0, #4294967295
 8008464:	d100      	bne.n	8008468 <memcpy+0xc>
 8008466:	4770      	bx	lr
 8008468:	b510      	push	{r4, lr}
 800846a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800846e:	4291      	cmp	r1, r2
 8008470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008474:	d1f9      	bne.n	800846a <memcpy+0xe>
 8008476:	bd10      	pop	{r4, pc}

08008478 <_init>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr

08008484 <_fini>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr
