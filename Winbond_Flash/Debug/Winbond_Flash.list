
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b594  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800b834  0800b834  0000c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b8d4  0800b8d4  0000c8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b8dc  0800b8dc  0000c8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b8e0  0800b8e0  0000c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000089c  24000000  0800b8e4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003d8  2400089c  0800c180  0000d89c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c74  0800c180  0000dc74  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d89c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001713d  00000000  00000000  0000d8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f84  00000000  00000000  00024a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ed8  00000000  00000000  00027990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b59  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003903b  00000000  00000000  000293c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017305  00000000  00000000  000623fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160d8d  00000000  00000000  00079701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001da48e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000041ac  00000000  00000000  001da4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001de680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400089c 	.word	0x2400089c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b81c 	.word	0x0800b81c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240008a0 	.word	0x240008a0
 80002dc:	0800b81c 	.word	0x0800b81c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <Read_Register>:

//pointer
uint8_t* Buffer=&write_data[0];


void Read_Register(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <Read_Register+0x50>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f949 	bl	800095c <Read_Status_Register>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <Read_Register+0x54>)
 80006d0:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80006d2:	2064      	movs	r0, #100	@ 0x64
 80006d4:	f000 fb42 	bl	8000d5c <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <Read_Register+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f93d 	bl	800095c <Read_Status_Register>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <Read_Register+0x5c>)
 80006e8:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80006ea:	2064      	movs	r0, #100	@ 0x64
 80006ec:	f000 fb36 	bl	8000d5c <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <Read_Register+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f931 	bl	800095c <Read_Status_Register>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <Read_Register+0x64>)
 8000700:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000702:	2064      	movs	r0, #100	@ 0x64
 8000704:	f000 fb2a 	bl	8000d5c <delay_ns>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000808 	.word	0x24000808
 8000710:	240008b8 	.word	0x240008b8
 8000714:	24000809 	.word	0x24000809
 8000718:	240008b9 	.word	0x240008b9
 800071c:	2400080a 	.word	0x2400080a
 8000720:	240008ba 	.word	0x240008ba

08000724 <Write_Data>:

void Write_Data(uint8_t* data, uint16_t lenght){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <Write_Data+0x80>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <Write_Data+0x22>
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <Write_Data+0x84>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <Write_Data+0x22>
		Block_Erase(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fad5 	bl	8000cf0 <Block_Erase>
	}
	uint16_t count=0;
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800074a:	e022      	b.n	8000792 <Write_Data+0x6e>
		*Buffer=*data;
 800074c:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <Write_Data+0x88>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	701a      	strb	r2, [r3, #0]
		Buffer++;
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <Write_Data+0x88>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <Write_Data+0x88>)
 800075e:	6013      	str	r3, [r2, #0]
		data++;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <Write_Data+0x84>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <Write_Data+0x84>)
 8000770:	801a      	strh	r2, [r3, #0]
		count++;
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	3301      	adds	r3, #1
 8000776:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000778:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <Write_Data+0x84>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000780:	d307      	bcc.n	8000792 <Write_Data+0x6e>
			Write_Data_Buffer(0, &write_data[0], 2048);
 8000782:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000786:	490a      	ldr	r1, [pc, #40]	@ (80007b0 <Write_Data+0x8c>)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f977 	bl	8000a7c <Write_Data_Buffer>
			Write_to_page();
 800078e:	f000 f811 	bl	80007b4 <Write_to_page>
	while(count<lenght){
 8000792:	89fa      	ldrh	r2, [r7, #14]
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3d8      	bcc.n	800074c <Write_Data+0x28>
		}
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	240008be 	.word	0x240008be
 80007a8:	240008bc 	.word	0x240008bc
 80007ac:	24000800 	.word	0x24000800
 80007b0:	24000000 	.word	0x24000000

080007b4 <Write_to_page>:
			Write_to_page();
		}
	}
}

void Write_to_page(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Write_to_page+0x50>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4912      	ldr	r1, [pc, #72]	@ (8000808 <Write_to_page+0x54>)
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 f95b 	bl	8000a7c <Write_Data_Buffer>
	Write_Data_Flash(Page_Index);
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <Write_to_page+0x58>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f994 	bl	8000af8 <Write_Data_Flash>
	Page_Index++;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <Write_to_page+0x58>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <Write_to_page+0x58>)
 80007da:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <Write_to_page+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	801a      	strh	r2, [r3, #0]
	Buffer=&write_data[0];
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <Write_to_page+0x5c>)
 80007e4:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <Write_to_page+0x54>)
 80007e6:	601a      	str	r2, [r3, #0]
	memset(write_data, 0xFF, sizeof(write_data));
 80007e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007ec:	21ff      	movs	r1, #255	@ 0xff
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <Write_to_page+0x54>)
 80007f0:	f00a fb96 	bl	800af20 <memset>
	Automatic_Block_Managment(Page_Index);
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <Write_to_page+0x58>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f80b 	bl	8000814 <Automatic_Block_Managment>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	240008bc 	.word	0x240008bc
 8000808:	24000000 	.word	0x24000000
 800080c:	240008be 	.word	0x240008be
 8000810:	24000800 	.word	0x24000800

08000814 <Automatic_Block_Managment>:
void Read_Data(uint16_t page, uint8_t* data){
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

void Automatic_Block_Managment(uint16_t Page_Index){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	099b      	lsrs	r3, r3, #6
 8000822:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <Automatic_Block_Managment+0x38>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	89fa      	ldrh	r2, [r7, #14]
 800082a:	429a      	cmp	r2, r3
 800082c:	d007      	beq.n	800083e <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fa5d 	bl	8000cf0 <Block_Erase>
		Block_Mem=Block;
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <Automatic_Block_Managment+0x38>)
 8000838:	89fb      	ldrh	r3, [r7, #14]
 800083a:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 800083c:	e002      	b.n	8000844 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 800083e:	4a03      	ldr	r2, [pc, #12]	@ (800084c <Automatic_Block_Managment+0x38>)
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	8013      	strh	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240008c0 	.word	0x240008c0

08000850 <W25N_WaitForReady>:
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8000854:	2064      	movs	r0, #100	@ 0x64
 8000856:	f000 fa81 	bl	8000d5c <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 800085a:	e002      	b.n	8000862 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 800085c:	2064      	movs	r0, #100	@ 0x64
 800085e:	f000 fa7d 	bl	8000d5c <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <W25N_WaitForReady+0x2c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f878 	bl	800095c <Read_Status_Register>
 800086c:	4603      	mov	r3, r0
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f2      	bne.n	800085c <W25N_WaitForReady+0xc>
    }
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400080a 	.word	0x2400080a

08000880 <Write_Enable>:

void Write_Enable(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	csLOW();
 8000884:	2200      	movs	r2, #0
 8000886:	2110      	movs	r1, #16
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <Write_Enable+0x30>)
 800088a:	f004 fcb1 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 800088e:	2364      	movs	r3, #100	@ 0x64
 8000890:	2201      	movs	r2, #1
 8000892:	4908      	ldr	r1, [pc, #32]	@ (80008b4 <Write_Enable+0x34>)
 8000894:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <Write_Enable+0x38>)
 8000896:	f007 fc4f 	bl	8008138 <HAL_SPI_Transmit>
	csHIGH();
 800089a:	2201      	movs	r2, #1
 800089c:	2110      	movs	r1, #16
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <Write_Enable+0x30>)
 80008a0:	f004 fca6 	bl	80051f0 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 80008a4:	2064      	movs	r0, #100	@ 0x64
 80008a6:	f000 fa59 	bl	8000d5c <delay_ns>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	58020000 	.word	0x58020000
 80008b4:	2400080b 	.word	0x2400080b
 80008b8:	240008e4 	.word	0x240008e4

080008bc <Flash_Init>:
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Flash_Init(uint8_t BUF){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ca:	f001 faf5 	bl	8001eb8 <HAL_Delay>
	if(BUF){
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d012      	beq.n	80008fa <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <Flash_Init+0x98>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f83f 	bl	800095c <Read_Status_Register>
 80008de:	4603      	mov	r3, r0
 80008e0:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 80008e2:	7bbb      	ldrb	r3, [r7, #14]
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <Flash_Init+0x98>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	7bba      	ldrb	r2, [r7, #14]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f864 	bl	80009c0 <Write_Status_Register>
 80008f8:	e011      	b.n	800091e <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 80008fa:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <Flash_Init+0x98>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f82c 	bl	800095c <Read_Status_Register>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	f023 0308 	bic.w	r3, r3, #8
 800090e:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <Flash_Init+0x98>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	7bfa      	ldrb	r2, [r7, #15]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f851 	bl	80009c0 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <Flash_Init+0x9c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f81a 	bl	800095c <Read_Status_Register>
 8000928:	4603      	mov	r3, r0
 800092a:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 800092c:	7b7b      	ldrb	r3, [r7, #13]
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 8000934:	7b7b      	ldrb	r3, [r7, #13]
 8000936:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 800093a:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <Flash_Init+0x9c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	7b7a      	ldrb	r2, [r7, #13]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f83b 	bl	80009c0 <Write_Status_Register>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	24000809 	.word	0x24000809
 8000958:	24000808 	.word	0x24000808

0800095c <Read_Status_Register>:

uint8_t Read_Status_Register(uint8_t SR){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <Read_Status_Register+0x50>)
 8000968:	781a      	ldrb	r2, [r3, #0]
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <Read_Status_Register+0x54>)
 800096c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <Read_Status_Register+0x54>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000974:	2200      	movs	r2, #0
 8000976:	2110      	movs	r1, #16
 8000978:	480e      	ldr	r0, [pc, #56]	@ (80009b4 <Read_Status_Register+0x58>)
 800097a:	f004 fc39 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 800097e:	2364      	movs	r3, #100	@ 0x64
 8000980:	2202      	movs	r2, #2
 8000982:	490b      	ldr	r1, [pc, #44]	@ (80009b0 <Read_Status_Register+0x54>)
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <Read_Status_Register+0x5c>)
 8000986:	f007 fbd7 	bl	8008138 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 800098a:	2364      	movs	r3, #100	@ 0x64
 800098c:	2201      	movs	r2, #1
 800098e:	490b      	ldr	r1, [pc, #44]	@ (80009bc <Read_Status_Register+0x60>)
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <Read_Status_Register+0x5c>)
 8000992:	f007 fdbf 	bl	8008514 <HAL_SPI_Receive>
	csHIGH();
 8000996:	2201      	movs	r2, #1
 8000998:	2110      	movs	r1, #16
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <Read_Status_Register+0x58>)
 800099c:	f004 fc28 	bl	80051f0 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <Read_Status_Register+0x60>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000806 	.word	0x24000806
 80009b0:	240008c4 	.word	0x240008c4
 80009b4:	58020000 	.word	0x58020000
 80009b8:	240008e4 	.word	0x240008e4
 80009bc:	240008cc 	.word	0x240008cc

080009c0 <Write_Status_Register>:

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <Write_Status_Register+0x4c>)
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <Write_Status_Register+0x50>)
 80009d6:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <Write_Status_Register+0x50>)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 80009de:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <Write_Status_Register+0x50>)
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	7093      	strb	r3, [r2, #2]
	csLOW();
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <Write_Status_Register+0x54>)
 80009ea:	f004 fc01 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 80009ee:	2364      	movs	r3, #100	@ 0x64
 80009f0:	2203      	movs	r2, #3
 80009f2:	4907      	ldr	r1, [pc, #28]	@ (8000a10 <Write_Status_Register+0x50>)
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <Write_Status_Register+0x58>)
 80009f6:	f007 fb9f 	bl	8008138 <HAL_SPI_Transmit>
	csHIGH();
 80009fa:	2201      	movs	r2, #1
 80009fc:	2110      	movs	r1, #16
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <Write_Status_Register+0x54>)
 8000a00:	f004 fbf6 	bl	80051f0 <HAL_GPIO_WritePin>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	24000807 	.word	0x24000807
 8000a10:	240008c4 	.word	0x240008c4
 8000a14:	58020000 	.word	0x58020000
 8000a18:	240008e4 	.word	0x240008e4

08000a1c <Read_ID>:

uint32_t Read_ID(void){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2100      	movs	r1, #0
 8000a26:	460a      	mov	r2, r1
 8000a28:	801a      	strh	r2, [r3, #0]
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2110      	movs	r1, #16
 8000a32:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <Read_ID+0x54>)
 8000a34:	f004 fbdc 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000a38:	2364      	movs	r3, #100	@ 0x64
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	490d      	ldr	r1, [pc, #52]	@ (8000a74 <Read_ID+0x58>)
 8000a3e:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <Read_ID+0x5c>)
 8000a40:	f007 fb7a 	bl	8008138 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000a44:	1d39      	adds	r1, r7, #4
 8000a46:	2364      	movs	r3, #100	@ 0x64
 8000a48:	2203      	movs	r2, #3
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <Read_ID+0x5c>)
 8000a4c:	f007 fd62 	bl	8008514 <HAL_SPI_Receive>
	csHIGH();
 8000a50:	2201      	movs	r2, #1
 8000a52:	2110      	movs	r1, #16
 8000a54:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <Read_ID+0x54>)
 8000a56:	f004 fbcb 	bl	80051f0 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000a5a:	793b      	ldrb	r3, [r7, #4]
 8000a5c:	041a      	lsls	r2, r3, #16
 8000a5e:	797b      	ldrb	r3, [r7, #5]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	79b9      	ldrb	r1, [r7, #6]
 8000a64:	430b      	orrs	r3, r1
 8000a66:	4313      	orrs	r3, r2
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	58020000 	.word	0x58020000
 8000a74:	24000804 	.word	0x24000804
 8000a78:	240008e4 	.word	0x240008e4

08000a7c <Write_Data_Buffer>:

void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	80fb      	strh	r3, [r7, #6]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000a8c:	f7ff fef8 	bl	8000880 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000a90:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <Write_Data_Buffer+0x6c>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <Write_Data_Buffer+0x70>)
 8000a96:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <Write_Data_Buffer+0x70>)
 8000aa2:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <Write_Data_Buffer+0x70>)
 8000aaa:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	480f      	ldr	r0, [pc, #60]	@ (8000af0 <Write_Data_Buffer+0x74>)
 8000ab2:	f004 fb9d 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000ab6:	2364      	movs	r3, #100	@ 0x64
 8000ab8:	2203      	movs	r2, #3
 8000aba:	490c      	ldr	r1, [pc, #48]	@ (8000aec <Write_Data_Buffer+0x70>)
 8000abc:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <Write_Data_Buffer+0x78>)
 8000abe:	f007 fb3b 	bl	8008138 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	6839      	ldr	r1, [r7, #0]
 8000aca:	480a      	ldr	r0, [pc, #40]	@ (8000af4 <Write_Data_Buffer+0x78>)
 8000acc:	f007 fb34 	bl	8008138 <HAL_SPI_Transmit>
	csHIGH();
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <Write_Data_Buffer+0x74>)
 8000ad6:	f004 fb8b 	bl	80051f0 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ada:	2064      	movs	r0, #100	@ 0x64
 8000adc:	f000 f93e 	bl	8000d5c <delay_ns>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2400080d 	.word	0x2400080d
 8000aec:	240008c4 	.word	0x240008c4
 8000af0:	58020000 	.word	0x58020000
 8000af4:	240008e4 	.word	0x240008e4

08000af8 <Write_Data_Flash>:

void Write_Data_Flash(uint16_t Page_Addr){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <Write_Data_Flash+0x58>)
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <Write_Data_Flash+0x5c>)
 8000b08:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <Write_Data_Flash+0x5c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <Write_Data_Flash+0x5c>)
 8000b1a:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <Write_Data_Flash+0x5c>)
 8000b22:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b24:	2200      	movs	r2, #0
 8000b26:	2110      	movs	r1, #16
 8000b28:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <Write_Data_Flash+0x60>)
 8000b2a:	f004 fb61 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000b2e:	2364      	movs	r3, #100	@ 0x64
 8000b30:	2204      	movs	r2, #4
 8000b32:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <Write_Data_Flash+0x5c>)
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <Write_Data_Flash+0x64>)
 8000b36:	f007 faff 	bl	8008138 <HAL_SPI_Transmit>
	csHIGH();
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2110      	movs	r1, #16
 8000b3e:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <Write_Data_Flash+0x60>)
 8000b40:	f004 fb56 	bl	80051f0 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000b44:	f7ff fe84 	bl	8000850 <W25N_WaitForReady>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2400080e 	.word	0x2400080e
 8000b54:	240008c4 	.word	0x240008c4
 8000b58:	58020000 	.word	0x58020000
 8000b5c:	240008e4 	.word	0x240008e4

08000b60 <Select_Page_Read>:

void Select_Page_Read(uint16_t Page_Addr){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <Select_Page_Read+0x58>)
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <Select_Page_Read+0x5c>)
 8000b70:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <Select_Page_Read+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <Select_Page_Read+0x5c>)
 8000b82:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <Select_Page_Read+0x5c>)
 8000b8a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <Select_Page_Read+0x60>)
 8000b92:	f004 fb2d 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000b96:	2364      	movs	r3, #100	@ 0x64
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4908      	ldr	r1, [pc, #32]	@ (8000bbc <Select_Page_Read+0x5c>)
 8000b9c:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <Select_Page_Read+0x64>)
 8000b9e:	f007 facb 	bl	8008138 <HAL_SPI_Transmit>
	csHIGH();
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <Select_Page_Read+0x60>)
 8000ba8:	f004 fb22 	bl	80051f0 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000bac:	f7ff fe50 	bl	8000850 <W25N_WaitForReady>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2400080f 	.word	0x2400080f
 8000bbc:	240008c4 	.word	0x240008c4
 8000bc0:	58020000 	.word	0x58020000
 8000bc4:	240008e4 	.word	0x240008e4

08000bc8 <Read_Data_Cont>:
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
	csHIGH();
}

void Read_Data_Cont(uint16_t len){
 8000bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bcc:	b089      	sub	sp, #36	@ 0x24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80fb      	strh	r3, [r7, #6]
 8000bd4:	466b      	mov	r3, sp
 8000bd6:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ffc1 	bl	8000b60 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000bde:	88f9      	ldrh	r1, [r7, #6]
 8000be0:	460b      	mov	r3, r1
 8000be2:	3b01      	subs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	b28b      	uxth	r3, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	4698      	mov	r8, r3
 8000bec:	4691      	mov	r9, r2
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c02:	b28b      	uxth	r3, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	461c      	mov	r4, r3
 8000c08:	4615      	mov	r5, r2
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	00eb      	lsls	r3, r5, #3
 8000c14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c18:	00e2      	lsls	r2, r4, #3
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	3307      	adds	r3, #7
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	ebad 0d03 	sub.w	sp, sp, r3
 8000c26:	466b      	mov	r3, sp
 8000c28:	3300      	adds	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <Read_Data_Cont+0x114>)
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <Read_Data_Cont+0x118>)
 8000c32:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <Read_Data_Cont+0x118>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <Read_Data_Cont+0x118>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <Read_Data_Cont+0x118>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c46:	2200      	movs	r2, #0
 8000c48:	2110      	movs	r1, #16
 8000c4a:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <Read_Data_Cont+0x11c>)
 8000c4c:	f004 fad0 	bl	80051f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000c50:	2364      	movs	r3, #100	@ 0x64
 8000c52:	2204      	movs	r2, #4
 8000c54:	4922      	ldr	r1, [pc, #136]	@ (8000ce0 <Read_Data_Cont+0x118>)
 8000c56:	4824      	ldr	r0, [pc, #144]	@ (8000ce8 <Read_Data_Cont+0x120>)
 8000c58:	f007 fa6e 	bl	8008138 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000c5c:	88fa      	ldrh	r2, [r7, #6]
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	68f9      	ldr	r1, [r7, #12]
 8000c64:	4820      	ldr	r0, [pc, #128]	@ (8000ce8 <Read_Data_Cont+0x120>)
 8000c66:	f007 fc55 	bl	8008514 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3303      	adds	r3, #3
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	330b      	adds	r3, #11
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000c82:	e018      	b.n	8000cb6 <Read_Data_Cont+0xee>
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c84:	8bf9      	ldrh	r1, [r7, #30]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4818      	ldr	r0, [pc, #96]	@ (8000cec <Read_Data_Cont+0x124>)
 8000c8c:	f000 f890 	bl	8000db0 <USART1_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	68f9      	ldr	r1, [r7, #12]
 8000c98:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <Read_Data_Cont+0x120>)
 8000c9a:	f007 fc3b 	bl	8008514 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3303      	adds	r3, #3
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	330b      	adds	r3, #11
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2bff      	cmp	r3, #255	@ 0xff
 8000cbc:	d103      	bne.n	8000cc6 <Read_Data_Cont+0xfe>
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	7bdb      	ldrb	r3, [r3, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0de      	beq.n	8000c84 <Read_Data_Cont+0xbc>
	}
	csHIGH();
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2110      	movs	r1, #16
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <Read_Data_Cont+0x11c>)
 8000ccc:	f004 fa90 	bl	80051f0 <HAL_GPIO_WritePin>
 8000cd0:	46b5      	mov	sp, r6
}
 8000cd2:	bf00      	nop
 8000cd4:	3724      	adds	r7, #36	@ 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cdc:	24000810 	.word	0x24000810
 8000ce0:	240008c4 	.word	0x240008c4
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	240008e4 	.word	0x240008e4
 8000cec:	0800b834 	.word	0x0800b834

08000cf0 <Block_Erase>:

void Block_Erase(uint16_t Page_Addr){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000cfa:	f7ff fdc1 	bl	8000880 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <Block_Erase+0x5c>)
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <Block_Erase+0x60>)
 8000d04:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <Block_Erase+0x60>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <Block_Erase+0x60>)
 8000d16:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <Block_Erase+0x60>)
 8000d1e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d20:	2200      	movs	r2, #0
 8000d22:	2110      	movs	r1, #16
 8000d24:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <Block_Erase+0x64>)
 8000d26:	f004 fa63 	bl	80051f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000d2a:	2364      	movs	r3, #100	@ 0x64
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <Block_Erase+0x60>)
 8000d30:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <Block_Erase+0x68>)
 8000d32:	f007 fa01 	bl	8008138 <HAL_SPI_Transmit>
	csHIGH();
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <Block_Erase+0x64>)
 8000d3c:	f004 fa58 	bl	80051f0 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d40:	f7ff fd86 	bl	8000850 <W25N_WaitForReady>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2400080c 	.word	0x2400080c
 8000d50:	240008c4 	.word	0x240008c4
 8000d54:	58020000 	.word	0x58020000
 8000d58:	240008e4 	.word	0x240008e4

08000d5c <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <delay_ns+0x48>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0a5b      	lsrs	r3, r3, #9
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <delay_ns+0x4c>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	09db      	lsrs	r3, r3, #7
 8000d72:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000d74:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <delay_ns+0x50>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000d84:	bf00      	nop
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <delay_ns+0x50>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f8      	bhi.n	8000d86 <delay_ns+0x2a>
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	371c      	adds	r7, #28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	24000820 	.word	0x24000820
 8000da8:	00044b83 	.word	0x00044b83
 8000dac:	e0001000 	.word	0xe0001000

08000db0 <USART1_Printf>:

void USART1_Printf(const char *format, ...) {
 8000db0:	b40f      	push	{r0, r1, r2, r3}
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b0a2      	sub	sp, #136	@ 0x88
 8000db6:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000db8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dbc:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000dbe:	f107 0008 	add.w	r0, r7, #8
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	f00a f89b 	bl	800af04 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fa84 	bl	80002e0 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f107 0108 	add.w	r1, r7, #8
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <USART1_Printf+0x48>)
 8000de6:	f007 ff40 	bl	8008c6a <HAL_UART_Transmit>
}
 8000dea:	bf00      	nop
 8000dec:	3788      	adds	r7, #136	@ 0x88
 8000dee:	46bd      	mov	sp, r7
 8000df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000df4:	b004      	add	sp, #16
 8000df6:	4770      	bx	lr
 8000df8:	24000a94 	.word	0x24000a94

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 ffc8 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f886 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 f9c2 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0c:	f000 f9a0 	bl	8001150 <MX_DMA_Init>
  MX_SPI1_Init();
 8000e10:	f000 f8fc 	bl	800100c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e14:	f000 f950 	bl	80010b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 fdc9 	bl	80019b0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fdc6 	bl	80019b0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e24:	2002      	movs	r0, #2
 8000e26:	f000 fdc3 	bl	80019b0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 fe5f 	bl	8001af0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <main+0xf4>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e38:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <main+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <main+0xf4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <main+0xf4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <main+0xf4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e52:	4927      	ldr	r1, [pc, #156]	@ (8000ef0 <main+0xf4>)
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 fedb 	bl	8001c10 <BSP_COM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <main+0x68>
  {
    Error_Handler();
 8000e60:	f000 fa1c 	bl	800129c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000e64:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <main+0xf8>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	4a22      	ldr	r2, [pc, #136]	@ (8000ef4 <main+0xf8>)
 8000e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e6e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <main+0xfc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a20      	ldr	r2, [pc, #128]	@ (8000ef8 <main+0xfc>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	491f      	ldr	r1, [pc, #124]	@ (8000efc <main+0x100>)
 8000e80:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <main+0x104>)
 8000e82:	f008 f849 	bl	8008f18 <HAL_UART_Receive_DMA>
  Flash_Init(0);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fd18 	bl	80008bc <Flash_Init>
  ID=Read_ID();
 8000e8c:	f7ff fdc6 	bl	8000a1c <Read_ID>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a1c      	ldr	r2, [pc, #112]	@ (8000f04 <main+0x108>)
 8000e94:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	  printf("CANID:%u,DATA:%u;\r\n", CAN_ID_TEST, (unsigned int)CAN_DATA);
//	  CAN_DATA++;
	  Read_Register();
 8000e96:	f7ff fc11 	bl	80006bc <Read_Register>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000e9a:	2364      	movs	r3, #100	@ 0x64
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	491a      	ldr	r1, [pc, #104]	@ (8000f08 <main+0x10c>)
 8000ea0:	481a      	ldr	r0, [pc, #104]	@ (8000f0c <main+0x110>)
 8000ea2:	f007 ff70 	bl	8008d86 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000ea6:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <main+0x10c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b31      	cmp	r3, #49	@ 0x31
 8000eac:	d105      	bne.n	8000eba <main+0xbe>
		  Read_Data_Cont(16);
 8000eae:	2010      	movs	r0, #16
 8000eb0:	f7ff fe8a 	bl	8000bc8 <Read_Data_Cont>
//		  Read_Data(15, Read_data);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
//		  Read_Data(1, &Read_data[0]);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
		  command = 0;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <main+0x10c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <main+0x10c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b32      	cmp	r3, #50	@ 0x32
 8000ec0:	d108      	bne.n	8000ed4 <main+0xd8>
		  Start_Flight_Recording=1;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <main+0x114>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fde7 	bl	8001a9c <BSP_LED_Toggle>
		  command=0;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <main+0x10c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <main+0x10c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b33      	cmp	r3, #51	@ 0x33
 8000eda:	d1dc      	bne.n	8000e96 <main+0x9a>
		  Start_Flight_Recording=0;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <main+0x114>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fdda 	bl	8001a9c <BSP_LED_Toggle>
		  command=0;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <main+0x10c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8000eee:	e7d2      	b.n	8000e96 <main+0x9a>
 8000ef0:	240008d4 	.word	0x240008d4
 8000ef4:	e000edf0 	.word	0xe000edf0
 8000ef8:	e0001000 	.word	0xe0001000
 8000efc:	24000814 	.word	0x24000814
 8000f00:	2400096c 	.word	0x2400096c
 8000f04:	24000a78 	.word	0x24000a78
 8000f08:	24000a7c 	.word	0x24000a7c
 8000f0c:	24000a94 	.word	0x24000a94
 8000f10:	24000a7d 	.word	0x24000a7d

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b09c      	sub	sp, #112	@ 0x70
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1e:	224c      	movs	r2, #76	@ 0x4c
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f009 fffc 	bl	800af20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f009 fff6 	bl	800af20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f004 f98f 	bl	8005258 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <SystemClock_Config+0xf0>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a30      	ldr	r2, [pc, #192]	@ (8001004 <SystemClock_Config+0xf0>)
 8000f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <SystemClock_Config+0xf0>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <SystemClock_Config+0xf4>)
 8000f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f58:	4a2b      	ldr	r2, [pc, #172]	@ (8001008 <SystemClock_Config+0xf4>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f60:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <SystemClock_Config+0xf4>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f6c:	bf00      	nop
 8000f6e:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <SystemClock_Config+0xf0>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f7a:	d1f8      	bne.n	8000f6e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f84:	2340      	movs	r3, #64	@ 0x40
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f94:	233c      	movs	r3, #60	@ 0x3c
 8000f96:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 f989 	bl	80052cc <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000fc0:	f000 f96c 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	233f      	movs	r3, #63	@ 0x3f
 8000fc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fd4:	2340      	movs	r3, #64	@ 0x40
 8000fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fd8:	2340      	movs	r3, #64	@ 0x40
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fe2:	2340      	movs	r3, #64	@ 0x40
 8000fe4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 fdc8 	bl	8005b80 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000ff6:	f000 f951 	bl	800129c <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3770      	adds	r7, #112	@ 0x70
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	58024800 	.word	0x58024800
 8001008:	58000400 	.word	0x58000400

0800100c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001010:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001012:	4a28      	ldr	r2, [pc, #160]	@ (80010b4 <MX_SPI1_Init+0xa8>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001018:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101e:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001026:	2207      	movs	r2, #7
 8001028:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102a:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001030:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001038:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800103c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001040:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001044:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001046:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_SPI1_Init+0xa4>)
 800109e:	f006 ff27 	bl	8007ef0 <HAL_SPI_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80010a8:	f000 f8f8 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	240008e4 	.word	0x240008e4
 80010b4:	40013000 	.word	0x40013000

080010b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <MX_USART1_UART_Init+0x94>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001100:	4811      	ldr	r0, [pc, #68]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 8001102:	f007 fd62 	bl	8008bca <HAL_UART_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800110c:	f000 f8c6 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	480d      	ldr	r0, [pc, #52]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 8001114:	f009 fdfd 	bl	800ad12 <HAL_UARTEx_SetTxFifoThreshold>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800111e:	f000 f8bd 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4808      	ldr	r0, [pc, #32]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 8001126:	f009 fe32 	bl	800ad8e <HAL_UARTEx_SetRxFifoThreshold>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001130:	f000 f8b4 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_USART1_UART_Init+0x90>)
 8001136:	f009 fdb3 	bl	800aca0 <HAL_UARTEx_DisableFifoMode>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001140:	f000 f8ac 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2400096c 	.word	0x2400096c
 800114c:	40011000 	.word	0x40011000

08001150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <MX_DMA_Init+0x3c>)
 8001158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800115c:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <MX_DMA_Init+0x3c>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_DMA_Init+0x3c>)
 8001168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	200b      	movs	r0, #11
 800117a:	f000 ffa8 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800117e:	200b      	movs	r0, #11
 8001180:	f000 ffbf 	bl	8002102 <HAL_NVIC_EnableIRQ>

}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	4a38      	ldr	r2, [pc, #224]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b6:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c4:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ca:	4a31      	ldr	r2, [pc, #196]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f2:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_GPIO_Init+0x100>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <MX_GPIO_Init+0x100>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001206:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <MX_GPIO_Init+0x100>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_GPIO_Init+0x100>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_GPIO_Init+0x100>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001224:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <MX_GPIO_Init+0x100>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_GPIO_Init+0x100>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2110      	movs	r1, #16
 8001240:	4814      	ldr	r0, [pc, #80]	@ (8001294 <MX_GPIO_Init+0x104>)
 8001242:	f003 ffd5 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2102      	movs	r1, #2
 800124a:	4813      	ldr	r0, [pc, #76]	@ (8001298 <MX_GPIO_Init+0x108>)
 800124c:	f003 ffd0 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001250:	2310      	movs	r3, #16
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480b      	ldr	r0, [pc, #44]	@ (8001294 <MX_GPIO_Init+0x104>)
 8001268:	f003 fe12 	bl	8004e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800126c:	2302      	movs	r3, #2
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_GPIO_Init+0x108>)
 8001284:	f003 fe04 	bl	8004e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024400 	.word	0x58024400
 8001294:	58020000 	.word	0x58020000
 8001298:	58021000 	.word	0x58021000

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_MspInit+0x30>)
 80012b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012b8:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_MspInit+0x30>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_MspInit+0x30>)
 80012c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	58024400 	.word	0x58024400

080012e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0bc      	sub	sp, #240	@ 0xf0
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	22c0      	movs	r2, #192	@ 0xc0
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f009 fe0d 	bl	800af20 <memset>
  if(hspi->Instance==SPI1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <HAL_SPI_MspInit+0x10c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d168      	bne.n	80013e2 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001310:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800131c:	2300      	movs	r3, #0
 800131e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	4618      	mov	r0, r3
 8001326:	f004 ffb7 	bl	8006298 <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001330:	f7ff ffb4 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001334:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 8001336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800133a:	4a2d      	ldr	r2, [pc, #180]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001340:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001344:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 8001346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800134a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	4a25      	ldr	r2, [pc, #148]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <HAL_SPI_MspInit+0x110>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800138e:	2360      	movs	r3, #96	@ 0x60
 8001390:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a6:	2305      	movs	r3, #5
 80013a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013b0:	4619      	mov	r1, r3
 80013b2:	4810      	ldr	r0, [pc, #64]	@ (80013f4 <HAL_SPI_MspInit+0x114>)
 80013b4:	f003 fd6c 	bl	8004e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013b8:	2320      	movs	r3, #32
 80013ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013d0:	2305      	movs	r3, #5
 80013d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013da:	4619      	mov	r1, r3
 80013dc:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <HAL_SPI_MspInit+0x118>)
 80013de:	f003 fd57 	bl	8004e90 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013e2:	bf00      	nop
 80013e4:	37f0      	adds	r7, #240	@ 0xf0
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40013000 	.word	0x40013000
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020000 	.word	0x58020000
 80013f8:	58020400 	.word	0x58020400

080013fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	22c0      	movs	r2, #192	@ 0xc0
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f009 fd7f 	bl	800af20 <memset>
  if(huart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a4d      	ldr	r2, [pc, #308]	@ (800155c <HAL_UART_MspInit+0x160>)
 8001428:	4293      	cmp	r3, r2
 800142a:	f040 8093 	bne.w	8001554 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800142e:	f04f 0201 	mov.w	r2, #1
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4618      	mov	r0, r3
 8001446:	f004 ff27 	bl	8006298 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001450:	f7ff ff24 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001454:	4b42      	ldr	r3, [pc, #264]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800145a:	4a41      	ldr	r2, [pc, #260]	@ (8001560 <HAL_UART_MspInit+0x164>)
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001464:	4b3e      	ldr	r3, [pc, #248]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b3b      	ldr	r3, [pc, #236]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001478:	4a39      	ldr	r2, [pc, #228]	@ (8001560 <HAL_UART_MspInit+0x164>)
 800147a:	f043 0302 	orr.w	r3, r3, #2
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001482:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <HAL_UART_MspInit+0x164>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001494:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014aa:	2304      	movs	r3, #4
 80014ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014b4:	4619      	mov	r1, r3
 80014b6:	482b      	ldr	r0, [pc, #172]	@ (8001564 <HAL_UART_MspInit+0x168>)
 80014b8:	f003 fcea 	bl	8004e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014bc:	2340      	movs	r3, #64	@ 0x40
 80014be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d4:	2307      	movs	r3, #7
 80014d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014de:	4619      	mov	r1, r3
 80014e0:	4820      	ldr	r0, [pc, #128]	@ (8001564 <HAL_UART_MspInit+0x168>)
 80014e2:	f003 fcd5 	bl	8004e90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 80014e8:	4a20      	ldr	r2, [pc, #128]	@ (800156c <HAL_UART_MspInit+0x170>)
 80014ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 80014ee:	2229      	movs	r2, #41	@ 0x29
 80014f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 8001500:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001504:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 8001508:	2200      	movs	r2, #0
 800150a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 800151a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800151e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001526:	4810      	ldr	r0, [pc, #64]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 8001528:	f000 fe06 	bl	8002138 <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001532:	f7ff feb3 	bl	800129c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 800153a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_UART_MspInit+0x16c>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2025      	movs	r0, #37	@ 0x25
 800154a:	f000 fdc0 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800154e:	2025      	movs	r0, #37	@ 0x25
 8001550:	f000 fdd7 	bl	8002102 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001554:	bf00      	nop
 8001556:	37e8      	adds	r7, #232	@ 0xe8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40011000 	.word	0x40011000
 8001560:	58024400 	.word	0x58024400
 8001564:	58020400 	.word	0x58020400
 8001568:	24000a00 	.word	0x24000a00
 800156c:	40020010 	.word	0x40020010

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <NMI_Handler+0x4>

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 fc56 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <SysTick_Handler+0x48>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <SysTick_Handler+0x3c>
	  CLK_SIM++;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <SysTick_Handler+0x4c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <SysTick_Handler+0x4c>)
 80015dc:	6013      	str	r3, [r2, #0]
	  Time++;
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <SysTick_Handler+0x50>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <SysTick_Handler+0x50>)
 80015e8:	801a      	strh	r2, [r3, #0]
	  if(Time>=100){
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <SysTick_Handler+0x50>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	2b63      	cmp	r3, #99	@ 0x63
 80015f0:	d909      	bls.n	8001606 <SysTick_Handler+0x42>
	    	Write_To_Flightdata=1;
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <SysTick_Handler+0x54>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
	    	Time=0;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <SysTick_Handler+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
  }
  else{
	  Time=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	e002      	b.n	8001606 <SysTick_Handler+0x42>
	  Time=0;
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <SysTick_Handler+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000a7d 	.word	0x24000a7d
 8001610:	24000a84 	.word	0x24000a84
 8001614:	24000a80 	.word	0x24000a80
 8001618:	24000a7e 	.word	0x24000a7e

0800161c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <DMA1_Stream0_IRQHandler+0x10>)
 8001622:	f002 f8b3 	bl	800378c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	24000a00 	.word	0x24000a00

08001630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <USART1_IRQHandler+0x10>)
 8001636:	f007 fd71 	bl	800911c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2400096c 	.word	0x2400096c

08001644 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001648:	2000      	movs	r0, #0
 800164a:	f000 fac3 	bl	8001bd4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a2a      	ldr	r2, [pc, #168]	@ (800170c <HAL_UART_RxCpltCallback+0xb8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d14d      	bne.n	8001702 <HAL_UART_RxCpltCallback+0xae>
		uint8_t Temp[16];

		Temp[0]=0xFF;
 8001666:	23ff      	movs	r3, #255	@ 0xff
 8001668:	723b      	strb	r3, [r7, #8]
		Temp[1]=Rx_buffer[0];
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	727b      	strb	r3, [r7, #9]
		Temp[2]=Rx_buffer[1];
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 8001672:	785b      	ldrb	r3, [r3, #1]
 8001674:	72bb      	strb	r3, [r7, #10]
		Temp[3]=Rx_buffer[2];
 8001676:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 8001678:	789b      	ldrb	r3, [r3, #2]
 800167a:	72fb      	strb	r3, [r7, #11]
		Temp[4]=Rx_buffer[3];
 800167c:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 800167e:	78db      	ldrb	r3, [r3, #3]
 8001680:	733b      	strb	r3, [r7, #12]
		Temp[5]=Rx_buffer[4];
 8001682:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	737b      	strb	r3, [r7, #13]
		Temp[6]=Rx_buffer[5];
 8001688:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 800168a:	795b      	ldrb	r3, [r3, #5]
 800168c:	73bb      	strb	r3, [r7, #14]
		Temp[7]=Rx_buffer[6];
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 8001690:	799b      	ldrb	r3, [r3, #6]
 8001692:	73fb      	strb	r3, [r7, #15]
		Temp[8]=Rx_buffer[7];
 8001694:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 8001696:	79db      	ldrb	r3, [r3, #7]
 8001698:	743b      	strb	r3, [r7, #16]
		Temp[9]=Rx_buffer[8];
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 800169c:	7a1b      	ldrb	r3, [r3, #8]
 800169e:	747b      	strb	r3, [r7, #17]
		Temp[10]=Rx_buffer[9];
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 80016a2:	7a5b      	ldrb	r3, [r3, #9]
 80016a4:	74bb      	strb	r3, [r7, #18]
		Temp[11]=(uint8_t)(CLK_SIM);
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_UART_RxCpltCallback+0xc0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_UART_RxCpltCallback+0xc0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 80016b8:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <HAL_UART_RxCpltCallback+0xc0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HAL_UART_RxCpltCallback+0xc0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0e1b      	lsrs	r3, r3, #24
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	75bb      	strb	r3, [r7, #22]
		Temp[15]=0x00;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]

		if((Start_Flight_Recording==1)&&(Temp[1]==200)){
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_UART_RxCpltCallback+0xc4>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d109      	bne.n	80016ec <HAL_UART_RxCpltCallback+0x98>
 80016d8:	7a7b      	ldrb	r3, [r7, #9]
 80016da:	2bc8      	cmp	r3, #200	@ 0xc8
 80016dc:	d106      	bne.n	80016ec <HAL_UART_RxCpltCallback+0x98>
			Write_Data(&Temp[0], sizeof(Temp));
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	2110      	movs	r1, #16
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f81d 	bl	8000724 <Write_Data>
 80016ea:	e002      	b.n	80016f2 <HAL_UART_RxCpltCallback+0x9e>
		}
		else{
			HAL_UART_AbortReceive(&huart1);
 80016ec:	480b      	ldr	r0, [pc, #44]	@ (800171c <HAL_UART_RxCpltCallback+0xc8>)
 80016ee:	f007 fc5f 	bl	8008fb0 <HAL_UART_AbortReceive>
		}

		HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 80016f2:	220a      	movs	r2, #10
 80016f4:	4906      	ldr	r1, [pc, #24]	@ (8001710 <HAL_UART_RxCpltCallback+0xbc>)
 80016f6:	4809      	ldr	r0, [pc, #36]	@ (800171c <HAL_UART_RxCpltCallback+0xc8>)
 80016f8:	f007 fc0e 	bl	8008f18 <HAL_UART_Receive_DMA>
		BSP_LED_Toggle(LED_RED);
 80016fc:	2002      	movs	r0, #2
 80016fe:	f000 f9cd 	bl	8001a9c <BSP_LED_Toggle>
	}
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40011000 	.word	0x40011000
 8001710:	24000814 	.word	0x24000814
 8001714:	24000a84 	.word	0x24000a84
 8001718:	24000a7d 	.word	0x24000a7d
 800171c:	2400096c 	.word	0x2400096c

08001720 <HAL_UART_ErrorCallback>:

/* USART1 Error Callback */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <HAL_UART_ErrorCallback+0x50>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d119      	bne.n	8001766 <HAL_UART_ErrorCallback+0x46>
        uint32_t error = HAL_UART_GetError(huart);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f008 f8e8 	bl	8009908 <HAL_UART_GetError>
 8001738:	60f8      	str	r0, [r7, #12]

        if (error & HAL_UART_ERROR_ORE) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_UART_ErrorCallback+0x2c>
            // Overrun error occurred
            __HAL_UART_CLEAR_OREFLAG(huart);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2208      	movs	r2, #8
 800174a:	621a      	str	r2, [r3, #32]
        if (error & HAL_UART_ERROR_PE) {
            // Parity error occurred
        }

        // Restart USART1 DMA Reception in case of an error
        memset(Rx_buffer, 0x00, sizeof(Rx_buffer));
 800174c:	220a      	movs	r2, #10
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	@ (8001774 <HAL_UART_ErrorCallback+0x54>)
 8001752:	f009 fbe5 	bl	800af20 <memset>
        HAL_UART_AbortReceive(&huart1); // Abort current RX DMA transfer
 8001756:	4808      	ldr	r0, [pc, #32]	@ (8001778 <HAL_UART_ErrorCallback+0x58>)
 8001758:	f007 fc2a 	bl	8008fb0 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], sizeof(Rx_buffer));
 800175c:	220a      	movs	r2, #10
 800175e:	4905      	ldr	r1, [pc, #20]	@ (8001774 <HAL_UART_ErrorCallback+0x54>)
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <HAL_UART_ErrorCallback+0x58>)
 8001762:	f007 fbd9 	bl	8008f18 <HAL_UART_Receive_DMA>
    }
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40011000 	.word	0x40011000
 8001774:	24000814 	.word	0x24000814
 8001778:	2400096c 	.word	0x2400096c

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f009 fbc0 	bl	800af30 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	24080000 	.word	0x24080000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	24000a88 	.word	0x24000a88
 80017e4:	24000c78 	.word	0x24000c78

080017e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017ec:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <SystemInit+0x114>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f2:	4a42      	ldr	r2, [pc, #264]	@ (80018fc <SystemInit+0x114>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017fc:	4b40      	ldr	r3, [pc, #256]	@ (8001900 <SystemInit+0x118>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	2b06      	cmp	r3, #6
 8001806:	d807      	bhi.n	8001818 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001808:	4b3d      	ldr	r3, [pc, #244]	@ (8001900 <SystemInit+0x118>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 030f 	bic.w	r3, r3, #15
 8001810:	4a3b      	ldr	r2, [pc, #236]	@ (8001900 <SystemInit+0x118>)
 8001812:	f043 0307 	orr.w	r3, r3, #7
 8001816:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001818:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <SystemInit+0x11c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a39      	ldr	r2, [pc, #228]	@ (8001904 <SystemInit+0x11c>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001824:	4b37      	ldr	r3, [pc, #220]	@ (8001904 <SystemInit+0x11c>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800182a:	4b36      	ldr	r3, [pc, #216]	@ (8001904 <SystemInit+0x11c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4935      	ldr	r1, [pc, #212]	@ (8001904 <SystemInit+0x11c>)
 8001830:	4b35      	ldr	r3, [pc, #212]	@ (8001908 <SystemInit+0x120>)
 8001832:	4013      	ands	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001836:	4b32      	ldr	r3, [pc, #200]	@ (8001900 <SystemInit+0x118>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <SystemInit+0x118>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 030f 	bic.w	r3, r3, #15
 800184a:	4a2d      	ldr	r2, [pc, #180]	@ (8001900 <SystemInit+0x118>)
 800184c:	f043 0307 	orr.w	r3, r3, #7
 8001850:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001852:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <SystemInit+0x11c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <SystemInit+0x11c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800185e:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <SystemInit+0x11c>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <SystemInit+0x11c>)
 8001866:	4a29      	ldr	r2, [pc, #164]	@ (800190c <SystemInit+0x124>)
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800186a:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <SystemInit+0x11c>)
 800186c:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <SystemInit+0x128>)
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <SystemInit+0x11c>)
 8001872:	4a28      	ldr	r2, [pc, #160]	@ (8001914 <SystemInit+0x12c>)
 8001874:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <SystemInit+0x11c>)
 8001878:	2200      	movs	r2, #0
 800187a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800187c:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <SystemInit+0x11c>)
 800187e:	4a25      	ldr	r2, [pc, #148]	@ (8001914 <SystemInit+0x12c>)
 8001880:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <SystemInit+0x11c>)
 8001884:	2200      	movs	r2, #0
 8001886:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001888:	4b1e      	ldr	r3, [pc, #120]	@ (8001904 <SystemInit+0x11c>)
 800188a:	4a22      	ldr	r2, [pc, #136]	@ (8001914 <SystemInit+0x12c>)
 800188c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <SystemInit+0x11c>)
 8001890:	2200      	movs	r2, #0
 8001892:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <SystemInit+0x11c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <SystemInit+0x11c>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800189e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <SystemInit+0x11c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <SystemInit+0x130>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <SystemInit+0x134>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018b2:	d202      	bcs.n	80018ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <SystemInit+0x138>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <SystemInit+0x11c>)
 80018bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d113      	bne.n	80018f0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <SystemInit+0x11c>)
 80018ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <SystemInit+0x11c>)
 80018d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <SystemInit+0x13c>)
 80018da:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018de:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <SystemInit+0x11c>)
 80018e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018e6:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <SystemInit+0x11c>)
 80018e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	52002000 	.word	0x52002000
 8001904:	58024400 	.word	0x58024400
 8001908:	eaf6ed7f 	.word	0xeaf6ed7f
 800190c:	02020200 	.word	0x02020200
 8001910:	01ff0000 	.word	0x01ff0000
 8001914:	01010280 	.word	0x01010280
 8001918:	5c001000 	.word	0x5c001000
 800191c:	ffff0000 	.word	0xffff0000
 8001920:	51008108 	.word	0x51008108
 8001924:	52004000 	.word	0x52004000

08001928 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <ExitRun0Mode+0x2c>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <ExitRun0Mode+0x2c>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001938:	bf00      	nop
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <ExitRun0Mode+0x2c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f9      	beq.n	800193a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	58024800 	.word	0x58024800

08001958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001994 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800195c:	f7ff ffe4 	bl	8001928 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001960:	f7ff ff42 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	@ (8001998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	@ (800199c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	@ (80019a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198a:	f009 fad7 	bl	800af3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198e:	f7ff fa35 	bl	8000dfc <main>
  bx  lr
 8001992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001994:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001998:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800199c:	2400089c 	.word	0x2400089c
  ldr r2, =_sidata
 80019a0:	0800b8e4 	.word	0x0800b8e4
  ldr r2, =_sbss
 80019a4:	2400089c 	.word	0x2400089c
  ldr r4, =_ebss
 80019a8:	24000c74 	.word	0x24000c74

080019ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC3_IRQHandler>
	...

080019b0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	@ 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <BSP_LED_Init+0x28>
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d006      	beq.n	80019d8 <BSP_LED_Init+0x28>
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d003      	beq.n	80019d8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019d0:	f06f 0301 	mvn.w	r3, #1
 80019d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019d6:	e055      	b.n	8001a84 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80019de:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <BSP_LED_Init+0xe0>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a90 <BSP_LED_Init+0xe0>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ee:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <BSP_LED_Init+0xe0>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	e021      	b.n	8001a42 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10f      	bne.n	8001a24 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001a04:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <BSP_LED_Init+0xe0>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0a:	4a21      	ldr	r2, [pc, #132]	@ (8001a90 <BSP_LED_Init+0xe0>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a14:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <BSP_LED_Init+0xe0>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	e00e      	b.n	8001a42 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001a24:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <BSP_LED_Init+0xe0>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2a:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <BSP_LED_Init+0xe0>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <BSP_LED_Init+0xe0>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <BSP_LED_Init+0xe4>)
 8001a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a4a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a98 <BSP_LED_Init+0xe8>)
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	f107 0218 	add.w	r2, r7, #24
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fa12 	bl	8004e90 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <BSP_LED_Init+0xe8>)
 8001a70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <BSP_LED_Init+0xe4>)
 8001a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f003 fbb6 	bl	80051f0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3730      	adds	r7, #48	@ 0x30
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	58024400 	.word	0x58024400
 8001a94:	0800b864 	.word	0x0800b864
 8001a98:	2400082c 	.word	0x2400082c

08001a9c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <BSP_LED_Toggle+0x28>
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d006      	beq.n	8001ac4 <BSP_LED_Toggle+0x28>
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d003      	beq.n	8001ac4 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001abc:	f06f 0301 	mvn.w	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e00b      	b.n	8001adc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <BSP_LED_Toggle+0x4c>)
 8001ac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4907      	ldr	r1, [pc, #28]	@ (8001aec <BSP_LED_Toggle+0x50>)
 8001ad0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f003 fba3 	bl	8005222 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001adc:	68fb      	ldr	r3, [r7, #12]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2400082c 	.word	0x2400082c
 8001aec:	0800b864 	.word	0x0800b864

08001af0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001b00:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <BSP_PB_Init+0xcc>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b06:	4a2d      	ldr	r2, [pc, #180]	@ (8001bbc <BSP_PB_Init+0xcc>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <BSP_PB_Init+0xcc>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b22:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b24:	2302      	movs	r3, #2
 8001b26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a21      	ldr	r2, [pc, #132]	@ (8001bc0 <BSP_PB_Init+0xd0>)
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 f9a3 	bl	8004e90 <HAL_GPIO_Init>
 8001b4a:	e031      	b.n	8001bb0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001b4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b50:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <BSP_PB_Init+0xd0>)
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	f107 020c 	add.w	r2, r7, #12
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 f995 	bl	8004e90 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4a16      	ldr	r2, [pc, #88]	@ (8001bc4 <BSP_PB_Init+0xd4>)
 8001b6c:	441a      	add	r2, r3
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4915      	ldr	r1, [pc, #84]	@ (8001bc8 <BSP_PB_Init+0xd8>)
 8001b72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f003 f944 	bl	8004e06 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4a10      	ldr	r2, [pc, #64]	@ (8001bc4 <BSP_PB_Init+0xd4>)
 8001b84:	1898      	adds	r0, r3, r2
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4a10      	ldr	r2, [pc, #64]	@ (8001bcc <BSP_PB_Init+0xdc>)
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	2100      	movs	r1, #0
 8001b92:	f003 f919 	bl	8004dc8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001b96:	2028      	movs	r0, #40	@ 0x28
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <BSP_PB_Init+0xe0>)
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f000 fa93 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001ba8:	2328      	movs	r3, #40	@ 0x28
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 faa9 	bl	8002102 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	24000838 	.word	0x24000838
 8001bc4:	24000a8c 	.word	0x24000a8c
 8001bc8:	0800b86c 	.word	0x0800b86c
 8001bcc:	2400083c 	.word	0x2400083c
 8001bd0:	24000840 	.word	0x24000840

08001bd4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <BSP_PB_IRQHandler+0x20>)
 8001be4:	4413      	add	r3, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 f922 	bl	8004e30 <HAL_EXTI_IRQHandler>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	24000a8c 	.word	0x24000a8c

08001bf8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c26:	f06f 0301 	mvn.w	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e018      	b.n	8001c60 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2294      	movs	r2, #148	@ 0x94
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <BSP_COM_Init+0x5c>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f852 	bl	8001ce4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2294      	movs	r2, #148	@ 0x94
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <BSP_COM_Init+0x5c>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f80e 	bl	8001c70 <MX_USART3_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c5a:	f06f 0303 	mvn.w	r3, #3
 8001c5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	24000a94 	.word	0x24000a94

08001c70 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_USART3_Init+0x60>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	895b      	ldrh	r3, [r3, #10]
 8001c94:	461a      	mov	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	891b      	ldrh	r3, [r3, #8]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	899b      	ldrh	r3, [r3, #12]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cbc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f006 ff83 	bl	8008bca <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	24000828 	.word	0x24000828

08001cd4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff ff8d 	bl	8001bf8 <BSP_PB_Callback>
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001cec:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf2:	4a26      	ldr	r2, [pc, #152]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d10:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d2e:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <COM1_MspInit+0xa8>)
 8001d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480b      	ldr	r0, [pc, #44]	@ (8001d90 <COM1_MspInit+0xac>)
 8001d64:	f003 f894 	bl	8004e90 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d6c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001d72:	2307      	movs	r3, #7
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <COM1_MspInit+0xac>)
 8001d7e:	f003 f887 	bl	8004e90 <HAL_GPIO_Init>
}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	@ 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	58020c00 	.word	0x58020c00

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f000 f98c 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001da0:	f004 f8a4 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_Init+0x68>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	4913      	ldr	r1, [pc, #76]	@ (8001e00 <HAL_Init+0x6c>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <HAL_Init+0x68>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <HAL_Init+0x6c>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e04 <HAL_Init+0x70>)
 8001dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <HAL_Init+0x74>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dde:	2000      	movs	r0, #0
 8001de0:	f000 f814 	bl	8001e0c <HAL_InitTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e002      	b.n	8001df4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dee:	f7ff fa5d 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	0800b854 	.word	0x0800b854
 8001e04:	24000824 	.word	0x24000824
 8001e08:	24000820 	.word	0x24000820

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e14:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_InitTick+0x60>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e021      	b.n	8001e64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <HAL_InitTick+0x64>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_InitTick+0x60>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f971 	bl	800211e <HAL_SYSTICK_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00e      	b.n	8001e64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d80a      	bhi.n	8001e62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f000 f93b 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e58:	4a06      	ldr	r2, [pc, #24]	@ (8001e74 <HAL_InitTick+0x68>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	24000848 	.word	0x24000848
 8001e70:	24000820 	.word	0x24000820
 8001e74:	24000844 	.word	0x24000844

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	24000848 	.word	0x24000848
 8001e9c:	24000b28 	.word	0x24000b28

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24000b28 	.word	0x24000b28

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <HAL_Delay+0x44>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	24000848 	.word	0x24000848

08001f00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_GetREVID+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0c1b      	lsrs	r3, r3, #16
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	5c001000 	.word	0x5c001000

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x40>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00
 8001f5c:	05fa0000 	.word	0x05fa0000

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff40 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff33 	bl	8001f7c <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa4 	bl	8002074 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff feae 	bl	8001ea0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e316      	b.n	800277e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a66      	ldr	r2, [pc, #408]	@ (80022f0 <HAL_DMA_Init+0x1b8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a65      	ldr	r2, [pc, #404]	@ (80022f4 <HAL_DMA_Init+0x1bc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d045      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a63      	ldr	r2, [pc, #396]	@ (80022f8 <HAL_DMA_Init+0x1c0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d040      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a62      	ldr	r2, [pc, #392]	@ (80022fc <HAL_DMA_Init+0x1c4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03b      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a60      	ldr	r2, [pc, #384]	@ (8002300 <HAL_DMA_Init+0x1c8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5f      	ldr	r2, [pc, #380]	@ (8002304 <HAL_DMA_Init+0x1cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5d      	ldr	r2, [pc, #372]	@ (8002308 <HAL_DMA_Init+0x1d0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02c      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5c      	ldr	r2, [pc, #368]	@ (800230c <HAL_DMA_Init+0x1d4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d027      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002310 <HAL_DMA_Init+0x1d8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a59      	ldr	r2, [pc, #356]	@ (8002314 <HAL_DMA_Init+0x1dc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a57      	ldr	r2, [pc, #348]	@ (8002318 <HAL_DMA_Init+0x1e0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a56      	ldr	r2, [pc, #344]	@ (800231c <HAL_DMA_Init+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a54      	ldr	r2, [pc, #336]	@ (8002320 <HAL_DMA_Init+0x1e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a53      	ldr	r2, [pc, #332]	@ (8002324 <HAL_DMA_Init+0x1ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a51      	ldr	r2, [pc, #324]	@ (8002328 <HAL_DMA_Init+0x1f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Init+0xb8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a50      	ldr	r2, [pc, #320]	@ (800232c <HAL_DMA_Init+0x1f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_DMA_Init+0xbc>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_Init+0xbe>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 813b 	beq.w	8002472 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a37      	ldr	r2, [pc, #220]	@ (80022f0 <HAL_DMA_Init+0x1b8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d04a      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a36      	ldr	r2, [pc, #216]	@ (80022f4 <HAL_DMA_Init+0x1bc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d045      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a34      	ldr	r2, [pc, #208]	@ (80022f8 <HAL_DMA_Init+0x1c0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d040      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a33      	ldr	r2, [pc, #204]	@ (80022fc <HAL_DMA_Init+0x1c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d03b      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a31      	ldr	r2, [pc, #196]	@ (8002300 <HAL_DMA_Init+0x1c8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d036      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a30      	ldr	r2, [pc, #192]	@ (8002304 <HAL_DMA_Init+0x1cc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d031      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2e      	ldr	r2, [pc, #184]	@ (8002308 <HAL_DMA_Init+0x1d0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02c      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2d      	ldr	r2, [pc, #180]	@ (800230c <HAL_DMA_Init+0x1d4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d027      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2b      	ldr	r2, [pc, #172]	@ (8002310 <HAL_DMA_Init+0x1d8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d022      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2a      	ldr	r2, [pc, #168]	@ (8002314 <HAL_DMA_Init+0x1dc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d01d      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a28      	ldr	r2, [pc, #160]	@ (8002318 <HAL_DMA_Init+0x1e0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d018      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a27      	ldr	r2, [pc, #156]	@ (800231c <HAL_DMA_Init+0x1e4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a25      	ldr	r2, [pc, #148]	@ (8002320 <HAL_DMA_Init+0x1e8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00e      	beq.n	80022ac <HAL_DMA_Init+0x174>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a24      	ldr	r2, [pc, #144]	@ (8002324 <HAL_DMA_Init+0x1ec>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_DMA_Init+0x174>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a22      	ldr	r2, [pc, #136]	@ (8002328 <HAL_DMA_Init+0x1f0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_DMA_Init+0x174>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a21      	ldr	r2, [pc, #132]	@ (800232c <HAL_DMA_Init+0x1f4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <HAL_DMA_Init+0x186>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e007      	b.n	80022ce <HAL_DMA_Init+0x196>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022ce:	e02f      	b.n	8002330 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d0:	f7ff fde6 	bl	8001ea0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d928      	bls.n	8002330 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2203      	movs	r2, #3
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e246      	b.n	800277e <HAL_DMA_Init+0x646>
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1c8      	bne.n	80022d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4b83      	ldr	r3, [pc, #524]	@ (8002558 <HAL_DMA_Init+0x420>)
 800234a:	4013      	ands	r3, r2
 800234c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002356:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	2b04      	cmp	r3, #4
 8002382:	d107      	bne.n	8002394 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	4313      	orrs	r3, r2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002394:	4b71      	ldr	r3, [pc, #452]	@ (800255c <HAL_DMA_Init+0x424>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b71      	ldr	r3, [pc, #452]	@ (8002560 <HAL_DMA_Init+0x428>)
 800239a:	4013      	ands	r3, r2
 800239c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023a0:	d328      	bcc.n	80023f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b28      	cmp	r3, #40	@ 0x28
 80023a8:	d903      	bls.n	80023b2 <HAL_DMA_Init+0x27a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80023b0:	d917      	bls.n	80023e2 <HAL_DMA_Init+0x2aa>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80023b8:	d903      	bls.n	80023c2 <HAL_DMA_Init+0x28a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b42      	cmp	r3, #66	@ 0x42
 80023c0:	d90f      	bls.n	80023e2 <HAL_DMA_Init+0x2aa>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b46      	cmp	r3, #70	@ 0x46
 80023c8:	d903      	bls.n	80023d2 <HAL_DMA_Init+0x29a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b48      	cmp	r3, #72	@ 0x48
 80023d0:	d907      	bls.n	80023e2 <HAL_DMA_Init+0x2aa>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80023d8:	d905      	bls.n	80023e6 <HAL_DMA_Init+0x2ae>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b52      	cmp	r3, #82	@ 0x52
 80023e0:	d801      	bhi.n	80023e6 <HAL_DMA_Init+0x2ae>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_Init+0x2b0>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f023 0307 	bic.w	r3, r3, #7
 800240a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	2b04      	cmp	r3, #4
 800241c:	d117      	bne.n	800244e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f002 fb3f 	bl	8004ab4 <DMA_CheckFifoParam>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e197      	b.n	800277e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f002 fa7a 	bl	8004950 <DMA_CalcBaseAndBitshift>
 800245c:	4603      	mov	r3, r0
 800245e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	223f      	movs	r2, #63	@ 0x3f
 800246a:	409a      	lsls	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	e0cd      	b.n	800260e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a3b      	ldr	r2, [pc, #236]	@ (8002564 <HAL_DMA_Init+0x42c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <HAL_DMA_Init+0x38a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a39      	ldr	r2, [pc, #228]	@ (8002568 <HAL_DMA_Init+0x430>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01d      	beq.n	80024c2 <HAL_DMA_Init+0x38a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a38      	ldr	r2, [pc, #224]	@ (800256c <HAL_DMA_Init+0x434>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d018      	beq.n	80024c2 <HAL_DMA_Init+0x38a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a36      	ldr	r2, [pc, #216]	@ (8002570 <HAL_DMA_Init+0x438>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_DMA_Init+0x38a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a35      	ldr	r2, [pc, #212]	@ (8002574 <HAL_DMA_Init+0x43c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Init+0x38a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a33      	ldr	r2, [pc, #204]	@ (8002578 <HAL_DMA_Init+0x440>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_DMA_Init+0x38a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a32      	ldr	r2, [pc, #200]	@ (800257c <HAL_DMA_Init+0x444>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d004      	beq.n	80024c2 <HAL_DMA_Init+0x38a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a30      	ldr	r2, [pc, #192]	@ (8002580 <HAL_DMA_Init+0x448>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_DMA_Init+0x38e>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_DMA_Init+0x390>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8097 	beq.w	80025fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a24      	ldr	r2, [pc, #144]	@ (8002564 <HAL_DMA_Init+0x42c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d021      	beq.n	800251c <HAL_DMA_Init+0x3e4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a22      	ldr	r2, [pc, #136]	@ (8002568 <HAL_DMA_Init+0x430>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01c      	beq.n	800251c <HAL_DMA_Init+0x3e4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a21      	ldr	r2, [pc, #132]	@ (800256c <HAL_DMA_Init+0x434>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d017      	beq.n	800251c <HAL_DMA_Init+0x3e4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002570 <HAL_DMA_Init+0x438>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d012      	beq.n	800251c <HAL_DMA_Init+0x3e4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002574 <HAL_DMA_Init+0x43c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00d      	beq.n	800251c <HAL_DMA_Init+0x3e4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1c      	ldr	r2, [pc, #112]	@ (8002578 <HAL_DMA_Init+0x440>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d008      	beq.n	800251c <HAL_DMA_Init+0x3e4>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1b      	ldr	r2, [pc, #108]	@ (800257c <HAL_DMA_Init+0x444>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <HAL_DMA_Init+0x3e4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_DMA_Init+0x448>)
 800251a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <HAL_DMA_Init+0x44c>)
 8002538:	4013      	ands	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d021      	beq.n	8002588 <HAL_DMA_Init+0x450>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b80      	cmp	r3, #128	@ 0x80
 800254a:	d102      	bne.n	8002552 <HAL_DMA_Init+0x41a>
 800254c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002550:	e01b      	b.n	800258a <HAL_DMA_Init+0x452>
 8002552:	2300      	movs	r3, #0
 8002554:	e019      	b.n	800258a <HAL_DMA_Init+0x452>
 8002556:	bf00      	nop
 8002558:	fe10803f 	.word	0xfe10803f
 800255c:	5c001000 	.word	0x5c001000
 8002560:	ffff0000 	.word	0xffff0000
 8002564:	58025408 	.word	0x58025408
 8002568:	5802541c 	.word	0x5802541c
 800256c:	58025430 	.word	0x58025430
 8002570:	58025444 	.word	0x58025444
 8002574:	58025458 	.word	0x58025458
 8002578:	5802546c 	.word	0x5802546c
 800257c:	58025480 	.word	0x58025480
 8002580:	58025494 	.word	0x58025494
 8002584:	fffe000f 	.word	0xfffe000f
 8002588:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002788 <HAL_DMA_Init+0x650>)
 80025d0:	4413      	add	r3, r2
 80025d2:	4a6e      	ldr	r2, [pc, #440]	@ (800278c <HAL_DMA_Init+0x654>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f002 f9b5 	bl	8004950 <DMA_CalcBaseAndBitshift>
 80025e6:	4603      	mov	r3, r0
 80025e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e008      	b.n	800260e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2240      	movs	r2, #64	@ 0x40
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0b7      	b.n	800277e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5f      	ldr	r2, [pc, #380]	@ (8002790 <HAL_DMA_Init+0x658>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d072      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_DMA_Init+0x65c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d06d      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	@ (8002798 <HAL_DMA_Init+0x660>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d068      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5a      	ldr	r2, [pc, #360]	@ (800279c <HAL_DMA_Init+0x664>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d063      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a59      	ldr	r2, [pc, #356]	@ (80027a0 <HAL_DMA_Init+0x668>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d05e      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a57      	ldr	r2, [pc, #348]	@ (80027a4 <HAL_DMA_Init+0x66c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d059      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a56      	ldr	r2, [pc, #344]	@ (80027a8 <HAL_DMA_Init+0x670>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d054      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a54      	ldr	r2, [pc, #336]	@ (80027ac <HAL_DMA_Init+0x674>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d04f      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a53      	ldr	r2, [pc, #332]	@ (80027b0 <HAL_DMA_Init+0x678>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d04a      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a51      	ldr	r2, [pc, #324]	@ (80027b4 <HAL_DMA_Init+0x67c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d045      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a50      	ldr	r2, [pc, #320]	@ (80027b8 <HAL_DMA_Init+0x680>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d040      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_DMA_Init+0x684>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d03b      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_DMA_Init+0x688>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d036      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4b      	ldr	r2, [pc, #300]	@ (80027c4 <HAL_DMA_Init+0x68c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4a      	ldr	r2, [pc, #296]	@ (80027c8 <HAL_DMA_Init+0x690>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d02c      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a48      	ldr	r2, [pc, #288]	@ (80027cc <HAL_DMA_Init+0x694>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d027      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a47      	ldr	r2, [pc, #284]	@ (80027d0 <HAL_DMA_Init+0x698>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a45      	ldr	r2, [pc, #276]	@ (80027d4 <HAL_DMA_Init+0x69c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01d      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a44      	ldr	r2, [pc, #272]	@ (80027d8 <HAL_DMA_Init+0x6a0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d018      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a42      	ldr	r2, [pc, #264]	@ (80027dc <HAL_DMA_Init+0x6a4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a41      	ldr	r2, [pc, #260]	@ (80027e0 <HAL_DMA_Init+0x6a8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3f      	ldr	r2, [pc, #252]	@ (80027e4 <HAL_DMA_Init+0x6ac>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3e      	ldr	r2, [pc, #248]	@ (80027e8 <HAL_DMA_Init+0x6b0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_DMA_Init+0x5c6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3c      	ldr	r2, [pc, #240]	@ (80027ec <HAL_DMA_Init+0x6b4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Init+0x5ca>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_DMA_Init+0x5cc>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d032      	beq.n	800276e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f002 fa4f 	bl	8004bac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b80      	cmp	r3, #128	@ 0x80
 8002714:	d102      	bne.n	800271c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002730:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_DMA_Init+0x624>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d80c      	bhi.n	800275c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f002 facc 	bl	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e008      	b.n	800276e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	a7fdabf8 	.word	0xa7fdabf8
 800278c:	cccccccd 	.word	0xcccccccd
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
 80027d0:	58025408 	.word	0x58025408
 80027d4:	5802541c 	.word	0x5802541c
 80027d8:	58025430 	.word	0x58025430
 80027dc:	58025444 	.word	0x58025444
 80027e0:	58025458 	.word	0x58025458
 80027e4:	5802546c 	.word	0x5802546c
 80027e8:	58025480 	.word	0x58025480
 80027ec:	58025494 	.word	0x58025494

080027f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e226      	b.n	8002c5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_DMA_Start_IT+0x2a>
 8002816:	2302      	movs	r3, #2
 8002818:	e21f      	b.n	8002c5a <HAL_DMA_Start_IT+0x46a>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 820a 	bne.w	8002c44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a68      	ldr	r2, [pc, #416]	@ (80029e4 <HAL_DMA_Start_IT+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04a      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a66      	ldr	r2, [pc, #408]	@ (80029e8 <HAL_DMA_Start_IT+0x1f8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d045      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a65      	ldr	r2, [pc, #404]	@ (80029ec <HAL_DMA_Start_IT+0x1fc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d040      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a63      	ldr	r2, [pc, #396]	@ (80029f0 <HAL_DMA_Start_IT+0x200>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d03b      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a62      	ldr	r2, [pc, #392]	@ (80029f4 <HAL_DMA_Start_IT+0x204>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d036      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a60      	ldr	r2, [pc, #384]	@ (80029f8 <HAL_DMA_Start_IT+0x208>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d031      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5f      	ldr	r2, [pc, #380]	@ (80029fc <HAL_DMA_Start_IT+0x20c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d02c      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5d      	ldr	r2, [pc, #372]	@ (8002a00 <HAL_DMA_Start_IT+0x210>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d027      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5c      	ldr	r2, [pc, #368]	@ (8002a04 <HAL_DMA_Start_IT+0x214>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d022      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5a      	ldr	r2, [pc, #360]	@ (8002a08 <HAL_DMA_Start_IT+0x218>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a59      	ldr	r2, [pc, #356]	@ (8002a0c <HAL_DMA_Start_IT+0x21c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d018      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a57      	ldr	r2, [pc, #348]	@ (8002a10 <HAL_DMA_Start_IT+0x220>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a56      	ldr	r2, [pc, #344]	@ (8002a14 <HAL_DMA_Start_IT+0x224>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a54      	ldr	r2, [pc, #336]	@ (8002a18 <HAL_DMA_Start_IT+0x228>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a53      	ldr	r2, [pc, #332]	@ (8002a1c <HAL_DMA_Start_IT+0x22c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Start_IT+0xee>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a51      	ldr	r2, [pc, #324]	@ (8002a20 <HAL_DMA_Start_IT+0x230>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <HAL_DMA_Start_IT+0x100>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e007      	b.n	8002900 <HAL_DMA_Start_IT+0x110>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f001 fe76 	bl	80045f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a34      	ldr	r2, [pc, #208]	@ (80029e4 <HAL_DMA_Start_IT+0x1f4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d04a      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a33      	ldr	r2, [pc, #204]	@ (80029e8 <HAL_DMA_Start_IT+0x1f8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d045      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a31      	ldr	r2, [pc, #196]	@ (80029ec <HAL_DMA_Start_IT+0x1fc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d040      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_DMA_Start_IT+0x200>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d03b      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2e      	ldr	r2, [pc, #184]	@ (80029f4 <HAL_DMA_Start_IT+0x204>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d036      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2d      	ldr	r2, [pc, #180]	@ (80029f8 <HAL_DMA_Start_IT+0x208>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d031      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <HAL_DMA_Start_IT+0x20c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d02c      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <HAL_DMA_Start_IT+0x210>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d027      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_DMA_Start_IT+0x214>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d022      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a27      	ldr	r2, [pc, #156]	@ (8002a08 <HAL_DMA_Start_IT+0x218>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d01d      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <HAL_DMA_Start_IT+0x21c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d018      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <HAL_DMA_Start_IT+0x220>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <HAL_DMA_Start_IT+0x224>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00e      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a21      	ldr	r2, [pc, #132]	@ (8002a18 <HAL_DMA_Start_IT+0x228>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <HAL_DMA_Start_IT+0x22c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_Start_IT+0x1bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a20 <HAL_DMA_Start_IT+0x230>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_DMA_Start_IT+0x1c0>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_DMA_Start_IT+0x1c2>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d036      	beq.n	8002a24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 021e 	bic.w	r2, r3, #30
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0216 	orr.w	r2, r2, #22
 80029c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d03e      	beq.n	8002a50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0208 	orr.w	r2, r2, #8
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e035      	b.n	8002a50 <HAL_DMA_Start_IT+0x260>
 80029e4:	40020010 	.word	0x40020010
 80029e8:	40020028 	.word	0x40020028
 80029ec:	40020040 	.word	0x40020040
 80029f0:	40020058 	.word	0x40020058
 80029f4:	40020070 	.word	0x40020070
 80029f8:	40020088 	.word	0x40020088
 80029fc:	400200a0 	.word	0x400200a0
 8002a00:	400200b8 	.word	0x400200b8
 8002a04:	40020410 	.word	0x40020410
 8002a08:	40020428 	.word	0x40020428
 8002a0c:	40020440 	.word	0x40020440
 8002a10:	40020458 	.word	0x40020458
 8002a14:	40020470 	.word	0x40020470
 8002a18:	40020488 	.word	0x40020488
 8002a1c:	400204a0 	.word	0x400204a0
 8002a20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 020e 	bic.w	r2, r3, #14
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 020a 	orr.w	r2, r2, #10
 8002a36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0204 	orr.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a83      	ldr	r2, [pc, #524]	@ (8002c64 <HAL_DMA_Start_IT+0x474>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d072      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a82      	ldr	r2, [pc, #520]	@ (8002c68 <HAL_DMA_Start_IT+0x478>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d06d      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a80      	ldr	r2, [pc, #512]	@ (8002c6c <HAL_DMA_Start_IT+0x47c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d068      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7f      	ldr	r2, [pc, #508]	@ (8002c70 <HAL_DMA_Start_IT+0x480>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d063      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7d      	ldr	r2, [pc, #500]	@ (8002c74 <HAL_DMA_Start_IT+0x484>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d05e      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7c      	ldr	r2, [pc, #496]	@ (8002c78 <HAL_DMA_Start_IT+0x488>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d059      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7a      	ldr	r2, [pc, #488]	@ (8002c7c <HAL_DMA_Start_IT+0x48c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d054      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a79      	ldr	r2, [pc, #484]	@ (8002c80 <HAL_DMA_Start_IT+0x490>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d04f      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a77      	ldr	r2, [pc, #476]	@ (8002c84 <HAL_DMA_Start_IT+0x494>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d04a      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a76      	ldr	r2, [pc, #472]	@ (8002c88 <HAL_DMA_Start_IT+0x498>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d045      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a74      	ldr	r2, [pc, #464]	@ (8002c8c <HAL_DMA_Start_IT+0x49c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d040      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a73      	ldr	r2, [pc, #460]	@ (8002c90 <HAL_DMA_Start_IT+0x4a0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d03b      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a71      	ldr	r2, [pc, #452]	@ (8002c94 <HAL_DMA_Start_IT+0x4a4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d036      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a70      	ldr	r2, [pc, #448]	@ (8002c98 <HAL_DMA_Start_IT+0x4a8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d031      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c9c <HAL_DMA_Start_IT+0x4ac>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02c      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca0 <HAL_DMA_Start_IT+0x4b0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d027      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6b      	ldr	r2, [pc, #428]	@ (8002ca4 <HAL_DMA_Start_IT+0x4b4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d022      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca8 <HAL_DMA_Start_IT+0x4b8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d01d      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a68      	ldr	r2, [pc, #416]	@ (8002cac <HAL_DMA_Start_IT+0x4bc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a67      	ldr	r2, [pc, #412]	@ (8002cb0 <HAL_DMA_Start_IT+0x4c0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a65      	ldr	r2, [pc, #404]	@ (8002cb4 <HAL_DMA_Start_IT+0x4c4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a64      	ldr	r2, [pc, #400]	@ (8002cb8 <HAL_DMA_Start_IT+0x4c8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a62      	ldr	r2, [pc, #392]	@ (8002cbc <HAL_DMA_Start_IT+0x4cc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Start_IT+0x350>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a61      	ldr	r2, [pc, #388]	@ (8002cc0 <HAL_DMA_Start_IT+0x4d0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Start_IT+0x354>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_Start_IT+0x356>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01a      	beq.n	8002b80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a37      	ldr	r2, [pc, #220]	@ (8002c64 <HAL_DMA_Start_IT+0x474>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d04a      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a36      	ldr	r2, [pc, #216]	@ (8002c68 <HAL_DMA_Start_IT+0x478>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d045      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a34      	ldr	r2, [pc, #208]	@ (8002c6c <HAL_DMA_Start_IT+0x47c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d040      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a33      	ldr	r2, [pc, #204]	@ (8002c70 <HAL_DMA_Start_IT+0x480>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d03b      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a31      	ldr	r2, [pc, #196]	@ (8002c74 <HAL_DMA_Start_IT+0x484>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d036      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a30      	ldr	r2, [pc, #192]	@ (8002c78 <HAL_DMA_Start_IT+0x488>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d031      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <HAL_DMA_Start_IT+0x48c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02c      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <HAL_DMA_Start_IT+0x490>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d027      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c84 <HAL_DMA_Start_IT+0x494>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2a      	ldr	r2, [pc, #168]	@ (8002c88 <HAL_DMA_Start_IT+0x498>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d01d      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a28      	ldr	r2, [pc, #160]	@ (8002c8c <HAL_DMA_Start_IT+0x49c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a27      	ldr	r2, [pc, #156]	@ (8002c90 <HAL_DMA_Start_IT+0x4a0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <HAL_DMA_Start_IT+0x4a4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a24      	ldr	r2, [pc, #144]	@ (8002c98 <HAL_DMA_Start_IT+0x4a8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <HAL_DMA_Start_IT+0x4ac>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_DMA_Start_IT+0x430>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a21      	ldr	r2, [pc, #132]	@ (8002ca0 <HAL_DMA_Start_IT+0x4b0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <HAL_DMA_Start_IT+0x442>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e012      	b.n	8002c58 <HAL_DMA_Start_IT+0x468>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e009      	b.n	8002c58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40020010 	.word	0x40020010
 8002c68:	40020028 	.word	0x40020028
 8002c6c:	40020040 	.word	0x40020040
 8002c70:	40020058 	.word	0x40020058
 8002c74:	40020070 	.word	0x40020070
 8002c78:	40020088 	.word	0x40020088
 8002c7c:	400200a0 	.word	0x400200a0
 8002c80:	400200b8 	.word	0x400200b8
 8002c84:	40020410 	.word	0x40020410
 8002c88:	40020428 	.word	0x40020428
 8002c8c:	40020440 	.word	0x40020440
 8002c90:	40020458 	.word	0x40020458
 8002c94:	40020470 	.word	0x40020470
 8002c98:	40020488 	.word	0x40020488
 8002c9c:	400204a0 	.word	0x400204a0
 8002ca0:	400204b8 	.word	0x400204b8
 8002ca4:	58025408 	.word	0x58025408
 8002ca8:	5802541c 	.word	0x5802541c
 8002cac:	58025430 	.word	0x58025430
 8002cb0:	58025444 	.word	0x58025444
 8002cb4:	58025458 	.word	0x58025458
 8002cb8:	5802546c 	.word	0x5802546c
 8002cbc:	58025480 	.word	0x58025480
 8002cc0:	58025494 	.word	0x58025494

08002cc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff f8e8 	bl	8001ea0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e2dc      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e2cd      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a76      	ldr	r2, [pc, #472]	@ (8002ed8 <HAL_DMA_Abort+0x214>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04a      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a74      	ldr	r2, [pc, #464]	@ (8002edc <HAL_DMA_Abort+0x218>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d045      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a73      	ldr	r2, [pc, #460]	@ (8002ee0 <HAL_DMA_Abort+0x21c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d040      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a71      	ldr	r2, [pc, #452]	@ (8002ee4 <HAL_DMA_Abort+0x220>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d03b      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a70      	ldr	r2, [pc, #448]	@ (8002ee8 <HAL_DMA_Abort+0x224>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d036      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	@ (8002eec <HAL_DMA_Abort+0x228>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d031      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ef0 <HAL_DMA_Abort+0x22c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d02c      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef4 <HAL_DMA_Abort+0x230>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef8 <HAL_DMA_Abort+0x234>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	@ (8002efc <HAL_DMA_Abort+0x238>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01d      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a67      	ldr	r2, [pc, #412]	@ (8002f00 <HAL_DMA_Abort+0x23c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a65      	ldr	r2, [pc, #404]	@ (8002f04 <HAL_DMA_Abort+0x240>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a64      	ldr	r2, [pc, #400]	@ (8002f08 <HAL_DMA_Abort+0x244>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a62      	ldr	r2, [pc, #392]	@ (8002f0c <HAL_DMA_Abort+0x248>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a61      	ldr	r2, [pc, #388]	@ (8002f10 <HAL_DMA_Abort+0x24c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_DMA_Abort+0xd6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5f      	ldr	r2, [pc, #380]	@ (8002f14 <HAL_DMA_Abort+0x250>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Abort+0xda>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_DMA_Abort+0xdc>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 021e 	bic.w	r2, r2, #30
 8002db2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e00a      	b.n	8002de2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed8 <HAL_DMA_Abort+0x214>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d072      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a3a      	ldr	r2, [pc, #232]	@ (8002edc <HAL_DMA_Abort+0x218>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d06d      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a39      	ldr	r2, [pc, #228]	@ (8002ee0 <HAL_DMA_Abort+0x21c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d068      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a37      	ldr	r2, [pc, #220]	@ (8002ee4 <HAL_DMA_Abort+0x220>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d063      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a36      	ldr	r2, [pc, #216]	@ (8002ee8 <HAL_DMA_Abort+0x224>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d05e      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a34      	ldr	r2, [pc, #208]	@ (8002eec <HAL_DMA_Abort+0x228>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d059      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a33      	ldr	r2, [pc, #204]	@ (8002ef0 <HAL_DMA_Abort+0x22c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d054      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <HAL_DMA_Abort+0x230>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d04f      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a30      	ldr	r2, [pc, #192]	@ (8002ef8 <HAL_DMA_Abort+0x234>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04a      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <HAL_DMA_Abort+0x238>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d045      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <HAL_DMA_Abort+0x23c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	@ (8002f04 <HAL_DMA_Abort+0x240>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d03b      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_DMA_Abort+0x244>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <HAL_DMA_Abort+0x248>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d031      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a27      	ldr	r2, [pc, #156]	@ (8002f10 <HAL_DMA_Abort+0x24c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	@ (8002f14 <HAL_DMA_Abort+0x250>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a24      	ldr	r2, [pc, #144]	@ (8002f18 <HAL_DMA_Abort+0x254>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	@ (8002f1c <HAL_DMA_Abort+0x258>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	@ (8002f20 <HAL_DMA_Abort+0x25c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f24 <HAL_DMA_Abort+0x260>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	@ (8002f28 <HAL_DMA_Abort+0x264>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <HAL_DMA_Abort+0x268>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <HAL_DMA_Abort+0x26c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_Abort+0x20e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	@ (8002f34 <HAL_DMA_Abort+0x270>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d132      	bne.n	8002f38 <HAL_DMA_Abort+0x274>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e031      	b.n	8002f3a <HAL_DMA_Abort+0x276>
 8002ed6:	bf00      	nop
 8002ed8:	40020010 	.word	0x40020010
 8002edc:	40020028 	.word	0x40020028
 8002ee0:	40020040 	.word	0x40020040
 8002ee4:	40020058 	.word	0x40020058
 8002ee8:	40020070 	.word	0x40020070
 8002eec:	40020088 	.word	0x40020088
 8002ef0:	400200a0 	.word	0x400200a0
 8002ef4:	400200b8 	.word	0x400200b8
 8002ef8:	40020410 	.word	0x40020410
 8002efc:	40020428 	.word	0x40020428
 8002f00:	40020440 	.word	0x40020440
 8002f04:	40020458 	.word	0x40020458
 8002f08:	40020470 	.word	0x40020470
 8002f0c:	40020488 	.word	0x40020488
 8002f10:	400204a0 	.word	0x400204a0
 8002f14:	400204b8 	.word	0x400204b8
 8002f18:	58025408 	.word	0x58025408
 8002f1c:	5802541c 	.word	0x5802541c
 8002f20:	58025430 	.word	0x58025430
 8002f24:	58025444 	.word	0x58025444
 8002f28:	58025458 	.word	0x58025458
 8002f2c:	5802546c 	.word	0x5802546c
 8002f30:	58025480 	.word	0x58025480
 8002f34:	58025494 	.word	0x58025494
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6d      	ldr	r2, [pc, #436]	@ (8003108 <HAL_DMA_Abort+0x444>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800310c <HAL_DMA_Abort+0x448>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6a      	ldr	r2, [pc, #424]	@ (8003110 <HAL_DMA_Abort+0x44c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a68      	ldr	r2, [pc, #416]	@ (8003114 <HAL_DMA_Abort+0x450>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a67      	ldr	r2, [pc, #412]	@ (8003118 <HAL_DMA_Abort+0x454>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	@ (800311c <HAL_DMA_Abort+0x458>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a64      	ldr	r2, [pc, #400]	@ (8003120 <HAL_DMA_Abort+0x45c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a62      	ldr	r2, [pc, #392]	@ (8003124 <HAL_DMA_Abort+0x460>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a61      	ldr	r2, [pc, #388]	@ (8003128 <HAL_DMA_Abort+0x464>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5f      	ldr	r2, [pc, #380]	@ (800312c <HAL_DMA_Abort+0x468>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8003130 <HAL_DMA_Abort+0x46c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5c      	ldr	r2, [pc, #368]	@ (8003134 <HAL_DMA_Abort+0x470>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5b      	ldr	r2, [pc, #364]	@ (8003138 <HAL_DMA_Abort+0x474>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a59      	ldr	r2, [pc, #356]	@ (800313c <HAL_DMA_Abort+0x478>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_DMA_Abort+0x47c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_Abort+0x32a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a56      	ldr	r2, [pc, #344]	@ (8003144 <HAL_DMA_Abort+0x480>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <HAL_DMA_Abort+0x33c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e007      	b.n	8003010 <HAL_DMA_Abort+0x34c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003010:	e013      	b.n	800303a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7fe ff45 	bl	8001ea0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d90c      	bls.n	800303a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e12d      	b.n	8003296 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e5      	bne.n	8003012 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2f      	ldr	r2, [pc, #188]	@ (8003108 <HAL_DMA_Abort+0x444>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d04a      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2d      	ldr	r2, [pc, #180]	@ (800310c <HAL_DMA_Abort+0x448>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d045      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2c      	ldr	r2, [pc, #176]	@ (8003110 <HAL_DMA_Abort+0x44c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d040      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2a      	ldr	r2, [pc, #168]	@ (8003114 <HAL_DMA_Abort+0x450>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d03b      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a29      	ldr	r2, [pc, #164]	@ (8003118 <HAL_DMA_Abort+0x454>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d036      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a27      	ldr	r2, [pc, #156]	@ (800311c <HAL_DMA_Abort+0x458>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d031      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <HAL_DMA_Abort+0x45c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d02c      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a24      	ldr	r2, [pc, #144]	@ (8003124 <HAL_DMA_Abort+0x460>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d027      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a23      	ldr	r2, [pc, #140]	@ (8003128 <HAL_DMA_Abort+0x464>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a21      	ldr	r2, [pc, #132]	@ (800312c <HAL_DMA_Abort+0x468>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <HAL_DMA_Abort+0x46c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003134 <HAL_DMA_Abort+0x470>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <HAL_DMA_Abort+0x474>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1b      	ldr	r2, [pc, #108]	@ (800313c <HAL_DMA_Abort+0x478>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003140 <HAL_DMA_Abort+0x47c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_DMA_Abort+0x422>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_DMA_Abort+0x480>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Abort+0x426>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_DMA_Abort+0x428>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02b      	beq.n	8003148 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	223f      	movs	r2, #63	@ 0x3f
 8003100:	409a      	lsls	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	e02a      	b.n	800315e <HAL_DMA_Abort+0x49a>
 8003108:	40020010 	.word	0x40020010
 800310c:	40020028 	.word	0x40020028
 8003110:	40020040 	.word	0x40020040
 8003114:	40020058 	.word	0x40020058
 8003118:	40020070 	.word	0x40020070
 800311c:	40020088 	.word	0x40020088
 8003120:	400200a0 	.word	0x400200a0
 8003124:	400200b8 	.word	0x400200b8
 8003128:	40020410 	.word	0x40020410
 800312c:	40020428 	.word	0x40020428
 8003130:	40020440 	.word	0x40020440
 8003134:	40020458 	.word	0x40020458
 8003138:	40020470 	.word	0x40020470
 800313c:	40020488 	.word	0x40020488
 8003140:	400204a0 	.word	0x400204a0
 8003144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2201      	movs	r2, #1
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4f      	ldr	r2, [pc, #316]	@ (80032a0 <HAL_DMA_Abort+0x5dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d072      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4d      	ldr	r2, [pc, #308]	@ (80032a4 <HAL_DMA_Abort+0x5e0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d06d      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4c      	ldr	r2, [pc, #304]	@ (80032a8 <HAL_DMA_Abort+0x5e4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d068      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4a      	ldr	r2, [pc, #296]	@ (80032ac <HAL_DMA_Abort+0x5e8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d063      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a49      	ldr	r2, [pc, #292]	@ (80032b0 <HAL_DMA_Abort+0x5ec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d05e      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a47      	ldr	r2, [pc, #284]	@ (80032b4 <HAL_DMA_Abort+0x5f0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d059      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a46      	ldr	r2, [pc, #280]	@ (80032b8 <HAL_DMA_Abort+0x5f4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d054      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a44      	ldr	r2, [pc, #272]	@ (80032bc <HAL_DMA_Abort+0x5f8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d04f      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a43      	ldr	r2, [pc, #268]	@ (80032c0 <HAL_DMA_Abort+0x5fc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a41      	ldr	r2, [pc, #260]	@ (80032c4 <HAL_DMA_Abort+0x600>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a40      	ldr	r2, [pc, #256]	@ (80032c8 <HAL_DMA_Abort+0x604>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3e      	ldr	r2, [pc, #248]	@ (80032cc <HAL_DMA_Abort+0x608>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a3d      	ldr	r2, [pc, #244]	@ (80032d0 <HAL_DMA_Abort+0x60c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3b      	ldr	r2, [pc, #236]	@ (80032d4 <HAL_DMA_Abort+0x610>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3a      	ldr	r2, [pc, #232]	@ (80032d8 <HAL_DMA_Abort+0x614>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a38      	ldr	r2, [pc, #224]	@ (80032dc <HAL_DMA_Abort+0x618>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a37      	ldr	r2, [pc, #220]	@ (80032e0 <HAL_DMA_Abort+0x61c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a35      	ldr	r2, [pc, #212]	@ (80032e4 <HAL_DMA_Abort+0x620>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a34      	ldr	r2, [pc, #208]	@ (80032e8 <HAL_DMA_Abort+0x624>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a32      	ldr	r2, [pc, #200]	@ (80032ec <HAL_DMA_Abort+0x628>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a31      	ldr	r2, [pc, #196]	@ (80032f0 <HAL_DMA_Abort+0x62c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2f      	ldr	r2, [pc, #188]	@ (80032f4 <HAL_DMA_Abort+0x630>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2e      	ldr	r2, [pc, #184]	@ (80032f8 <HAL_DMA_Abort+0x634>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Abort+0x58a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2c      	ldr	r2, [pc, #176]	@ (80032fc <HAL_DMA_Abort+0x638>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Abort+0x58e>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_DMA_Abort+0x590>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003260:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003278:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003282:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40020010 	.word	0x40020010
 80032a4:	40020028 	.word	0x40020028
 80032a8:	40020040 	.word	0x40020040
 80032ac:	40020058 	.word	0x40020058
 80032b0:	40020070 	.word	0x40020070
 80032b4:	40020088 	.word	0x40020088
 80032b8:	400200a0 	.word	0x400200a0
 80032bc:	400200b8 	.word	0x400200b8
 80032c0:	40020410 	.word	0x40020410
 80032c4:	40020428 	.word	0x40020428
 80032c8:	40020440 	.word	0x40020440
 80032cc:	40020458 	.word	0x40020458
 80032d0:	40020470 	.word	0x40020470
 80032d4:	40020488 	.word	0x40020488
 80032d8:	400204a0 	.word	0x400204a0
 80032dc:	400204b8 	.word	0x400204b8
 80032e0:	58025408 	.word	0x58025408
 80032e4:	5802541c 	.word	0x5802541c
 80032e8:	58025430 	.word	0x58025430
 80032ec:	58025444 	.word	0x58025444
 80032f0:	58025458 	.word	0x58025458
 80032f4:	5802546c 	.word	0x5802546c
 80032f8:	58025480 	.word	0x58025480
 80032fc:	58025494 	.word	0x58025494

08003300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e237      	b.n	8003782 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d004      	beq.n	8003328 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e22c      	b.n	8003782 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_DMA_Abort_IT+0x1a0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04a      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5b      	ldr	r2, [pc, #364]	@ (80034a4 <HAL_DMA_Abort_IT+0x1a4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d045      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a59      	ldr	r2, [pc, #356]	@ (80034a8 <HAL_DMA_Abort_IT+0x1a8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d040      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a58      	ldr	r2, [pc, #352]	@ (80034ac <HAL_DMA_Abort_IT+0x1ac>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a56      	ldr	r2, [pc, #344]	@ (80034b0 <HAL_DMA_Abort_IT+0x1b0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d036      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a55      	ldr	r2, [pc, #340]	@ (80034b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d031      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a53      	ldr	r2, [pc, #332]	@ (80034b8 <HAL_DMA_Abort_IT+0x1b8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02c      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a52      	ldr	r2, [pc, #328]	@ (80034bc <HAL_DMA_Abort_IT+0x1bc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d027      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a50      	ldr	r2, [pc, #320]	@ (80034c0 <HAL_DMA_Abort_IT+0x1c0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a4f      	ldr	r2, [pc, #316]	@ (80034c4 <HAL_DMA_Abort_IT+0x1c4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01d      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a4d      	ldr	r2, [pc, #308]	@ (80034c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4c      	ldr	r2, [pc, #304]	@ (80034cc <HAL_DMA_Abort_IT+0x1cc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	@ (80034d0 <HAL_DMA_Abort_IT+0x1d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a49      	ldr	r2, [pc, #292]	@ (80034d4 <HAL_DMA_Abort_IT+0x1d4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a47      	ldr	r2, [pc, #284]	@ (80034d8 <HAL_DMA_Abort_IT+0x1d8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xc8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a46      	ldr	r2, [pc, #280]	@ (80034dc <HAL_DMA_Abort_IT+0x1dc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Abort_IT+0xcc>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_DMA_Abort_IT+0xce>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8086 	beq.w	80034e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2204      	movs	r2, #4
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <HAL_DMA_Abort_IT+0x1a0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04a      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2e      	ldr	r2, [pc, #184]	@ (80034a4 <HAL_DMA_Abort_IT+0x1a4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d045      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <HAL_DMA_Abort_IT+0x1a8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d040      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2b      	ldr	r2, [pc, #172]	@ (80034ac <HAL_DMA_Abort_IT+0x1ac>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d03b      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a29      	ldr	r2, [pc, #164]	@ (80034b0 <HAL_DMA_Abort_IT+0x1b0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d036      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a28      	ldr	r2, [pc, #160]	@ (80034b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d031      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_DMA_Abort_IT+0x1b8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02c      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a25      	ldr	r2, [pc, #148]	@ (80034bc <HAL_DMA_Abort_IT+0x1bc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d027      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a23      	ldr	r2, [pc, #140]	@ (80034c0 <HAL_DMA_Abort_IT+0x1c0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <HAL_DMA_Abort_IT+0x1c4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d01d      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <HAL_DMA_Abort_IT+0x1cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_DMA_Abort_IT+0x1d0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1c      	ldr	r2, [pc, #112]	@ (80034d4 <HAL_DMA_Abort_IT+0x1d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_DMA_Abort_IT+0x1d8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_DMA_Abort_IT+0x17c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <HAL_DMA_Abort_IT+0x1dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <HAL_DMA_Abort_IT+0x18e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e178      	b.n	8003780 <HAL_DMA_Abort_IT+0x480>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e16f      	b.n	8003780 <HAL_DMA_Abort_IT+0x480>
 80034a0:	40020010 	.word	0x40020010
 80034a4:	40020028 	.word	0x40020028
 80034a8:	40020040 	.word	0x40020040
 80034ac:	40020058 	.word	0x40020058
 80034b0:	40020070 	.word	0x40020070
 80034b4:	40020088 	.word	0x40020088
 80034b8:	400200a0 	.word	0x400200a0
 80034bc:	400200b8 	.word	0x400200b8
 80034c0:	40020410 	.word	0x40020410
 80034c4:	40020428 	.word	0x40020428
 80034c8:	40020440 	.word	0x40020440
 80034cc:	40020458 	.word	0x40020458
 80034d0:	40020470 	.word	0x40020470
 80034d4:	40020488 	.word	0x40020488
 80034d8:	400204a0 	.word	0x400204a0
 80034dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 020e 	bic.w	r2, r2, #14
 80034ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6c      	ldr	r2, [pc, #432]	@ (80036a8 <HAL_DMA_Abort_IT+0x3a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04a      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6b      	ldr	r2, [pc, #428]	@ (80036ac <HAL_DMA_Abort_IT+0x3ac>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d045      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a69      	ldr	r2, [pc, #420]	@ (80036b0 <HAL_DMA_Abort_IT+0x3b0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d040      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a68      	ldr	r2, [pc, #416]	@ (80036b4 <HAL_DMA_Abort_IT+0x3b4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03b      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a66      	ldr	r2, [pc, #408]	@ (80036b8 <HAL_DMA_Abort_IT+0x3b8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d036      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a65      	ldr	r2, [pc, #404]	@ (80036bc <HAL_DMA_Abort_IT+0x3bc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d031      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a63      	ldr	r2, [pc, #396]	@ (80036c0 <HAL_DMA_Abort_IT+0x3c0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02c      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a62      	ldr	r2, [pc, #392]	@ (80036c4 <HAL_DMA_Abort_IT+0x3c4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d027      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a60      	ldr	r2, [pc, #384]	@ (80036c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5f      	ldr	r2, [pc, #380]	@ (80036cc <HAL_DMA_Abort_IT+0x3cc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01d      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5d      	ldr	r2, [pc, #372]	@ (80036d0 <HAL_DMA_Abort_IT+0x3d0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5c      	ldr	r2, [pc, #368]	@ (80036d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5a      	ldr	r2, [pc, #360]	@ (80036d8 <HAL_DMA_Abort_IT+0x3d8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a59      	ldr	r2, [pc, #356]	@ (80036dc <HAL_DMA_Abort_IT+0x3dc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a57      	ldr	r2, [pc, #348]	@ (80036e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_DMA_Abort_IT+0x290>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a56      	ldr	r2, [pc, #344]	@ (80036e4 <HAL_DMA_Abort_IT+0x3e4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <HAL_DMA_Abort_IT+0x2a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e007      	b.n	80035b2 <HAL_DMA_Abort_IT+0x2b2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a3c      	ldr	r2, [pc, #240]	@ (80036a8 <HAL_DMA_Abort_IT+0x3a8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d072      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3a      	ldr	r2, [pc, #232]	@ (80036ac <HAL_DMA_Abort_IT+0x3ac>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d06d      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a39      	ldr	r2, [pc, #228]	@ (80036b0 <HAL_DMA_Abort_IT+0x3b0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d068      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a37      	ldr	r2, [pc, #220]	@ (80036b4 <HAL_DMA_Abort_IT+0x3b4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d063      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a36      	ldr	r2, [pc, #216]	@ (80036b8 <HAL_DMA_Abort_IT+0x3b8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d05e      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a34      	ldr	r2, [pc, #208]	@ (80036bc <HAL_DMA_Abort_IT+0x3bc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d059      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a33      	ldr	r2, [pc, #204]	@ (80036c0 <HAL_DMA_Abort_IT+0x3c0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d054      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a31      	ldr	r2, [pc, #196]	@ (80036c4 <HAL_DMA_Abort_IT+0x3c4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04f      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a30      	ldr	r2, [pc, #192]	@ (80036c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04a      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2e      	ldr	r2, [pc, #184]	@ (80036cc <HAL_DMA_Abort_IT+0x3cc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d045      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2d      	ldr	r2, [pc, #180]	@ (80036d0 <HAL_DMA_Abort_IT+0x3d0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2b      	ldr	r2, [pc, #172]	@ (80036d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d03b      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2a      	ldr	r2, [pc, #168]	@ (80036d8 <HAL_DMA_Abort_IT+0x3d8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d036      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a28      	ldr	r2, [pc, #160]	@ (80036dc <HAL_DMA_Abort_IT+0x3dc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a27      	ldr	r2, [pc, #156]	@ (80036e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d02c      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a25      	ldr	r2, [pc, #148]	@ (80036e4 <HAL_DMA_Abort_IT+0x3e4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d027      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <HAL_DMA_Abort_IT+0x3e8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a22      	ldr	r2, [pc, #136]	@ (80036ec <HAL_DMA_Abort_IT+0x3ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <HAL_DMA_Abort_IT+0x3f0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1f      	ldr	r2, [pc, #124]	@ (80036f4 <HAL_DMA_Abort_IT+0x3f4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1e      	ldr	r2, [pc, #120]	@ (80036f8 <HAL_DMA_Abort_IT+0x3f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <HAL_DMA_Abort_IT+0x3fc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <HAL_DMA_Abort_IT+0x400>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_Abort_IT+0x3a2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	@ (8003704 <HAL_DMA_Abort_IT+0x404>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d132      	bne.n	8003708 <HAL_DMA_Abort_IT+0x408>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e031      	b.n	800370a <HAL_DMA_Abort_IT+0x40a>
 80036a6:	bf00      	nop
 80036a8:	40020010 	.word	0x40020010
 80036ac:	40020028 	.word	0x40020028
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40020058 	.word	0x40020058
 80036b8:	40020070 	.word	0x40020070
 80036bc:	40020088 	.word	0x40020088
 80036c0:	400200a0 	.word	0x400200a0
 80036c4:	400200b8 	.word	0x400200b8
 80036c8:	40020410 	.word	0x40020410
 80036cc:	40020428 	.word	0x40020428
 80036d0:	40020440 	.word	0x40020440
 80036d4:	40020458 	.word	0x40020458
 80036d8:	40020470 	.word	0x40020470
 80036dc:	40020488 	.word	0x40020488
 80036e0:	400204a0 	.word	0x400204a0
 80036e4:	400204b8 	.word	0x400204b8
 80036e8:	58025408 	.word	0x58025408
 80036ec:	5802541c 	.word	0x5802541c
 80036f0:	58025430 	.word	0x58025430
 80036f4:	58025444 	.word	0x58025444
 80036f8:	58025458 	.word	0x58025458
 80036fc:	5802546c 	.word	0x5802546c
 8003700:	58025480 	.word	0x58025480
 8003704:	58025494 	.word	0x58025494
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d028      	beq.n	8003760 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800371c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800373c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003754:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800375e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop

0800378c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	@ 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003798:	4b67      	ldr	r3, [pc, #412]	@ (8003938 <HAL_DMA_IRQHandler+0x1ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a67      	ldr	r2, [pc, #412]	@ (800393c <HAL_DMA_IRQHandler+0x1b0>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003940 <HAL_DMA_IRQHandler+0x1b4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d04a      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003944 <HAL_DMA_IRQHandler+0x1b8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d045      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003948 <HAL_DMA_IRQHandler+0x1bc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d040      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5a      	ldr	r2, [pc, #360]	@ (800394c <HAL_DMA_IRQHandler+0x1c0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d03b      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a59      	ldr	r2, [pc, #356]	@ (8003950 <HAL_DMA_IRQHandler+0x1c4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d036      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a57      	ldr	r2, [pc, #348]	@ (8003954 <HAL_DMA_IRQHandler+0x1c8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d031      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a56      	ldr	r2, [pc, #344]	@ (8003958 <HAL_DMA_IRQHandler+0x1cc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d02c      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a54      	ldr	r2, [pc, #336]	@ (800395c <HAL_DMA_IRQHandler+0x1d0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d027      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a53      	ldr	r2, [pc, #332]	@ (8003960 <HAL_DMA_IRQHandler+0x1d4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a51      	ldr	r2, [pc, #324]	@ (8003964 <HAL_DMA_IRQHandler+0x1d8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01d      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a50      	ldr	r2, [pc, #320]	@ (8003968 <HAL_DMA_IRQHandler+0x1dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d018      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4e      	ldr	r2, [pc, #312]	@ (800396c <HAL_DMA_IRQHandler+0x1e0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4d      	ldr	r2, [pc, #308]	@ (8003970 <HAL_DMA_IRQHandler+0x1e4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4b      	ldr	r2, [pc, #300]	@ (8003974 <HAL_DMA_IRQHandler+0x1e8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4a      	ldr	r2, [pc, #296]	@ (8003978 <HAL_DMA_IRQHandler+0x1ec>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_DMA_IRQHandler+0xd2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a48      	ldr	r2, [pc, #288]	@ (800397c <HAL_DMA_IRQHandler+0x1f0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_DMA_IRQHandler+0xd6>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_DMA_IRQHandler+0xd8>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 842b 	beq.w	80040c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2208      	movs	r2, #8
 8003874:	409a      	lsls	r2, r3
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a2 	beq.w	80039c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2e      	ldr	r2, [pc, #184]	@ (8003940 <HAL_DMA_IRQHandler+0x1b4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d04a      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2d      	ldr	r2, [pc, #180]	@ (8003944 <HAL_DMA_IRQHandler+0x1b8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d045      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <HAL_DMA_IRQHandler+0x1bc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d040      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2a      	ldr	r2, [pc, #168]	@ (800394c <HAL_DMA_IRQHandler+0x1c0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a28      	ldr	r2, [pc, #160]	@ (8003950 <HAL_DMA_IRQHandler+0x1c4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d036      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a27      	ldr	r2, [pc, #156]	@ (8003954 <HAL_DMA_IRQHandler+0x1c8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d031      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a25      	ldr	r2, [pc, #148]	@ (8003958 <HAL_DMA_IRQHandler+0x1cc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02c      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a24      	ldr	r2, [pc, #144]	@ (800395c <HAL_DMA_IRQHandler+0x1d0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a22      	ldr	r2, [pc, #136]	@ (8003960 <HAL_DMA_IRQHandler+0x1d4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a21      	ldr	r2, [pc, #132]	@ (8003964 <HAL_DMA_IRQHandler+0x1d8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003968 <HAL_DMA_IRQHandler+0x1dc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1e      	ldr	r2, [pc, #120]	@ (800396c <HAL_DMA_IRQHandler+0x1e0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003970 <HAL_DMA_IRQHandler+0x1e4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <HAL_DMA_IRQHandler+0x1e8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <HAL_DMA_IRQHandler+0x1ec>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_DMA_IRQHandler+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_DMA_IRQHandler+0x1f0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d12f      	bne.n	8003980 <HAL_DMA_IRQHandler+0x1f4>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e02e      	b.n	8003994 <HAL_DMA_IRQHandler+0x208>
 8003936:	bf00      	nop
 8003938:	24000820 	.word	0x24000820
 800393c:	1b4e81b5 	.word	0x1b4e81b5
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d015      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	2208      	movs	r2, #8
 80039b2:	409a      	lsls	r2, r3
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d06e      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a69      	ldr	r2, [pc, #420]	@ (8003b84 <HAL_DMA_IRQHandler+0x3f8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a67      	ldr	r2, [pc, #412]	@ (8003b88 <HAL_DMA_IRQHandler+0x3fc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a66      	ldr	r2, [pc, #408]	@ (8003b8c <HAL_DMA_IRQHandler+0x400>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a64      	ldr	r2, [pc, #400]	@ (8003b90 <HAL_DMA_IRQHandler+0x404>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a63      	ldr	r2, [pc, #396]	@ (8003b94 <HAL_DMA_IRQHandler+0x408>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a61      	ldr	r2, [pc, #388]	@ (8003b98 <HAL_DMA_IRQHandler+0x40c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a60      	ldr	r2, [pc, #384]	@ (8003b9c <HAL_DMA_IRQHandler+0x410>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba0 <HAL_DMA_IRQHandler+0x414>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba4 <HAL_DMA_IRQHandler+0x418>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba8 <HAL_DMA_IRQHandler+0x41c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5a      	ldr	r2, [pc, #360]	@ (8003bac <HAL_DMA_IRQHandler+0x420>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	@ (8003bb0 <HAL_DMA_IRQHandler+0x424>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a57      	ldr	r2, [pc, #348]	@ (8003bb4 <HAL_DMA_IRQHandler+0x428>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a55      	ldr	r2, [pc, #340]	@ (8003bb8 <HAL_DMA_IRQHandler+0x42c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a54      	ldr	r2, [pc, #336]	@ (8003bbc <HAL_DMA_IRQHandler+0x430>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2ee>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a52      	ldr	r2, [pc, #328]	@ (8003bc0 <HAL_DMA_IRQHandler+0x434>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10a      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x304>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e003      	b.n	8003a98 <HAL_DMA_IRQHandler+0x30c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab0:	f043 0202 	orr.w	r2, r3, #2
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 808f 	beq.w	8003bec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <HAL_DMA_IRQHandler+0x3f8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d04a      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b88 <HAL_DMA_IRQHandler+0x3fc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d045      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <HAL_DMA_IRQHandler+0x400>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d040      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a27      	ldr	r2, [pc, #156]	@ (8003b90 <HAL_DMA_IRQHandler+0x404>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d03b      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a26      	ldr	r2, [pc, #152]	@ (8003b94 <HAL_DMA_IRQHandler+0x408>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d036      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a24      	ldr	r2, [pc, #144]	@ (8003b98 <HAL_DMA_IRQHandler+0x40c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a23      	ldr	r2, [pc, #140]	@ (8003b9c <HAL_DMA_IRQHandler+0x410>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d02c      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a21      	ldr	r2, [pc, #132]	@ (8003ba0 <HAL_DMA_IRQHandler+0x414>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d027      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a20      	ldr	r2, [pc, #128]	@ (8003ba4 <HAL_DMA_IRQHandler+0x418>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <HAL_DMA_IRQHandler+0x41c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	@ (8003bac <HAL_DMA_IRQHandler+0x420>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb0 <HAL_DMA_IRQHandler+0x424>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb4 <HAL_DMA_IRQHandler+0x428>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	@ (8003bb8 <HAL_DMA_IRQHandler+0x42c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <HAL_DMA_IRQHandler+0x430>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x3e2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <HAL_DMA_IRQHandler+0x434>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12a      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0x438>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e023      	b.n	8003bcc <HAL_DMA_IRQHandler+0x440>
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2204      	movs	r2, #4
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be4:	f043 0204 	orr.w	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a6 	beq.w	8003d4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a85      	ldr	r2, [pc, #532]	@ (8003e1c <HAL_DMA_IRQHandler+0x690>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d04a      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a83      	ldr	r2, [pc, #524]	@ (8003e20 <HAL_DMA_IRQHandler+0x694>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d045      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a82      	ldr	r2, [pc, #520]	@ (8003e24 <HAL_DMA_IRQHandler+0x698>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d040      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a80      	ldr	r2, [pc, #512]	@ (8003e28 <HAL_DMA_IRQHandler+0x69c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d03b      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7f      	ldr	r2, [pc, #508]	@ (8003e2c <HAL_DMA_IRQHandler+0x6a0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d036      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7d      	ldr	r2, [pc, #500]	@ (8003e30 <HAL_DMA_IRQHandler+0x6a4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d031      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7c      	ldr	r2, [pc, #496]	@ (8003e34 <HAL_DMA_IRQHandler+0x6a8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d02c      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7a      	ldr	r2, [pc, #488]	@ (8003e38 <HAL_DMA_IRQHandler+0x6ac>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d027      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a79      	ldr	r2, [pc, #484]	@ (8003e3c <HAL_DMA_IRQHandler+0x6b0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a77      	ldr	r2, [pc, #476]	@ (8003e40 <HAL_DMA_IRQHandler+0x6b4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01d      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a76      	ldr	r2, [pc, #472]	@ (8003e44 <HAL_DMA_IRQHandler+0x6b8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d018      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a74      	ldr	r2, [pc, #464]	@ (8003e48 <HAL_DMA_IRQHandler+0x6bc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a73      	ldr	r2, [pc, #460]	@ (8003e4c <HAL_DMA_IRQHandler+0x6c0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a71      	ldr	r2, [pc, #452]	@ (8003e50 <HAL_DMA_IRQHandler+0x6c4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a70      	ldr	r2, [pc, #448]	@ (8003e54 <HAL_DMA_IRQHandler+0x6c8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x516>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e58 <HAL_DMA_IRQHandler+0x6cc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x52c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e009      	b.n	8003ccc <HAL_DMA_IRQHandler+0x540>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d03e      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2210      	movs	r2, #16
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d024      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
 8003d0c:	e01f      	b.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01b      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
 8003d1e:	e016      	b.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0208 	bic.w	r2, r2, #8
 8003d3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2220      	movs	r2, #32
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8110 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	@ (8003e1c <HAL_DMA_IRQHandler+0x690>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04a      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <HAL_DMA_IRQHandler+0x694>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d045      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	@ (8003e24 <HAL_DMA_IRQHandler+0x698>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d040      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a28      	ldr	r2, [pc, #160]	@ (8003e28 <HAL_DMA_IRQHandler+0x69c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d03b      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <HAL_DMA_IRQHandler+0x6a0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d036      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	@ (8003e30 <HAL_DMA_IRQHandler+0x6a4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d031      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	@ (8003e34 <HAL_DMA_IRQHandler+0x6a8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02c      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <HAL_DMA_IRQHandler+0x6ac>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d027      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a20      	ldr	r2, [pc, #128]	@ (8003e3c <HAL_DMA_IRQHandler+0x6b0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <HAL_DMA_IRQHandler+0x6b4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01d      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <HAL_DMA_IRQHandler+0x6b8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_DMA_IRQHandler+0x6bc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e4c <HAL_DMA_IRQHandler+0x6c0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <HAL_DMA_IRQHandler+0x6c4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a17      	ldr	r2, [pc, #92]	@ (8003e54 <HAL_DMA_IRQHandler+0x6c8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x678>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a16      	ldr	r2, [pc, #88]	@ (8003e58 <HAL_DMA_IRQHandler+0x6cc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d12b      	bne.n	8003e5c <HAL_DMA_IRQHandler+0x6d0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e02a      	b.n	8003e70 <HAL_DMA_IRQHandler+0x6e4>
 8003e1a:	bf00      	nop
 8003e1c:	40020010 	.word	0x40020010
 8003e20:	40020028 	.word	0x40020028
 8003e24:	40020040 	.word	0x40020040
 8003e28:	40020058 	.word	0x40020058
 8003e2c:	40020070 	.word	0x40020070
 8003e30:	40020088 	.word	0x40020088
 8003e34:	400200a0 	.word	0x400200a0
 8003e38:	400200b8 	.word	0x400200b8
 8003e3c:	40020410 	.word	0x40020410
 8003e40:	40020428 	.word	0x40020428
 8003e44:	40020440 	.word	0x40020440
 8003e48:	40020458 	.word	0x40020458
 8003e4c:	40020470 	.word	0x40020470
 8003e50:	40020488 	.word	0x40020488
 8003e54:	400204a0 	.word	0x400204a0
 8003e58:	400204b8 	.word	0x400204b8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bf14      	ite	ne
 8003e6a:	2301      	movne	r3, #1
 8003e6c:	2300      	moveq	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8087 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2220      	movs	r2, #32
 8003e80:	409a      	lsls	r2, r3
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d139      	bne.n	8003f06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0216 	bic.w	r2, r2, #22
 8003ea0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x736>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0208 	bic.w	r2, r2, #8
 8003ed0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	223f      	movs	r2, #63	@ 0x3f
 8003edc:	409a      	lsls	r2, r3
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 834a 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
          }
          return;
 8003f04:	e344      	b.n	8004590 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02c      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e027      	b.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d023      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
 8003f44:	e01e      	b.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0210 	bic.w	r2, r2, #16
 8003f62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8306 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8088 	beq.w	80040ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a7a      	ldr	r2, [pc, #488]	@ (8004194 <HAL_DMA_IRQHandler+0xa08>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04a      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a79      	ldr	r2, [pc, #484]	@ (8004198 <HAL_DMA_IRQHandler+0xa0c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d045      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a77      	ldr	r2, [pc, #476]	@ (800419c <HAL_DMA_IRQHandler+0xa10>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a76      	ldr	r2, [pc, #472]	@ (80041a0 <HAL_DMA_IRQHandler+0xa14>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d03b      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a74      	ldr	r2, [pc, #464]	@ (80041a4 <HAL_DMA_IRQHandler+0xa18>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d036      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a73      	ldr	r2, [pc, #460]	@ (80041a8 <HAL_DMA_IRQHandler+0xa1c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d031      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a71      	ldr	r2, [pc, #452]	@ (80041ac <HAL_DMA_IRQHandler+0xa20>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02c      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a70      	ldr	r2, [pc, #448]	@ (80041b0 <HAL_DMA_IRQHandler+0xa24>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d027      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80041b4 <HAL_DMA_IRQHandler+0xa28>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6d      	ldr	r2, [pc, #436]	@ (80041b8 <HAL_DMA_IRQHandler+0xa2c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01d      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6b      	ldr	r2, [pc, #428]	@ (80041bc <HAL_DMA_IRQHandler+0xa30>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6a      	ldr	r2, [pc, #424]	@ (80041c0 <HAL_DMA_IRQHandler+0xa34>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a68      	ldr	r2, [pc, #416]	@ (80041c4 <HAL_DMA_IRQHandler+0xa38>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a67      	ldr	r2, [pc, #412]	@ (80041c8 <HAL_DMA_IRQHandler+0xa3c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a65      	ldr	r2, [pc, #404]	@ (80041cc <HAL_DMA_IRQHandler+0xa40>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_DMA_IRQHandler+0x8b8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a64      	ldr	r2, [pc, #400]	@ (80041d0 <HAL_DMA_IRQHandler+0xa44>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d108      	bne.n	8004056 <HAL_DMA_IRQHandler+0x8ca>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e007      	b.n	8004066 <HAL_DMA_IRQHandler+0x8da>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406e:	429a      	cmp	r2, r3
 8004070:	d307      	bcc.n	8004082 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f2      	bne.n	8004066 <HAL_DMA_IRQHandler+0x8da>
 8004080:	e000      	b.n	8004084 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004082:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2203      	movs	r2, #3
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800409a:	e003      	b.n	80040a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8272 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
 80040be:	e26c      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a43      	ldr	r2, [pc, #268]	@ (80041d4 <HAL_DMA_IRQHandler+0xa48>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d022      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a42      	ldr	r2, [pc, #264]	@ (80041d8 <HAL_DMA_IRQHandler+0xa4c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d01d      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a40      	ldr	r2, [pc, #256]	@ (80041dc <HAL_DMA_IRQHandler+0xa50>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d018      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3f      	ldr	r2, [pc, #252]	@ (80041e0 <HAL_DMA_IRQHandler+0xa54>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3d      	ldr	r2, [pc, #244]	@ (80041e4 <HAL_DMA_IRQHandler+0xa58>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00e      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3c      	ldr	r2, [pc, #240]	@ (80041e8 <HAL_DMA_IRQHandler+0xa5c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3a      	ldr	r2, [pc, #232]	@ (80041ec <HAL_DMA_IRQHandler+0xa60>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_DMA_IRQHandler+0x984>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a39      	ldr	r2, [pc, #228]	@ (80041f0 <HAL_DMA_IRQHandler+0xa64>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_DMA_IRQHandler+0x988>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_DMA_IRQHandler+0x98a>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 823f 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2204      	movs	r2, #4
 800412e:	409a      	lsls	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80cd 	beq.w	80042d4 <HAL_DMA_IRQHandler+0xb48>
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80c7 	beq.w	80042d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2204      	movs	r2, #4
 8004150:	409a      	lsls	r2, r3
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d049      	beq.n	80041f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8210 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417c:	e20a      	b.n	8004594 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8206 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004190:	e200      	b.n	8004594 <HAL_DMA_IRQHandler+0xe08>
 8004192:	bf00      	nop
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	58025408 	.word	0x58025408
 80041d8:	5802541c 	.word	0x5802541c
 80041dc:	58025430 	.word	0x58025430
 80041e0:	58025444 	.word	0x58025444
 80041e4:	58025458 	.word	0x58025458
 80041e8:	5802546c 	.word	0x5802546c
 80041ec:	58025480 	.word	0x58025480
 80041f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d160      	bne.n	80042c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a7f      	ldr	r2, [pc, #508]	@ (8004400 <HAL_DMA_IRQHandler+0xc74>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7d      	ldr	r2, [pc, #500]	@ (8004404 <HAL_DMA_IRQHandler+0xc78>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7c      	ldr	r2, [pc, #496]	@ (8004408 <HAL_DMA_IRQHandler+0xc7c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a7a      	ldr	r2, [pc, #488]	@ (800440c <HAL_DMA_IRQHandler+0xc80>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a79      	ldr	r2, [pc, #484]	@ (8004410 <HAL_DMA_IRQHandler+0xc84>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a77      	ldr	r2, [pc, #476]	@ (8004414 <HAL_DMA_IRQHandler+0xc88>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a76      	ldr	r2, [pc, #472]	@ (8004418 <HAL_DMA_IRQHandler+0xc8c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a74      	ldr	r2, [pc, #464]	@ (800441c <HAL_DMA_IRQHandler+0xc90>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a73      	ldr	r2, [pc, #460]	@ (8004420 <HAL_DMA_IRQHandler+0xc94>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a71      	ldr	r2, [pc, #452]	@ (8004424 <HAL_DMA_IRQHandler+0xc98>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a70      	ldr	r2, [pc, #448]	@ (8004428 <HAL_DMA_IRQHandler+0xc9c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a6e      	ldr	r2, [pc, #440]	@ (800442c <HAL_DMA_IRQHandler+0xca0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a6d      	ldr	r2, [pc, #436]	@ (8004430 <HAL_DMA_IRQHandler+0xca4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6b      	ldr	r2, [pc, #428]	@ (8004434 <HAL_DMA_IRQHandler+0xca8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6a      	ldr	r2, [pc, #424]	@ (8004438 <HAL_DMA_IRQHandler+0xcac>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_DMA_IRQHandler+0xb12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a68      	ldr	r2, [pc, #416]	@ (800443c <HAL_DMA_IRQHandler+0xcb0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <HAL_DMA_IRQHandler+0xb24>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0208 	bic.w	r2, r2, #8
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e007      	b.n	80042c0 <HAL_DMA_IRQHandler+0xb34>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8165 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042d2:	e15f      	b.n	8004594 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2202      	movs	r2, #2
 80042de:	409a      	lsls	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80c5 	beq.w	8004474 <HAL_DMA_IRQHandler+0xce8>
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80bf 	beq.w	8004474 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2202      	movs	r2, #2
 8004300:	409a      	lsls	r2, r3
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 813a 	beq.w	8004598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800432c:	e134      	b.n	8004598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8130 	beq.w	8004598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004340:	e12a      	b.n	8004598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8089 	bne.w	8004460 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2b      	ldr	r2, [pc, #172]	@ (8004400 <HAL_DMA_IRQHandler+0xc74>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d04a      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a29      	ldr	r2, [pc, #164]	@ (8004404 <HAL_DMA_IRQHandler+0xc78>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d045      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a28      	ldr	r2, [pc, #160]	@ (8004408 <HAL_DMA_IRQHandler+0xc7c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d040      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a26      	ldr	r2, [pc, #152]	@ (800440c <HAL_DMA_IRQHandler+0xc80>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d03b      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a25      	ldr	r2, [pc, #148]	@ (8004410 <HAL_DMA_IRQHandler+0xc84>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d036      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a23      	ldr	r2, [pc, #140]	@ (8004414 <HAL_DMA_IRQHandler+0xc88>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d031      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a22      	ldr	r2, [pc, #136]	@ (8004418 <HAL_DMA_IRQHandler+0xc8c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d02c      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a20      	ldr	r2, [pc, #128]	@ (800441c <HAL_DMA_IRQHandler+0xc90>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d027      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004420 <HAL_DMA_IRQHandler+0xc94>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <HAL_DMA_IRQHandler+0xc98>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <HAL_DMA_IRQHandler+0xc9c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <HAL_DMA_IRQHandler+0xca0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <HAL_DMA_IRQHandler+0xca4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	@ (8004434 <HAL_DMA_IRQHandler+0xca8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a16      	ldr	r2, [pc, #88]	@ (8004438 <HAL_DMA_IRQHandler+0xcac>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_IRQHandler+0xc62>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a14      	ldr	r2, [pc, #80]	@ (800443c <HAL_DMA_IRQHandler+0xcb0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d128      	bne.n	8004440 <HAL_DMA_IRQHandler+0xcb4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0214 	bic.w	r2, r2, #20
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e027      	b.n	8004450 <HAL_DMA_IRQHandler+0xcc4>
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 020a 	bic.w	r2, r2, #10
 800444e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8097 	beq.w	8004598 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004472:	e091      	b.n	8004598 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2208      	movs	r2, #8
 800447e:	409a      	lsls	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8088 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8082 	beq.w	800459a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a41      	ldr	r2, [pc, #260]	@ (80045a0 <HAL_DMA_IRQHandler+0xe14>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04a      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3f      	ldr	r2, [pc, #252]	@ (80045a4 <HAL_DMA_IRQHandler+0xe18>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d045      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3e      	ldr	r2, [pc, #248]	@ (80045a8 <HAL_DMA_IRQHandler+0xe1c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d040      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3c      	ldr	r2, [pc, #240]	@ (80045ac <HAL_DMA_IRQHandler+0xe20>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d03b      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3b      	ldr	r2, [pc, #236]	@ (80045b0 <HAL_DMA_IRQHandler+0xe24>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d036      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a39      	ldr	r2, [pc, #228]	@ (80045b4 <HAL_DMA_IRQHandler+0xe28>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d031      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a38      	ldr	r2, [pc, #224]	@ (80045b8 <HAL_DMA_IRQHandler+0xe2c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d02c      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a36      	ldr	r2, [pc, #216]	@ (80045bc <HAL_DMA_IRQHandler+0xe30>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d027      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a35      	ldr	r2, [pc, #212]	@ (80045c0 <HAL_DMA_IRQHandler+0xe34>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d022      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a33      	ldr	r2, [pc, #204]	@ (80045c4 <HAL_DMA_IRQHandler+0xe38>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01d      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a32      	ldr	r2, [pc, #200]	@ (80045c8 <HAL_DMA_IRQHandler+0xe3c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a30      	ldr	r2, [pc, #192]	@ (80045cc <HAL_DMA_IRQHandler+0xe40>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2f      	ldr	r2, [pc, #188]	@ (80045d0 <HAL_DMA_IRQHandler+0xe44>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2d      	ldr	r2, [pc, #180]	@ (80045d4 <HAL_DMA_IRQHandler+0xe48>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2c      	ldr	r2, [pc, #176]	@ (80045d8 <HAL_DMA_IRQHandler+0xe4c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_DMA_IRQHandler+0xdaa>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2a      	ldr	r2, [pc, #168]	@ (80045dc <HAL_DMA_IRQHandler+0xe50>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <HAL_DMA_IRQHandler+0xdbc>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 021c 	bic.w	r2, r2, #28
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e007      	b.n	8004558 <HAL_DMA_IRQHandler+0xdcc>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 020e 	bic.w	r2, r2, #14
 8004556:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2201      	movs	r2, #1
 8004562:	409a      	lsls	r2, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
 800458e:	e004      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004590:	bf00      	nop
 8004592:	e002      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004598:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800459a:	3728      	adds	r7, #40	@ 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40020010 	.word	0x40020010
 80045a4:	40020028 	.word	0x40020028
 80045a8:	40020040 	.word	0x40020040
 80045ac:	40020058 	.word	0x40020058
 80045b0:	40020070 	.word	0x40020070
 80045b4:	40020088 	.word	0x40020088
 80045b8:	400200a0 	.word	0x400200a0
 80045bc:	400200b8 	.word	0x400200b8
 80045c0:	40020410 	.word	0x40020410
 80045c4:	40020428 	.word	0x40020428
 80045c8:	40020440 	.word	0x40020440
 80045cc:	40020458 	.word	0x40020458
 80045d0:	40020470 	.word	0x40020470
 80045d4:	40020488 	.word	0x40020488
 80045d8:	400204a0 	.word	0x400204a0
 80045dc:	400204b8 	.word	0x400204b8

080045e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7f      	ldr	r2, [pc, #508]	@ (8004814 <DMA_SetConfig+0x21c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d072      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7d      	ldr	r2, [pc, #500]	@ (8004818 <DMA_SetConfig+0x220>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d06d      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7c      	ldr	r2, [pc, #496]	@ (800481c <DMA_SetConfig+0x224>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d068      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7a      	ldr	r2, [pc, #488]	@ (8004820 <DMA_SetConfig+0x228>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d063      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a79      	ldr	r2, [pc, #484]	@ (8004824 <DMA_SetConfig+0x22c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d05e      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a77      	ldr	r2, [pc, #476]	@ (8004828 <DMA_SetConfig+0x230>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d059      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a76      	ldr	r2, [pc, #472]	@ (800482c <DMA_SetConfig+0x234>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d054      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a74      	ldr	r2, [pc, #464]	@ (8004830 <DMA_SetConfig+0x238>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04f      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a73      	ldr	r2, [pc, #460]	@ (8004834 <DMA_SetConfig+0x23c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a71      	ldr	r2, [pc, #452]	@ (8004838 <DMA_SetConfig+0x240>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a70      	ldr	r2, [pc, #448]	@ (800483c <DMA_SetConfig+0x244>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6e      	ldr	r2, [pc, #440]	@ (8004840 <DMA_SetConfig+0x248>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6d      	ldr	r2, [pc, #436]	@ (8004844 <DMA_SetConfig+0x24c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <DMA_SetConfig+0x10a>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6b      	ldr	r2, [pc, #428]	@ (8004848 <DMA_SetConfig+0x250>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <DMA_SetConfig+0x10a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6a      	ldr	r2, [pc, #424]	@ (800484c <DMA_SetConfig+0x254>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a68      	ldr	r2, [pc, #416]	@ (8004850 <DMA_SetConfig+0x258>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a67      	ldr	r2, [pc, #412]	@ (8004854 <DMA_SetConfig+0x25c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <DMA_SetConfig+0x260>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a64      	ldr	r2, [pc, #400]	@ (800485c <DMA_SetConfig+0x264>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a62      	ldr	r2, [pc, #392]	@ (8004860 <DMA_SetConfig+0x268>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a61      	ldr	r2, [pc, #388]	@ (8004864 <DMA_SetConfig+0x26c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004868 <DMA_SetConfig+0x270>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5e      	ldr	r2, [pc, #376]	@ (800486c <DMA_SetConfig+0x274>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <DMA_SetConfig+0x10a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004870 <DMA_SetConfig+0x278>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <DMA_SetConfig+0x10e>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <DMA_SetConfig+0x110>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004714:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004726:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a39      	ldr	r2, [pc, #228]	@ (8004814 <DMA_SetConfig+0x21c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d04a      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a38      	ldr	r2, [pc, #224]	@ (8004818 <DMA_SetConfig+0x220>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d045      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a36      	ldr	r2, [pc, #216]	@ (800481c <DMA_SetConfig+0x224>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d040      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a35      	ldr	r2, [pc, #212]	@ (8004820 <DMA_SetConfig+0x228>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d03b      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a33      	ldr	r2, [pc, #204]	@ (8004824 <DMA_SetConfig+0x22c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d036      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a32      	ldr	r2, [pc, #200]	@ (8004828 <DMA_SetConfig+0x230>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d031      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a30      	ldr	r2, [pc, #192]	@ (800482c <DMA_SetConfig+0x234>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02c      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2f      	ldr	r2, [pc, #188]	@ (8004830 <DMA_SetConfig+0x238>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d027      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2d      	ldr	r2, [pc, #180]	@ (8004834 <DMA_SetConfig+0x23c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2c      	ldr	r2, [pc, #176]	@ (8004838 <DMA_SetConfig+0x240>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01d      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2a      	ldr	r2, [pc, #168]	@ (800483c <DMA_SetConfig+0x244>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a29      	ldr	r2, [pc, #164]	@ (8004840 <DMA_SetConfig+0x248>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a27      	ldr	r2, [pc, #156]	@ (8004844 <DMA_SetConfig+0x24c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a26      	ldr	r2, [pc, #152]	@ (8004848 <DMA_SetConfig+0x250>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a24      	ldr	r2, [pc, #144]	@ (800484c <DMA_SetConfig+0x254>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <DMA_SetConfig+0x1d0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a23      	ldr	r2, [pc, #140]	@ (8004850 <DMA_SetConfig+0x258>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d101      	bne.n	80047cc <DMA_SetConfig+0x1d4>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <DMA_SetConfig+0x1d6>
 80047cc:	2300      	movs	r3, #0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d059      	beq.n	8004886 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	223f      	movs	r2, #63	@ 0x3f
 80047dc:	409a      	lsls	r2, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b40      	cmp	r3, #64	@ 0x40
 8004800:	d138      	bne.n	8004874 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004812:	e086      	b.n	8004922 <DMA_SetConfig+0x32a>
 8004814:	40020010 	.word	0x40020010
 8004818:	40020028 	.word	0x40020028
 800481c:	40020040 	.word	0x40020040
 8004820:	40020058 	.word	0x40020058
 8004824:	40020070 	.word	0x40020070
 8004828:	40020088 	.word	0x40020088
 800482c:	400200a0 	.word	0x400200a0
 8004830:	400200b8 	.word	0x400200b8
 8004834:	40020410 	.word	0x40020410
 8004838:	40020428 	.word	0x40020428
 800483c:	40020440 	.word	0x40020440
 8004840:	40020458 	.word	0x40020458
 8004844:	40020470 	.word	0x40020470
 8004848:	40020488 	.word	0x40020488
 800484c:	400204a0 	.word	0x400204a0
 8004850:	400204b8 	.word	0x400204b8
 8004854:	58025408 	.word	0x58025408
 8004858:	5802541c 	.word	0x5802541c
 800485c:	58025430 	.word	0x58025430
 8004860:	58025444 	.word	0x58025444
 8004864:	58025458 	.word	0x58025458
 8004868:	5802546c 	.word	0x5802546c
 800486c:	58025480 	.word	0x58025480
 8004870:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
}
 8004884:	e04d      	b.n	8004922 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a29      	ldr	r2, [pc, #164]	@ (8004930 <DMA_SetConfig+0x338>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a27      	ldr	r2, [pc, #156]	@ (8004934 <DMA_SetConfig+0x33c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a26      	ldr	r2, [pc, #152]	@ (8004938 <DMA_SetConfig+0x340>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a24      	ldr	r2, [pc, #144]	@ (800493c <DMA_SetConfig+0x344>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a23      	ldr	r2, [pc, #140]	@ (8004940 <DMA_SetConfig+0x348>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a21      	ldr	r2, [pc, #132]	@ (8004944 <DMA_SetConfig+0x34c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a20      	ldr	r2, [pc, #128]	@ (8004948 <DMA_SetConfig+0x350>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <DMA_SetConfig+0x2de>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1e      	ldr	r2, [pc, #120]	@ (800494c <DMA_SetConfig+0x354>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <DMA_SetConfig+0x2e2>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <DMA_SetConfig+0x2e4>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2201      	movs	r2, #1
 80048ea:	409a      	lsls	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b40      	cmp	r3, #64	@ 0x40
 80048fe:	d108      	bne.n	8004912 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	60da      	str	r2, [r3, #12]
}
 8004910:	e007      	b.n	8004922 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	60da      	str	r2, [r3, #12]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	58025408 	.word	0x58025408
 8004934:	5802541c 	.word	0x5802541c
 8004938:	58025430 	.word	0x58025430
 800493c:	58025444 	.word	0x58025444
 8004940:	58025458 	.word	0x58025458
 8004944:	5802546c 	.word	0x5802546c
 8004948:	58025480 	.word	0x58025480
 800494c:	58025494 	.word	0x58025494

08004950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a42      	ldr	r2, [pc, #264]	@ (8004a68 <DMA_CalcBaseAndBitshift+0x118>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d04a      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a41      	ldr	r2, [pc, #260]	@ (8004a6c <DMA_CalcBaseAndBitshift+0x11c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d045      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3f      	ldr	r2, [pc, #252]	@ (8004a70 <DMA_CalcBaseAndBitshift+0x120>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d040      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a74 <DMA_CalcBaseAndBitshift+0x124>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d03b      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3c      	ldr	r2, [pc, #240]	@ (8004a78 <DMA_CalcBaseAndBitshift+0x128>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d036      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a7c <DMA_CalcBaseAndBitshift+0x12c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d031      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a39      	ldr	r2, [pc, #228]	@ (8004a80 <DMA_CalcBaseAndBitshift+0x130>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02c      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a38      	ldr	r2, [pc, #224]	@ (8004a84 <DMA_CalcBaseAndBitshift+0x134>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d027      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a36      	ldr	r2, [pc, #216]	@ (8004a88 <DMA_CalcBaseAndBitshift+0x138>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a35      	ldr	r2, [pc, #212]	@ (8004a8c <DMA_CalcBaseAndBitshift+0x13c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d01d      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <DMA_CalcBaseAndBitshift+0x140>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a32      	ldr	r2, [pc, #200]	@ (8004a94 <DMA_CalcBaseAndBitshift+0x144>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a30      	ldr	r2, [pc, #192]	@ (8004a98 <DMA_CalcBaseAndBitshift+0x148>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2f      	ldr	r2, [pc, #188]	@ (8004a9c <DMA_CalcBaseAndBitshift+0x14c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2d      	ldr	r2, [pc, #180]	@ (8004aa0 <DMA_CalcBaseAndBitshift+0x150>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <DMA_CalcBaseAndBitshift+0xa8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa4 <DMA_CalcBaseAndBitshift+0x154>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d101      	bne.n	80049fc <DMA_CalcBaseAndBitshift+0xac>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <DMA_CalcBaseAndBitshift+0xae>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d024      	beq.n	8004a4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3b10      	subs	r3, #16
 8004a0a:	4a27      	ldr	r2, [pc, #156]	@ (8004aa8 <DMA_CalcBaseAndBitshift+0x158>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	4a24      	ldr	r2, [pc, #144]	@ (8004aac <DMA_CalcBaseAndBitshift+0x15c>)
 8004a1c:	5cd3      	ldrb	r3, [r2, r3]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d908      	bls.n	8004a3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	1d1a      	adds	r2, r3, #4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a3a:	e00d      	b.n	8004a58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <DMA_CalcBaseAndBitshift+0x160>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a4a:	e005      	b.n	8004a58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40020010 	.word	0x40020010
 8004a6c:	40020028 	.word	0x40020028
 8004a70:	40020040 	.word	0x40020040
 8004a74:	40020058 	.word	0x40020058
 8004a78:	40020070 	.word	0x40020070
 8004a7c:	40020088 	.word	0x40020088
 8004a80:	400200a0 	.word	0x400200a0
 8004a84:	400200b8 	.word	0x400200b8
 8004a88:	40020410 	.word	0x40020410
 8004a8c:	40020428 	.word	0x40020428
 8004a90:	40020440 	.word	0x40020440
 8004a94:	40020458 	.word	0x40020458
 8004a98:	40020470 	.word	0x40020470
 8004a9c:	40020488 	.word	0x40020488
 8004aa0:	400204a0 	.word	0x400204a0
 8004aa4:	400204b8 	.word	0x400204b8
 8004aa8:	aaaaaaab 	.word	0xaaaaaaab
 8004aac:	0800b870 	.word	0x0800b870
 8004ab0:	fffffc00 	.word	0xfffffc00

08004ab4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d120      	bne.n	8004b0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d858      	bhi.n	8004b82 <DMA_CheckFifoParam+0xce>
 8004ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <DMA_CheckFifoParam+0x24>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004afb 	.word	0x08004afb
 8004ae0:	08004ae9 	.word	0x08004ae9
 8004ae4:	08004b83 	.word	0x08004b83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d048      	beq.n	8004b86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004af8:	e045      	b.n	8004b86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b02:	d142      	bne.n	8004b8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b08:	e03f      	b.n	8004b8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b12:	d123      	bne.n	8004b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d838      	bhi.n	8004b8e <DMA_CheckFifoParam+0xda>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <DMA_CheckFifoParam+0x70>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b3b 	.word	0x08004b3b
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004b4d 	.word	0x08004b4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
        break;
 8004b38:	e030      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d025      	beq.n	8004b92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b4a:	e022      	b.n	8004b92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b54:	d11f      	bne.n	8004b96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b5a:	e01c      	b.n	8004b96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <DMA_CheckFifoParam+0xb6>
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d003      	beq.n	8004b70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b68:	e018      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b6e:	e015      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b80:	e00b      	b.n	8004b9a <DMA_CheckFifoParam+0xe6>
        break;
 8004b82:	bf00      	nop
 8004b84:	e00a      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b86:	bf00      	nop
 8004b88:	e008      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e006      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e004      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
        break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
    break;
 8004b9a:	bf00      	nop
    }
  }

  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a38      	ldr	r2, [pc, #224]	@ (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a36      	ldr	r2, [pc, #216]	@ (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a35      	ldr	r2, [pc, #212]	@ (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a33      	ldr	r2, [pc, #204]	@ (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a32      	ldr	r2, [pc, #200]	@ (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a30      	ldr	r2, [pc, #192]	@ (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2d      	ldr	r2, [pc, #180]	@ (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01a      	beq.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3b08      	subs	r3, #8
 8004c1c:	4a28      	ldr	r2, [pc, #160]	@ (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4b26      	ldr	r3, [pc, #152]	@ (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a24      	ldr	r2, [pc, #144]	@ (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	2201      	movs	r2, #1
 8004c42:	409a      	lsls	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c48:	e024      	b.n	8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	3b10      	subs	r3, #16
 8004c52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d806      	bhi.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d902      	bls.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4b18      	ldr	r3, [pc, #96]	@ (8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a16      	ldr	r2, [pc, #88]	@ (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	58025408 	.word	0x58025408
 8004ca4:	5802541c 	.word	0x5802541c
 8004ca8:	58025430 	.word	0x58025430
 8004cac:	58025444 	.word	0x58025444
 8004cb0:	58025458 	.word	0x58025458
 8004cb4:	5802546c 	.word	0x5802546c
 8004cb8:	58025480 	.word	0x58025480
 8004cbc:	58025494 	.word	0x58025494
 8004cc0:	cccccccd 	.word	0xcccccccd
 8004cc4:	16009600 	.word	0x16009600
 8004cc8:	58025880 	.word	0x58025880
 8004ccc:	aaaaaaab 	.word	0xaaaaaaab
 8004cd0:	400204b8 	.word	0x400204b8
 8004cd4:	4002040f 	.word	0x4002040f
 8004cd8:	10008200 	.word	0x10008200
 8004cdc:	40020880 	.word	0x40020880

08004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04a      	beq.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d847      	bhi.n	8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a25      	ldr	r2, [pc, #148]	@ (8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d01d      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a21      	ldr	r2, [pc, #132]	@ (8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1e      	ldr	r2, [pc, #120]	@ (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	461a      	mov	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a15      	ldr	r2, [pc, #84]	@ (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d68:	671a      	str	r2, [r3, #112]	@ 0x70
 8004d6a:	e009      	b.n	8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4b14      	ldr	r3, [pc, #80]	@ (8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a11      	ldr	r2, [pc, #68]	@ (8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	2201      	movs	r2, #1
 8004d86:	409a      	lsls	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	58025408 	.word	0x58025408
 8004d9c:	5802541c 	.word	0x5802541c
 8004da0:	58025430 	.word	0x58025430
 8004da4:	58025444 	.word	0x58025444
 8004da8:	58025458 	.word	0x58025458
 8004dac:	5802546c 	.word	0x5802546c
 8004db0:	58025480 	.word	0x58025480
 8004db4:	58025494 	.word	0x58025494
 8004db8:	1600963f 	.word	0x1600963f
 8004dbc:	58025940 	.word	0x58025940
 8004dc0:	1000823f 	.word	0x1000823f
 8004dc4:	40020940 	.word	0x40020940

08004dc8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e00a      	b.n	8004dfa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004de4:	7afb      	ldrb	r3, [r7, #11]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]
      break;
 8004df0:	e002      	b.n	8004df8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
      break;
 8004df6:	bf00      	nop
  }

  return status;
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e003      	b.n	8004e22 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	011a      	lsls	r2, r3, #4
 8004e58:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <HAL_EXTI_IRQHandler+0x5c>)
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4798      	blx	r3
    }
  }
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	58000088 	.word	0x58000088

08004e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	@ 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e9e:	4b89      	ldr	r3, [pc, #548]	@ (80050c4 <HAL_GPIO_Init+0x234>)
 8004ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ea2:	e194      	b.n	80051ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8186 	beq.w	80051c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d005      	beq.n	8004ed4 <HAL_GPIO_Init+0x44>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d130      	bne.n	8004f36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	2203      	movs	r2, #3
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 0201 	and.w	r2, r3, #1
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d017      	beq.n	8004f72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d123      	bne.n	8004fc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	08da      	lsrs	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3208      	adds	r2, #8
 8004f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	220f      	movs	r2, #15
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	08da      	lsrs	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3208      	adds	r2, #8
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 0203 	and.w	r2, r3, #3
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80e0 	beq.w	80051c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005008:	4b2f      	ldr	r3, [pc, #188]	@ (80050c8 <HAL_GPIO_Init+0x238>)
 800500a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800500e:	4a2e      	ldr	r2, [pc, #184]	@ (80050c8 <HAL_GPIO_Init+0x238>)
 8005010:	f043 0302 	orr.w	r3, r3, #2
 8005014:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005018:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <HAL_GPIO_Init+0x238>)
 800501a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005026:	4a29      	ldr	r2, [pc, #164]	@ (80050cc <HAL_GPIO_Init+0x23c>)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	089b      	lsrs	r3, r3, #2
 800502c:	3302      	adds	r3, #2
 800502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	220f      	movs	r2, #15
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a20      	ldr	r2, [pc, #128]	@ (80050d0 <HAL_GPIO_Init+0x240>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d052      	beq.n	80050f8 <HAL_GPIO_Init+0x268>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1f      	ldr	r2, [pc, #124]	@ (80050d4 <HAL_GPIO_Init+0x244>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d031      	beq.n	80050be <HAL_GPIO_Init+0x22e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <HAL_GPIO_Init+0x248>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d02b      	beq.n	80050ba <HAL_GPIO_Init+0x22a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1d      	ldr	r2, [pc, #116]	@ (80050dc <HAL_GPIO_Init+0x24c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d025      	beq.n	80050b6 <HAL_GPIO_Init+0x226>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <HAL_GPIO_Init+0x250>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01f      	beq.n	80050b2 <HAL_GPIO_Init+0x222>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1b      	ldr	r2, [pc, #108]	@ (80050e4 <HAL_GPIO_Init+0x254>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_GPIO_Init+0x21e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1a      	ldr	r2, [pc, #104]	@ (80050e8 <HAL_GPIO_Init+0x258>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_GPIO_Init+0x21a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a19      	ldr	r2, [pc, #100]	@ (80050ec <HAL_GPIO_Init+0x25c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_GPIO_Init+0x216>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <HAL_GPIO_Init+0x260>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <HAL_GPIO_Init+0x212>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <HAL_GPIO_Init+0x264>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_GPIO_Init+0x20e>
 800509a:	2309      	movs	r3, #9
 800509c:	e02d      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 800509e:	230a      	movs	r3, #10
 80050a0:	e02b      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050a2:	2308      	movs	r3, #8
 80050a4:	e029      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050a6:	2307      	movs	r3, #7
 80050a8:	e027      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050aa:	2306      	movs	r3, #6
 80050ac:	e025      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050ae:	2305      	movs	r3, #5
 80050b0:	e023      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050b2:	2304      	movs	r3, #4
 80050b4:	e021      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050b6:	2303      	movs	r3, #3
 80050b8:	e01f      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e01d      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050be:	2301      	movs	r3, #1
 80050c0:	e01b      	b.n	80050fa <HAL_GPIO_Init+0x26a>
 80050c2:	bf00      	nop
 80050c4:	58000080 	.word	0x58000080
 80050c8:	58024400 	.word	0x58024400
 80050cc:	58000400 	.word	0x58000400
 80050d0:	58020000 	.word	0x58020000
 80050d4:	58020400 	.word	0x58020400
 80050d8:	58020800 	.word	0x58020800
 80050dc:	58020c00 	.word	0x58020c00
 80050e0:	58021000 	.word	0x58021000
 80050e4:	58021400 	.word	0x58021400
 80050e8:	58021800 	.word	0x58021800
 80050ec:	58021c00 	.word	0x58021c00
 80050f0:	58022000 	.word	0x58022000
 80050f4:	58022400 	.word	0x58022400
 80050f8:	2300      	movs	r3, #0
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	f002 0203 	and.w	r2, r2, #3
 8005100:	0092      	lsls	r2, r2, #2
 8005102:	4093      	lsls	r3, r2
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800510a:	4938      	ldr	r1, [pc, #224]	@ (80051ec <HAL_GPIO_Init+0x35c>)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	3302      	adds	r3, #2
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	43db      	mvns	r3, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4013      	ands	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800513e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	43db      	mvns	r3, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800516c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f47f ae63 	bne.w	8004ea4 <HAL_GPIO_Init+0x14>
  }
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	3724      	adds	r7, #36	@ 0x24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	58000400 	.word	0x58000400

080051f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
 80051fc:	4613      	mov	r3, r2
 80051fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005200:	787b      	ldrb	r3, [r7, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005206:	887a      	ldrh	r2, [r7, #2]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800520c:	e003      	b.n	8005216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800520e:	887b      	ldrh	r3, [r7, #2]
 8005210:	041a      	lsls	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	619a      	str	r2, [r3, #24]
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005234:	887a      	ldrh	r2, [r7, #2]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4013      	ands	r3, r2
 800523a:	041a      	lsls	r2, r3, #16
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	43d9      	mvns	r1, r3
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	400b      	ands	r3, r1
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	619a      	str	r2, [r3, #24]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005260:	4b19      	ldr	r3, [pc, #100]	@ (80052c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d00a      	beq.n	8005282 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800526c:	4b16      	ldr	r3, [pc, #88]	@ (80052c8 <HAL_PWREx_ConfigSupply+0x70>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e01f      	b.n	80052be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	e01d      	b.n	80052be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005282:	4b11      	ldr	r3, [pc, #68]	@ (80052c8 <HAL_PWREx_ConfigSupply+0x70>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f023 0207 	bic.w	r2, r3, #7
 800528a:	490f      	ldr	r1, [pc, #60]	@ (80052c8 <HAL_PWREx_ConfigSupply+0x70>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4313      	orrs	r3, r2
 8005290:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005292:	f7fc fe05 	bl	8001ea0 <HAL_GetTick>
 8005296:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005298:	e009      	b.n	80052ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800529a:	f7fc fe01 	bl	8001ea0 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052a8:	d901      	bls.n	80052ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e007      	b.n	80052be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_PWREx_ConfigSupply+0x70>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ba:	d1ee      	bne.n	800529a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	58024800 	.word	0x58024800

080052cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f000 bc48 	b.w	8005b70 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8088 	beq.w	80053fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ee:	4b99      	ldr	r3, [pc, #612]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052f8:	4b96      	ldr	r3, [pc, #600]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005300:	2b10      	cmp	r3, #16
 8005302:	d007      	beq.n	8005314 <HAL_RCC_OscConfig+0x48>
 8005304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005306:	2b18      	cmp	r3, #24
 8005308:	d111      	bne.n	800532e <HAL_RCC_OscConfig+0x62>
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d10c      	bne.n	800532e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005314:	4b8f      	ldr	r3, [pc, #572]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d06d      	beq.n	80053fc <HAL_RCC_OscConfig+0x130>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d169      	bne.n	80053fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f000 bc21 	b.w	8005b70 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005336:	d106      	bne.n	8005346 <HAL_RCC_OscConfig+0x7a>
 8005338:	4b86      	ldr	r3, [pc, #536]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a85      	ldr	r2, [pc, #532]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800533e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e02e      	b.n	80053a4 <HAL_RCC_OscConfig+0xd8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0x9c>
 800534e:	4b81      	ldr	r3, [pc, #516]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a80      	ldr	r2, [pc, #512]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4b7e      	ldr	r3, [pc, #504]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a7d      	ldr	r2, [pc, #500]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e01d      	b.n	80053a4 <HAL_RCC_OscConfig+0xd8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0xc0>
 8005372:	4b78      	ldr	r3, [pc, #480]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a77      	ldr	r2, [pc, #476]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b75      	ldr	r3, [pc, #468]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a74      	ldr	r2, [pc, #464]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e00b      	b.n	80053a4 <HAL_RCC_OscConfig+0xd8>
 800538c:	4b71      	ldr	r3, [pc, #452]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a70      	ldr	r2, [pc, #448]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	4b6e      	ldr	r3, [pc, #440]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a6d      	ldr	r2, [pc, #436]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800539e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fc fd78 	bl	8001ea0 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fc fd74 	bl	8001ea0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e3d4      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053c6:	4b63      	ldr	r3, [pc, #396]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0xe8>
 80053d2:	e014      	b.n	80053fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fc fd64 	bl	8001ea0 <HAL_GetTick>
 80053d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fc fd60 	bl	8001ea0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e3c0      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ee:	4b59      	ldr	r3, [pc, #356]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x110>
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80ca 	beq.w	80055a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540c:	4b51      	ldr	r3, [pc, #324]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005414:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005416:	4b4f      	ldr	r3, [pc, #316]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_RCC_OscConfig+0x166>
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	2b18      	cmp	r3, #24
 8005426:	d156      	bne.n	80054d6 <HAL_RCC_OscConfig+0x20a>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d151      	bne.n	80054d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005432:	4b48      	ldr	r3, [pc, #288]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_RCC_OscConfig+0x17e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e392      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800544a:	4b42      	ldr	r3, [pc, #264]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 0219 	bic.w	r2, r3, #25
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	493f      	ldr	r1, [pc, #252]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fc fd20 	bl	8001ea0 <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005464:	f7fc fd1c 	bl	8001ea0 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e37c      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005476:	4b37      	ldr	r3, [pc, #220]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005482:	f7fc fd3d 	bl	8001f00 <HAL_GetREVID>
 8005486:	4603      	mov	r3, r0
 8005488:	f241 0203 	movw	r2, #4099	@ 0x1003
 800548c:	4293      	cmp	r3, r2
 800548e:	d817      	bhi.n	80054c0 <HAL_RCC_OscConfig+0x1f4>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b40      	cmp	r3, #64	@ 0x40
 8005496:	d108      	bne.n	80054aa <HAL_RCC_OscConfig+0x1de>
 8005498:	4b2e      	ldr	r3, [pc, #184]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80054a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80054a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a8:	e07a      	b.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	031b      	lsls	r3, r3, #12
 80054b8:	4926      	ldr	r1, [pc, #152]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054be:	e06f      	b.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c0:	4b24      	ldr	r3, [pc, #144]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	061b      	lsls	r3, r3, #24
 80054ce:	4921      	ldr	r1, [pc, #132]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d4:	e064      	b.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d047      	beq.n	800556e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054de:	4b1d      	ldr	r3, [pc, #116]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 0219 	bic.w	r2, r3, #25
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	491a      	ldr	r1, [pc, #104]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fc fcd6 	bl	8001ea0 <HAL_GetTick>
 80054f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fc fcd2 	bl	8001ea0 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e332      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550a:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	f7fc fcf3 	bl	8001f00 <HAL_GetREVID>
 800551a:	4603      	mov	r3, r0
 800551c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005520:	4293      	cmp	r3, r2
 8005522:	d819      	bhi.n	8005558 <HAL_RCC_OscConfig+0x28c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b40      	cmp	r3, #64	@ 0x40
 800552a:	d108      	bne.n	800553e <HAL_RCC_OscConfig+0x272>
 800552c:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005534:	4a07      	ldr	r2, [pc, #28]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800553a:	6053      	str	r3, [r2, #4]
 800553c:	e030      	b.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
 800553e:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	031b      	lsls	r3, r3, #12
 800554c:	4901      	ldr	r1, [pc, #4]	@ (8005554 <HAL_RCC_OscConfig+0x288>)
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]
 8005552:	e025      	b.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
 8005554:	58024400 	.word	0x58024400
 8005558:	4b9a      	ldr	r3, [pc, #616]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	4997      	ldr	r1, [pc, #604]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005568:	4313      	orrs	r3, r2
 800556a:	604b      	str	r3, [r1, #4]
 800556c:	e018      	b.n	80055a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556e:	4b95      	ldr	r3, [pc, #596]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a94      	ldr	r2, [pc, #592]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fc fc91 	bl	8001ea0 <HAL_GetTick>
 800557e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005582:	f7fc fc8d 	bl	8001ea0 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e2ed      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005594:	4b8b      	ldr	r3, [pc, #556]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a9 	beq.w	8005700 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ae:	4b85      	ldr	r3, [pc, #532]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055b8:	4b82      	ldr	r3, [pc, #520]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d007      	beq.n	80055d4 <HAL_RCC_OscConfig+0x308>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b18      	cmp	r3, #24
 80055c8:	d13a      	bne.n	8005640 <HAL_RCC_OscConfig+0x374>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d135      	bne.n	8005640 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d4:	4b7b      	ldr	r3, [pc, #492]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_OscConfig+0x320>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b80      	cmp	r3, #128	@ 0x80
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e2c1      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ec:	f7fc fc88 	bl	8001f00 <HAL_GetREVID>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d817      	bhi.n	800562a <HAL_RCC_OscConfig+0x35e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d108      	bne.n	8005614 <HAL_RCC_OscConfig+0x348>
 8005602:	4b70      	ldr	r3, [pc, #448]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800560a:	4a6e      	ldr	r2, [pc, #440]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800560c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005610:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005612:	e075      	b.n	8005700 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005614:	4b6b      	ldr	r3, [pc, #428]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	069b      	lsls	r3, r3, #26
 8005622:	4968      	ldr	r1, [pc, #416]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005624:	4313      	orrs	r3, r2
 8005626:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005628:	e06a      	b.n	8005700 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800562a:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	061b      	lsls	r3, r3, #24
 8005638:	4962      	ldr	r1, [pc, #392]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800563a:	4313      	orrs	r3, r2
 800563c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800563e:	e05f      	b.n	8005700 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d042      	beq.n	80056ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005648:	4b5e      	ldr	r3, [pc, #376]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5d      	ldr	r2, [pc, #372]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800564e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc fc24 	bl	8001ea0 <HAL_GetTick>
 8005658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800565c:	f7fc fc20 	bl	8001ea0 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e280      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800566e:	4b55      	ldr	r3, [pc, #340]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800567a:	f7fc fc41 	bl	8001f00 <HAL_GetREVID>
 800567e:	4603      	mov	r3, r0
 8005680:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005684:	4293      	cmp	r3, r2
 8005686:	d817      	bhi.n	80056b8 <HAL_RCC_OscConfig+0x3ec>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	2b20      	cmp	r3, #32
 800568e:	d108      	bne.n	80056a2 <HAL_RCC_OscConfig+0x3d6>
 8005690:	4b4c      	ldr	r3, [pc, #304]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005698:	4a4a      	ldr	r2, [pc, #296]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800569a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800569e:	6053      	str	r3, [r2, #4]
 80056a0:	e02e      	b.n	8005700 <HAL_RCC_OscConfig+0x434>
 80056a2:	4b48      	ldr	r3, [pc, #288]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	069b      	lsls	r3, r3, #26
 80056b0:	4944      	ldr	r1, [pc, #272]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]
 80056b6:	e023      	b.n	8005700 <HAL_RCC_OscConfig+0x434>
 80056b8:	4b42      	ldr	r3, [pc, #264]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	493f      	ldr	r1, [pc, #252]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60cb      	str	r3, [r1, #12]
 80056cc:	e018      	b.n	8005700 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056ce:	4b3d      	ldr	r3, [pc, #244]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a3c      	ldr	r2, [pc, #240]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80056d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056da:	f7fc fbe1 	bl	8001ea0 <HAL_GetTick>
 80056de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056e2:	f7fc fbdd 	bl	8001ea0 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e23d      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056f4:	4b33      	ldr	r3, [pc, #204]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d036      	beq.n	800577a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005714:	4b2b      	ldr	r3, [pc, #172]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005718:	4a2a      	ldr	r2, [pc, #168]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fc fbbe 	bl	8001ea0 <HAL_GetTick>
 8005724:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005728:	f7fc fbba 	bl	8001ea0 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e21a      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800573a:	4b22      	ldr	r3, [pc, #136]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x45c>
 8005746:	e018      	b.n	800577a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005748:	4b1e      	ldr	r3, [pc, #120]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800574a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800574c:	4a1d      	ldr	r2, [pc, #116]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005754:	f7fc fba4 	bl	8001ea0 <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575c:	f7fc fba0 	bl	8001ea0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e200      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800576e:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d039      	beq.n	80057fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a0c      	ldr	r2, [pc, #48]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 8005794:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005798:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800579a:	f7fc fb81 	bl	8001ea0 <HAL_GetTick>
 800579e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a2:	f7fc fb7d 	bl	8001ea0 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e1dd      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057b4:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <HAL_RCC_OscConfig+0x4f8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x4d6>
 80057c0:	e01b      	b.n	80057fa <HAL_RCC_OscConfig+0x52e>
 80057c2:	bf00      	nop
 80057c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057c8:	4b9b      	ldr	r3, [pc, #620]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a9a      	ldr	r2, [pc, #616]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80057ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057d4:	f7fc fb64 	bl	8001ea0 <HAL_GetTick>
 80057d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057dc:	f7fc fb60 	bl	8001ea0 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1c0      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ee:	4b92      	ldr	r3, [pc, #584]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8081 	beq.w	800590a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005808:	4b8c      	ldr	r3, [pc, #560]	@ (8005a3c <HAL_RCC_OscConfig+0x770>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a8b      	ldr	r2, [pc, #556]	@ (8005a3c <HAL_RCC_OscConfig+0x770>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005812:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005814:	f7fc fb44 	bl	8001ea0 <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581c:	f7fc fb40 	bl	8001ea0 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	@ 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e1a0      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800582e:	4b83      	ldr	r3, [pc, #524]	@ (8005a3c <HAL_RCC_OscConfig+0x770>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d106      	bne.n	8005850 <HAL_RCC_OscConfig+0x584>
 8005842:	4b7d      	ldr	r3, [pc, #500]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005846:	4a7c      	ldr	r2, [pc, #496]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	6713      	str	r3, [r2, #112]	@ 0x70
 800584e:	e02d      	b.n	80058ac <HAL_RCC_OscConfig+0x5e0>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10c      	bne.n	8005872 <HAL_RCC_OscConfig+0x5a6>
 8005858:	4b77      	ldr	r3, [pc, #476]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585c:	4a76      	ldr	r2, [pc, #472]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	6713      	str	r3, [r2, #112]	@ 0x70
 8005864:	4b74      	ldr	r3, [pc, #464]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005868:	4a73      	ldr	r2, [pc, #460]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 800586a:	f023 0304 	bic.w	r3, r3, #4
 800586e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005870:	e01c      	b.n	80058ac <HAL_RCC_OscConfig+0x5e0>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b05      	cmp	r3, #5
 8005878:	d10c      	bne.n	8005894 <HAL_RCC_OscConfig+0x5c8>
 800587a:	4b6f      	ldr	r3, [pc, #444]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	4a6e      	ldr	r2, [pc, #440]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005880:	f043 0304 	orr.w	r3, r3, #4
 8005884:	6713      	str	r3, [r2, #112]	@ 0x70
 8005886:	4b6c      	ldr	r3, [pc, #432]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588a:	4a6b      	ldr	r2, [pc, #428]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	6713      	str	r3, [r2, #112]	@ 0x70
 8005892:	e00b      	b.n	80058ac <HAL_RCC_OscConfig+0x5e0>
 8005894:	4b68      	ldr	r3, [pc, #416]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005898:	4a67      	ldr	r2, [pc, #412]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a0:	4b65      	ldr	r3, [pc, #404]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a4:	4a64      	ldr	r2, [pc, #400]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80058a6:	f023 0304 	bic.w	r3, r3, #4
 80058aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d015      	beq.n	80058e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b4:	f7fc faf4 	bl	8001ea0 <HAL_GetTick>
 80058b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058bc:	f7fc faf0 	bl	8001ea0 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e14e      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058d2:	4b59      	ldr	r3, [pc, #356]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ee      	beq.n	80058bc <HAL_RCC_OscConfig+0x5f0>
 80058de:	e014      	b.n	800590a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e0:	f7fc fade 	bl	8001ea0 <HAL_GetTick>
 80058e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e8:	f7fc fada 	bl	8001ea0 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e138      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ee      	bne.n	80058e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 812d 	beq.w	8005b6e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005914:	4b48      	ldr	r3, [pc, #288]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800591c:	2b18      	cmp	r3, #24
 800591e:	f000 80bd 	beq.w	8005a9c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	2b02      	cmp	r3, #2
 8005928:	f040 809e 	bne.w	8005a68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592c:	4b42      	ldr	r3, [pc, #264]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a41      	ldr	r2, [pc, #260]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fc fab2 	bl	8001ea0 <HAL_GetTick>
 800593c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005940:	f7fc faae 	bl	8001ea0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e10e      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005952:	4b39      	ldr	r3, [pc, #228]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800595e:	4b36      	ldr	r3, [pc, #216]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005960:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005962:	4b37      	ldr	r3, [pc, #220]	@ (8005a40 <HAL_RCC_OscConfig+0x774>)
 8005964:	4013      	ands	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800596e:	0112      	lsls	r2, r2, #4
 8005970:	430a      	orrs	r2, r1
 8005972:	4931      	ldr	r1, [pc, #196]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005974:	4313      	orrs	r3, r2
 8005976:	628b      	str	r3, [r1, #40]	@ 0x28
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	3b01      	subs	r3, #1
 800597e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005986:	3b01      	subs	r3, #1
 8005988:	025b      	lsls	r3, r3, #9
 800598a:	b29b      	uxth	r3, r3
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005992:	3b01      	subs	r3, #1
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a0:	3b01      	subs	r3, #1
 80059a2:	061b      	lsls	r3, r3, #24
 80059a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059a8:	4923      	ldr	r1, [pc, #140]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80059ae:	4b22      	ldr	r3, [pc, #136]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b2:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059be:	4b21      	ldr	r3, [pc, #132]	@ (8005a44 <HAL_RCC_OscConfig+0x778>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059c6:	00d2      	lsls	r2, r2, #3
 80059c8:	491b      	ldr	r1, [pc, #108]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	f023 020c 	bic.w	r2, r3, #12
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	4917      	ldr	r1, [pc, #92]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059e0:	4b15      	ldr	r3, [pc, #84]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	f023 0202 	bic.w	r2, r3, #2
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ec:	4912      	ldr	r1, [pc, #72]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059f2:	4b11      	ldr	r3, [pc, #68]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f6:	4a10      	ldr	r2, [pc, #64]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 80059f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	4a0d      	ldr	r2, [pc, #52]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a16:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	4a07      	ldr	r2, [pc, #28]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a22:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a04      	ldr	r2, [pc, #16]	@ (8005a38 <HAL_RCC_OscConfig+0x76c>)
 8005a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2e:	f7fc fa37 	bl	8001ea0 <HAL_GetTick>
 8005a32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a34:	e011      	b.n	8005a5a <HAL_RCC_OscConfig+0x78e>
 8005a36:	bf00      	nop
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	58024800 	.word	0x58024800
 8005a40:	fffffc0c 	.word	0xfffffc0c
 8005a44:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fc fa2a 	bl	8001ea0 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e08a      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a5a:	4b47      	ldr	r3, [pc, #284]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0x77c>
 8005a66:	e082      	b.n	8005b6e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a68:	4b43      	ldr	r3, [pc, #268]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a42      	ldr	r2, [pc, #264]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fc fa14 	bl	8001ea0 <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fc fa10 	bl	8001ea0 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e070      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x7b0>
 8005a9a:	e068      	b.n	8005b6e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a9c:	4b36      	ldr	r3, [pc, #216]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005aa2:	4b35      	ldr	r3, [pc, #212]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d031      	beq.n	8005b14 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f003 0203 	and.w	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d12a      	bne.n	8005b14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d122      	bne.n	8005b14 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d11a      	bne.n	8005b14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	0a5b      	lsrs	r3, r3, #9
 8005ae2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d111      	bne.n	8005b14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	0c1b      	lsrs	r3, r3, #16
 8005af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d108      	bne.n	8005b14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	0e1b      	lsrs	r3, r3, #24
 8005b06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e02b      	b.n	8005b70 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005b18:	4b17      	ldr	r3, [pc, #92]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1c:	08db      	lsrs	r3, r3, #3
 8005b1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b22:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d01f      	beq.n	8005b6e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b2e:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	4a11      	ldr	r2, [pc, #68]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b3a:	f7fc f9b1 	bl	8001ea0 <HAL_GetTick>
 8005b3e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b40:	bf00      	nop
 8005b42:	f7fc f9ad 	bl	8001ea0 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d0f9      	beq.n	8005b42 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b52:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <HAL_RCC_OscConfig+0x8b0>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b5a:	00d2      	lsls	r2, r2, #3
 8005b5c:	4906      	ldr	r1, [pc, #24]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b62:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b66:	4a04      	ldr	r2, [pc, #16]	@ (8005b78 <HAL_RCC_OscConfig+0x8ac>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3730      	adds	r7, #48	@ 0x30
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	ffff0007 	.word	0xffff0007

08005b80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e19c      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b8a      	ldr	r3, [pc, #552]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d910      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b87      	ldr	r3, [pc, #540]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 020f 	bic.w	r2, r3, #15
 8005baa:	4985      	ldr	r1, [pc, #532]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b83      	ldr	r3, [pc, #524]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e184      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d908      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005be0:	4b78      	ldr	r3, [pc, #480]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	4975      	ldr	r1, [pc, #468]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	4b70      	ldr	r3, [pc, #448]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d908      	bls.n	8005c20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	496a      	ldr	r1, [pc, #424]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	4b64      	ldr	r3, [pc, #400]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d908      	bls.n	8005c4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c3c:	4b61      	ldr	r3, [pc, #388]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	495e      	ldr	r1, [pc, #376]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d010      	beq.n	8005c7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69da      	ldr	r2, [r3, #28]
 8005c5e:	4b59      	ldr	r3, [pc, #356]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d908      	bls.n	8005c7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c6a:	4b56      	ldr	r3, [pc, #344]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	4953      	ldr	r1, [pc, #332]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d908      	bls.n	8005caa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c98:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f023 020f 	bic.w	r2, r3, #15
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4947      	ldr	r1, [pc, #284]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d055      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cb6:	4b43      	ldr	r3, [pc, #268]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4940      	ldr	r1, [pc, #256]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d107      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d121      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0f6      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d107      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ce8:	4b36      	ldr	r3, [pc, #216]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d115      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0ea      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d00:	4b30      	ldr	r3, [pc, #192]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0de      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d10:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0d6      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d20:	4b28      	ldr	r3, [pc, #160]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f023 0207 	bic.w	r2, r3, #7
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4925      	ldr	r1, [pc, #148]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d32:	f7fc f8b5 	bl	8001ea0 <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d38:	e00a      	b.n	8005d50 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3a:	f7fc f8b1 	bl	8001ea0 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e0be      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d50:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d1eb      	bne.n	8005d3a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d010      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	4b14      	ldr	r3, [pc, #80]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d208      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d7e:	4b11      	ldr	r3, [pc, #68]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f023 020f 	bic.w	r2, r3, #15
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	490e      	ldr	r1, [pc, #56]	@ (8005dc4 <HAL_RCC_ClockConfig+0x244>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d214      	bcs.n	8005dc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 020f 	bic.w	r2, r3, #15
 8005da6:	4906      	ldr	r1, [pc, #24]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <HAL_RCC_ClockConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e086      	b.n	8005ece <HAL_RCC_ClockConfig+0x34e>
 8005dc0:	52002000 	.word	0x52002000
 8005dc4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d208      	bcs.n	8005df6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005de4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	4939      	ldr	r1, [pc, #228]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	4b34      	ldr	r3, [pc, #208]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d208      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e12:	4b31      	ldr	r3, [pc, #196]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	492e      	ldr	r1, [pc, #184]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	4b28      	ldr	r3, [pc, #160]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d208      	bcs.n	8005e52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e40:	4b25      	ldr	r3, [pc, #148]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	4922      	ldr	r1, [pc, #136]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d010      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d208      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	4917      	ldr	r1, [pc, #92]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e80:	f000 f834 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b14      	ldr	r3, [pc, #80]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	4912      	ldr	r1, [pc, #72]	@ (8005edc <HAL_RCC_ClockConfig+0x35c>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <HAL_RCC_ClockConfig+0x358>)
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8005edc <HAL_RCC_ClockConfig+0x35c>)
 8005ea8:	5cd3      	ldrb	r3, [r2, r3]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee0 <HAL_RCC_ClockConfig+0x360>)
 8005eb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee4 <HAL_RCC_ClockConfig+0x364>)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <HAL_RCC_ClockConfig+0x368>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fb ffa2 	bl	8001e0c <HAL_InitTick>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	0800b854 	.word	0x0800b854
 8005ee0:	24000824 	.word	0x24000824
 8005ee4:	24000820 	.word	0x24000820
 8005ee8:	24000844 	.word	0x24000844

08005eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	@ 0x24
 8005ef0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ef2:	4bb3      	ldr	r3, [pc, #716]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005efa:	2b18      	cmp	r3, #24
 8005efc:	f200 8155 	bhi.w	80061aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005f00:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	080061ab 	.word	0x080061ab
 8005f10:	080061ab 	.word	0x080061ab
 8005f14:	080061ab 	.word	0x080061ab
 8005f18:	080061ab 	.word	0x080061ab
 8005f1c:	080061ab 	.word	0x080061ab
 8005f20:	080061ab 	.word	0x080061ab
 8005f24:	080061ab 	.word	0x080061ab
 8005f28:	08005f93 	.word	0x08005f93
 8005f2c:	080061ab 	.word	0x080061ab
 8005f30:	080061ab 	.word	0x080061ab
 8005f34:	080061ab 	.word	0x080061ab
 8005f38:	080061ab 	.word	0x080061ab
 8005f3c:	080061ab 	.word	0x080061ab
 8005f40:	080061ab 	.word	0x080061ab
 8005f44:	080061ab 	.word	0x080061ab
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	080061ab 	.word	0x080061ab
 8005f50:	080061ab 	.word	0x080061ab
 8005f54:	080061ab 	.word	0x080061ab
 8005f58:	080061ab 	.word	0x080061ab
 8005f5c:	080061ab 	.word	0x080061ab
 8005f60:	080061ab 	.word	0x080061ab
 8005f64:	080061ab 	.word	0x080061ab
 8005f68:	08005f9f 	.word	0x08005f9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6c:	4b94      	ldr	r3, [pc, #592]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f78:	4b91      	ldr	r3, [pc, #580]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	4a90      	ldr	r2, [pc, #576]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f8a:	e111      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f8c:	4b8d      	ldr	r3, [pc, #564]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f8e:	61bb      	str	r3, [r7, #24]
      break;
 8005f90:	e10e      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f92:	4b8d      	ldr	r3, [pc, #564]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f94:	61bb      	str	r3, [r7, #24]
      break;
 8005f96:	e10b      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f98:	4b8c      	ldr	r3, [pc, #560]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f9a:	61bb      	str	r3, [r7, #24]
      break;
 8005f9c:	e108      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f9e:	4b88      	ldr	r3, [pc, #544]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005fa8:	4b85      	ldr	r3, [pc, #532]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fb4:	4b82      	ldr	r3, [pc, #520]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005fbe:	4b80      	ldr	r3, [pc, #512]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80e1 	beq.w	80061a4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f000 8083 	beq.w	80060f0 <HAL_RCC_GetSysClockFreq+0x204>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f200 80a1 	bhi.w	8006134 <HAL_RCC_GetSysClockFreq+0x248>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x114>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d056      	beq.n	80060ac <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ffe:	e099      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006000:	4b6f      	ldr	r3, [pc, #444]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d02d      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800600c:	4b6c      	ldr	r3, [pc, #432]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	08db      	lsrs	r3, r3, #3
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	4a6b      	ldr	r2, [pc, #428]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
 800601c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006036:	4b62      	ldr	r3, [pc, #392]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a02 	vldr	s12, [r7, #8]
 800604a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006066:	e087      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006072:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80061d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	4b51      	ldr	r3, [pc, #324]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608a:	ed97 6a02 	vldr	s12, [r7, #8]
 800608e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060aa:	e065      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80061d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060be:	4b40      	ldr	r3, [pc, #256]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060ee:	e043      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006102:	4b2f      	ldr	r3, [pc, #188]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006112:	ed97 6a02 	vldr	s12, [r7, #8]
 8006116:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800611a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006132:	e021      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80061d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006146:	4b1e      	ldr	r3, [pc, #120]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	ed97 6a02 	vldr	s12, [r7, #8]
 800615a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80061d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800615e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006176:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006178:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617c:	0a5b      	lsrs	r3, r3, #9
 800617e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006182:	3301      	adds	r3, #1
 8006184:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006190:	edd7 6a07 	vldr	s13, [r7, #28]
 8006194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619c:	ee17 3a90 	vmov	r3, s15
 80061a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80061a2:	e005      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
      break;
 80061a8:	e002      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80061aa:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061ac:	61bb      	str	r3, [r7, #24]
      break;
 80061ae:	bf00      	nop
  }

  return sysclockfreq;
 80061b0:	69bb      	ldr	r3, [r7, #24]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3724      	adds	r7, #36	@ 0x24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
 80061c4:	03d09000 	.word	0x03d09000
 80061c8:	003d0900 	.word	0x003d0900
 80061cc:	007a1200 	.word	0x007a1200
 80061d0:	46000000 	.word	0x46000000
 80061d4:	4c742400 	.word	0x4c742400
 80061d8:	4a742400 	.word	0x4a742400
 80061dc:	4af42400 	.word	0x4af42400

080061e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061e6:	f7ff fe81 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <HAL_RCC_GetHCLKFreq+0x50>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	490f      	ldr	r1, [pc, #60]	@ (8006234 <HAL_RCC_GetHCLKFreq+0x54>)
 80061f8:	5ccb      	ldrb	r3, [r1, r3]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006204:	4b0a      	ldr	r3, [pc, #40]	@ (8006230 <HAL_RCC_GetHCLKFreq+0x50>)
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	4a09      	ldr	r2, [pc, #36]	@ (8006234 <HAL_RCC_GetHCLKFreq+0x54>)
 800620e:	5cd3      	ldrb	r3, [r2, r3]
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	4a07      	ldr	r2, [pc, #28]	@ (8006238 <HAL_RCC_GetHCLKFreq+0x58>)
 800621c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800621e:	4a07      	ldr	r2, [pc, #28]	@ (800623c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006224:	4b04      	ldr	r3, [pc, #16]	@ (8006238 <HAL_RCC_GetHCLKFreq+0x58>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	58024400 	.word	0x58024400
 8006234:	0800b854 	.word	0x0800b854
 8006238:	24000824 	.word	0x24000824
 800623c:	24000820 	.word	0x24000820

08006240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006244:	f7ff ffcc 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4904      	ldr	r1, [pc, #16]	@ (8006268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	58024400 	.word	0x58024400
 8006268:	0800b854 	.word	0x0800b854

0800626c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006270:	f7ff ffb6 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4904      	ldr	r1, [pc, #16]	@ (8006294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	58024400 	.word	0x58024400
 8006294:	0800b854 	.word	0x0800b854

08006298 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800629c:	b0ca      	sub	sp, #296	@ 0x128
 800629e:	af00      	add	r7, sp, #0
 80062a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062aa:	2300      	movs	r3, #0
 80062ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80062bc:	2500      	movs	r5, #0
 80062be:	ea54 0305 	orrs.w	r3, r4, r5
 80062c2:	d049      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062ce:	d02f      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80062d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062d4:	d828      	bhi.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062da:	d01a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062e0:	d822      	bhi.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ea:	d007      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062ec:	e01c      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ee:	4bb8      	ldr	r3, [pc, #736]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	4ab7      	ldr	r2, [pc, #732]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062fa:	e01a      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006300:	3308      	adds	r3, #8
 8006302:	2102      	movs	r1, #2
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fc8f 	bl	8007c28 <RCCEx_PLL2_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006310:	e00f      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	3328      	adds	r3, #40	@ 0x28
 8006318:	2102      	movs	r1, #2
 800631a:	4618      	mov	r0, r3
 800631c:	f001 fd36 	bl	8007d8c <RCCEx_PLL3_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800633a:	4ba5      	ldr	r3, [pc, #660]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800633c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006348:	4aa1      	ldr	r2, [pc, #644]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800634a:	430b      	orrs	r3, r1
 800634c:	6513      	str	r3, [r2, #80]	@ 0x50
 800634e:	e003      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006364:	f04f 0900 	mov.w	r9, #0
 8006368:	ea58 0309 	orrs.w	r3, r8, r9
 800636c:	d047      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	2b04      	cmp	r3, #4
 8006376:	d82a      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006378:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006395 	.word	0x08006395
 8006384:	080063a3 	.word	0x080063a3
 8006388:	080063b9 	.word	0x080063b9
 800638c:	080063d7 	.word	0x080063d7
 8006390:	080063d7 	.word	0x080063d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006394:	4b8e      	ldr	r3, [pc, #568]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	4a8d      	ldr	r2, [pc, #564]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063a0:	e01a      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a6:	3308      	adds	r3, #8
 80063a8:	2100      	movs	r1, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fc3c 	bl	8007c28 <RCCEx_PLL2_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063b6:	e00f      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	3328      	adds	r3, #40	@ 0x28
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 fce3 	bl	8007d8c <RCCEx_PLL3_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063cc:	e004      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063d4:	e000      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80063d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063e0:	4b7b      	ldr	r3, [pc, #492]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e4:	f023 0107 	bic.w	r1, r3, #7
 80063e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	4a78      	ldr	r2, [pc, #480]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80063f4:	e003      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800640a:	f04f 0b00 	mov.w	fp, #0
 800640e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006412:	d04c      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800641e:	d030      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006424:	d829      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006426:	2bc0      	cmp	r3, #192	@ 0xc0
 8006428:	d02d      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800642a:	2bc0      	cmp	r3, #192	@ 0xc0
 800642c:	d825      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d018      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006432:	2b80      	cmp	r3, #128	@ 0x80
 8006434:	d821      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d007      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800643e:	e01c      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006440:	4b63      	ldr	r3, [pc, #396]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	4a62      	ldr	r2, [pc, #392]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800644c:	e01c      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	3308      	adds	r3, #8
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f001 fbe6 	bl	8007c28 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006462:	e011      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006468:	3328      	adds	r3, #40	@ 0x28
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fc8d 	bl	8007d8c <RCCEx_PLL3_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006478:	e006      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006480:	e002      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006490:	4b4f      	ldr	r3, [pc, #316]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006494:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649e:	4a4c      	ldr	r2, [pc, #304]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80064a4:	e003      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80064ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80064c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80064c8:	460b      	mov	r3, r1
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d053      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064da:	d035      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80064dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064e0:	d82e      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064e6:	d031      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80064e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064ec:	d828      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064f2:	d01a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80064f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064f8:	d822      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80064fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006502:	d007      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006504:	e01c      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006506:	4b32      	ldr	r3, [pc, #200]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650a:	4a31      	ldr	r2, [pc, #196]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800650c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006512:	e01c      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	3308      	adds	r3, #8
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f001 fb83 	bl	8007c28 <RCCEx_PLL2_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006528:	e011      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	3328      	adds	r3, #40	@ 0x28
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fc2a 	bl	8007d8c <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800653e:	e006      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006546:	e002      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800654c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006556:	4b1e      	ldr	r3, [pc, #120]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006566:	4a1a      	ldr	r2, [pc, #104]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006568:	430b      	orrs	r3, r1
 800656a:	6593      	str	r3, [r2, #88]	@ 0x58
 800656c:	e003      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006582:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006586:	2300      	movs	r3, #0
 8006588:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800658c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006590:	460b      	mov	r3, r1
 8006592:	4313      	orrs	r3, r2
 8006594:	d056      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800659e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a2:	d038      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80065a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a8:	d831      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065ae:	d034      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80065b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065b4:	d82b      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065ba:	d01d      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80065bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065c0:	d825      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80065c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ca:	d00a      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80065cc:	e01f      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065ce:	bf00      	nop
 80065d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d4:	4ba2      	ldr	r3, [pc, #648]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	4aa1      	ldr	r2, [pc, #644]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065e0:	e01c      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	3308      	adds	r3, #8
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 fb1c 	bl	8007c28 <RCCEx_PLL2_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80065f6:	e011      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fc:	3328      	adds	r3, #40	@ 0x28
 80065fe:	2100      	movs	r1, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f001 fbc3 	bl	8007d8c <RCCEx_PLL3_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800660c:	e006      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006614:	e002      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800661a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006624:	4b8e      	ldr	r3, [pc, #568]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006628:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006630:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006634:	4a8a      	ldr	r2, [pc, #552]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006636:	430b      	orrs	r3, r1
 8006638:	6593      	str	r3, [r2, #88]	@ 0x58
 800663a:	e003      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800665a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d03a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666a:	2b30      	cmp	r3, #48	@ 0x30
 800666c:	d01f      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 800666e:	2b30      	cmp	r3, #48	@ 0x30
 8006670:	d819      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006672:	2b20      	cmp	r3, #32
 8006674:	d00c      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006676:	2b20      	cmp	r3, #32
 8006678:	d815      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800667e:	2b10      	cmp	r3, #16
 8006680:	d111      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006682:	4b77      	ldr	r3, [pc, #476]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	4a76      	ldr	r2, [pc, #472]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800668c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800668e:	e011      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006694:	3308      	adds	r3, #8
 8006696:	2102      	movs	r1, #2
 8006698:	4618      	mov	r0, r3
 800669a:	f001 fac5 	bl	8007c28 <RCCEx_PLL2_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ac:	e002      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80066b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80066bc:	4b68      	ldr	r3, [pc, #416]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80066c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ca:	4a65      	ldr	r2, [pc, #404]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066cc:	430b      	orrs	r3, r1
 80066ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066d0:	e003      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80066e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d051      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006704:	d035      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800670a:	d82e      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800670c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006710:	d031      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006712:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006716:	d828      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671c:	d01a      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800671e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006722:	d822      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672c:	d007      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800672e:	e01c      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006730:	4b4b      	ldr	r3, [pc, #300]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	4a4a      	ldr	r2, [pc, #296]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800673a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800673c:	e01c      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	3308      	adds	r3, #8
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f001 fa6e 	bl	8007c28 <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006752:	e011      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006758:	3328      	adds	r3, #40	@ 0x28
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f001 fb15 	bl	8007d8c <RCCEx_PLL3_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006768:	e006      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006770:	e002      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006772:	bf00      	nop
 8006774:	e000      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006780:	4b37      	ldr	r3, [pc, #220]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006784:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800678e:	4a34      	ldr	r2, [pc, #208]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6513      	str	r3, [r2, #80]	@ 0x50
 8006794:	e003      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800679a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80067aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d056      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067c8:	d033      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80067ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067ce:	d82c      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067d4:	d02f      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80067d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067da:	d826      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067e0:	d02b      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80067e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067e6:	d820      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ec:	d012      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80067ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f2:	d81a      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d022      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fc:	d115      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	3308      	adds	r3, #8
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f001 fa0e 	bl	8007c28 <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006812:	e015      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006818:	3328      	adds	r3, #40	@ 0x28
 800681a:	2101      	movs	r1, #1
 800681c:	4618      	mov	r0, r3
 800681e:	f001 fab5 	bl	8007d8c <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006828:	e00a      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800683e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10d      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006856:	4a02      	ldr	r2, [pc, #8]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6513      	str	r3, [r2, #80]	@ 0x50
 800685c:	e006      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006882:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d055      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006898:	d033      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800689a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800689e:	d82c      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a4:	d02f      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068aa:	d826      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80068ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068b0:	d02b      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80068b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068b6:	d820      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80068b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068bc:	d012      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80068be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068c2:	d81a      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d022      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80068c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068cc:	d115      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	3308      	adds	r3, #8
 80068d4:	2101      	movs	r1, #1
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f9a6 	bl	8007c28 <RCCEx_PLL2_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068e2:	e015      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e8:	3328      	adds	r3, #40	@ 0x28
 80068ea:	2101      	movs	r1, #1
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 fa4d 	bl	8007d8c <RCCEx_PLL3_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068f8:	e00a      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006900:	e006      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006902:	bf00      	nop
 8006904:	e004      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006906:	bf00      	nop
 8006908:	e002      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800690a:	bf00      	nop
 800690c:	e000      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800690e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006918:	4ba3      	ldr	r3, [pc, #652]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800691a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006928:	4a9f      	ldr	r2, [pc, #636]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800692a:	430b      	orrs	r3, r1
 800692c:	6593      	str	r3, [r2, #88]	@ 0x58
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800694e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006952:	460b      	mov	r3, r1
 8006954:	4313      	orrs	r3, r2
 8006956:	d037      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006962:	d00e      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006968:	d816      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800696e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006972:	d111      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006974:	4b8c      	ldr	r3, [pc, #560]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	4a8b      	ldr	r2, [pc, #556]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006980:	e00f      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	3308      	adds	r3, #8
 8006988:	2101      	movs	r1, #1
 800698a:	4618      	mov	r0, r3
 800698c:	f001 f94c 	bl	8007c28 <RCCEx_PLL2_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069aa:	4b7f      	ldr	r3, [pc, #508]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b8:	4a7b      	ldr	r2, [pc, #492]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ba:	430b      	orrs	r3, r1
 80069bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80069be:	e003      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80069d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80069de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d039      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d81c      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80069f2:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a09 	.word	0x08006a09
 8006a00:	08006a17 	.word	0x08006a17
 8006a04:	08006a35 	.word	0x08006a35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a08:	4b67      	ldr	r3, [pc, #412]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a66      	ldr	r2, [pc, #408]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a14:	e00f      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 f902 	bl	8007c28 <RCCEx_PLL2_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a42:	f023 0103 	bic.w	r1, r3, #3
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a4c:	4a56      	ldr	r2, [pc, #344]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f000 809f 	beq.w	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a4a      	ldr	r2, [pc, #296]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a8a:	f7fb fa09 	bl	8001ea0 <HAL_GetTick>
 8006a8e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a92:	e00b      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a94:	f7fb fa04 	bl	8001ea0 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b64      	cmp	r3, #100	@ 0x64
 8006aa2:	d903      	bls.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aaa:	e005      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aac:	4b3f      	ldr	r3, [pc, #252]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ed      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d179      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ac0:	4b39      	ldr	r3, [pc, #228]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006acc:	4053      	eors	r3, r2
 8006ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d015      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ad6:	4b34      	ldr	r3, [pc, #208]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ade:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ae2:	4b31      	ldr	r3, [pc, #196]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae6:	4a30      	ldr	r2, [pc, #192]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006aee:	4b2e      	ldr	r3, [pc, #184]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af2:	4a2d      	ldr	r2, [pc, #180]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006afa:	4a2b      	ldr	r2, [pc, #172]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b0e:	d118      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fb f9c6 	bl	8001ea0 <HAL_GetTick>
 8006b14:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b18:	e00d      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1a:	f7fb f9c1 	bl	8001ea0 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006b34:	e005      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b36:	4b1c      	ldr	r3, [pc, #112]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0eb      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d129      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b5a:	d10e      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006b5c:	4b12      	ldr	r3, [pc, #72]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b6c:	091a      	lsrs	r2, r3, #4
 8006b6e:	4b10      	ldr	r3, [pc, #64]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	4a0d      	ldr	r2, [pc, #52]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6113      	str	r3, [r2, #16]
 8006b78:	e005      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b84:	6113      	str	r3, [r2, #16]
 8006b86:	4b08      	ldr	r3, [pc, #32]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b96:	4a04      	ldr	r2, [pc, #16]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b9c:	e00e      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006ba6:	e009      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	58024800 	.word	0x58024800
 8006bb0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f002 0301 	and.w	r3, r2, #1
 8006bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f000 8089 	beq.w	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006be4:	2b28      	cmp	r3, #40	@ 0x28
 8006be6:	d86b      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006be8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006cc9 	.word	0x08006cc9
 8006bf4:	08006cc1 	.word	0x08006cc1
 8006bf8:	08006cc1 	.word	0x08006cc1
 8006bfc:	08006cc1 	.word	0x08006cc1
 8006c00:	08006cc1 	.word	0x08006cc1
 8006c04:	08006cc1 	.word	0x08006cc1
 8006c08:	08006cc1 	.word	0x08006cc1
 8006c0c:	08006cc1 	.word	0x08006cc1
 8006c10:	08006c95 	.word	0x08006c95
 8006c14:	08006cc1 	.word	0x08006cc1
 8006c18:	08006cc1 	.word	0x08006cc1
 8006c1c:	08006cc1 	.word	0x08006cc1
 8006c20:	08006cc1 	.word	0x08006cc1
 8006c24:	08006cc1 	.word	0x08006cc1
 8006c28:	08006cc1 	.word	0x08006cc1
 8006c2c:	08006cc1 	.word	0x08006cc1
 8006c30:	08006cab 	.word	0x08006cab
 8006c34:	08006cc1 	.word	0x08006cc1
 8006c38:	08006cc1 	.word	0x08006cc1
 8006c3c:	08006cc1 	.word	0x08006cc1
 8006c40:	08006cc1 	.word	0x08006cc1
 8006c44:	08006cc1 	.word	0x08006cc1
 8006c48:	08006cc1 	.word	0x08006cc1
 8006c4c:	08006cc1 	.word	0x08006cc1
 8006c50:	08006cc9 	.word	0x08006cc9
 8006c54:	08006cc1 	.word	0x08006cc1
 8006c58:	08006cc1 	.word	0x08006cc1
 8006c5c:	08006cc1 	.word	0x08006cc1
 8006c60:	08006cc1 	.word	0x08006cc1
 8006c64:	08006cc1 	.word	0x08006cc1
 8006c68:	08006cc1 	.word	0x08006cc1
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006cc9 	.word	0x08006cc9
 8006c74:	08006cc1 	.word	0x08006cc1
 8006c78:	08006cc1 	.word	0x08006cc1
 8006c7c:	08006cc1 	.word	0x08006cc1
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc1 	.word	0x08006cc1
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006cc1 	.word	0x08006cc1
 8006c90:	08006cc9 	.word	0x08006cc9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	3308      	adds	r3, #8
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 ffc3 	bl	8007c28 <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ca8:	e00f      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	3328      	adds	r3, #40	@ 0x28
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 f86a 	bl	8007d8c <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006cbe:	e004      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006cd2:	4bbf      	ldr	r3, [pc, #764]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ce0:	4abb      	ldr	r2, [pc, #748]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ce6:	e003      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f002 0302 	and.w	r3, r2, #2
 8006cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006d06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d041      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	d824      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d6d 	.word	0x08006d6d
 8006d24:	08006d39 	.word	0x08006d39
 8006d28:	08006d4f 	.word	0x08006d4f
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d6d 	.word	0x08006d6d
 8006d34:	08006d6d 	.word	0x08006d6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 ff71 	bl	8007c28 <RCCEx_PLL2_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d4c:	e00f      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	3328      	adds	r3, #40	@ 0x28
 8006d54:	2101      	movs	r1, #1
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f818 	bl	8007d8c <RCCEx_PLL3_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d62:	e004      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d6a:	e000      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d76:	4b96      	ldr	r3, [pc, #600]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7a:	f023 0107 	bic.w	r1, r3, #7
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d84:	4a92      	ldr	r2, [pc, #584]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d86:	430b      	orrs	r3, r1
 8006d88:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f002 0304 	and.w	r3, r2, #4
 8006da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006da4:	2300      	movs	r3, #0
 8006da6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006daa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	d044      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	d825      	bhi.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006e15 	.word	0x08006e15
 8006dcc:	08006de1 	.word	0x08006de1
 8006dd0:	08006df7 	.word	0x08006df7
 8006dd4:	08006e15 	.word	0x08006e15
 8006dd8:	08006e15 	.word	0x08006e15
 8006ddc:	08006e15 	.word	0x08006e15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de4:	3308      	adds	r3, #8
 8006de6:	2101      	movs	r1, #1
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 ff1d 	bl	8007c28 <RCCEx_PLL2_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006df4:	e00f      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfa:	3328      	adds	r3, #40	@ 0x28
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ffc4 	bl	8007d8c <RCCEx_PLL3_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006e0a:	e004      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e22:	f023 0107 	bic.w	r1, r3, #7
 8006e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e2e:	4a68      	ldr	r2, [pc, #416]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e34:	e003      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f002 0320 	and.w	r3, r2, #32
 8006e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	d055      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e6a:	d033      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e70:	d82c      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e76:	d02f      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7c:	d826      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e82:	d02b      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006e84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e88:	d820      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e8e:	d012      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e94:	d81a      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d022      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e9e:	d115      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 febd 	bl	8007c28 <RCCEx_PLL2_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006eb4:	e015      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eba:	3328      	adds	r3, #40	@ 0x28
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 ff64 	bl	8007d8c <RCCEx_PLL3_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ed4:	bf00      	nop
 8006ed6:	e004      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ed8:	bf00      	nop
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eea:	4b39      	ldr	r3, [pc, #228]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efa:	4a35      	ldr	r2, [pc, #212]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f00:	e003      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d058      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f36:	d033      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006f38:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f3c:	d82c      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f42:	d02f      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f48:	d826      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f4e:	d02b      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006f50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f54:	d820      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f5a:	d012      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f60:	d81a      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d022      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6a:	d115      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f70:	3308      	adds	r3, #8
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fe57 	bl	8007c28 <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f80:	e015      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2102      	movs	r1, #2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fefe 	bl	8007d8c <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f96:	e00a      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f9e:	e006      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006fa0:	bf00      	nop
 8006fa2:	e004      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006fa4:	bf00      	nop
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fb6:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fc6:	4a02      	ldr	r2, [pc, #8]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fcc:	e006      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006fce:	bf00      	nop
 8006fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ff2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d055      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007004:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007008:	d033      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800700a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800700e:	d82c      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007014:	d02f      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800701a:	d826      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800701c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007020:	d02b      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007022:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007026:	d820      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800702c:	d012      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800702e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007032:	d81a      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d022      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800703c:	d115      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007042:	3308      	adds	r3, #8
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fdee 	bl	8007c28 <RCCEx_PLL2_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007052:	e015      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007058:	3328      	adds	r3, #40	@ 0x28
 800705a:	2102      	movs	r1, #2
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fe95 	bl	8007d8c <RCCEx_PLL3_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007068:	e00a      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007072:	bf00      	nop
 8007074:	e004      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007076:	bf00      	nop
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800707e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10b      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007088:	4ba1      	ldr	r3, [pc, #644]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007098:	4a9d      	ldr	r2, [pc, #628]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800709a:	430b      	orrs	r3, r1
 800709c:	6593      	str	r3, [r2, #88]	@ 0x58
 800709e:	e003      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f002 0308 	and.w	r3, r2, #8
 80070b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d01e      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d4:	d10c      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	3328      	adds	r3, #40	@ 0x28
 80070dc:	2102      	movs	r1, #2
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fe54 	bl	8007d8c <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070f0:	4b87      	ldr	r3, [pc, #540]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007100:	4a83      	ldr	r2, [pc, #524]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007102:	430b      	orrs	r3, r1
 8007104:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f002 0310 	and.w	r3, r2, #16
 8007112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007116:	2300      	movs	r3, #0
 8007118:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800711c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007120:	460b      	mov	r3, r1
 8007122:	4313      	orrs	r3, r2
 8007124:	d01e      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800712e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007132:	d10c      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007138:	3328      	adds	r3, #40	@ 0x28
 800713a:	2102      	movs	r1, #2
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fe25 	bl	8007d8c <RCCEx_PLL3_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800714e:	4b70      	ldr	r3, [pc, #448]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007152:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800715e:	4a6c      	ldr	r2, [pc, #432]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007174:	2300      	movs	r3, #0
 8007176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800717a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800717e:	460b      	mov	r3, r1
 8007180:	4313      	orrs	r3, r2
 8007182:	d03e      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800718c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007190:	d022      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007196:	d81b      	bhi.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800719c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a0:	d00b      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80071a2:	e015      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a8:	3308      	adds	r3, #8
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fd3b 	bl	8007c28 <RCCEx_PLL2_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80071b8:	e00f      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071be:	3328      	adds	r3, #40	@ 0x28
 80071c0:	2102      	movs	r1, #2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fde2 	bl	8007d8c <RCCEx_PLL3_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80071ce:	e004      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071d6:	e000      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80071d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071f2:	4a47      	ldr	r2, [pc, #284]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80071f8:	e003      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800720e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007210:	2300      	movs	r3, #0
 8007212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007214:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007218:	460b      	mov	r3, r1
 800721a:	4313      	orrs	r3, r2
 800721c:	d03b      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007226:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800722a:	d01f      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800722c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007230:	d818      	bhi.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007238:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800723c:	d007      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800723e:	e011      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007240:	4b33      	ldr	r3, [pc, #204]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	4a32      	ldr	r2, [pc, #200]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800724a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800724c:	e00f      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007252:	3328      	adds	r3, #40	@ 0x28
 8007254:	2101      	movs	r1, #1
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fd98 	bl	8007d8c <RCCEx_PLL3_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007262:	e004      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800726a:	e000      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800726c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10b      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007276:	4b26      	ldr	r3, [pc, #152]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800727e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007286:	4a22      	ldr	r2, [pc, #136]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007288:	430b      	orrs	r3, r1
 800728a:	6553      	str	r3, [r2, #84]	@ 0x54
 800728c:	e003      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80072a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80072a4:	2300      	movs	r3, #0
 80072a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80072a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80072ac:	460b      	mov	r3, r1
 80072ae:	4313      	orrs	r3, r2
 80072b0:	d034      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80072bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c0:	d007      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80072c2:	e011      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c4:	4b12      	ldr	r3, [pc, #72]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	4a11      	ldr	r2, [pc, #68]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072d0:	e00e      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d6:	3308      	adds	r3, #8
 80072d8:	2102      	movs	r1, #2
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fca4 	bl	8007c28 <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072e6:	e003      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10d      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072f8:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007306:	4a02      	ldr	r2, [pc, #8]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007308:	430b      	orrs	r3, r1
 800730a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800730c:	e006      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800730e:	bf00      	nop
 8007310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800732a:	2300      	movs	r3, #0
 800732c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800732e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d00c      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	3328      	adds	r3, #40	@ 0x28
 800733e:	2102      	movs	r1, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fd23 	bl	8007d8c <RCCEx_PLL3_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800735e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007360:	2300      	movs	r3, #0
 8007362:	667b      	str	r3, [r7, #100]	@ 0x64
 8007364:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007368:	460b      	mov	r3, r1
 800736a:	4313      	orrs	r3, r2
 800736c:	d038      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800737a:	d018      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800737c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007380:	d811      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007386:	d014      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800738c:	d80b      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d011      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007396:	d106      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007398:	4bc3      	ldr	r3, [pc, #780]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	4ac2      	ldr	r2, [pc, #776]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800739e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80073a4:	e008      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ac:	e004      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80073b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073c0:	4bb9      	ldr	r3, [pc, #740]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d0:	4ab5      	ldr	r2, [pc, #724]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80073d6:	e003      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80073ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073ee:	2300      	movs	r3, #0
 80073f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d009      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073fc:	4baa      	ldr	r3, [pc, #680]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007400:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740a:	4aa7      	ldr	r2, [pc, #668]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800740c:	430b      	orrs	r3, r1
 800740e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800741c:	653b      	str	r3, [r7, #80]	@ 0x50
 800741e:	2300      	movs	r3, #0
 8007420:	657b      	str	r3, [r7, #84]	@ 0x54
 8007422:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007426:	460b      	mov	r3, r1
 8007428:	4313      	orrs	r3, r2
 800742a:	d00a      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800742c:	4b9e      	ldr	r3, [pc, #632]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007438:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800743c:	4a9a      	ldr	r2, [pc, #616]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800743e:	430b      	orrs	r3, r1
 8007440:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800744e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007450:	2300      	movs	r3, #0
 8007452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007454:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007458:	460b      	mov	r3, r1
 800745a:	4313      	orrs	r3, r2
 800745c:	d009      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800745e:	4b92      	ldr	r3, [pc, #584]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007462:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800746c:	4a8e      	ldr	r2, [pc, #568]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800746e:	430b      	orrs	r3, r1
 8007470:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800747e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007480:	2300      	movs	r3, #0
 8007482:	647b      	str	r3, [r7, #68]	@ 0x44
 8007484:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d00e      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800748e:	4b86      	ldr	r3, [pc, #536]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	4a85      	ldr	r2, [pc, #532]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007494:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007498:	6113      	str	r3, [r2, #16]
 800749a:	4b83      	ldr	r3, [pc, #524]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80074a6:	4a80      	ldr	r2, [pc, #512]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80074b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ba:	2300      	movs	r3, #0
 80074bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074c8:	4b77      	ldr	r3, [pc, #476]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d6:	4a74      	ldr	r2, [pc, #464]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074d8:	430b      	orrs	r3, r1
 80074da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80074e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ea:	2300      	movs	r3, #0
 80074ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80074f2:	460b      	mov	r3, r1
 80074f4:	4313      	orrs	r3, r2
 80074f6:	d00a      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074f8:	4b6b      	ldr	r3, [pc, #428]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007508:	4a67      	ldr	r2, [pc, #412]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800750a:	430b      	orrs	r3, r1
 800750c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	2100      	movs	r1, #0
 8007518:	62b9      	str	r1, [r7, #40]	@ 0x28
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007520:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007524:	460b      	mov	r3, r1
 8007526:	4313      	orrs	r3, r2
 8007528:	d011      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fb78 	bl	8007c28 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800753e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800754a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	2100      	movs	r1, #0
 8007558:	6239      	str	r1, [r7, #32]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007560:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	d011      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	3308      	adds	r3, #8
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fb58 	bl	8007c28 <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800757e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800758a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	2100      	movs	r1, #0
 8007598:	61b9      	str	r1, [r7, #24]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80075a4:	460b      	mov	r3, r1
 80075a6:	4313      	orrs	r3, r2
 80075a8:	d011      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ae:	3308      	adds	r3, #8
 80075b0:	2102      	movs	r1, #2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fb38 	bl	8007c28 <RCCEx_PLL2_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80075be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	2100      	movs	r1, #0
 80075d8:	6139      	str	r1, [r7, #16]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075e4:	460b      	mov	r3, r1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	d011      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ee:	3328      	adds	r3, #40	@ 0x28
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fbca 	bl	8007d8c <RCCEx_PLL3_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80075fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800760a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	2100      	movs	r1, #0
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007624:	460b      	mov	r3, r1
 8007626:	4313      	orrs	r3, r2
 8007628:	d011      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762e:	3328      	adds	r3, #40	@ 0x28
 8007630:	2101      	movs	r1, #1
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fbaa 	bl	8007d8c <RCCEx_PLL3_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800763e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	2100      	movs	r1, #0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	607b      	str	r3, [r7, #4]
 8007660:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007664:	460b      	mov	r3, r1
 8007666:	4313      	orrs	r3, r2
 8007668:	d011      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766e:	3328      	adds	r3, #40	@ 0x28
 8007670:	2102      	movs	r1, #2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fb8a 	bl	8007d8c <RCCEx_PLL3_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800767e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800768e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e000      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
}
 800769c:	4618      	mov	r0, r3
 800769e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80076a2:	46bd      	mov	sp, r7
 80076a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a8:	58024400 	.word	0x58024400

080076ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80076b0:	f7fe fd96 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 80076b4:	4602      	mov	r2, r0
 80076b6:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	091b      	lsrs	r3, r3, #4
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	4904      	ldr	r1, [pc, #16]	@ (80076d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80076c2:	5ccb      	ldrb	r3, [r1, r3]
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	58024400 	.word	0x58024400
 80076d4:	0800b854 	.word	0x0800b854

080076d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80076d8:	b480      	push	{r7}
 80076da:	b089      	sub	sp, #36	@ 0x24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80076ea:	4b9f      	ldr	r3, [pc, #636]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ee:	0b1b      	lsrs	r3, r3, #12
 80076f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007702:	4b99      	ldr	r3, [pc, #612]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007706:	08db      	lsrs	r3, r3, #3
 8007708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	fb02 f303 	mul.w	r3, r2, r3
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 8111 	beq.w	8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2b02      	cmp	r3, #2
 800772a:	f000 8083 	beq.w	8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b02      	cmp	r3, #2
 8007732:	f200 80a1 	bhi.w	8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d056      	beq.n	80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007742:	e099      	b.n	8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007744:	4b88      	ldr	r3, [pc, #544]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02d      	beq.n	80077ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007750:	4b85      	ldr	r3, [pc, #532]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	08db      	lsrs	r3, r3, #3
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	4a84      	ldr	r2, [pc, #528]	@ (800796c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
 8007760:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b7b      	ldr	r3, [pc, #492]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800777c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a03 	vldr	s12, [r7, #12]
 800778e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077aa:	e087      	b.n	80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007974 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b6a      	ldr	r3, [pc, #424]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ee:	e065      	b.n	80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b59      	ldr	r3, [pc, #356]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a03 	vldr	s12, [r7, #12]
 8007816:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007832:	e043      	b.n	80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800797c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b48      	ldr	r3, [pc, #288]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a03 	vldr	s12, [r7, #12]
 800785a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007876:	e021      	b.n	80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788a:	4b37      	ldr	r3, [pc, #220]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	ed97 6a03 	vldr	s12, [r7, #12]
 800789e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80078bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	0a5b      	lsrs	r3, r3, #9
 80078c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e2:	ee17 2a90 	vmov	r2, s15
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80078ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	0c1b      	lsrs	r3, r3, #16
 80078f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007904:	edd7 6a07 	vldr	s13, [r7, #28]
 8007908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800790c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007910:	ee17 2a90 	vmov	r2, s15
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007918:	4b13      	ldr	r3, [pc, #76]	@ (8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800791a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791c:	0e1b      	lsrs	r3, r3, #24
 800791e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800792e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007932:	edd7 6a07 	vldr	s13, [r7, #28]
 8007936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800793a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800793e:	ee17 2a90 	vmov	r2, s15
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007946:	e008      	b.n	800795a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	609a      	str	r2, [r3, #8]
}
 800795a:	bf00      	nop
 800795c:	3724      	adds	r7, #36	@ 0x24
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
 800796c:	03d09000 	.word	0x03d09000
 8007970:	46000000 	.word	0x46000000
 8007974:	4c742400 	.word	0x4c742400
 8007978:	4a742400 	.word	0x4a742400
 800797c:	4af42400 	.word	0x4af42400

08007980 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007980:	b480      	push	{r7}
 8007982:	b089      	sub	sp, #36	@ 0x24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007988:	4ba1      	ldr	r3, [pc, #644]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800798a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007992:	4b9f      	ldr	r3, [pc, #636]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007996:	0d1b      	lsrs	r3, r3, #20
 8007998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800799c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800799e:	4b9c      	ldr	r3, [pc, #624]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80079aa:	4b99      	ldr	r3, [pc, #612]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ae:	08db      	lsrs	r3, r3, #3
 80079b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8111 	beq.w	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	f000 8083 	beq.w	8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	f200 80a1 	bhi.w	8007b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d056      	beq.n	8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079ea:	e099      	b.n	8007b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ec:	4b88      	ldr	r3, [pc, #544]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02d      	beq.n	8007a54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079f8:	4b85      	ldr	r3, [pc, #532]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	08db      	lsrs	r3, r3, #3
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	4a84      	ldr	r2, [pc, #528]	@ (8007c14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
 8007a08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a22:	4b7b      	ldr	r3, [pc, #492]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a52:	e087      	b.n	8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a66:	4b6a      	ldr	r3, [pc, #424]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a96:	e065      	b.n	8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aaa:	4b59      	ldr	r3, [pc, #356]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007abe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ada:	e043      	b.n	8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aee:	4b48      	ldr	r3, [pc, #288]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b1e:	e021      	b.n	8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b32:	4b37      	ldr	r3, [pc, #220]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007b64:	4b2a      	ldr	r3, [pc, #168]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b68:	0a5b      	lsrs	r3, r3, #9
 8007b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b8a:	ee17 2a90 	vmov	r2, s15
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007b92:	4b1f      	ldr	r3, [pc, #124]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	0c1b      	lsrs	r3, r3, #16
 8007b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bb8:	ee17 2a90 	vmov	r2, s15
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007bc0:	4b13      	ldr	r3, [pc, #76]	@ (8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	0e1b      	lsrs	r3, r3, #24
 8007bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be6:	ee17 2a90 	vmov	r2, s15
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007bee:	e008      	b.n	8007c02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	609a      	str	r2, [r3, #8]
}
 8007c02:	bf00      	nop
 8007c04:	3724      	adds	r7, #36	@ 0x24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	58024400 	.word	0x58024400
 8007c14:	03d09000 	.word	0x03d09000
 8007c18:	46000000 	.word	0x46000000
 8007c1c:	4c742400 	.word	0x4c742400
 8007c20:	4a742400 	.word	0x4a742400
 8007c24:	4af42400 	.word	0x4af42400

08007c28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c36:	4b53      	ldr	r3, [pc, #332]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d101      	bne.n	8007c46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e099      	b.n	8007d7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c46:	4b4f      	ldr	r3, [pc, #316]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c52:	f7fa f925 	bl	8001ea0 <HAL_GetTick>
 8007c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c58:	e008      	b.n	8007c6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c5a:	f7fa f921 	bl	8001ea0 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e086      	b.n	8007d7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c6c:	4b45      	ldr	r3, [pc, #276]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1f0      	bne.n	8007c5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c78:	4b42      	ldr	r3, [pc, #264]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	031b      	lsls	r3, r3, #12
 8007c86:	493f      	ldr	r1, [pc, #252]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	061b      	lsls	r3, r3, #24
 8007cb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007cbc:	4931      	ldr	r1, [pc, #196]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007cc2:	4b30      	ldr	r3, [pc, #192]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	492d      	ldr	r1, [pc, #180]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	f023 0220 	bic.w	r2, r3, #32
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	4928      	ldr	r1, [pc, #160]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ce6:	4b27      	ldr	r3, [pc, #156]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cea:	4a26      	ldr	r2, [pc, #152]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	f023 0310 	bic.w	r3, r3, #16
 8007cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cf2:	4b24      	ldr	r3, [pc, #144]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cf6:	4b24      	ldr	r3, [pc, #144]	@ (8007d88 <RCCEx_PLL2_Config+0x160>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	69d2      	ldr	r2, [r2, #28]
 8007cfe:	00d2      	lsls	r2, r2, #3
 8007d00:	4920      	ldr	r1, [pc, #128]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d06:	4b1f      	ldr	r3, [pc, #124]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	f043 0310 	orr.w	r3, r3, #16
 8007d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d106      	bne.n	8007d26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d18:	4b1a      	ldr	r3, [pc, #104]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	4a19      	ldr	r2, [pc, #100]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d24:	e00f      	b.n	8007d46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d106      	bne.n	8007d3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d2c:	4b15      	ldr	r3, [pc, #84]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	4a14      	ldr	r2, [pc, #80]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d38:	e005      	b.n	8007d46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d3a:	4b12      	ldr	r3, [pc, #72]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	4a11      	ldr	r2, [pc, #68]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d46:	4b0f      	ldr	r3, [pc, #60]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d52:	f7fa f8a5 	bl	8001ea0 <HAL_GetTick>
 8007d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d58:	e008      	b.n	8007d6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d5a:	f7fa f8a1 	bl	8001ea0 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d901      	bls.n	8007d6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e006      	b.n	8007d7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <RCCEx_PLL2_Config+0x15c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0f0      	beq.n	8007d5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	58024400 	.word	0x58024400
 8007d88:	ffff0007 	.word	0xffff0007

08007d8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d9a:	4b53      	ldr	r3, [pc, #332]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d101      	bne.n	8007daa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e099      	b.n	8007ede <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007daa:	4b4f      	ldr	r3, [pc, #316]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a4e      	ldr	r2, [pc, #312]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db6:	f7fa f873 	bl	8001ea0 <HAL_GetTick>
 8007dba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dbc:	e008      	b.n	8007dd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dbe:	f7fa f86f 	bl	8001ea0 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d901      	bls.n	8007dd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e086      	b.n	8007ede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dd0:	4b45      	ldr	r3, [pc, #276]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f0      	bne.n	8007dbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ddc:	4b42      	ldr	r3, [pc, #264]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	051b      	lsls	r3, r3, #20
 8007dea:	493f      	ldr	r1, [pc, #252]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	025b      	lsls	r3, r3, #9
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	041b      	lsls	r3, r3, #16
 8007e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	061b      	lsls	r3, r3, #24
 8007e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e20:	4931      	ldr	r1, [pc, #196]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e26:	4b30      	ldr	r3, [pc, #192]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	492d      	ldr	r1, [pc, #180]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e38:	4b2b      	ldr	r3, [pc, #172]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	4928      	ldr	r1, [pc, #160]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e4a:	4b27      	ldr	r3, [pc, #156]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	4a26      	ldr	r2, [pc, #152]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e56:	4b24      	ldr	r3, [pc, #144]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e5a:	4b24      	ldr	r3, [pc, #144]	@ (8007eec <RCCEx_PLL3_Config+0x160>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	69d2      	ldr	r2, [r2, #28]
 8007e62:	00d2      	lsls	r2, r2, #3
 8007e64:	4920      	ldr	r1, [pc, #128]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e88:	e00f      	b.n	8007eaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d106      	bne.n	8007e9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e90:	4b15      	ldr	r3, [pc, #84]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	4a14      	ldr	r2, [pc, #80]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007e96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e9c:	e005      	b.n	8007eaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e9e:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	4a11      	ldr	r2, [pc, #68]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007ea4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a0e      	ldr	r2, [pc, #56]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eb6:	f7f9 fff3 	bl	8001ea0 <HAL_GetTick>
 8007eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ebc:	e008      	b.n	8007ed0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ebe:	f7f9 ffef 	bl	8001ea0 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e006      	b.n	8007ede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ed0:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <RCCEx_PLL3_Config+0x15c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d0f0      	beq.n	8007ebe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	ffff0007 	.word	0xffff0007

08007ef0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e10f      	b.n	8008122 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a87      	ldr	r2, [pc, #540]	@ (800812c <HAL_SPI_Init+0x23c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00f      	beq.n	8007f32 <HAL_SPI_Init+0x42>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a86      	ldr	r2, [pc, #536]	@ (8008130 <HAL_SPI_Init+0x240>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00a      	beq.n	8007f32 <HAL_SPI_Init+0x42>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a84      	ldr	r2, [pc, #528]	@ (8008134 <HAL_SPI_Init+0x244>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d005      	beq.n	8007f32 <HAL_SPI_Init+0x42>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b0f      	cmp	r3, #15
 8007f2c:	d901      	bls.n	8007f32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e0f7      	b.n	8008122 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fe2e 	bl	8008b94 <SPI_GetPacketSize>
 8007f38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a7b      	ldr	r2, [pc, #492]	@ (800812c <HAL_SPI_Init+0x23c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00c      	beq.n	8007f5e <HAL_SPI_Init+0x6e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a79      	ldr	r2, [pc, #484]	@ (8008130 <HAL_SPI_Init+0x240>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <HAL_SPI_Init+0x6e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a78      	ldr	r2, [pc, #480]	@ (8008134 <HAL_SPI_Init+0x244>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d002      	beq.n	8007f5e <HAL_SPI_Init+0x6e>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d811      	bhi.n	8007f82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f62:	4a72      	ldr	r2, [pc, #456]	@ (800812c <HAL_SPI_Init+0x23c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d009      	beq.n	8007f7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a70      	ldr	r2, [pc, #448]	@ (8008130 <HAL_SPI_Init+0x240>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_SPI_Init+0x8c>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a6f      	ldr	r2, [pc, #444]	@ (8008134 <HAL_SPI_Init+0x244>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d104      	bne.n	8007f86 <HAL_SPI_Init+0x96>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b10      	cmp	r3, #16
 8007f80:	d901      	bls.n	8007f86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e0cd      	b.n	8008122 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7f9 f9a0 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007fc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fcc:	d119      	bne.n	8008002 <HAL_SPI_Init+0x112>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fd6:	d103      	bne.n	8007fe0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d008      	beq.n	8007ff2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10c      	bne.n	8008002 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff0:	d107      	bne.n	8008002 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008000:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <HAL_SPI_Init+0x13e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b06      	cmp	r3, #6
 8008014:	d90b      	bls.n	800802e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e007      	b.n	800803e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800803c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	69da      	ldr	r2, [r3, #28]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008046:	431a      	orrs	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008050:	ea42 0103 	orr.w	r1, r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800809e:	ea42 0103 	orr.w	r1, r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d113      	bne.n	80080de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80080dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0201 	bic.w	r2, r2, #1
 80080ec:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40013000 	.word	0x40013000
 8008130:	40003800 	.word	0x40003800
 8008134:	40003c00 	.word	0x40003c00

08008138 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	4613      	mov	r3, r2
 8008146:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3320      	adds	r3, #32
 800814e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008150:	f7f9 fea6 	bl	8001ea0 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b01      	cmp	r3, #1
 8008160:	d001      	beq.n	8008166 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008162:	2302      	movs	r3, #2
 8008164:	e1d1      	b.n	800850a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <HAL_SPI_Transmit+0x3a>
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e1c9      	b.n	800850a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_SPI_Transmit+0x4c>
 8008180:	2302      	movs	r3, #2
 8008182:	e1c2      	b.n	800850a <HAL_SPI_Transmit+0x3d2>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2203      	movs	r2, #3
 8008190:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	88fa      	ldrh	r2, [r7, #6]
 80081a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80081dc:	d108      	bne.n	80081f0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	e009      	b.n	8008204 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008202:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	4b96      	ldr	r3, [pc, #600]	@ (8008464 <HAL_SPI_Transmit+0x32c>)
 800820c:	4013      	ands	r3, r2
 800820e:	88f9      	ldrh	r1, [r7, #6]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	6812      	ldr	r2, [r2, #0]
 8008214:	430b      	orrs	r3, r1
 8008216:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008230:	d107      	bne.n	8008242 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d947      	bls.n	80082da <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800824a:	e03f      	b.n	80082cc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b02      	cmp	r3, #2
 8008258:	d114      	bne.n	8008284 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800826a:	1d1a      	adds	r2, r3, #4
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008282:	e023      	b.n	80082cc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008284:	f7f9 fe0c 	bl	8001ea0 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d803      	bhi.n	800829c <HAL_SPI_Transmit+0x164>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829a:	d102      	bne.n	80082a2 <HAL_SPI_Transmit+0x16a>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d114      	bne.n	80082cc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fba8 	bl	80089f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e11e      	b.n	800850a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1b9      	bne.n	800824c <HAL_SPI_Transmit+0x114>
 80082d8:	e0f1      	b.n	80084be <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	2b07      	cmp	r3, #7
 80082e0:	f240 80e6 	bls.w	80084b0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80082e4:	e05d      	b.n	80083a2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d132      	bne.n	800835a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d918      	bls.n	8008332 <HAL_SPI_Transmit+0x1fa>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d014      	beq.n	8008332 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008318:	1d1a      	adds	r2, r3, #4
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b02      	subs	r3, #2
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008330:	e037      	b.n	80083a2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008340:	1c9a      	adds	r2, r3, #2
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008358:	e023      	b.n	80083a2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800835a:	f7f9 fda1 	bl	8001ea0 <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d803      	bhi.n	8008372 <HAL_SPI_Transmit+0x23a>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d102      	bne.n	8008378 <HAL_SPI_Transmit+0x240>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d114      	bne.n	80083a2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fb3d 	bl	80089f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008384:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e0b3      	b.n	800850a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d19b      	bne.n	80082e6 <HAL_SPI_Transmit+0x1ae>
 80083ae:	e086      	b.n	80084be <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d154      	bne.n	8008468 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d918      	bls.n	80083fc <HAL_SPI_Transmit+0x2c4>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ce:	2b40      	cmp	r3, #64	@ 0x40
 80083d0:	d914      	bls.n	80083fc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6812      	ldr	r2, [r2, #0]
 80083dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083e2:	1d1a      	adds	r2, r3, #4
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b04      	subs	r3, #4
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80083fa:	e059      	b.n	80084b0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008402:	b29b      	uxth	r3, r3
 8008404:	2b01      	cmp	r3, #1
 8008406:	d917      	bls.n	8008438 <HAL_SPI_Transmit+0x300>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d013      	beq.n	8008438 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008414:	881a      	ldrh	r2, [r3, #0]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800841e:	1c9a      	adds	r2, r3, #2
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800842a:	b29b      	uxth	r3, r3
 800842c:	3b02      	subs	r3, #2
 800842e:	b29a      	uxth	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008436:	e03b      	b.n	80084b0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3320      	adds	r3, #32
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008462:	e025      	b.n	80084b0 <HAL_SPI_Transmit+0x378>
 8008464:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008468:	f7f9 fd1a 	bl	8001ea0 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	429a      	cmp	r2, r3
 8008476:	d803      	bhi.n	8008480 <HAL_SPI_Transmit+0x348>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847e:	d102      	bne.n	8008486 <HAL_SPI_Transmit+0x34e>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d114      	bne.n	80084b0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 fab6 	bl	80089f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008492:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e02c      	b.n	800850a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f47f af79 	bne.w	80083b0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2200      	movs	r2, #0
 80084c6:	2108      	movs	r1, #8
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fb35 	bl	8008b38 <SPI_WaitOnFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084da:	f043 0220 	orr.w	r2, r3, #32
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fa87 	bl	80089f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008508:	2300      	movs	r3, #0
  }
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop

08008514 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	4613      	mov	r3, r2
 8008522:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	b29b      	uxth	r3, r3
 800852c:	3301      	adds	r3, #1
 800852e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3330      	adds	r3, #48	@ 0x30
 8008536:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008538:	f7f9 fcb2 	bl	8001ea0 <HAL_GetTick>
 800853c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b01      	cmp	r3, #1
 8008548:	d001      	beq.n	800854e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800854a:	2302      	movs	r3, #2
 800854c:	e250      	b.n	80089f0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_SPI_Receive+0x46>
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e248      	b.n	80089f0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008564:	2b01      	cmp	r3, #1
 8008566:	d101      	bne.n	800856c <HAL_SPI_Receive+0x58>
 8008568:	2302      	movs	r3, #2
 800856a:	e241      	b.n	80089f0 <HAL_SPI_Receive+0x4dc>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2204      	movs	r2, #4
 8008578:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	88fa      	ldrh	r2, [r7, #6]
 800858e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	88fa      	ldrh	r2, [r7, #6]
 8008596:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80085c4:	d108      	bne.n	80085d8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	e009      	b.n	80085ec <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80085ea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	4b95      	ldr	r3, [pc, #596]	@ (8008848 <HAL_SPI_Receive+0x334>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	88f9      	ldrh	r1, [r7, #6]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0201 	orr.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008618:	d107      	bne.n	800862a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008628:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	2b0f      	cmp	r3, #15
 8008630:	d96c      	bls.n	800870c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008632:	e064      	b.n	80086fe <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b01      	cmp	r3, #1
 8008648:	d114      	bne.n	8008674 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008652:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008654:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008666:	b29b      	uxth	r3, r3
 8008668:	3b01      	subs	r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008672:	e044      	b.n	80086fe <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800867a:	b29b      	uxth	r3, r3
 800867c:	8bfa      	ldrh	r2, [r7, #30]
 800867e:	429a      	cmp	r2, r3
 8008680:	d919      	bls.n	80086b6 <HAL_SPI_Receive+0x1a2>
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d014      	beq.n	80086b6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008694:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008696:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80086b4:	e023      	b.n	80086fe <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086b6:	f7f9 fbf3 	bl	8001ea0 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d803      	bhi.n	80086ce <HAL_SPI_Receive+0x1ba>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086cc:	d102      	bne.n	80086d4 <HAL_SPI_Receive+0x1c0>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d114      	bne.n	80086fe <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f98f 	bl	80089f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e178      	b.n	80089f0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d194      	bne.n	8008634 <HAL_SPI_Receive+0x120>
 800870a:	e15e      	b.n	80089ca <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b07      	cmp	r3, #7
 8008712:	f240 8153 	bls.w	80089bc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008716:	e08f      	b.n	8008838 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b01      	cmp	r3, #1
 800872c:	d114      	bne.n	8008758 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	8812      	ldrh	r2, [r2, #0]
 8008736:	b292      	uxth	r2, r2
 8008738:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800873e:	1c9a      	adds	r2, r3, #2
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800874a:	b29b      	uxth	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008756:	e06f      	b.n	8008838 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800875e:	b29b      	uxth	r3, r3
 8008760:	8bfa      	ldrh	r2, [r7, #30]
 8008762:	429a      	cmp	r2, r3
 8008764:	d924      	bls.n	80087b0 <HAL_SPI_Receive+0x29c>
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01f      	beq.n	80087b0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	8812      	ldrh	r2, [r2, #0]
 8008778:	b292      	uxth	r2, r2
 800877a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008780:	1c9a      	adds	r2, r3, #2
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	8812      	ldrh	r2, [r2, #0]
 800878e:	b292      	uxth	r2, r2
 8008790:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008796:	1c9a      	adds	r2, r3, #2
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b02      	subs	r3, #2
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80087ae:	e043      	b.n	8008838 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d119      	bne.n	80087f0 <HAL_SPI_Receive+0x2dc>
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d014      	beq.n	80087f0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	8812      	ldrh	r2, [r2, #0]
 80087ce:	b292      	uxth	r2, r2
 80087d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087d6:	1c9a      	adds	r2, r3, #2
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	3b01      	subs	r3, #1
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80087ee:	e023      	b.n	8008838 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087f0:	f7f9 fb56 	bl	8001ea0 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d803      	bhi.n	8008808 <HAL_SPI_Receive+0x2f4>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d102      	bne.n	800880e <HAL_SPI_Receive+0x2fa>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d114      	bne.n	8008838 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 f8f2 	bl	80089f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800881a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e0db      	b.n	80089f0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	f47f af69 	bne.w	8008718 <HAL_SPI_Receive+0x204>
 8008846:	e0c0      	b.n	80089ca <HAL_SPI_Receive+0x4b6>
 8008848:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b01      	cmp	r3, #1
 8008860:	d117      	bne.n	8008892 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	b2d2      	uxtb	r2, r2
 8008872:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008890:	e094      	b.n	80089bc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008898:	b29b      	uxth	r3, r3
 800889a:	8bfa      	ldrh	r2, [r7, #30]
 800889c:	429a      	cmp	r2, r3
 800889e:	d946      	bls.n	800892e <HAL_SPI_Receive+0x41a>
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d041      	beq.n	800892e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b6:	7812      	ldrb	r2, [r2, #0]
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d2:	7812      	ldrb	r2, [r2, #0]
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	b2d2      	uxtb	r2, r2
 80088f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800890a:	7812      	ldrb	r2, [r2, #0]
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008920:	b29b      	uxth	r3, r3
 8008922:	3b04      	subs	r3, #4
 8008924:	b29a      	uxth	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800892c:	e046      	b.n	80089bc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b03      	cmp	r3, #3
 8008938:	d81c      	bhi.n	8008974 <HAL_SPI_Receive+0x460>
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d017      	beq.n	8008974 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008972:	e023      	b.n	80089bc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008974:	f7f9 fa94 	bl	8001ea0 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d803      	bhi.n	800898c <HAL_SPI_Receive+0x478>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898a:	d102      	bne.n	8008992 <HAL_SPI_Receive+0x47e>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d114      	bne.n	80089bc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 f830 	bl	80089f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800899e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e019      	b.n	80089f0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f47f af41 	bne.w	800884c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f814 	bl	80089f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80089ee:	2300      	movs	r3, #0
  }
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3720      	adds	r7, #32
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0208 	orr.w	r2, r2, #8
 8008a16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0210 	orr.w	r2, r2, #16
 8008a26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0201 	bic.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6919      	ldr	r1, [r3, #16]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b3c      	ldr	r3, [pc, #240]	@ (8008b34 <SPI_CloseTransfer+0x13c>)
 8008a44:	400b      	ands	r3, r1
 8008a46:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008a56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d014      	beq.n	8008a8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	699a      	ldr	r2, [r3, #24]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f042 0220 	orr.w	r2, r2, #32
 8008a8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d014      	beq.n	8008ac4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00f      	beq.n	8008ac4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aaa:	f043 0204 	orr.w	r2, r3, #4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ac2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00f      	beq.n	8008aee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ad4:	f043 0201 	orr.w	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00f      	beq.n	8008b18 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008afe:	f043 0208 	orr.w	r2, r3, #8
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	fffffc90 	.word	0xfffffc90

08008b38 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b48:	e010      	b.n	8008b6c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b4a:	f7f9 f9a9 	bl	8001ea0 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d803      	bhi.n	8008b62 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d102      	bne.n	8008b68 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e00f      	b.n	8008b8c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695a      	ldr	r2, [r3, #20]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4013      	ands	r3, r2
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2301      	moveq	r3, #1
 8008b7e:	2300      	movne	r3, #0
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d0df      	beq.n	8008b4a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	08db      	lsrs	r3, r3, #3
 8008bb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e042      	b.n	8008c62 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7f8 fc04 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2224      	movs	r2, #36	@ 0x24
 8008bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0201 	bic.w	r2, r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 fbed 	bl	800a3f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fe82 	bl	8009924 <UART_SetConfig>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e01b      	b.n	8008c62 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0201 	orr.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fc6c 	bl	800a538 <UART_CheckIdleState>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b08a      	sub	sp, #40	@ 0x28
 8008c6e:	af02      	add	r7, sp, #8
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	603b      	str	r3, [r7, #0]
 8008c76:	4613      	mov	r3, r2
 8008c78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c80:	2b20      	cmp	r3, #32
 8008c82:	d17b      	bne.n	8008d7c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_UART_Transmit+0x26>
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e074      	b.n	8008d7e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2221      	movs	r2, #33	@ 0x21
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ca4:	f7f9 f8fc 	bl	8001ea0 <HAL_GetTick>
 8008ca8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	88fa      	ldrh	r2, [r7, #6]
 8008cae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	88fa      	ldrh	r2, [r7, #6]
 8008cb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc2:	d108      	bne.n	8008cd6 <HAL_UART_Transmit+0x6c>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	61bb      	str	r3, [r7, #24]
 8008cd4:	e003      	b.n	8008cde <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cde:	e030      	b.n	8008d42 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2180      	movs	r1, #128	@ 0x80
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f001 fcce 	bl	800a68c <UART_WaitOnFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d005      	beq.n	8008d02 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e03d      	b.n	8008d7e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10b      	bne.n	8008d20 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	e007      	b.n	8008d30 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1c8      	bne.n	8008ce0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2200      	movs	r2, #0
 8008d56:	2140      	movs	r1, #64	@ 0x40
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f001 fc97 	bl	800a68c <UART_WaitOnFlagUntilTimeout>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e006      	b.n	8008d7e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e000      	b.n	8008d7e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008d7c:	2302      	movs	r3, #2
  }
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b08a      	sub	sp, #40	@ 0x28
 8008d8a:	af02      	add	r7, sp, #8
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	4613      	mov	r3, r2
 8008d94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	f040 80b5 	bne.w	8008f0c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <HAL_UART_Receive+0x28>
 8008da8:	88fb      	ldrh	r3, [r7, #6]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0ad      	b.n	8008f0e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2222      	movs	r2, #34	@ 0x22
 8008dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dc8:	f7f9 f86a 	bl	8001ea0 <HAL_GetTick>
 8008dcc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	88fa      	ldrh	r2, [r7, #6]
 8008dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	88fa      	ldrh	r2, [r7, #6]
 8008dda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de6:	d10e      	bne.n	8008e06 <HAL_UART_Receive+0x80>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d105      	bne.n	8008dfc <HAL_UART_Receive+0x76>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008df6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dfa:	e02d      	b.n	8008e58 <HAL_UART_Receive+0xd2>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	22ff      	movs	r2, #255	@ 0xff
 8008e00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e04:	e028      	b.n	8008e58 <HAL_UART_Receive+0xd2>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10d      	bne.n	8008e2a <HAL_UART_Receive+0xa4>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d104      	bne.n	8008e20 <HAL_UART_Receive+0x9a>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	22ff      	movs	r2, #255	@ 0xff
 8008e1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e1e:	e01b      	b.n	8008e58 <HAL_UART_Receive+0xd2>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	227f      	movs	r2, #127	@ 0x7f
 8008e24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e28:	e016      	b.n	8008e58 <HAL_UART_Receive+0xd2>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e32:	d10d      	bne.n	8008e50 <HAL_UART_Receive+0xca>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <HAL_UART_Receive+0xc0>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	227f      	movs	r2, #127	@ 0x7f
 8008e40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e44:	e008      	b.n	8008e58 <HAL_UART_Receive+0xd2>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	223f      	movs	r2, #63	@ 0x3f
 8008e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e4e:	e003      	b.n	8008e58 <HAL_UART_Receive+0xd2>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e5e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e68:	d108      	bne.n	8008e7c <HAL_UART_Receive+0xf6>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d104      	bne.n	8008e7c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	61bb      	str	r3, [r7, #24]
 8008e7a:	e003      	b.n	8008e84 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008e84:	e036      	b.n	8008ef4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2120      	movs	r1, #32
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f001 fbfb 	bl	800a68c <UART_WaitOnFlagUntilTimeout>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e032      	b.n	8008f0e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	8a7b      	ldrh	r3, [r7, #18]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	61bb      	str	r3, [r7, #24]
 8008ec6:	e00c      	b.n	8008ee2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	8a7b      	ldrh	r3, [r7, #18]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1c2      	bne.n	8008e86 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e000      	b.n	8008f0e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008f0c:	2302      	movs	r3, #2
  }
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3720      	adds	r7, #32
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	@ 0x28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d137      	bne.n	8008fa0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <HAL_UART_Receive_DMA+0x24>
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e030      	b.n	8008fa2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a18      	ldr	r2, [pc, #96]	@ (8008fac <HAL_UART_Receive_DMA+0x94>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d01f      	beq.n	8008f90 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d018      	beq.n	8008f90 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	623b      	str	r3, [r7, #32]
 8008f7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	69f9      	ldr	r1, [r7, #28]
 8008f82:	6a3a      	ldr	r2, [r7, #32]
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e6      	bne.n	8008f5e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	461a      	mov	r2, r3
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f001 fbe6 	bl	800a768 <UART_Start_Receive_DMA>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	e000      	b.n	8008fa2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fa0:	2302      	movs	r3, #2
  }
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3728      	adds	r7, #40	@ 0x28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	58000c00 	.word	0x58000c00

08008fb0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b09a      	sub	sp, #104	@ 0x68
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fd8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffc:	4b46      	ldr	r3, [pc, #280]	@ (8009118 <HAL_UART_AbortReceive+0x168>)
 8008ffe:	4013      	ands	r3, r2
 8009000:	663b      	str	r3, [r7, #96]	@ 0x60
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800900a:	643a      	str	r2, [r7, #64]	@ 0x40
 800900c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e5      	bne.n	8008fea <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009022:	2b01      	cmp	r3, #1
 8009024:	d118      	bne.n	8009058 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	61fb      	str	r3, [r7, #28]
   return(result);
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	f023 0310 	bic.w	r3, r3, #16
 800903a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009046:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800904a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009062:	2b40      	cmp	r3, #64	@ 0x40
 8009064:	d13b      	bne.n	80090de <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	60bb      	str	r3, [r7, #8]
   return(result);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800907c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009086:	61ba      	str	r2, [r7, #24]
 8009088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	613b      	str	r3, [r7, #16]
   return(result);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e5      	bne.n	8009066 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01c      	beq.n	80090de <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090aa:	2200      	movs	r2, #0
 80090ac:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f9 fe05 	bl	8002cc4 <HAL_DMA_Abort>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00e      	beq.n	80090de <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fb fa8a 	bl	80045e0 <HAL_DMA_GetError>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	d105      	bne.n	80090de <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2210      	movs	r2, #16
 80090d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e017      	b.n	800910e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	220f      	movs	r2, #15
 80090ec:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	699a      	ldr	r2, [r3, #24]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0208 	orr.w	r2, r2, #8
 80090fc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3768      	adds	r7, #104	@ 0x68
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	effffffe 	.word	0xeffffffe

0800911c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b0ba      	sub	sp, #232	@ 0xe8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009146:	f640 030f 	movw	r3, #2063	@ 0x80f
 800914a:	4013      	ands	r3, r2
 800914c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d11b      	bne.n	8009190 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d015      	beq.n	8009190 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	2b00      	cmp	r3, #0
 800916e:	d105      	bne.n	800917c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d009      	beq.n	8009190 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 8393 	beq.w	80098ac <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
      }
      return;
 800918e:	e38d      	b.n	80098ac <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8123 	beq.w	80093e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800919a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800919e:	4b8d      	ldr	r3, [pc, #564]	@ (80093d4 <HAL_UART_IRQHandler+0x2b8>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80091aa:	4b8b      	ldr	r3, [pc, #556]	@ (80093d8 <HAL_UART_IRQHandler+0x2bc>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 8116 	beq.w	80093e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d011      	beq.n	80091e4 <HAL_UART_IRQHandler+0xc8>
 80091c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2201      	movs	r2, #1
 80091d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091da:	f043 0201 	orr.w	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d011      	beq.n	8009214 <HAL_UART_IRQHandler+0xf8>
 80091f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2202      	movs	r2, #2
 8009202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920a:	f043 0204 	orr.w	r2, r3, #4
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d011      	beq.n	8009244 <HAL_UART_IRQHandler+0x128>
 8009220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2204      	movs	r2, #4
 8009232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923a:	f043 0202 	orr.w	r2, r3, #2
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d017      	beq.n	8009280 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d105      	bne.n	8009268 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800925c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009260:	4b5c      	ldr	r3, [pc, #368]	@ (80093d4 <HAL_UART_IRQHandler+0x2b8>)
 8009262:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00b      	beq.n	8009280 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2208      	movs	r2, #8
 800926e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009276:	f043 0208 	orr.w	r2, r3, #8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009288:	2b00      	cmp	r3, #0
 800928a:	d012      	beq.n	80092b2 <HAL_UART_IRQHandler+0x196>
 800928c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00c      	beq.n	80092b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a8:	f043 0220 	orr.w	r2, r3, #32
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 82f9 	beq.w	80098b0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d013      	beq.n	80092f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d105      	bne.n	80092e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009306:	2b40      	cmp	r3, #64	@ 0x40
 8009308:	d005      	beq.n	8009316 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800930a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800930e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009312:	2b00      	cmp	r3, #0
 8009314:	d054      	beq.n	80093c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 fb0e 	bl	800a938 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009326:	2b40      	cmp	r3, #64	@ 0x40
 8009328:	d146      	bne.n	80093b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800935a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800936e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1d9      	bne.n	800932a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800937c:	2b00      	cmp	r3, #0
 800937e:	d017      	beq.n	80093b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009386:	4a15      	ldr	r2, [pc, #84]	@ (80093dc <HAL_UART_IRQHandler+0x2c0>)
 8009388:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009390:	4618      	mov	r0, r3
 8009392:	f7f9 ffb5 	bl	8003300 <HAL_DMA_Abort_IT>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d019      	beq.n	80093d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80093aa:	4610      	mov	r0, r2
 80093ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ae:	e00f      	b.n	80093d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7f8 f9b5 	bl	8001720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b6:	e00b      	b.n	80093d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7f8 f9b1 	bl	8001720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093be:	e007      	b.n	80093d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7f8 f9ad 	bl	8001720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80093ce:	e26f      	b.n	80098b0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d0:	bf00      	nop
    return;
 80093d2:	e26d      	b.n	80098b0 <HAL_UART_IRQHandler+0x794>
 80093d4:	10000001 	.word	0x10000001
 80093d8:	04000120 	.word	0x04000120
 80093dc:	0800abeb 	.word	0x0800abeb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	f040 8203 	bne.w	80097f0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 81fc 	beq.w	80097f0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 81f5 	beq.w	80097f0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2210      	movs	r2, #16
 800940c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009418:	2b40      	cmp	r3, #64	@ 0x40
 800941a:	f040 816d 	bne.w	80096f8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4aa4      	ldr	r2, [pc, #656]	@ (80096b8 <HAL_UART_IRQHandler+0x59c>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d068      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4aa1      	ldr	r2, [pc, #644]	@ (80096bc <HAL_UART_IRQHandler+0x5a0>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d061      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a9f      	ldr	r2, [pc, #636]	@ (80096c0 <HAL_UART_IRQHandler+0x5a4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d05a      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a9c      	ldr	r2, [pc, #624]	@ (80096c4 <HAL_UART_IRQHandler+0x5a8>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d053      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a9a      	ldr	r2, [pc, #616]	@ (80096c8 <HAL_UART_IRQHandler+0x5ac>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d04c      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a97      	ldr	r2, [pc, #604]	@ (80096cc <HAL_UART_IRQHandler+0x5b0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d045      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a95      	ldr	r2, [pc, #596]	@ (80096d0 <HAL_UART_IRQHandler+0x5b4>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d03e      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a92      	ldr	r2, [pc, #584]	@ (80096d4 <HAL_UART_IRQHandler+0x5b8>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d037      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a90      	ldr	r2, [pc, #576]	@ (80096d8 <HAL_UART_IRQHandler+0x5bc>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d030      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a8d      	ldr	r2, [pc, #564]	@ (80096dc <HAL_UART_IRQHandler+0x5c0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d029      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a8b      	ldr	r2, [pc, #556]	@ (80096e0 <HAL_UART_IRQHandler+0x5c4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d022      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a88      	ldr	r2, [pc, #544]	@ (80096e4 <HAL_UART_IRQHandler+0x5c8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01b      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a86      	ldr	r2, [pc, #536]	@ (80096e8 <HAL_UART_IRQHandler+0x5cc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d014      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a83      	ldr	r2, [pc, #524]	@ (80096ec <HAL_UART_IRQHandler+0x5d0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00d      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a81      	ldr	r2, [pc, #516]	@ (80096f0 <HAL_UART_IRQHandler+0x5d4>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d006      	beq.n	80094fe <HAL_UART_IRQHandler+0x3e2>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a7e      	ldr	r2, [pc, #504]	@ (80096f4 <HAL_UART_IRQHandler+0x5d8>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d106      	bne.n	800950c <HAL_UART_IRQHandler+0x3f0>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	b29b      	uxth	r3, r3
 800950a:	e005      	b.n	8009518 <HAL_UART_IRQHandler+0x3fc>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	b29b      	uxth	r3, r3
 8009518:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800951c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 80ad 	beq.w	8009680 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800952c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009530:	429a      	cmp	r2, r3
 8009532:	f080 80a5 	bcs.w	8009680 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800953c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954c:	f000 8087 	beq.w	800965e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800956c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800957a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800957e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009586:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1da      	bne.n	8009550 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3308      	adds	r3, #8
 80095a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095ac:	f023 0301 	bic.w	r3, r3, #1
 80095b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3308      	adds	r3, #8
 80095ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80095d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e1      	bne.n	800959a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3308      	adds	r3, #8
 80095f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009600:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e3      	bne.n	80095d6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800962a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800962c:	f023 0310 	bic.w	r3, r3, #16
 8009630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800963e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009640:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800964c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e4      	bne.n	800961c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009658:	4618      	mov	r0, r3
 800965a:	f7f9 fb33 	bl	8002cc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009670:	b29b      	uxth	r3, r3
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	b29b      	uxth	r3, r3
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f939 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800967e:	e119      	b.n	80098b4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800968a:	429a      	cmp	r2, r3
 800968c:	f040 8112 	bne.w	80098b4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800969c:	f040 810a 	bne.w	80098b4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f91e 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
      return;
 80096b4:	e0fe      	b.n	80098b4 <HAL_UART_IRQHandler+0x798>
 80096b6:	bf00      	nop
 80096b8:	40020010 	.word	0x40020010
 80096bc:	40020028 	.word	0x40020028
 80096c0:	40020040 	.word	0x40020040
 80096c4:	40020058 	.word	0x40020058
 80096c8:	40020070 	.word	0x40020070
 80096cc:	40020088 	.word	0x40020088
 80096d0:	400200a0 	.word	0x400200a0
 80096d4:	400200b8 	.word	0x400200b8
 80096d8:	40020410 	.word	0x40020410
 80096dc:	40020428 	.word	0x40020428
 80096e0:	40020440 	.word	0x40020440
 80096e4:	40020458 	.word	0x40020458
 80096e8:	40020470 	.word	0x40020470
 80096ec:	40020488 	.word	0x40020488
 80096f0:	400204a0 	.word	0x400204a0
 80096f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009704:	b29b      	uxth	r3, r3
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009712:	b29b      	uxth	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 80cf 	beq.w	80098b8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800971a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 80ca 	beq.w	80098b8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009738:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009746:	647b      	str	r3, [r7, #68]	@ 0x44
 8009748:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800974c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e4      	bne.n	8009724 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	623b      	str	r3, [r7, #32]
   return(result);
 800976a:	6a3a      	ldr	r2, [r7, #32]
 800976c:	4b55      	ldr	r3, [pc, #340]	@ (80098c4 <HAL_UART_IRQHandler+0x7a8>)
 800976e:	4013      	ands	r3, r2
 8009770:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3308      	adds	r3, #8
 800977a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800977e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009780:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e3      	bne.n	800975a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0310 	bic.w	r3, r3, #16
 80097ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	69b9      	ldr	r1, [r7, #24]
 80097ce:	69fa      	ldr	r2, [r7, #28]
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	617b      	str	r3, [r7, #20]
   return(result);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e4      	bne.n	80097a6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f881 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097ee:	e063      	b.n	80098b8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00e      	beq.n	800981a <HAL_UART_IRQHandler+0x6fe>
 80097fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d008      	beq.n	800981a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 fa26 	bl	800ac64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009818:	e051      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009822:	2b00      	cmp	r3, #0
 8009824:	d014      	beq.n	8009850 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800982a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800982e:	2b00      	cmp	r3, #0
 8009830:	d105      	bne.n	800983e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d008      	beq.n	8009850 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009842:	2b00      	cmp	r3, #0
 8009844:	d03a      	beq.n	80098bc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	4798      	blx	r3
    }
    return;
 800984e:	e035      	b.n	80098bc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009858:	2b00      	cmp	r3, #0
 800985a:	d009      	beq.n	8009870 <HAL_UART_IRQHandler+0x754>
 800985c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 f9d0 	bl	800ac0e <UART_EndTransmit_IT>
    return;
 800986e:	e026      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <HAL_UART_IRQHandler+0x774>
 800987c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009880:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 f9ff 	bl	800ac8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800988e:	e016      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d010      	beq.n	80098be <HAL_UART_IRQHandler+0x7a2>
 800989c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da0c      	bge.n	80098be <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 f9e7 	bl	800ac78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098aa:	e008      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
      return;
 80098ac:	bf00      	nop
 80098ae:	e006      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
    return;
 80098b0:	bf00      	nop
 80098b2:	e004      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
      return;
 80098b4:	bf00      	nop
 80098b6:	e002      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
      return;
 80098b8:	bf00      	nop
 80098ba:	e000      	b.n	80098be <HAL_UART_IRQHandler+0x7a2>
    return;
 80098bc:	bf00      	nop
  }
}
 80098be:	37e8      	adds	r7, #232	@ 0xe8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	effffffe 	.word	0xeffffffe

080098c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
	...

08009924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009928:	b092      	sub	sp, #72	@ 0x48
 800992a:	af00      	add	r7, sp, #0
 800992c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	431a      	orrs	r2, r3
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	431a      	orrs	r2, r3
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	4313      	orrs	r3, r2
 800994a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	4bbe      	ldr	r3, [pc, #760]	@ (8009c4c <UART_SetConfig+0x328>)
 8009954:	4013      	ands	r3, r2
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	6812      	ldr	r2, [r2, #0]
 800995a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800995c:	430b      	orrs	r3, r1
 800995e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4ab3      	ldr	r2, [pc, #716]	@ (8009c50 <UART_SetConfig+0x32c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d004      	beq.n	8009990 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800998c:	4313      	orrs	r3, r2
 800998e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689a      	ldr	r2, [r3, #8]
 8009996:	4baf      	ldr	r3, [pc, #700]	@ (8009c54 <UART_SetConfig+0x330>)
 8009998:	4013      	ands	r3, r2
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099a0:	430b      	orrs	r3, r1
 80099a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099aa:	f023 010f 	bic.w	r1, r3, #15
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4aa6      	ldr	r2, [pc, #664]	@ (8009c58 <UART_SetConfig+0x334>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d177      	bne.n	8009ab4 <UART_SetConfig+0x190>
 80099c4:	4ba5      	ldr	r3, [pc, #660]	@ (8009c5c <UART_SetConfig+0x338>)
 80099c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099cc:	2b28      	cmp	r3, #40	@ 0x28
 80099ce:	d86d      	bhi.n	8009aac <UART_SetConfig+0x188>
 80099d0:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <UART_SetConfig+0xb4>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009aad 	.word	0x08009aad
 80099e0:	08009aad 	.word	0x08009aad
 80099e4:	08009aad 	.word	0x08009aad
 80099e8:	08009aad 	.word	0x08009aad
 80099ec:	08009aad 	.word	0x08009aad
 80099f0:	08009aad 	.word	0x08009aad
 80099f4:	08009aad 	.word	0x08009aad
 80099f8:	08009a85 	.word	0x08009a85
 80099fc:	08009aad 	.word	0x08009aad
 8009a00:	08009aad 	.word	0x08009aad
 8009a04:	08009aad 	.word	0x08009aad
 8009a08:	08009aad 	.word	0x08009aad
 8009a0c:	08009aad 	.word	0x08009aad
 8009a10:	08009aad 	.word	0x08009aad
 8009a14:	08009aad 	.word	0x08009aad
 8009a18:	08009a8d 	.word	0x08009a8d
 8009a1c:	08009aad 	.word	0x08009aad
 8009a20:	08009aad 	.word	0x08009aad
 8009a24:	08009aad 	.word	0x08009aad
 8009a28:	08009aad 	.word	0x08009aad
 8009a2c:	08009aad 	.word	0x08009aad
 8009a30:	08009aad 	.word	0x08009aad
 8009a34:	08009aad 	.word	0x08009aad
 8009a38:	08009a95 	.word	0x08009a95
 8009a3c:	08009aad 	.word	0x08009aad
 8009a40:	08009aad 	.word	0x08009aad
 8009a44:	08009aad 	.word	0x08009aad
 8009a48:	08009aad 	.word	0x08009aad
 8009a4c:	08009aad 	.word	0x08009aad
 8009a50:	08009aad 	.word	0x08009aad
 8009a54:	08009aad 	.word	0x08009aad
 8009a58:	08009a9d 	.word	0x08009a9d
 8009a5c:	08009aad 	.word	0x08009aad
 8009a60:	08009aad 	.word	0x08009aad
 8009a64:	08009aad 	.word	0x08009aad
 8009a68:	08009aad 	.word	0x08009aad
 8009a6c:	08009aad 	.word	0x08009aad
 8009a70:	08009aad 	.word	0x08009aad
 8009a74:	08009aad 	.word	0x08009aad
 8009a78:	08009aa5 	.word	0x08009aa5
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e222      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009a84:	2304      	movs	r3, #4
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8a:	e21e      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e21a      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009a94:	2310      	movs	r3, #16
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	e216      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	e212      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009aa4:	2340      	movs	r3, #64	@ 0x40
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e20e      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009aac:	2380      	movs	r3, #128	@ 0x80
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e20a      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a69      	ldr	r2, [pc, #420]	@ (8009c60 <UART_SetConfig+0x33c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d130      	bne.n	8009b20 <UART_SetConfig+0x1fc>
 8009abe:	4b67      	ldr	r3, [pc, #412]	@ (8009c5c <UART_SetConfig+0x338>)
 8009ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d826      	bhi.n	8009b18 <UART_SetConfig+0x1f4>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <UART_SetConfig+0x1ac>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009af1 	.word	0x08009af1
 8009ad8:	08009af9 	.word	0x08009af9
 8009adc:	08009b01 	.word	0x08009b01
 8009ae0:	08009b09 	.word	0x08009b09
 8009ae4:	08009b11 	.word	0x08009b11
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e1ec      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009af0:	2304      	movs	r3, #4
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af6:	e1e8      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009af8:	2308      	movs	r3, #8
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e1e4      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b00:	2310      	movs	r3, #16
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e1e0      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b08:	2320      	movs	r3, #32
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0e:	e1dc      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b10:	2340      	movs	r3, #64	@ 0x40
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e1d8      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b18:	2380      	movs	r3, #128	@ 0x80
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1e:	e1d4      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a4f      	ldr	r2, [pc, #316]	@ (8009c64 <UART_SetConfig+0x340>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d130      	bne.n	8009b8c <UART_SetConfig+0x268>
 8009b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8009c5c <UART_SetConfig+0x338>)
 8009b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d826      	bhi.n	8009b84 <UART_SetConfig+0x260>
 8009b36:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <UART_SetConfig+0x218>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b5d 	.word	0x08009b5d
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009b6d 	.word	0x08009b6d
 8009b4c:	08009b75 	.word	0x08009b75
 8009b50:	08009b7d 	.word	0x08009b7d
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5a:	e1b6      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b62:	e1b2      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6a:	e1ae      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b72:	e1aa      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b74:	2320      	movs	r3, #32
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7a:	e1a6      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b7c:	2340      	movs	r3, #64	@ 0x40
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e1a2      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b84:	2380      	movs	r3, #128	@ 0x80
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	e19e      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a35      	ldr	r2, [pc, #212]	@ (8009c68 <UART_SetConfig+0x344>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d130      	bne.n	8009bf8 <UART_SetConfig+0x2d4>
 8009b96:	4b31      	ldr	r3, [pc, #196]	@ (8009c5c <UART_SetConfig+0x338>)
 8009b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d826      	bhi.n	8009bf0 <UART_SetConfig+0x2cc>
 8009ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba8 <UART_SetConfig+0x284>)
 8009ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba8:	08009bc1 	.word	0x08009bc1
 8009bac:	08009bc9 	.word	0x08009bc9
 8009bb0:	08009bd1 	.word	0x08009bd1
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009be9 	.word	0x08009be9
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc6:	e180      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009bc8:	2304      	movs	r3, #4
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bce:	e17c      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009bd0:	2308      	movs	r3, #8
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd6:	e178      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009bd8:	2310      	movs	r3, #16
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bde:	e174      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009be0:	2320      	movs	r3, #32
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be6:	e170      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009be8:	2340      	movs	r3, #64	@ 0x40
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e16c      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009bf0:	2380      	movs	r3, #128	@ 0x80
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf6:	e168      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8009c6c <UART_SetConfig+0x348>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d142      	bne.n	8009c88 <UART_SetConfig+0x364>
 8009c02:	4b16      	ldr	r3, [pc, #88]	@ (8009c5c <UART_SetConfig+0x338>)
 8009c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	d838      	bhi.n	8009c80 <UART_SetConfig+0x35c>
 8009c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <UART_SetConfig+0x2f0>)
 8009c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c35 	.word	0x08009c35
 8009c1c:	08009c3d 	.word	0x08009c3d
 8009c20:	08009c45 	.word	0x08009c45
 8009c24:	08009c71 	.word	0x08009c71
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e14a      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009c34:	2304      	movs	r3, #4
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e146      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009c3c:	2308      	movs	r3, #8
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e142      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009c44:	2310      	movs	r3, #16
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e13e      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009c4c:	cfff69f3 	.word	0xcfff69f3
 8009c50:	58000c00 	.word	0x58000c00
 8009c54:	11fff4ff 	.word	0x11fff4ff
 8009c58:	40011000 	.word	0x40011000
 8009c5c:	58024400 	.word	0x58024400
 8009c60:	40004400 	.word	0x40004400
 8009c64:	40004800 	.word	0x40004800
 8009c68:	40004c00 	.word	0x40004c00
 8009c6c:	40005000 	.word	0x40005000
 8009c70:	2320      	movs	r3, #32
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c76:	e128      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009c78:	2340      	movs	r3, #64	@ 0x40
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7e:	e124      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009c80:	2380      	movs	r3, #128	@ 0x80
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c86:	e120      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4acb      	ldr	r2, [pc, #812]	@ (8009fbc <UART_SetConfig+0x698>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d176      	bne.n	8009d80 <UART_SetConfig+0x45c>
 8009c92:	4bcb      	ldr	r3, [pc, #812]	@ (8009fc0 <UART_SetConfig+0x69c>)
 8009c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c9a:	2b28      	cmp	r3, #40	@ 0x28
 8009c9c:	d86c      	bhi.n	8009d78 <UART_SetConfig+0x454>
 8009c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca4 <UART_SetConfig+0x380>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009d49 	.word	0x08009d49
 8009ca8:	08009d79 	.word	0x08009d79
 8009cac:	08009d79 	.word	0x08009d79
 8009cb0:	08009d79 	.word	0x08009d79
 8009cb4:	08009d79 	.word	0x08009d79
 8009cb8:	08009d79 	.word	0x08009d79
 8009cbc:	08009d79 	.word	0x08009d79
 8009cc0:	08009d79 	.word	0x08009d79
 8009cc4:	08009d51 	.word	0x08009d51
 8009cc8:	08009d79 	.word	0x08009d79
 8009ccc:	08009d79 	.word	0x08009d79
 8009cd0:	08009d79 	.word	0x08009d79
 8009cd4:	08009d79 	.word	0x08009d79
 8009cd8:	08009d79 	.word	0x08009d79
 8009cdc:	08009d79 	.word	0x08009d79
 8009ce0:	08009d79 	.word	0x08009d79
 8009ce4:	08009d59 	.word	0x08009d59
 8009ce8:	08009d79 	.word	0x08009d79
 8009cec:	08009d79 	.word	0x08009d79
 8009cf0:	08009d79 	.word	0x08009d79
 8009cf4:	08009d79 	.word	0x08009d79
 8009cf8:	08009d79 	.word	0x08009d79
 8009cfc:	08009d79 	.word	0x08009d79
 8009d00:	08009d79 	.word	0x08009d79
 8009d04:	08009d61 	.word	0x08009d61
 8009d08:	08009d79 	.word	0x08009d79
 8009d0c:	08009d79 	.word	0x08009d79
 8009d10:	08009d79 	.word	0x08009d79
 8009d14:	08009d79 	.word	0x08009d79
 8009d18:	08009d79 	.word	0x08009d79
 8009d1c:	08009d79 	.word	0x08009d79
 8009d20:	08009d79 	.word	0x08009d79
 8009d24:	08009d69 	.word	0x08009d69
 8009d28:	08009d79 	.word	0x08009d79
 8009d2c:	08009d79 	.word	0x08009d79
 8009d30:	08009d79 	.word	0x08009d79
 8009d34:	08009d79 	.word	0x08009d79
 8009d38:	08009d79 	.word	0x08009d79
 8009d3c:	08009d79 	.word	0x08009d79
 8009d40:	08009d79 	.word	0x08009d79
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4e:	e0bc      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009d50:	2304      	movs	r3, #4
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d56:	e0b8      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009d58:	2308      	movs	r3, #8
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e0b4      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009d60:	2310      	movs	r3, #16
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e0b0      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009d68:	2320      	movs	r3, #32
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e0ac      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009d70:	2340      	movs	r3, #64	@ 0x40
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e0a8      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009d78:	2380      	movs	r3, #128	@ 0x80
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e0a4      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a8f      	ldr	r2, [pc, #572]	@ (8009fc4 <UART_SetConfig+0x6a0>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d130      	bne.n	8009dec <UART_SetConfig+0x4c8>
 8009d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8009fc0 <UART_SetConfig+0x69c>)
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8e:	f003 0307 	and.w	r3, r3, #7
 8009d92:	2b05      	cmp	r3, #5
 8009d94:	d826      	bhi.n	8009de4 <UART_SetConfig+0x4c0>
 8009d96:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <UART_SetConfig+0x478>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009db5 	.word	0x08009db5
 8009da0:	08009dbd 	.word	0x08009dbd
 8009da4:	08009dc5 	.word	0x08009dc5
 8009da8:	08009dcd 	.word	0x08009dcd
 8009dac:	08009dd5 	.word	0x08009dd5
 8009db0:	08009ddd 	.word	0x08009ddd
 8009db4:	2300      	movs	r3, #0
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e086      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e082      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e07e      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e07a      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e076      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009ddc:	2340      	movs	r3, #64	@ 0x40
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e072      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009de4:	2380      	movs	r3, #128	@ 0x80
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e06e      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a75      	ldr	r2, [pc, #468]	@ (8009fc8 <UART_SetConfig+0x6a4>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d130      	bne.n	8009e58 <UART_SetConfig+0x534>
 8009df6:	4b72      	ldr	r3, [pc, #456]	@ (8009fc0 <UART_SetConfig+0x69c>)
 8009df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b05      	cmp	r3, #5
 8009e00:	d826      	bhi.n	8009e50 <UART_SetConfig+0x52c>
 8009e02:	a201      	add	r2, pc, #4	@ (adr r2, 8009e08 <UART_SetConfig+0x4e4>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e21 	.word	0x08009e21
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009e39 	.word	0x08009e39
 8009e18:	08009e41 	.word	0x08009e41
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e050      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e04c      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e30:	2308      	movs	r3, #8
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e048      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e044      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e40:	2320      	movs	r3, #32
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e040      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e48:	2340      	movs	r3, #64	@ 0x40
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e03c      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e50:	2380      	movs	r3, #128	@ 0x80
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e038      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a5b      	ldr	r2, [pc, #364]	@ (8009fcc <UART_SetConfig+0x6a8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d130      	bne.n	8009ec4 <UART_SetConfig+0x5a0>
 8009e62:	4b57      	ldr	r3, [pc, #348]	@ (8009fc0 <UART_SetConfig+0x69c>)
 8009e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d826      	bhi.n	8009ebc <UART_SetConfig+0x598>
 8009e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <UART_SetConfig+0x550>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e8d 	.word	0x08009e8d
 8009e78:	08009e95 	.word	0x08009e95
 8009e7c:	08009e9d 	.word	0x08009e9d
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ead 	.word	0x08009ead
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e01a      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e94:	2304      	movs	r3, #4
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e016      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e012      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e00e      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009eac:	2320      	movs	r3, #32
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e00a      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009eb4:	2340      	movs	r3, #64	@ 0x40
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e006      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009ebc:	2380      	movs	r3, #128	@ 0x80
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e002      	b.n	8009eca <UART_SetConfig+0x5a6>
 8009ec4:	2380      	movs	r3, #128	@ 0x80
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a3f      	ldr	r2, [pc, #252]	@ (8009fcc <UART_SetConfig+0x6a8>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	f040 80f8 	bne.w	800a0c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	dc46      	bgt.n	8009f6c <UART_SetConfig+0x648>
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	f2c0 8082 	blt.w	8009fe8 <UART_SetConfig+0x6c4>
 8009ee4:	3b02      	subs	r3, #2
 8009ee6:	2b1e      	cmp	r3, #30
 8009ee8:	d87e      	bhi.n	8009fe8 <UART_SetConfig+0x6c4>
 8009eea:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef0 <UART_SetConfig+0x5cc>)
 8009eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef0:	08009f73 	.word	0x08009f73
 8009ef4:	08009fe9 	.word	0x08009fe9
 8009ef8:	08009f7b 	.word	0x08009f7b
 8009efc:	08009fe9 	.word	0x08009fe9
 8009f00:	08009fe9 	.word	0x08009fe9
 8009f04:	08009fe9 	.word	0x08009fe9
 8009f08:	08009f8b 	.word	0x08009f8b
 8009f0c:	08009fe9 	.word	0x08009fe9
 8009f10:	08009fe9 	.word	0x08009fe9
 8009f14:	08009fe9 	.word	0x08009fe9
 8009f18:	08009fe9 	.word	0x08009fe9
 8009f1c:	08009fe9 	.word	0x08009fe9
 8009f20:	08009fe9 	.word	0x08009fe9
 8009f24:	08009fe9 	.word	0x08009fe9
 8009f28:	08009f9b 	.word	0x08009f9b
 8009f2c:	08009fe9 	.word	0x08009fe9
 8009f30:	08009fe9 	.word	0x08009fe9
 8009f34:	08009fe9 	.word	0x08009fe9
 8009f38:	08009fe9 	.word	0x08009fe9
 8009f3c:	08009fe9 	.word	0x08009fe9
 8009f40:	08009fe9 	.word	0x08009fe9
 8009f44:	08009fe9 	.word	0x08009fe9
 8009f48:	08009fe9 	.word	0x08009fe9
 8009f4c:	08009fe9 	.word	0x08009fe9
 8009f50:	08009fe9 	.word	0x08009fe9
 8009f54:	08009fe9 	.word	0x08009fe9
 8009f58:	08009fe9 	.word	0x08009fe9
 8009f5c:	08009fe9 	.word	0x08009fe9
 8009f60:	08009fe9 	.word	0x08009fe9
 8009f64:	08009fe9 	.word	0x08009fe9
 8009f68:	08009fdb 	.word	0x08009fdb
 8009f6c:	2b40      	cmp	r3, #64	@ 0x40
 8009f6e:	d037      	beq.n	8009fe0 <UART_SetConfig+0x6bc>
 8009f70:	e03a      	b.n	8009fe8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f72:	f7fd fb9b 	bl	80076ac <HAL_RCCEx_GetD3PCLK1Freq>
 8009f76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f78:	e03c      	b.n	8009ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fd fbaa 	bl	80076d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f88:	e034      	b.n	8009ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f8a:	f107 0318 	add.w	r3, r7, #24
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fd fcf6 	bl	8007980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f98:	e02c      	b.n	8009ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f9a:	4b09      	ldr	r3, [pc, #36]	@ (8009fc0 <UART_SetConfig+0x69c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d016      	beq.n	8009fd4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fa6:	4b06      	ldr	r3, [pc, #24]	@ (8009fc0 <UART_SetConfig+0x69c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	08db      	lsrs	r3, r3, #3
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	4a07      	ldr	r2, [pc, #28]	@ (8009fd0 <UART_SetConfig+0x6ac>)
 8009fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fb8:	e01c      	b.n	8009ff4 <UART_SetConfig+0x6d0>
 8009fba:	bf00      	nop
 8009fbc:	40011400 	.word	0x40011400
 8009fc0:	58024400 	.word	0x58024400
 8009fc4:	40007800 	.word	0x40007800
 8009fc8:	40007c00 	.word	0x40007c00
 8009fcc:	58000c00 	.word	0x58000c00
 8009fd0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009fd4:	4b9d      	ldr	r3, [pc, #628]	@ (800a24c <UART_SetConfig+0x928>)
 8009fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd8:	e00c      	b.n	8009ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fda:	4b9d      	ldr	r3, [pc, #628]	@ (800a250 <UART_SetConfig+0x92c>)
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fde:	e009      	b.n	8009ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe6:	e005      	b.n	8009ff4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ff2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 81de 	beq.w	800a3b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a000:	4a94      	ldr	r2, [pc, #592]	@ (800a254 <UART_SetConfig+0x930>)
 800a002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a006:	461a      	mov	r2, r3
 800a008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	4613      	mov	r3, r2
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	4413      	add	r3, r2
 800a01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d305      	bcc.n	800a02c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a028:	429a      	cmp	r2, r3
 800a02a:	d903      	bls.n	800a034 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a032:	e1c1      	b.n	800a3b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a036:	2200      	movs	r2, #0
 800a038:	60bb      	str	r3, [r7, #8]
 800a03a:	60fa      	str	r2, [r7, #12]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a040:	4a84      	ldr	r2, [pc, #528]	@ (800a254 <UART_SetConfig+0x930>)
 800a042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a046:	b29b      	uxth	r3, r3
 800a048:	2200      	movs	r2, #0
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	607a      	str	r2, [r7, #4]
 800a04e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a056:	f7f6 f99b 	bl	8000390 <__aeabi_uldivmod>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4610      	mov	r0, r2
 800a060:	4619      	mov	r1, r3
 800a062:	f04f 0200 	mov.w	r2, #0
 800a066:	f04f 0300 	mov.w	r3, #0
 800a06a:	020b      	lsls	r3, r1, #8
 800a06c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a070:	0202      	lsls	r2, r0, #8
 800a072:	6979      	ldr	r1, [r7, #20]
 800a074:	6849      	ldr	r1, [r1, #4]
 800a076:	0849      	lsrs	r1, r1, #1
 800a078:	2000      	movs	r0, #0
 800a07a:	460c      	mov	r4, r1
 800a07c:	4605      	mov	r5, r0
 800a07e:	eb12 0804 	adds.w	r8, r2, r4
 800a082:	eb43 0905 	adc.w	r9, r3, r5
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	469a      	mov	sl, r3
 800a08e:	4693      	mov	fp, r2
 800a090:	4652      	mov	r2, sl
 800a092:	465b      	mov	r3, fp
 800a094:	4640      	mov	r0, r8
 800a096:	4649      	mov	r1, r9
 800a098:	f7f6 f97a 	bl	8000390 <__aeabi_uldivmod>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0aa:	d308      	bcc.n	800a0be <UART_SetConfig+0x79a>
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0b2:	d204      	bcs.n	800a0be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0ba:	60da      	str	r2, [r3, #12]
 800a0bc:	e17c      	b.n	800a3b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0c4:	e178      	b.n	800a3b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0ce:	f040 80c5 	bne.w	800a25c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a0d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	dc48      	bgt.n	800a16c <UART_SetConfig+0x848>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	db7b      	blt.n	800a1d6 <UART_SetConfig+0x8b2>
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d879      	bhi.n	800a1d6 <UART_SetConfig+0x8b2>
 800a0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e8 <UART_SetConfig+0x7c4>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a173 	.word	0x0800a173
 800a0ec:	0800a17b 	.word	0x0800a17b
 800a0f0:	0800a1d7 	.word	0x0800a1d7
 800a0f4:	0800a1d7 	.word	0x0800a1d7
 800a0f8:	0800a183 	.word	0x0800a183
 800a0fc:	0800a1d7 	.word	0x0800a1d7
 800a100:	0800a1d7 	.word	0x0800a1d7
 800a104:	0800a1d7 	.word	0x0800a1d7
 800a108:	0800a193 	.word	0x0800a193
 800a10c:	0800a1d7 	.word	0x0800a1d7
 800a110:	0800a1d7 	.word	0x0800a1d7
 800a114:	0800a1d7 	.word	0x0800a1d7
 800a118:	0800a1d7 	.word	0x0800a1d7
 800a11c:	0800a1d7 	.word	0x0800a1d7
 800a120:	0800a1d7 	.word	0x0800a1d7
 800a124:	0800a1d7 	.word	0x0800a1d7
 800a128:	0800a1a3 	.word	0x0800a1a3
 800a12c:	0800a1d7 	.word	0x0800a1d7
 800a130:	0800a1d7 	.word	0x0800a1d7
 800a134:	0800a1d7 	.word	0x0800a1d7
 800a138:	0800a1d7 	.word	0x0800a1d7
 800a13c:	0800a1d7 	.word	0x0800a1d7
 800a140:	0800a1d7 	.word	0x0800a1d7
 800a144:	0800a1d7 	.word	0x0800a1d7
 800a148:	0800a1d7 	.word	0x0800a1d7
 800a14c:	0800a1d7 	.word	0x0800a1d7
 800a150:	0800a1d7 	.word	0x0800a1d7
 800a154:	0800a1d7 	.word	0x0800a1d7
 800a158:	0800a1d7 	.word	0x0800a1d7
 800a15c:	0800a1d7 	.word	0x0800a1d7
 800a160:	0800a1d7 	.word	0x0800a1d7
 800a164:	0800a1d7 	.word	0x0800a1d7
 800a168:	0800a1c9 	.word	0x0800a1c9
 800a16c:	2b40      	cmp	r3, #64	@ 0x40
 800a16e:	d02e      	beq.n	800a1ce <UART_SetConfig+0x8aa>
 800a170:	e031      	b.n	800a1d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a172:	f7fc f865 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 800a176:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a178:	e033      	b.n	800a1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a17a:	f7fc f877 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 800a17e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a180:	e02f      	b.n	800a1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a186:	4618      	mov	r0, r3
 800a188:	f7fd faa6 	bl	80076d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a190:	e027      	b.n	800a1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a192:	f107 0318 	add.w	r3, r7, #24
 800a196:	4618      	mov	r0, r3
 800a198:	f7fd fbf2 	bl	8007980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a0:	e01f      	b.n	800a1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a258 <UART_SetConfig+0x934>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0320 	and.w	r3, r3, #32
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d009      	beq.n	800a1c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a258 <UART_SetConfig+0x934>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	08db      	lsrs	r3, r3, #3
 800a1b4:	f003 0303 	and.w	r3, r3, #3
 800a1b8:	4a24      	ldr	r2, [pc, #144]	@ (800a24c <UART_SetConfig+0x928>)
 800a1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1c0:	e00f      	b.n	800a1e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a1c2:	4b22      	ldr	r3, [pc, #136]	@ (800a24c <UART_SetConfig+0x928>)
 800a1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c6:	e00c      	b.n	800a1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1c8:	4b21      	ldr	r3, [pc, #132]	@ (800a250 <UART_SetConfig+0x92c>)
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1cc:	e009      	b.n	800a1e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d4:	e005      	b.n	800a1e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80e7 	beq.w	800a3b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ee:	4a19      	ldr	r2, [pc, #100]	@ (800a254 <UART_SetConfig+0x930>)
 800a1f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1fc:	005a      	lsls	r2, r3, #1
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	085b      	lsrs	r3, r3, #1
 800a204:	441a      	add	r2, r3
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a212:	2b0f      	cmp	r3, #15
 800a214:	d916      	bls.n	800a244 <UART_SetConfig+0x920>
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a21c:	d212      	bcs.n	800a244 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a220:	b29b      	uxth	r3, r3
 800a222:	f023 030f 	bic.w	r3, r3, #15
 800a226:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22a:	085b      	lsrs	r3, r3, #1
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	b29a      	uxth	r2, r3
 800a234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a236:	4313      	orrs	r3, r2
 800a238:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a240:	60da      	str	r2, [r3, #12]
 800a242:	e0b9      	b.n	800a3b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a24a:	e0b5      	b.n	800a3b8 <UART_SetConfig+0xa94>
 800a24c:	03d09000 	.word	0x03d09000
 800a250:	003d0900 	.word	0x003d0900
 800a254:	0800b878 	.word	0x0800b878
 800a258:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a25c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a260:	2b20      	cmp	r3, #32
 800a262:	dc49      	bgt.n	800a2f8 <UART_SetConfig+0x9d4>
 800a264:	2b00      	cmp	r3, #0
 800a266:	db7c      	blt.n	800a362 <UART_SetConfig+0xa3e>
 800a268:	2b20      	cmp	r3, #32
 800a26a:	d87a      	bhi.n	800a362 <UART_SetConfig+0xa3e>
 800a26c:	a201      	add	r2, pc, #4	@ (adr r2, 800a274 <UART_SetConfig+0x950>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a2ff 	.word	0x0800a2ff
 800a278:	0800a307 	.word	0x0800a307
 800a27c:	0800a363 	.word	0x0800a363
 800a280:	0800a363 	.word	0x0800a363
 800a284:	0800a30f 	.word	0x0800a30f
 800a288:	0800a363 	.word	0x0800a363
 800a28c:	0800a363 	.word	0x0800a363
 800a290:	0800a363 	.word	0x0800a363
 800a294:	0800a31f 	.word	0x0800a31f
 800a298:	0800a363 	.word	0x0800a363
 800a29c:	0800a363 	.word	0x0800a363
 800a2a0:	0800a363 	.word	0x0800a363
 800a2a4:	0800a363 	.word	0x0800a363
 800a2a8:	0800a363 	.word	0x0800a363
 800a2ac:	0800a363 	.word	0x0800a363
 800a2b0:	0800a363 	.word	0x0800a363
 800a2b4:	0800a32f 	.word	0x0800a32f
 800a2b8:	0800a363 	.word	0x0800a363
 800a2bc:	0800a363 	.word	0x0800a363
 800a2c0:	0800a363 	.word	0x0800a363
 800a2c4:	0800a363 	.word	0x0800a363
 800a2c8:	0800a363 	.word	0x0800a363
 800a2cc:	0800a363 	.word	0x0800a363
 800a2d0:	0800a363 	.word	0x0800a363
 800a2d4:	0800a363 	.word	0x0800a363
 800a2d8:	0800a363 	.word	0x0800a363
 800a2dc:	0800a363 	.word	0x0800a363
 800a2e0:	0800a363 	.word	0x0800a363
 800a2e4:	0800a363 	.word	0x0800a363
 800a2e8:	0800a363 	.word	0x0800a363
 800a2ec:	0800a363 	.word	0x0800a363
 800a2f0:	0800a363 	.word	0x0800a363
 800a2f4:	0800a355 	.word	0x0800a355
 800a2f8:	2b40      	cmp	r3, #64	@ 0x40
 800a2fa:	d02e      	beq.n	800a35a <UART_SetConfig+0xa36>
 800a2fc:	e031      	b.n	800a362 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2fe:	f7fb ff9f 	bl	8006240 <HAL_RCC_GetPCLK1Freq>
 800a302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a304:	e033      	b.n	800a36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a306:	f7fb ffb1 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 800a30a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a30c:	e02f      	b.n	800a36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a30e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a312:	4618      	mov	r0, r3
 800a314:	f7fd f9e0 	bl	80076d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31c:	e027      	b.n	800a36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a31e:	f107 0318 	add.w	r3, r7, #24
 800a322:	4618      	mov	r0, r3
 800a324:	f7fd fb2c 	bl	8007980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a32c:	e01f      	b.n	800a36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a32e:	4b2d      	ldr	r3, [pc, #180]	@ (800a3e4 <UART_SetConfig+0xac0>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0320 	and.w	r3, r3, #32
 800a336:	2b00      	cmp	r3, #0
 800a338:	d009      	beq.n	800a34e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a33a:	4b2a      	ldr	r3, [pc, #168]	@ (800a3e4 <UART_SetConfig+0xac0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	08db      	lsrs	r3, r3, #3
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	4a28      	ldr	r2, [pc, #160]	@ (800a3e8 <UART_SetConfig+0xac4>)
 800a346:	fa22 f303 	lsr.w	r3, r2, r3
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a34c:	e00f      	b.n	800a36e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a34e:	4b26      	ldr	r3, [pc, #152]	@ (800a3e8 <UART_SetConfig+0xac4>)
 800a350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a352:	e00c      	b.n	800a36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a354:	4b25      	ldr	r3, [pc, #148]	@ (800a3ec <UART_SetConfig+0xac8>)
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a358:	e009      	b.n	800a36e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a35a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a360:	e005      	b.n	800a36e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a36c:	bf00      	nop
    }

    if (pclk != 0U)
 800a36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d021      	beq.n	800a3b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a378:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f0 <UART_SetConfig+0xacc>)
 800a37a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a37e:	461a      	mov	r2, r3
 800a380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a382:	fbb3 f2f2 	udiv	r2, r3, r2
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	085b      	lsrs	r3, r3, #1
 800a38c:	441a      	add	r2, r3
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	fbb2 f3f3 	udiv	r3, r2, r3
 800a396:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39a:	2b0f      	cmp	r3, #15
 800a39c:	d909      	bls.n	800a3b2 <UART_SetConfig+0xa8e>
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3a4:	d205      	bcs.n	800a3b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	60da      	str	r2, [r3, #12]
 800a3b0:	e002      	b.n	800a3b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3748      	adds	r7, #72	@ 0x48
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3e2:	bf00      	nop
 800a3e4:	58024400 	.word	0x58024400
 800a3e8:	03d09000 	.word	0x03d09000
 800a3ec:	003d0900 	.word	0x003d0900
 800a3f0:	0800b878 	.word	0x0800b878

0800a3f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a400:	f003 0308 	and.w	r3, r3, #8
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00a      	beq.n	800a41e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00a      	beq.n	800a440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a444:	f003 0302 	and.w	r3, r3, #2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a466:	f003 0304 	and.w	r3, r3, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00a      	beq.n	800a484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00a      	beq.n	800a4a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00a      	beq.n	800a4c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01a      	beq.n	800a50a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4f2:	d10a      	bne.n	800a50a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	605a      	str	r2, [r3, #4]
  }
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b098      	sub	sp, #96	@ 0x60
 800a53c:	af02      	add	r7, sp, #8
 800a53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a548:	f7f7 fcaa 	bl	8001ea0 <HAL_GetTick>
 800a54c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d12f      	bne.n	800a5bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a55c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a564:	2200      	movs	r2, #0
 800a566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f88e 	bl	800a68c <UART_WaitOnFlagUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d022      	beq.n	800a5bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a58a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a594:	647b      	str	r3, [r7, #68]	@ 0x44
 800a596:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a59a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e6      	bne.n	800a576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e063      	b.n	800a684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0304 	and.w	r3, r3, #4
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	d149      	bne.n	800a65e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f857 	bl	800a68c <UART_WaitOnFlagUntilTimeout>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d03c      	beq.n	800a65e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a602:	633b      	str	r3, [r7, #48]	@ 0x30
 800a604:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a60a:	e841 2300 	strex	r3, r2, [r1]
 800a60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e6      	bne.n	800a5e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	60fb      	str	r3, [r7, #12]
   return(result);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f023 0301 	bic.w	r3, r3, #1
 800a62c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3308      	adds	r3, #8
 800a634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a636:	61fa      	str	r2, [r7, #28]
 800a638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63a:	69b9      	ldr	r1, [r7, #24]
 800a63c:	69fa      	ldr	r2, [r7, #28]
 800a63e:	e841 2300 	strex	r3, r2, [r1]
 800a642:	617b      	str	r3, [r7, #20]
   return(result);
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1e5      	bne.n	800a616 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2220      	movs	r2, #32
 800a64e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e012      	b.n	800a684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3758      	adds	r7, #88	@ 0x58
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	4613      	mov	r3, r2
 800a69a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a69c:	e04f      	b.n	800a73e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a4:	d04b      	beq.n	800a73e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6a6:	f7f7 fbfb 	bl	8001ea0 <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d302      	bcc.n	800a6bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e04e      	b.n	800a75e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d037      	beq.n	800a73e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b80      	cmp	r3, #128	@ 0x80
 800a6d2:	d034      	beq.n	800a73e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2b40      	cmp	r3, #64	@ 0x40
 800a6d8:	d031      	beq.n	800a73e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f003 0308 	and.w	r3, r3, #8
 800a6e4:	2b08      	cmp	r3, #8
 800a6e6:	d110      	bne.n	800a70a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2208      	movs	r2, #8
 800a6ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 f921 	bl	800a938 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2208      	movs	r2, #8
 800a6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e029      	b.n	800a75e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	69db      	ldr	r3, [r3, #28]
 800a710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a718:	d111      	bne.n	800a73e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 f907 	bl	800a938 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e00f      	b.n	800a75e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	69da      	ldr	r2, [r3, #28]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	4013      	ands	r3, r2
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	bf0c      	ite	eq
 800a74e:	2301      	moveq	r3, #1
 800a750:	2300      	movne	r3, #0
 800a752:	b2db      	uxtb	r3, r3
 800a754:	461a      	mov	r2, r3
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d0a0      	beq.n	800a69e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b096      	sub	sp, #88	@ 0x58
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	4613      	mov	r3, r2
 800a774:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	88fa      	ldrh	r2, [r7, #6]
 800a780:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2222      	movs	r2, #34	@ 0x22
 800a790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d02d      	beq.n	800a7fa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7a4:	4a40      	ldr	r2, [pc, #256]	@ (800a8a8 <UART_Start_Receive_DMA+0x140>)
 800a7a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7ae:	4a3f      	ldr	r2, [pc, #252]	@ (800a8ac <UART_Start_Receive_DMA+0x144>)
 800a7b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7b8:	4a3d      	ldr	r2, [pc, #244]	@ (800a8b0 <UART_Start_Receive_DMA+0x148>)
 800a7ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3324      	adds	r3, #36	@ 0x24
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d8:	461a      	mov	r2, r3
 800a7da:	88fb      	ldrh	r3, [r7, #6]
 800a7dc:	f7f8 f808 	bl	80027f0 <HAL_DMA_Start_IT>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2210      	movs	r2, #16
 800a7ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e051      	b.n	800a89e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d018      	beq.n	800a834 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a816:	657b      	str	r3, [r7, #84]	@ 0x54
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a820:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a822:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a826:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a82e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e6      	bne.n	800a802 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3308      	adds	r3, #8
 800a83a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83e:	e853 3f00 	ldrex	r3, [r3]
 800a842:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	f043 0301 	orr.w	r3, r3, #1
 800a84a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3308      	adds	r3, #8
 800a852:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a854:	637a      	str	r2, [r7, #52]	@ 0x34
 800a856:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a85a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a85c:	e841 2300 	strex	r3, r2, [r1]
 800a860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e5      	bne.n	800a834 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	e853 3f00 	ldrex	r3, [r3]
 800a876:	613b      	str	r3, [r7, #16]
   return(result);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a87e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3308      	adds	r3, #8
 800a886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a888:	623a      	str	r2, [r7, #32]
 800a88a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88c:	69f9      	ldr	r1, [r7, #28]
 800a88e:	6a3a      	ldr	r2, [r7, #32]
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	61bb      	str	r3, [r7, #24]
   return(result);
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e5      	bne.n	800a868 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3758      	adds	r7, #88	@ 0x58
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0800aa05 	.word	0x0800aa05
 800a8ac:	0800ab2d 	.word	0x0800ab2d
 800a8b0:	0800ab6b 	.word	0x0800ab6b

0800a8b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b08f      	sub	sp, #60	@ 0x3c
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e6      	bne.n	800a8bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	e853 3f00 	ldrex	r3, [r3]
 800a8fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a904:	633b      	str	r3, [r7, #48]	@ 0x30
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3308      	adds	r3, #8
 800a90c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90e:	61ba      	str	r2, [r7, #24]
 800a910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a912:	6979      	ldr	r1, [r7, #20]
 800a914:	69ba      	ldr	r2, [r7, #24]
 800a916:	e841 2300 	strex	r3, r2, [r1]
 800a91a:	613b      	str	r3, [r7, #16]
   return(result);
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1e5      	bne.n	800a8ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2220      	movs	r2, #32
 800a926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a92a:	bf00      	nop
 800a92c:	373c      	adds	r7, #60	@ 0x3c
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
	...

0800a938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b095      	sub	sp, #84	@ 0x54
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a948:	e853 3f00 	ldrex	r3, [r3]
 800a94c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a95e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a960:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a962:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a964:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e6      	bne.n	800a940 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3308      	adds	r3, #8
 800a978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	61fb      	str	r3, [r7, #28]
   return(result);
 800a982:	69fa      	ldr	r2, [r7, #28]
 800a984:	4b1e      	ldr	r3, [pc, #120]	@ (800aa00 <UART_EndRxTransfer+0xc8>)
 800a986:	4013      	ands	r3, r2
 800a988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a994:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e5      	bne.n	800a972 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d118      	bne.n	800a9e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	e853 3f00 	ldrex	r3, [r3]
 800a9ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f023 0310 	bic.w	r3, r3, #16
 800a9c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d0:	6979      	ldr	r1, [r7, #20]
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	e841 2300 	strex	r3, r2, [r1]
 800a9d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e6      	bne.n	800a9ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9f4:	bf00      	nop
 800a9f6:	3754      	adds	r7, #84	@ 0x54
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	effffffe 	.word	0xeffffffe

0800aa04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b09c      	sub	sp, #112	@ 0x70
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa10:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa1a:	d071      	beq.n	800ab00 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800aa1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e6      	bne.n	800aa24 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3308      	adds	r3, #8
 800aa5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa60:	e853 3f00 	ldrex	r3, [r3]
 800aa64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa68:	f023 0301 	bic.w	r3, r3, #1
 800aa6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3308      	adds	r3, #8
 800aa74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa76:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e5      	bne.n	800aa56 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3308      	adds	r3, #8
 800aa90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	623b      	str	r3, [r7, #32]
   return(result);
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaa0:	663b      	str	r3, [r7, #96]	@ 0x60
 800aaa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aaaa:	633a      	str	r2, [r7, #48]	@ 0x30
 800aaac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e5      	bne.n	800aa8a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aabe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d118      	bne.n	800ab00 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	e853 3f00 	ldrex	r3, [r3]
 800aada:	60fb      	str	r3, [r7, #12]
   return(result);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0310 	bic.w	r3, r3, #16
 800aae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaec:	61fb      	str	r3, [r7, #28]
 800aaee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf0:	69b9      	ldr	r1, [r7, #24]
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	e841 2300 	strex	r3, r2, [r1]
 800aaf8:	617b      	str	r3, [r7, #20]
   return(result);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e6      	bne.n	800aace <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab02:	2200      	movs	r2, #0
 800ab04:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d107      	bne.n	800ab1e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab14:	4619      	mov	r1, r3
 800ab16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab18:	f7fe feea 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab1c:	e002      	b.n	800ab24 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ab1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab20:	f7f6 fd98 	bl	8001654 <HAL_UART_RxCpltCallback>
}
 800ab24:	bf00      	nop
 800ab26:	3770      	adds	r7, #112	@ 0x70
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d109      	bne.n	800ab5c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab4e:	085b      	lsrs	r3, r3, #1
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	4619      	mov	r1, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7fe fecb 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab5a:	e002      	b.n	800ab62 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f7fe febd 	bl	80098dc <HAL_UART_RxHalfCpltCallback>
}
 800ab62:	bf00      	nop
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b086      	sub	sp, #24
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab76:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab92:	2b80      	cmp	r3, #128	@ 0x80
 800ab94:	d109      	bne.n	800abaa <UART_DMAError+0x40>
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	2b21      	cmp	r3, #33	@ 0x21
 800ab9a:	d106      	bne.n	800abaa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800aba4:	6978      	ldr	r0, [r7, #20]
 800aba6:	f7ff fe85 	bl	800a8b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abb4:	2b40      	cmp	r3, #64	@ 0x40
 800abb6:	d109      	bne.n	800abcc <UART_DMAError+0x62>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b22      	cmp	r3, #34	@ 0x22
 800abbc:	d106      	bne.n	800abcc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800abc6:	6978      	ldr	r0, [r7, #20]
 800abc8:	f7ff feb6 	bl	800a938 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd2:	f043 0210 	orr.w	r2, r3, #16
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abdc:	6978      	ldr	r0, [r7, #20]
 800abde:	f7f6 fd9f 	bl	8001720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abe2:	bf00      	nop
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f7f6 fd8d 	bl	8001720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b088      	sub	sp, #32
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	61bb      	str	r3, [r7, #24]
 800ac36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6979      	ldr	r1, [r7, #20]
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	613b      	str	r3, [r7, #16]
   return(result);
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e6      	bne.n	800ac16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7fe fe36 	bl	80098c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac5c:	bf00      	nop
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e027      	b.n	800ad06 <HAL_UARTEx_DisableFifoMode+0x66>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2224      	movs	r2, #36	@ 0x24
 800acc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 0201 	bic.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ace4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2220      	movs	r2, #32
 800acf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad26:	2302      	movs	r3, #2
 800ad28:	e02d      	b.n	800ad86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2224      	movs	r2, #36	@ 0x24
 800ad36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f850 	bl	800ae0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2220      	movs	r2, #32
 800ad78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ada2:	2302      	movs	r3, #2
 800ada4:	e02d      	b.n	800ae02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2224      	movs	r2, #36	@ 0x24
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0201 	bic.w	r2, r2, #1
 800adcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f812 	bl	800ae0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d108      	bne.n	800ae2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae2c:	e031      	b.n	800ae92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae2e:	2310      	movs	r3, #16
 800ae30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae32:	2310      	movs	r3, #16
 800ae34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	0e5b      	lsrs	r3, r3, #25
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	0f5b      	lsrs	r3, r3, #29
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	f003 0307 	and.w	r3, r3, #7
 800ae54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	7b3a      	ldrb	r2, [r7, #12]
 800ae5a:	4911      	ldr	r1, [pc, #68]	@ (800aea0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae5c:	5c8a      	ldrb	r2, [r1, r2]
 800ae5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae62:	7b3a      	ldrb	r2, [r7, #12]
 800ae64:	490f      	ldr	r1, [pc, #60]	@ (800aea4 <UARTEx_SetNbDataToProcess+0x98>)
 800ae66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	7b7a      	ldrb	r2, [r7, #13]
 800ae78:	4909      	ldr	r1, [pc, #36]	@ (800aea0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae7a:	5c8a      	ldrb	r2, [r1, r2]
 800ae7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae80:	7b7a      	ldrb	r2, [r7, #13]
 800ae82:	4908      	ldr	r1, [pc, #32]	@ (800aea4 <UARTEx_SetNbDataToProcess+0x98>)
 800ae84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae86:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae92:	bf00      	nop
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	0800b890 	.word	0x0800b890
 800aea4:	0800b898 	.word	0x0800b898

0800aea8 <_vsniprintf_r>:
 800aea8:	b530      	push	{r4, r5, lr}
 800aeaa:	4614      	mov	r4, r2
 800aeac:	2c00      	cmp	r4, #0
 800aeae:	b09b      	sub	sp, #108	@ 0x6c
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	da05      	bge.n	800aec2 <_vsniprintf_r+0x1a>
 800aeb6:	238b      	movs	r3, #139	@ 0x8b
 800aeb8:	6003      	str	r3, [r0, #0]
 800aeba:	f04f 30ff 	mov.w	r0, #4294967295
 800aebe:	b01b      	add	sp, #108	@ 0x6c
 800aec0:	bd30      	pop	{r4, r5, pc}
 800aec2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aec6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aeca:	f04f 0300 	mov.w	r3, #0
 800aece:	9319      	str	r3, [sp, #100]	@ 0x64
 800aed0:	bf14      	ite	ne
 800aed2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aed6:	4623      	moveq	r3, r4
 800aed8:	9302      	str	r3, [sp, #8]
 800aeda:	9305      	str	r3, [sp, #20]
 800aedc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aee0:	9100      	str	r1, [sp, #0]
 800aee2:	9104      	str	r1, [sp, #16]
 800aee4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aee8:	4669      	mov	r1, sp
 800aeea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800aeec:	f000 f9a0 	bl	800b230 <_svfiprintf_r>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	bfbc      	itt	lt
 800aef4:	238b      	movlt	r3, #139	@ 0x8b
 800aef6:	602b      	strlt	r3, [r5, #0]
 800aef8:	2c00      	cmp	r4, #0
 800aefa:	d0e0      	beq.n	800aebe <_vsniprintf_r+0x16>
 800aefc:	9b00      	ldr	r3, [sp, #0]
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	e7dc      	b.n	800aebe <_vsniprintf_r+0x16>

0800af04 <vsniprintf>:
 800af04:	b507      	push	{r0, r1, r2, lr}
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	4613      	mov	r3, r2
 800af0a:	460a      	mov	r2, r1
 800af0c:	4601      	mov	r1, r0
 800af0e:	4803      	ldr	r0, [pc, #12]	@ (800af1c <vsniprintf+0x18>)
 800af10:	6800      	ldr	r0, [r0, #0]
 800af12:	f7ff ffc9 	bl	800aea8 <_vsniprintf_r>
 800af16:	b003      	add	sp, #12
 800af18:	f85d fb04 	ldr.w	pc, [sp], #4
 800af1c:	2400084c 	.word	0x2400084c

0800af20 <memset>:
 800af20:	4402      	add	r2, r0
 800af22:	4603      	mov	r3, r0
 800af24:	4293      	cmp	r3, r2
 800af26:	d100      	bne.n	800af2a <memset+0xa>
 800af28:	4770      	bx	lr
 800af2a:	f803 1b01 	strb.w	r1, [r3], #1
 800af2e:	e7f9      	b.n	800af24 <memset+0x4>

0800af30 <__errno>:
 800af30:	4b01      	ldr	r3, [pc, #4]	@ (800af38 <__errno+0x8>)
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	2400084c 	.word	0x2400084c

0800af3c <__libc_init_array>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	4d0d      	ldr	r5, [pc, #52]	@ (800af74 <__libc_init_array+0x38>)
 800af40:	4c0d      	ldr	r4, [pc, #52]	@ (800af78 <__libc_init_array+0x3c>)
 800af42:	1b64      	subs	r4, r4, r5
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	2600      	movs	r6, #0
 800af48:	42a6      	cmp	r6, r4
 800af4a:	d109      	bne.n	800af60 <__libc_init_array+0x24>
 800af4c:	4d0b      	ldr	r5, [pc, #44]	@ (800af7c <__libc_init_array+0x40>)
 800af4e:	4c0c      	ldr	r4, [pc, #48]	@ (800af80 <__libc_init_array+0x44>)
 800af50:	f000 fc64 	bl	800b81c <_init>
 800af54:	1b64      	subs	r4, r4, r5
 800af56:	10a4      	asrs	r4, r4, #2
 800af58:	2600      	movs	r6, #0
 800af5a:	42a6      	cmp	r6, r4
 800af5c:	d105      	bne.n	800af6a <__libc_init_array+0x2e>
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	f855 3b04 	ldr.w	r3, [r5], #4
 800af64:	4798      	blx	r3
 800af66:	3601      	adds	r6, #1
 800af68:	e7ee      	b.n	800af48 <__libc_init_array+0xc>
 800af6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6e:	4798      	blx	r3
 800af70:	3601      	adds	r6, #1
 800af72:	e7f2      	b.n	800af5a <__libc_init_array+0x1e>
 800af74:	0800b8dc 	.word	0x0800b8dc
 800af78:	0800b8dc 	.word	0x0800b8dc
 800af7c:	0800b8dc 	.word	0x0800b8dc
 800af80:	0800b8e0 	.word	0x0800b8e0

0800af84 <__retarget_lock_acquire_recursive>:
 800af84:	4770      	bx	lr

0800af86 <__retarget_lock_release_recursive>:
 800af86:	4770      	bx	lr

0800af88 <_free_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4605      	mov	r5, r0
 800af8c:	2900      	cmp	r1, #0
 800af8e:	d041      	beq.n	800b014 <_free_r+0x8c>
 800af90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af94:	1f0c      	subs	r4, r1, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	bfb8      	it	lt
 800af9a:	18e4      	addlt	r4, r4, r3
 800af9c:	f000 f8e0 	bl	800b160 <__malloc_lock>
 800afa0:	4a1d      	ldr	r2, [pc, #116]	@ (800b018 <_free_r+0x90>)
 800afa2:	6813      	ldr	r3, [r2, #0]
 800afa4:	b933      	cbnz	r3, 800afb4 <_free_r+0x2c>
 800afa6:	6063      	str	r3, [r4, #4]
 800afa8:	6014      	str	r4, [r2, #0]
 800afaa:	4628      	mov	r0, r5
 800afac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb0:	f000 b8dc 	b.w	800b16c <__malloc_unlock>
 800afb4:	42a3      	cmp	r3, r4
 800afb6:	d908      	bls.n	800afca <_free_r+0x42>
 800afb8:	6820      	ldr	r0, [r4, #0]
 800afba:	1821      	adds	r1, r4, r0
 800afbc:	428b      	cmp	r3, r1
 800afbe:	bf01      	itttt	eq
 800afc0:	6819      	ldreq	r1, [r3, #0]
 800afc2:	685b      	ldreq	r3, [r3, #4]
 800afc4:	1809      	addeq	r1, r1, r0
 800afc6:	6021      	streq	r1, [r4, #0]
 800afc8:	e7ed      	b.n	800afa6 <_free_r+0x1e>
 800afca:	461a      	mov	r2, r3
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	b10b      	cbz	r3, 800afd4 <_free_r+0x4c>
 800afd0:	42a3      	cmp	r3, r4
 800afd2:	d9fa      	bls.n	800afca <_free_r+0x42>
 800afd4:	6811      	ldr	r1, [r2, #0]
 800afd6:	1850      	adds	r0, r2, r1
 800afd8:	42a0      	cmp	r0, r4
 800afda:	d10b      	bne.n	800aff4 <_free_r+0x6c>
 800afdc:	6820      	ldr	r0, [r4, #0]
 800afde:	4401      	add	r1, r0
 800afe0:	1850      	adds	r0, r2, r1
 800afe2:	4283      	cmp	r3, r0
 800afe4:	6011      	str	r1, [r2, #0]
 800afe6:	d1e0      	bne.n	800afaa <_free_r+0x22>
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	6053      	str	r3, [r2, #4]
 800afee:	4408      	add	r0, r1
 800aff0:	6010      	str	r0, [r2, #0]
 800aff2:	e7da      	b.n	800afaa <_free_r+0x22>
 800aff4:	d902      	bls.n	800affc <_free_r+0x74>
 800aff6:	230c      	movs	r3, #12
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	e7d6      	b.n	800afaa <_free_r+0x22>
 800affc:	6820      	ldr	r0, [r4, #0]
 800affe:	1821      	adds	r1, r4, r0
 800b000:	428b      	cmp	r3, r1
 800b002:	bf04      	itt	eq
 800b004:	6819      	ldreq	r1, [r3, #0]
 800b006:	685b      	ldreq	r3, [r3, #4]
 800b008:	6063      	str	r3, [r4, #4]
 800b00a:	bf04      	itt	eq
 800b00c:	1809      	addeq	r1, r1, r0
 800b00e:	6021      	streq	r1, [r4, #0]
 800b010:	6054      	str	r4, [r2, #4]
 800b012:	e7ca      	b.n	800afaa <_free_r+0x22>
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	bf00      	nop
 800b018:	24000c70 	.word	0x24000c70

0800b01c <sbrk_aligned>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	4e0f      	ldr	r6, [pc, #60]	@ (800b05c <sbrk_aligned+0x40>)
 800b020:	460c      	mov	r4, r1
 800b022:	6831      	ldr	r1, [r6, #0]
 800b024:	4605      	mov	r5, r0
 800b026:	b911      	cbnz	r1, 800b02e <sbrk_aligned+0x12>
 800b028:	f000 fba4 	bl	800b774 <_sbrk_r>
 800b02c:	6030      	str	r0, [r6, #0]
 800b02e:	4621      	mov	r1, r4
 800b030:	4628      	mov	r0, r5
 800b032:	f000 fb9f 	bl	800b774 <_sbrk_r>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	d103      	bne.n	800b042 <sbrk_aligned+0x26>
 800b03a:	f04f 34ff 	mov.w	r4, #4294967295
 800b03e:	4620      	mov	r0, r4
 800b040:	bd70      	pop	{r4, r5, r6, pc}
 800b042:	1cc4      	adds	r4, r0, #3
 800b044:	f024 0403 	bic.w	r4, r4, #3
 800b048:	42a0      	cmp	r0, r4
 800b04a:	d0f8      	beq.n	800b03e <sbrk_aligned+0x22>
 800b04c:	1a21      	subs	r1, r4, r0
 800b04e:	4628      	mov	r0, r5
 800b050:	f000 fb90 	bl	800b774 <_sbrk_r>
 800b054:	3001      	adds	r0, #1
 800b056:	d1f2      	bne.n	800b03e <sbrk_aligned+0x22>
 800b058:	e7ef      	b.n	800b03a <sbrk_aligned+0x1e>
 800b05a:	bf00      	nop
 800b05c:	24000c6c 	.word	0x24000c6c

0800b060 <_malloc_r>:
 800b060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b064:	1ccd      	adds	r5, r1, #3
 800b066:	f025 0503 	bic.w	r5, r5, #3
 800b06a:	3508      	adds	r5, #8
 800b06c:	2d0c      	cmp	r5, #12
 800b06e:	bf38      	it	cc
 800b070:	250c      	movcc	r5, #12
 800b072:	2d00      	cmp	r5, #0
 800b074:	4606      	mov	r6, r0
 800b076:	db01      	blt.n	800b07c <_malloc_r+0x1c>
 800b078:	42a9      	cmp	r1, r5
 800b07a:	d904      	bls.n	800b086 <_malloc_r+0x26>
 800b07c:	230c      	movs	r3, #12
 800b07e:	6033      	str	r3, [r6, #0]
 800b080:	2000      	movs	r0, #0
 800b082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b15c <_malloc_r+0xfc>
 800b08a:	f000 f869 	bl	800b160 <__malloc_lock>
 800b08e:	f8d8 3000 	ldr.w	r3, [r8]
 800b092:	461c      	mov	r4, r3
 800b094:	bb44      	cbnz	r4, 800b0e8 <_malloc_r+0x88>
 800b096:	4629      	mov	r1, r5
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff ffbf 	bl	800b01c <sbrk_aligned>
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	d158      	bne.n	800b156 <_malloc_r+0xf6>
 800b0a4:	f8d8 4000 	ldr.w	r4, [r8]
 800b0a8:	4627      	mov	r7, r4
 800b0aa:	2f00      	cmp	r7, #0
 800b0ac:	d143      	bne.n	800b136 <_malloc_r+0xd6>
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	d04b      	beq.n	800b14a <_malloc_r+0xea>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	eb04 0903 	add.w	r9, r4, r3
 800b0bc:	f000 fb5a 	bl	800b774 <_sbrk_r>
 800b0c0:	4581      	cmp	r9, r0
 800b0c2:	d142      	bne.n	800b14a <_malloc_r+0xea>
 800b0c4:	6821      	ldr	r1, [r4, #0]
 800b0c6:	1a6d      	subs	r5, r5, r1
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7ff ffa6 	bl	800b01c <sbrk_aligned>
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d03a      	beq.n	800b14a <_malloc_r+0xea>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	442b      	add	r3, r5
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	f8d8 3000 	ldr.w	r3, [r8]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	bb62      	cbnz	r2, 800b13c <_malloc_r+0xdc>
 800b0e2:	f8c8 7000 	str.w	r7, [r8]
 800b0e6:	e00f      	b.n	800b108 <_malloc_r+0xa8>
 800b0e8:	6822      	ldr	r2, [r4, #0]
 800b0ea:	1b52      	subs	r2, r2, r5
 800b0ec:	d420      	bmi.n	800b130 <_malloc_r+0xd0>
 800b0ee:	2a0b      	cmp	r2, #11
 800b0f0:	d917      	bls.n	800b122 <_malloc_r+0xc2>
 800b0f2:	1961      	adds	r1, r4, r5
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	6025      	str	r5, [r4, #0]
 800b0f8:	bf18      	it	ne
 800b0fa:	6059      	strne	r1, [r3, #4]
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	bf08      	it	eq
 800b100:	f8c8 1000 	streq.w	r1, [r8]
 800b104:	5162      	str	r2, [r4, r5]
 800b106:	604b      	str	r3, [r1, #4]
 800b108:	4630      	mov	r0, r6
 800b10a:	f000 f82f 	bl	800b16c <__malloc_unlock>
 800b10e:	f104 000b 	add.w	r0, r4, #11
 800b112:	1d23      	adds	r3, r4, #4
 800b114:	f020 0007 	bic.w	r0, r0, #7
 800b118:	1ac2      	subs	r2, r0, r3
 800b11a:	bf1c      	itt	ne
 800b11c:	1a1b      	subne	r3, r3, r0
 800b11e:	50a3      	strne	r3, [r4, r2]
 800b120:	e7af      	b.n	800b082 <_malloc_r+0x22>
 800b122:	6862      	ldr	r2, [r4, #4]
 800b124:	42a3      	cmp	r3, r4
 800b126:	bf0c      	ite	eq
 800b128:	f8c8 2000 	streq.w	r2, [r8]
 800b12c:	605a      	strne	r2, [r3, #4]
 800b12e:	e7eb      	b.n	800b108 <_malloc_r+0xa8>
 800b130:	4623      	mov	r3, r4
 800b132:	6864      	ldr	r4, [r4, #4]
 800b134:	e7ae      	b.n	800b094 <_malloc_r+0x34>
 800b136:	463c      	mov	r4, r7
 800b138:	687f      	ldr	r7, [r7, #4]
 800b13a:	e7b6      	b.n	800b0aa <_malloc_r+0x4a>
 800b13c:	461a      	mov	r2, r3
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	42a3      	cmp	r3, r4
 800b142:	d1fb      	bne.n	800b13c <_malloc_r+0xdc>
 800b144:	2300      	movs	r3, #0
 800b146:	6053      	str	r3, [r2, #4]
 800b148:	e7de      	b.n	800b108 <_malloc_r+0xa8>
 800b14a:	230c      	movs	r3, #12
 800b14c:	6033      	str	r3, [r6, #0]
 800b14e:	4630      	mov	r0, r6
 800b150:	f000 f80c 	bl	800b16c <__malloc_unlock>
 800b154:	e794      	b.n	800b080 <_malloc_r+0x20>
 800b156:	6005      	str	r5, [r0, #0]
 800b158:	e7d6      	b.n	800b108 <_malloc_r+0xa8>
 800b15a:	bf00      	nop
 800b15c:	24000c70 	.word	0x24000c70

0800b160 <__malloc_lock>:
 800b160:	4801      	ldr	r0, [pc, #4]	@ (800b168 <__malloc_lock+0x8>)
 800b162:	f7ff bf0f 	b.w	800af84 <__retarget_lock_acquire_recursive>
 800b166:	bf00      	nop
 800b168:	24000c68 	.word	0x24000c68

0800b16c <__malloc_unlock>:
 800b16c:	4801      	ldr	r0, [pc, #4]	@ (800b174 <__malloc_unlock+0x8>)
 800b16e:	f7ff bf0a 	b.w	800af86 <__retarget_lock_release_recursive>
 800b172:	bf00      	nop
 800b174:	24000c68 	.word	0x24000c68

0800b178 <__ssputs_r>:
 800b178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	688e      	ldr	r6, [r1, #8]
 800b17e:	461f      	mov	r7, r3
 800b180:	42be      	cmp	r6, r7
 800b182:	680b      	ldr	r3, [r1, #0]
 800b184:	4682      	mov	sl, r0
 800b186:	460c      	mov	r4, r1
 800b188:	4690      	mov	r8, r2
 800b18a:	d82d      	bhi.n	800b1e8 <__ssputs_r+0x70>
 800b18c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b190:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b194:	d026      	beq.n	800b1e4 <__ssputs_r+0x6c>
 800b196:	6965      	ldr	r5, [r4, #20]
 800b198:	6909      	ldr	r1, [r1, #16]
 800b19a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b19e:	eba3 0901 	sub.w	r9, r3, r1
 800b1a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1a6:	1c7b      	adds	r3, r7, #1
 800b1a8:	444b      	add	r3, r9
 800b1aa:	106d      	asrs	r5, r5, #1
 800b1ac:	429d      	cmp	r5, r3
 800b1ae:	bf38      	it	cc
 800b1b0:	461d      	movcc	r5, r3
 800b1b2:	0553      	lsls	r3, r2, #21
 800b1b4:	d527      	bpl.n	800b206 <__ssputs_r+0x8e>
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	f7ff ff52 	bl	800b060 <_malloc_r>
 800b1bc:	4606      	mov	r6, r0
 800b1be:	b360      	cbz	r0, 800b21a <__ssputs_r+0xa2>
 800b1c0:	6921      	ldr	r1, [r4, #16]
 800b1c2:	464a      	mov	r2, r9
 800b1c4:	f000 fae6 	bl	800b794 <memcpy>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	6126      	str	r6, [r4, #16]
 800b1d6:	6165      	str	r5, [r4, #20]
 800b1d8:	444e      	add	r6, r9
 800b1da:	eba5 0509 	sub.w	r5, r5, r9
 800b1de:	6026      	str	r6, [r4, #0]
 800b1e0:	60a5      	str	r5, [r4, #8]
 800b1e2:	463e      	mov	r6, r7
 800b1e4:	42be      	cmp	r6, r7
 800b1e6:	d900      	bls.n	800b1ea <__ssputs_r+0x72>
 800b1e8:	463e      	mov	r6, r7
 800b1ea:	6820      	ldr	r0, [r4, #0]
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	f000 faa6 	bl	800b740 <memmove>
 800b1f4:	68a3      	ldr	r3, [r4, #8]
 800b1f6:	1b9b      	subs	r3, r3, r6
 800b1f8:	60a3      	str	r3, [r4, #8]
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	4433      	add	r3, r6
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	2000      	movs	r0, #0
 800b202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b206:	462a      	mov	r2, r5
 800b208:	f000 fad2 	bl	800b7b0 <_realloc_r>
 800b20c:	4606      	mov	r6, r0
 800b20e:	2800      	cmp	r0, #0
 800b210:	d1e0      	bne.n	800b1d4 <__ssputs_r+0x5c>
 800b212:	6921      	ldr	r1, [r4, #16]
 800b214:	4650      	mov	r0, sl
 800b216:	f7ff feb7 	bl	800af88 <_free_r>
 800b21a:	230c      	movs	r3, #12
 800b21c:	f8ca 3000 	str.w	r3, [sl]
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b226:	81a3      	strh	r3, [r4, #12]
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	e7e9      	b.n	800b202 <__ssputs_r+0x8a>
	...

0800b230 <_svfiprintf_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4698      	mov	r8, r3
 800b236:	898b      	ldrh	r3, [r1, #12]
 800b238:	061b      	lsls	r3, r3, #24
 800b23a:	b09d      	sub	sp, #116	@ 0x74
 800b23c:	4607      	mov	r7, r0
 800b23e:	460d      	mov	r5, r1
 800b240:	4614      	mov	r4, r2
 800b242:	d510      	bpl.n	800b266 <_svfiprintf_r+0x36>
 800b244:	690b      	ldr	r3, [r1, #16]
 800b246:	b973      	cbnz	r3, 800b266 <_svfiprintf_r+0x36>
 800b248:	2140      	movs	r1, #64	@ 0x40
 800b24a:	f7ff ff09 	bl	800b060 <_malloc_r>
 800b24e:	6028      	str	r0, [r5, #0]
 800b250:	6128      	str	r0, [r5, #16]
 800b252:	b930      	cbnz	r0, 800b262 <_svfiprintf_r+0x32>
 800b254:	230c      	movs	r3, #12
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	b01d      	add	sp, #116	@ 0x74
 800b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b262:	2340      	movs	r3, #64	@ 0x40
 800b264:	616b      	str	r3, [r5, #20]
 800b266:	2300      	movs	r3, #0
 800b268:	9309      	str	r3, [sp, #36]	@ 0x24
 800b26a:	2320      	movs	r3, #32
 800b26c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b270:	f8cd 800c 	str.w	r8, [sp, #12]
 800b274:	2330      	movs	r3, #48	@ 0x30
 800b276:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b414 <_svfiprintf_r+0x1e4>
 800b27a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b27e:	f04f 0901 	mov.w	r9, #1
 800b282:	4623      	mov	r3, r4
 800b284:	469a      	mov	sl, r3
 800b286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b28a:	b10a      	cbz	r2, 800b290 <_svfiprintf_r+0x60>
 800b28c:	2a25      	cmp	r2, #37	@ 0x25
 800b28e:	d1f9      	bne.n	800b284 <_svfiprintf_r+0x54>
 800b290:	ebba 0b04 	subs.w	fp, sl, r4
 800b294:	d00b      	beq.n	800b2ae <_svfiprintf_r+0x7e>
 800b296:	465b      	mov	r3, fp
 800b298:	4622      	mov	r2, r4
 800b29a:	4629      	mov	r1, r5
 800b29c:	4638      	mov	r0, r7
 800b29e:	f7ff ff6b 	bl	800b178 <__ssputs_r>
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f000 80a7 	beq.w	800b3f6 <_svfiprintf_r+0x1c6>
 800b2a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2aa:	445a      	add	r2, fp
 800b2ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f000 809f 	beq.w	800b3f6 <_svfiprintf_r+0x1c6>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b2be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2c2:	f10a 0a01 	add.w	sl, sl, #1
 800b2c6:	9304      	str	r3, [sp, #16]
 800b2c8:	9307      	str	r3, [sp, #28]
 800b2ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2d0:	4654      	mov	r4, sl
 800b2d2:	2205      	movs	r2, #5
 800b2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d8:	484e      	ldr	r0, [pc, #312]	@ (800b414 <_svfiprintf_r+0x1e4>)
 800b2da:	f7f5 f809 	bl	80002f0 <memchr>
 800b2de:	9a04      	ldr	r2, [sp, #16]
 800b2e0:	b9d8      	cbnz	r0, 800b31a <_svfiprintf_r+0xea>
 800b2e2:	06d0      	lsls	r0, r2, #27
 800b2e4:	bf44      	itt	mi
 800b2e6:	2320      	movmi	r3, #32
 800b2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2ec:	0711      	lsls	r1, r2, #28
 800b2ee:	bf44      	itt	mi
 800b2f0:	232b      	movmi	r3, #43	@ 0x2b
 800b2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2fc:	d015      	beq.n	800b32a <_svfiprintf_r+0xfa>
 800b2fe:	9a07      	ldr	r2, [sp, #28]
 800b300:	4654      	mov	r4, sl
 800b302:	2000      	movs	r0, #0
 800b304:	f04f 0c0a 	mov.w	ip, #10
 800b308:	4621      	mov	r1, r4
 800b30a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b30e:	3b30      	subs	r3, #48	@ 0x30
 800b310:	2b09      	cmp	r3, #9
 800b312:	d94b      	bls.n	800b3ac <_svfiprintf_r+0x17c>
 800b314:	b1b0      	cbz	r0, 800b344 <_svfiprintf_r+0x114>
 800b316:	9207      	str	r2, [sp, #28]
 800b318:	e014      	b.n	800b344 <_svfiprintf_r+0x114>
 800b31a:	eba0 0308 	sub.w	r3, r0, r8
 800b31e:	fa09 f303 	lsl.w	r3, r9, r3
 800b322:	4313      	orrs	r3, r2
 800b324:	9304      	str	r3, [sp, #16]
 800b326:	46a2      	mov	sl, r4
 800b328:	e7d2      	b.n	800b2d0 <_svfiprintf_r+0xa0>
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	1d19      	adds	r1, r3, #4
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	9103      	str	r1, [sp, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	bfbb      	ittet	lt
 800b336:	425b      	neglt	r3, r3
 800b338:	f042 0202 	orrlt.w	r2, r2, #2
 800b33c:	9307      	strge	r3, [sp, #28]
 800b33e:	9307      	strlt	r3, [sp, #28]
 800b340:	bfb8      	it	lt
 800b342:	9204      	strlt	r2, [sp, #16]
 800b344:	7823      	ldrb	r3, [r4, #0]
 800b346:	2b2e      	cmp	r3, #46	@ 0x2e
 800b348:	d10a      	bne.n	800b360 <_svfiprintf_r+0x130>
 800b34a:	7863      	ldrb	r3, [r4, #1]
 800b34c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b34e:	d132      	bne.n	800b3b6 <_svfiprintf_r+0x186>
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	1d1a      	adds	r2, r3, #4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	9203      	str	r2, [sp, #12]
 800b358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b35c:	3402      	adds	r4, #2
 800b35e:	9305      	str	r3, [sp, #20]
 800b360:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b424 <_svfiprintf_r+0x1f4>
 800b364:	7821      	ldrb	r1, [r4, #0]
 800b366:	2203      	movs	r2, #3
 800b368:	4650      	mov	r0, sl
 800b36a:	f7f4 ffc1 	bl	80002f0 <memchr>
 800b36e:	b138      	cbz	r0, 800b380 <_svfiprintf_r+0x150>
 800b370:	9b04      	ldr	r3, [sp, #16]
 800b372:	eba0 000a 	sub.w	r0, r0, sl
 800b376:	2240      	movs	r2, #64	@ 0x40
 800b378:	4082      	lsls	r2, r0
 800b37a:	4313      	orrs	r3, r2
 800b37c:	3401      	adds	r4, #1
 800b37e:	9304      	str	r3, [sp, #16]
 800b380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b384:	4824      	ldr	r0, [pc, #144]	@ (800b418 <_svfiprintf_r+0x1e8>)
 800b386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b38a:	2206      	movs	r2, #6
 800b38c:	f7f4 ffb0 	bl	80002f0 <memchr>
 800b390:	2800      	cmp	r0, #0
 800b392:	d036      	beq.n	800b402 <_svfiprintf_r+0x1d2>
 800b394:	4b21      	ldr	r3, [pc, #132]	@ (800b41c <_svfiprintf_r+0x1ec>)
 800b396:	bb1b      	cbnz	r3, 800b3e0 <_svfiprintf_r+0x1b0>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	3307      	adds	r3, #7
 800b39c:	f023 0307 	bic.w	r3, r3, #7
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	9303      	str	r3, [sp, #12]
 800b3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a6:	4433      	add	r3, r6
 800b3a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3aa:	e76a      	b.n	800b282 <_svfiprintf_r+0x52>
 800b3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	e7a8      	b.n	800b308 <_svfiprintf_r+0xd8>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	3401      	adds	r4, #1
 800b3ba:	9305      	str	r3, [sp, #20]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	f04f 0c0a 	mov.w	ip, #10
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3c8:	3a30      	subs	r2, #48	@ 0x30
 800b3ca:	2a09      	cmp	r2, #9
 800b3cc:	d903      	bls.n	800b3d6 <_svfiprintf_r+0x1a6>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0c6      	beq.n	800b360 <_svfiprintf_r+0x130>
 800b3d2:	9105      	str	r1, [sp, #20]
 800b3d4:	e7c4      	b.n	800b360 <_svfiprintf_r+0x130>
 800b3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3da:	4604      	mov	r4, r0
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e7f0      	b.n	800b3c2 <_svfiprintf_r+0x192>
 800b3e0:	ab03      	add	r3, sp, #12
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4b0e      	ldr	r3, [pc, #56]	@ (800b420 <_svfiprintf_r+0x1f0>)
 800b3e8:	a904      	add	r1, sp, #16
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	1c42      	adds	r2, r0, #1
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	d1d6      	bne.n	800b3a4 <_svfiprintf_r+0x174>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	065b      	lsls	r3, r3, #25
 800b3fa:	f53f af2d 	bmi.w	800b258 <_svfiprintf_r+0x28>
 800b3fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b400:	e72c      	b.n	800b25c <_svfiprintf_r+0x2c>
 800b402:	ab03      	add	r3, sp, #12
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	462a      	mov	r2, r5
 800b408:	4b05      	ldr	r3, [pc, #20]	@ (800b420 <_svfiprintf_r+0x1f0>)
 800b40a:	a904      	add	r1, sp, #16
 800b40c:	4638      	mov	r0, r7
 800b40e:	f000 f879 	bl	800b504 <_printf_i>
 800b412:	e7ed      	b.n	800b3f0 <_svfiprintf_r+0x1c0>
 800b414:	0800b8a0 	.word	0x0800b8a0
 800b418:	0800b8aa 	.word	0x0800b8aa
 800b41c:	00000000 	.word	0x00000000
 800b420:	0800b179 	.word	0x0800b179
 800b424:	0800b8a6 	.word	0x0800b8a6

0800b428 <_printf_common>:
 800b428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b42c:	4616      	mov	r6, r2
 800b42e:	4698      	mov	r8, r3
 800b430:	688a      	ldr	r2, [r1, #8]
 800b432:	690b      	ldr	r3, [r1, #16]
 800b434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b438:	4293      	cmp	r3, r2
 800b43a:	bfb8      	it	lt
 800b43c:	4613      	movlt	r3, r2
 800b43e:	6033      	str	r3, [r6, #0]
 800b440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b444:	4607      	mov	r7, r0
 800b446:	460c      	mov	r4, r1
 800b448:	b10a      	cbz	r2, 800b44e <_printf_common+0x26>
 800b44a:	3301      	adds	r3, #1
 800b44c:	6033      	str	r3, [r6, #0]
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	0699      	lsls	r1, r3, #26
 800b452:	bf42      	ittt	mi
 800b454:	6833      	ldrmi	r3, [r6, #0]
 800b456:	3302      	addmi	r3, #2
 800b458:	6033      	strmi	r3, [r6, #0]
 800b45a:	6825      	ldr	r5, [r4, #0]
 800b45c:	f015 0506 	ands.w	r5, r5, #6
 800b460:	d106      	bne.n	800b470 <_printf_common+0x48>
 800b462:	f104 0a19 	add.w	sl, r4, #25
 800b466:	68e3      	ldr	r3, [r4, #12]
 800b468:	6832      	ldr	r2, [r6, #0]
 800b46a:	1a9b      	subs	r3, r3, r2
 800b46c:	42ab      	cmp	r3, r5
 800b46e:	dc26      	bgt.n	800b4be <_printf_common+0x96>
 800b470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b474:	6822      	ldr	r2, [r4, #0]
 800b476:	3b00      	subs	r3, #0
 800b478:	bf18      	it	ne
 800b47a:	2301      	movne	r3, #1
 800b47c:	0692      	lsls	r2, r2, #26
 800b47e:	d42b      	bmi.n	800b4d8 <_printf_common+0xb0>
 800b480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b484:	4641      	mov	r1, r8
 800b486:	4638      	mov	r0, r7
 800b488:	47c8      	blx	r9
 800b48a:	3001      	adds	r0, #1
 800b48c:	d01e      	beq.n	800b4cc <_printf_common+0xa4>
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	6922      	ldr	r2, [r4, #16]
 800b492:	f003 0306 	and.w	r3, r3, #6
 800b496:	2b04      	cmp	r3, #4
 800b498:	bf02      	ittt	eq
 800b49a:	68e5      	ldreq	r5, [r4, #12]
 800b49c:	6833      	ldreq	r3, [r6, #0]
 800b49e:	1aed      	subeq	r5, r5, r3
 800b4a0:	68a3      	ldr	r3, [r4, #8]
 800b4a2:	bf0c      	ite	eq
 800b4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4a8:	2500      	movne	r5, #0
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	bfc4      	itt	gt
 800b4ae:	1a9b      	subgt	r3, r3, r2
 800b4b0:	18ed      	addgt	r5, r5, r3
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	341a      	adds	r4, #26
 800b4b6:	42b5      	cmp	r5, r6
 800b4b8:	d11a      	bne.n	800b4f0 <_printf_common+0xc8>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e008      	b.n	800b4d0 <_printf_common+0xa8>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	4652      	mov	r2, sl
 800b4c2:	4641      	mov	r1, r8
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	47c8      	blx	r9
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d103      	bne.n	800b4d4 <_printf_common+0xac>
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	e7c6      	b.n	800b466 <_printf_common+0x3e>
 800b4d8:	18e1      	adds	r1, r4, r3
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	2030      	movs	r0, #48	@ 0x30
 800b4de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4e2:	4422      	add	r2, r4
 800b4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	e7c7      	b.n	800b480 <_printf_common+0x58>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	4641      	mov	r1, r8
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	47c8      	blx	r9
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	d0e6      	beq.n	800b4cc <_printf_common+0xa4>
 800b4fe:	3601      	adds	r6, #1
 800b500:	e7d9      	b.n	800b4b6 <_printf_common+0x8e>
	...

0800b504 <_printf_i>:
 800b504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b508:	7e0f      	ldrb	r7, [r1, #24]
 800b50a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b50c:	2f78      	cmp	r7, #120	@ 0x78
 800b50e:	4691      	mov	r9, r2
 800b510:	4680      	mov	r8, r0
 800b512:	460c      	mov	r4, r1
 800b514:	469a      	mov	sl, r3
 800b516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b51a:	d807      	bhi.n	800b52c <_printf_i+0x28>
 800b51c:	2f62      	cmp	r7, #98	@ 0x62
 800b51e:	d80a      	bhi.n	800b536 <_printf_i+0x32>
 800b520:	2f00      	cmp	r7, #0
 800b522:	f000 80d1 	beq.w	800b6c8 <_printf_i+0x1c4>
 800b526:	2f58      	cmp	r7, #88	@ 0x58
 800b528:	f000 80b8 	beq.w	800b69c <_printf_i+0x198>
 800b52c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b534:	e03a      	b.n	800b5ac <_printf_i+0xa8>
 800b536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b53a:	2b15      	cmp	r3, #21
 800b53c:	d8f6      	bhi.n	800b52c <_printf_i+0x28>
 800b53e:	a101      	add	r1, pc, #4	@ (adr r1, 800b544 <_printf_i+0x40>)
 800b540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b544:	0800b59d 	.word	0x0800b59d
 800b548:	0800b5b1 	.word	0x0800b5b1
 800b54c:	0800b52d 	.word	0x0800b52d
 800b550:	0800b52d 	.word	0x0800b52d
 800b554:	0800b52d 	.word	0x0800b52d
 800b558:	0800b52d 	.word	0x0800b52d
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b52d 	.word	0x0800b52d
 800b564:	0800b52d 	.word	0x0800b52d
 800b568:	0800b52d 	.word	0x0800b52d
 800b56c:	0800b52d 	.word	0x0800b52d
 800b570:	0800b6af 	.word	0x0800b6af
 800b574:	0800b5db 	.word	0x0800b5db
 800b578:	0800b669 	.word	0x0800b669
 800b57c:	0800b52d 	.word	0x0800b52d
 800b580:	0800b52d 	.word	0x0800b52d
 800b584:	0800b6d1 	.word	0x0800b6d1
 800b588:	0800b52d 	.word	0x0800b52d
 800b58c:	0800b5db 	.word	0x0800b5db
 800b590:	0800b52d 	.word	0x0800b52d
 800b594:	0800b52d 	.word	0x0800b52d
 800b598:	0800b671 	.word	0x0800b671
 800b59c:	6833      	ldr	r3, [r6, #0]
 800b59e:	1d1a      	adds	r2, r3, #4
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6032      	str	r2, [r6, #0]
 800b5a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e09c      	b.n	800b6ea <_printf_i+0x1e6>
 800b5b0:	6833      	ldr	r3, [r6, #0]
 800b5b2:	6820      	ldr	r0, [r4, #0]
 800b5b4:	1d19      	adds	r1, r3, #4
 800b5b6:	6031      	str	r1, [r6, #0]
 800b5b8:	0606      	lsls	r6, r0, #24
 800b5ba:	d501      	bpl.n	800b5c0 <_printf_i+0xbc>
 800b5bc:	681d      	ldr	r5, [r3, #0]
 800b5be:	e003      	b.n	800b5c8 <_printf_i+0xc4>
 800b5c0:	0645      	lsls	r5, r0, #25
 800b5c2:	d5fb      	bpl.n	800b5bc <_printf_i+0xb8>
 800b5c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5c8:	2d00      	cmp	r5, #0
 800b5ca:	da03      	bge.n	800b5d4 <_printf_i+0xd0>
 800b5cc:	232d      	movs	r3, #45	@ 0x2d
 800b5ce:	426d      	negs	r5, r5
 800b5d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5d4:	4858      	ldr	r0, [pc, #352]	@ (800b738 <_printf_i+0x234>)
 800b5d6:	230a      	movs	r3, #10
 800b5d8:	e011      	b.n	800b5fe <_printf_i+0xfa>
 800b5da:	6821      	ldr	r1, [r4, #0]
 800b5dc:	6833      	ldr	r3, [r6, #0]
 800b5de:	0608      	lsls	r0, r1, #24
 800b5e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5e4:	d402      	bmi.n	800b5ec <_printf_i+0xe8>
 800b5e6:	0649      	lsls	r1, r1, #25
 800b5e8:	bf48      	it	mi
 800b5ea:	b2ad      	uxthmi	r5, r5
 800b5ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5ee:	4852      	ldr	r0, [pc, #328]	@ (800b738 <_printf_i+0x234>)
 800b5f0:	6033      	str	r3, [r6, #0]
 800b5f2:	bf14      	ite	ne
 800b5f4:	230a      	movne	r3, #10
 800b5f6:	2308      	moveq	r3, #8
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5fe:	6866      	ldr	r6, [r4, #4]
 800b600:	60a6      	str	r6, [r4, #8]
 800b602:	2e00      	cmp	r6, #0
 800b604:	db05      	blt.n	800b612 <_printf_i+0x10e>
 800b606:	6821      	ldr	r1, [r4, #0]
 800b608:	432e      	orrs	r6, r5
 800b60a:	f021 0104 	bic.w	r1, r1, #4
 800b60e:	6021      	str	r1, [r4, #0]
 800b610:	d04b      	beq.n	800b6aa <_printf_i+0x1a6>
 800b612:	4616      	mov	r6, r2
 800b614:	fbb5 f1f3 	udiv	r1, r5, r3
 800b618:	fb03 5711 	mls	r7, r3, r1, r5
 800b61c:	5dc7      	ldrb	r7, [r0, r7]
 800b61e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b622:	462f      	mov	r7, r5
 800b624:	42bb      	cmp	r3, r7
 800b626:	460d      	mov	r5, r1
 800b628:	d9f4      	bls.n	800b614 <_printf_i+0x110>
 800b62a:	2b08      	cmp	r3, #8
 800b62c:	d10b      	bne.n	800b646 <_printf_i+0x142>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	07df      	lsls	r7, r3, #31
 800b632:	d508      	bpl.n	800b646 <_printf_i+0x142>
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	6861      	ldr	r1, [r4, #4]
 800b638:	4299      	cmp	r1, r3
 800b63a:	bfde      	ittt	le
 800b63c:	2330      	movle	r3, #48	@ 0x30
 800b63e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b642:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b646:	1b92      	subs	r2, r2, r6
 800b648:	6122      	str	r2, [r4, #16]
 800b64a:	f8cd a000 	str.w	sl, [sp]
 800b64e:	464b      	mov	r3, r9
 800b650:	aa03      	add	r2, sp, #12
 800b652:	4621      	mov	r1, r4
 800b654:	4640      	mov	r0, r8
 800b656:	f7ff fee7 	bl	800b428 <_printf_common>
 800b65a:	3001      	adds	r0, #1
 800b65c:	d14a      	bne.n	800b6f4 <_printf_i+0x1f0>
 800b65e:	f04f 30ff 	mov.w	r0, #4294967295
 800b662:	b004      	add	sp, #16
 800b664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b668:	6823      	ldr	r3, [r4, #0]
 800b66a:	f043 0320 	orr.w	r3, r3, #32
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	4832      	ldr	r0, [pc, #200]	@ (800b73c <_printf_i+0x238>)
 800b672:	2778      	movs	r7, #120	@ 0x78
 800b674:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	6831      	ldr	r1, [r6, #0]
 800b67c:	061f      	lsls	r7, r3, #24
 800b67e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b682:	d402      	bmi.n	800b68a <_printf_i+0x186>
 800b684:	065f      	lsls	r7, r3, #25
 800b686:	bf48      	it	mi
 800b688:	b2ad      	uxthmi	r5, r5
 800b68a:	6031      	str	r1, [r6, #0]
 800b68c:	07d9      	lsls	r1, r3, #31
 800b68e:	bf44      	itt	mi
 800b690:	f043 0320 	orrmi.w	r3, r3, #32
 800b694:	6023      	strmi	r3, [r4, #0]
 800b696:	b11d      	cbz	r5, 800b6a0 <_printf_i+0x19c>
 800b698:	2310      	movs	r3, #16
 800b69a:	e7ad      	b.n	800b5f8 <_printf_i+0xf4>
 800b69c:	4826      	ldr	r0, [pc, #152]	@ (800b738 <_printf_i+0x234>)
 800b69e:	e7e9      	b.n	800b674 <_printf_i+0x170>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	f023 0320 	bic.w	r3, r3, #32
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	e7f6      	b.n	800b698 <_printf_i+0x194>
 800b6aa:	4616      	mov	r6, r2
 800b6ac:	e7bd      	b.n	800b62a <_printf_i+0x126>
 800b6ae:	6833      	ldr	r3, [r6, #0]
 800b6b0:	6825      	ldr	r5, [r4, #0]
 800b6b2:	6961      	ldr	r1, [r4, #20]
 800b6b4:	1d18      	adds	r0, r3, #4
 800b6b6:	6030      	str	r0, [r6, #0]
 800b6b8:	062e      	lsls	r6, r5, #24
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	d501      	bpl.n	800b6c2 <_printf_i+0x1be>
 800b6be:	6019      	str	r1, [r3, #0]
 800b6c0:	e002      	b.n	800b6c8 <_printf_i+0x1c4>
 800b6c2:	0668      	lsls	r0, r5, #25
 800b6c4:	d5fb      	bpl.n	800b6be <_printf_i+0x1ba>
 800b6c6:	8019      	strh	r1, [r3, #0]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	e7bc      	b.n	800b64a <_printf_i+0x146>
 800b6d0:	6833      	ldr	r3, [r6, #0]
 800b6d2:	1d1a      	adds	r2, r3, #4
 800b6d4:	6032      	str	r2, [r6, #0]
 800b6d6:	681e      	ldr	r6, [r3, #0]
 800b6d8:	6862      	ldr	r2, [r4, #4]
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7f4 fe07 	bl	80002f0 <memchr>
 800b6e2:	b108      	cbz	r0, 800b6e8 <_printf_i+0x1e4>
 800b6e4:	1b80      	subs	r0, r0, r6
 800b6e6:	6060      	str	r0, [r4, #4]
 800b6e8:	6863      	ldr	r3, [r4, #4]
 800b6ea:	6123      	str	r3, [r4, #16]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6f2:	e7aa      	b.n	800b64a <_printf_i+0x146>
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	4632      	mov	r2, r6
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	47d0      	blx	sl
 800b6fe:	3001      	adds	r0, #1
 800b700:	d0ad      	beq.n	800b65e <_printf_i+0x15a>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	079b      	lsls	r3, r3, #30
 800b706:	d413      	bmi.n	800b730 <_printf_i+0x22c>
 800b708:	68e0      	ldr	r0, [r4, #12]
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	4298      	cmp	r0, r3
 800b70e:	bfb8      	it	lt
 800b710:	4618      	movlt	r0, r3
 800b712:	e7a6      	b.n	800b662 <_printf_i+0x15e>
 800b714:	2301      	movs	r3, #1
 800b716:	4632      	mov	r2, r6
 800b718:	4649      	mov	r1, r9
 800b71a:	4640      	mov	r0, r8
 800b71c:	47d0      	blx	sl
 800b71e:	3001      	adds	r0, #1
 800b720:	d09d      	beq.n	800b65e <_printf_i+0x15a>
 800b722:	3501      	adds	r5, #1
 800b724:	68e3      	ldr	r3, [r4, #12]
 800b726:	9903      	ldr	r1, [sp, #12]
 800b728:	1a5b      	subs	r3, r3, r1
 800b72a:	42ab      	cmp	r3, r5
 800b72c:	dcf2      	bgt.n	800b714 <_printf_i+0x210>
 800b72e:	e7eb      	b.n	800b708 <_printf_i+0x204>
 800b730:	2500      	movs	r5, #0
 800b732:	f104 0619 	add.w	r6, r4, #25
 800b736:	e7f5      	b.n	800b724 <_printf_i+0x220>
 800b738:	0800b8b1 	.word	0x0800b8b1
 800b73c:	0800b8c2 	.word	0x0800b8c2

0800b740 <memmove>:
 800b740:	4288      	cmp	r0, r1
 800b742:	b510      	push	{r4, lr}
 800b744:	eb01 0402 	add.w	r4, r1, r2
 800b748:	d902      	bls.n	800b750 <memmove+0x10>
 800b74a:	4284      	cmp	r4, r0
 800b74c:	4623      	mov	r3, r4
 800b74e:	d807      	bhi.n	800b760 <memmove+0x20>
 800b750:	1e43      	subs	r3, r0, #1
 800b752:	42a1      	cmp	r1, r4
 800b754:	d008      	beq.n	800b768 <memmove+0x28>
 800b756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b75a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b75e:	e7f8      	b.n	800b752 <memmove+0x12>
 800b760:	4402      	add	r2, r0
 800b762:	4601      	mov	r1, r0
 800b764:	428a      	cmp	r2, r1
 800b766:	d100      	bne.n	800b76a <memmove+0x2a>
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b76e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b772:	e7f7      	b.n	800b764 <memmove+0x24>

0800b774 <_sbrk_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d06      	ldr	r5, [pc, #24]	@ (800b790 <_sbrk_r+0x1c>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	602b      	str	r3, [r5, #0]
 800b780:	f7f5 fffc 	bl	800177c <_sbrk>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_sbrk_r+0x1a>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_sbrk_r+0x1a>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	24000c64 	.word	0x24000c64

0800b794 <memcpy>:
 800b794:	440a      	add	r2, r1
 800b796:	4291      	cmp	r1, r2
 800b798:	f100 33ff 	add.w	r3, r0, #4294967295
 800b79c:	d100      	bne.n	800b7a0 <memcpy+0xc>
 800b79e:	4770      	bx	lr
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7aa:	4291      	cmp	r1, r2
 800b7ac:	d1f9      	bne.n	800b7a2 <memcpy+0xe>
 800b7ae:	bd10      	pop	{r4, pc}

0800b7b0 <_realloc_r>:
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	4614      	mov	r4, r2
 800b7b8:	460d      	mov	r5, r1
 800b7ba:	b921      	cbnz	r1, 800b7c6 <_realloc_r+0x16>
 800b7bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	f7ff bc4d 	b.w	800b060 <_malloc_r>
 800b7c6:	b92a      	cbnz	r2, 800b7d4 <_realloc_r+0x24>
 800b7c8:	f7ff fbde 	bl	800af88 <_free_r>
 800b7cc:	4625      	mov	r5, r4
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d4:	f000 f81a 	bl	800b80c <_malloc_usable_size_r>
 800b7d8:	4284      	cmp	r4, r0
 800b7da:	4606      	mov	r6, r0
 800b7dc:	d802      	bhi.n	800b7e4 <_realloc_r+0x34>
 800b7de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7e2:	d8f4      	bhi.n	800b7ce <_realloc_r+0x1e>
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	f7ff fc3a 	bl	800b060 <_malloc_r>
 800b7ec:	4680      	mov	r8, r0
 800b7ee:	b908      	cbnz	r0, 800b7f4 <_realloc_r+0x44>
 800b7f0:	4645      	mov	r5, r8
 800b7f2:	e7ec      	b.n	800b7ce <_realloc_r+0x1e>
 800b7f4:	42b4      	cmp	r4, r6
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	bf28      	it	cs
 800b7fc:	4632      	movcs	r2, r6
 800b7fe:	f7ff ffc9 	bl	800b794 <memcpy>
 800b802:	4629      	mov	r1, r5
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff fbbf 	bl	800af88 <_free_r>
 800b80a:	e7f1      	b.n	800b7f0 <_realloc_r+0x40>

0800b80c <_malloc_usable_size_r>:
 800b80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b810:	1f18      	subs	r0, r3, #4
 800b812:	2b00      	cmp	r3, #0
 800b814:	bfbc      	itt	lt
 800b816:	580b      	ldrlt	r3, [r1, r0]
 800b818:	18c0      	addlt	r0, r0, r3
 800b81a:	4770      	bx	lr

0800b81c <_init>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	bf00      	nop
 800b820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b822:	bc08      	pop	{r3}
 800b824:	469e      	mov	lr, r3
 800b826:	4770      	bx	lr

0800b828 <_fini>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	bf00      	nop
 800b82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82e:	bc08      	pop	{r3}
 800b830:	469e      	mov	lr, r3
 800b832:	4770      	bx	lr
