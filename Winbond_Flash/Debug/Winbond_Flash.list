
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb44  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800bde4  0800bde4  0000cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bef0  0800bef0  0000cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bef8  0800bef8  0000cef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800befc  0800befc  0000cefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000008a0  24000000  0800bf00  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000450  240008a0  0800c7a0  0000d8a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000cf0  0800c7a0  0000dcf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d8a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017d20  00000000  00000000  0000d8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030f5  00000000  00000000  000255ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef8  00000000  00000000  000286e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b72  00000000  00000000  000295e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003903b  00000000  00000000  0002a152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000173ef  00000000  00000000  0006318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160de8  00000000  00000000  0007a57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001db364  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004230  00000000  00000000  001db3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001df5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240008a0 	.word	0x240008a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bdcc 	.word	0x0800bdcc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240008a4 	.word	0x240008a4
 80002dc:	0800bdcc 	.word	0x0800bdcc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <Read_Register>:

//pointer
uint8_t* Buffer=&write_data[0];


void Read_Register(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <Read_Register+0x50>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f985 	bl	80009d4 <Read_Status_Register>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <Read_Register+0x54>)
 80006d0:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80006d2:	2064      	movs	r0, #100	@ 0x64
 80006d4:	f000 fb7e 	bl	8000dd4 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <Read_Register+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f979 	bl	80009d4 <Read_Status_Register>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <Read_Register+0x5c>)
 80006e8:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80006ea:	2064      	movs	r0, #100	@ 0x64
 80006ec:	f000 fb72 	bl	8000dd4 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <Read_Register+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f96d 	bl	80009d4 <Read_Status_Register>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <Read_Register+0x64>)
 8000700:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000702:	2064      	movs	r0, #100	@ 0x64
 8000704:	f000 fb66 	bl	8000dd4 <delay_ns>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000808 	.word	0x24000808
 8000710:	240008bc 	.word	0x240008bc
 8000714:	24000809 	.word	0x24000809
 8000718:	240008bd 	.word	0x240008bd
 800071c:	2400080a 	.word	0x2400080a
 8000720:	240008be 	.word	0x240008be

08000724 <Write_Data>:

void Write_Data(uint8_t* data, uint16_t lenght){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <Write_Data+0x74>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <Write_Data+0x22>
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <Write_Data+0x78>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <Write_Data+0x22>
		Block_Erase(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fb11 	bl	8000d68 <Block_Erase>
	}
	uint16_t count=0;
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800074a:	e01c      	b.n	8000786 <Write_Data+0x62>
		*Buffer=*data;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <Write_Data+0x7c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	701a      	strb	r2, [r3, #0]
		Buffer++;
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <Write_Data+0x7c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a10      	ldr	r2, [pc, #64]	@ (80007a0 <Write_Data+0x7c>)
 800075e:	6013      	str	r3, [r2, #0]
		data++;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <Write_Data+0x78>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <Write_Data+0x78>)
 8000770:	801a      	strh	r2, [r3, #0]
		count++;
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	3301      	adds	r3, #1
 8000776:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Write_Data+0x78>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000780:	d301      	bcc.n	8000786 <Write_Data+0x62>
			Write_to_page();
 8000782:	f000 f80f 	bl	80007a4 <Write_to_page>
	while(count<lenght){
 8000786:	89fa      	ldrh	r2, [r7, #14]
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3de      	bcc.n	800074c <Write_Data+0x28>
		}
	}
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240008c2 	.word	0x240008c2
 800079c:	240008c0 	.word	0x240008c0
 80007a0:	24000800 	.word	0x24000800

080007a4 <Write_to_page>:
			Write_to_page();
		}
	}
}

void Write_to_page(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <Write_to_page+0x50>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4912      	ldr	r1, [pc, #72]	@ (80007f8 <Write_to_page+0x54>)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f99f 	bl	8000af4 <Write_Data_Buffer>
	Write_Data_Flash(Page_Index);
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <Write_to_page+0x58>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f9d8 	bl	8000b70 <Write_Data_Flash>
	Page_Index++;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <Write_to_page+0x58>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <Write_to_page+0x58>)
 80007ca:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <Write_to_page+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	801a      	strh	r2, [r3, #0]
	Buffer=&write_data[0];
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <Write_to_page+0x5c>)
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <Write_to_page+0x54>)
 80007d6:	601a      	str	r2, [r3, #0]
	memset(write_data, 0xFF, sizeof(write_data));
 80007d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007dc:	21ff      	movs	r1, #255	@ 0xff
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <Write_to_page+0x54>)
 80007e0:	f00a fe76 	bl	800b4d0 <memset>
	Automatic_Block_Managment(Page_Index);
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <Write_to_page+0x58>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f80b 	bl	8000804 <Automatic_Block_Managment>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	240008c0 	.word	0x240008c0
 80007f8:	24000000 	.word	0x24000000
 80007fc:	240008c2 	.word	0x240008c2
 8000800:	24000800 	.word	0x24000800

08000804 <Automatic_Block_Managment>:
void Read_Data(uint16_t page, uint8_t* data){
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

void Automatic_Block_Managment(uint16_t Page_Index){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	099b      	lsrs	r3, r3, #6
 8000812:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <Automatic_Block_Managment+0x38>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	89fa      	ldrh	r2, [r7, #14]
 800081a:	429a      	cmp	r2, r3
 800081c:	d007      	beq.n	800082e <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 faa1 	bl	8000d68 <Block_Erase>
		Block_Mem=Block;
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <Automatic_Block_Managment+0x38>)
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 800082c:	e002      	b.n	8000834 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 800082e:	4a03      	ldr	r2, [pc, #12]	@ (800083c <Automatic_Block_Managment+0x38>)
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	8013      	strh	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240008c4 	.word	0x240008c4

08000840 <Chip_Erase>:

void Chip_Erase(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART1_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000846:	4819      	ldr	r0, [pc, #100]	@ (80008ac <Chip_Erase+0x6c>)
 8000848:	f000 faee 	bl	8000e28 <USART1_Printf>
	HAL_UART_Receive(&hcom_uart[COM1], &UART_buffer,1, HAL_MAX_DELAY);
 800084c:	1cf9      	adds	r1, r7, #3
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	2201      	movs	r2, #1
 8000854:	4816      	ldr	r0, [pc, #88]	@ (80008b0 <Chip_Erase+0x70>)
 8000856:	f008 fd6e 	bl	8009336 <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2b59      	cmp	r3, #89	@ 0x59
 800085e:	d11d      	bne.n	800089c <Chip_Erase+0x5c>
		USART1_Printf("Sletter minne...\r\n");
 8000860:	4814      	ldr	r0, [pc, #80]	@ (80008b4 <Chip_Erase+0x74>)
 8000862:	f000 fae1 	bl	8000e28 <USART1_Printf>
		for(int i = 0; i <= 1024; i++){
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	e009      	b.n	8000880 <Chip_Erase+0x40>
			Block_Erase(i*64);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29b      	uxth	r3, r3
 8000870:	019b      	lsls	r3, r3, #6
 8000872:	b29b      	uxth	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fa77 	bl	8000d68 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3301      	adds	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000886:	ddf1      	ble.n	800086c <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <Chip_Erase+0x78>)
 800088a:	2200      	movs	r2, #0
 800088c:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <Chip_Erase+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
		USART1_Printf("Ferdig\r\n");
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <Chip_Erase+0x80>)
 8000896:	f000 fac7 	bl	8000e28 <USART1_Printf>
	}
	else{
		USART1_Printf("Sletter IKKE minne\r\n");
	}
}
 800089a:	e002      	b.n	80008a2 <Chip_Erase+0x62>
		USART1_Printf("Sletter IKKE minne\r\n");
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <Chip_Erase+0x84>)
 800089e:	f000 fac3 	bl	8000e28 <USART1_Printf>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	0800bde4 	.word	0x0800bde4
 80008b0:	24000b10 	.word	0x24000b10
 80008b4:	0800be18 	.word	0x0800be18
 80008b8:	240008c0 	.word	0x240008c0
 80008bc:	240008c2 	.word	0x240008c2
 80008c0:	0800be2c 	.word	0x0800be2c
 80008c4:	0800be38 	.word	0x0800be38

080008c8 <W25N_WaitForReady>:
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 80008cc:	2064      	movs	r0, #100	@ 0x64
 80008ce:	f000 fa81 	bl	8000dd4 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80008d2:	e002      	b.n	80008da <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 80008d4:	2064      	movs	r0, #100	@ 0x64
 80008d6:	f000 fa7d 	bl	8000dd4 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <W25N_WaitForReady+0x2c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f878 	bl	80009d4 <Read_Status_Register>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f2      	bne.n	80008d4 <W25N_WaitForReady+0xc>
    }
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2400080a 	.word	0x2400080a

080008f8 <Write_Enable>:

void Write_Enable(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	csLOW();
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <Write_Enable+0x30>)
 8000902:	f004 fd3d 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	2201      	movs	r2, #1
 800090a:	4908      	ldr	r1, [pc, #32]	@ (800092c <Write_Enable+0x34>)
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <Write_Enable+0x38>)
 800090e:	f007 fcdb 	bl	80082c8 <HAL_SPI_Transmit>
	csHIGH();
 8000912:	2201      	movs	r2, #1
 8000914:	2110      	movs	r1, #16
 8000916:	4804      	ldr	r0, [pc, #16]	@ (8000928 <Write_Enable+0x30>)
 8000918:	f004 fd32 	bl	8005380 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 800091c:	2064      	movs	r0, #100	@ 0x64
 800091e:	f000 fa59 	bl	8000dd4 <delay_ns>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	58020000 	.word	0x58020000
 800092c:	2400080b 	.word	0x2400080b
 8000930:	240008e8 	.word	0x240008e8

08000934 <Flash_Init>:
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Flash_Init(uint8_t BUF){
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800093e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000942:	f001 fb81 	bl	8002048 <HAL_Delay>
	if(BUF){
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d012      	beq.n	8000972 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <Flash_Init+0x98>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f83f 	bl	80009d4 <Read_Status_Register>
 8000956:	4603      	mov	r3, r0
 8000958:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 800095a:	7bbb      	ldrb	r3, [r7, #14]
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <Flash_Init+0x98>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	7bba      	ldrb	r2, [r7, #14]
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f864 	bl	8000a38 <Write_Status_Register>
 8000970:	e011      	b.n	8000996 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <Flash_Init+0x98>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f82c 	bl	80009d4 <Read_Status_Register>
 800097c:	4603      	mov	r3, r0
 800097e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	f023 0308 	bic.w	r3, r3, #8
 8000986:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <Flash_Init+0x98>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f851 	bl	8000a38 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <Flash_Init+0x9c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f81a 	bl	80009d4 <Read_Status_Register>
 80009a0:	4603      	mov	r3, r0
 80009a2:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 80009a4:	7b7b      	ldrb	r3, [r7, #13]
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80009b2:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <Flash_Init+0x9c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	7b7a      	ldrb	r2, [r7, #13]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f83b 	bl	8000a38 <Write_Status_Register>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	24000809 	.word	0x24000809
 80009d0:	24000808 	.word	0x24000808

080009d4 <Read_Status_Register>:

uint8_t Read_Status_Register(uint8_t SR){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <Read_Status_Register+0x50>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <Read_Status_Register+0x54>)
 80009e4:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <Read_Status_Register+0x54>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	7053      	strb	r3, [r2, #1]
	csLOW();
 80009ec:	2200      	movs	r2, #0
 80009ee:	2110      	movs	r1, #16
 80009f0:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <Read_Status_Register+0x58>)
 80009f2:	f004 fcc5 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 80009f6:	2364      	movs	r3, #100	@ 0x64
 80009f8:	2202      	movs	r2, #2
 80009fa:	490b      	ldr	r1, [pc, #44]	@ (8000a28 <Read_Status_Register+0x54>)
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <Read_Status_Register+0x5c>)
 80009fe:	f007 fc63 	bl	80082c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000a02:	2364      	movs	r3, #100	@ 0x64
 8000a04:	2201      	movs	r2, #1
 8000a06:	490b      	ldr	r1, [pc, #44]	@ (8000a34 <Read_Status_Register+0x60>)
 8000a08:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <Read_Status_Register+0x5c>)
 8000a0a:	f007 fe4b 	bl	80086a4 <HAL_SPI_Receive>
	csHIGH();
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <Read_Status_Register+0x58>)
 8000a14:	f004 fcb4 	bl	8005380 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <Read_Status_Register+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000806 	.word	0x24000806
 8000a28:	240008c8 	.word	0x240008c8
 8000a2c:	58020000 	.word	0x58020000
 8000a30:	240008e8 	.word	0x240008e8
 8000a34:	240008d0 	.word	0x240008d0

08000a38 <Write_Status_Register>:

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <Write_Status_Register+0x4c>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000a56:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2110      	movs	r1, #16
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <Write_Status_Register+0x54>)
 8000a62:	f004 fc8d 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000a66:	2364      	movs	r3, #100	@ 0x64
 8000a68:	2203      	movs	r2, #3
 8000a6a:	4907      	ldr	r1, [pc, #28]	@ (8000a88 <Write_Status_Register+0x50>)
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <Write_Status_Register+0x58>)
 8000a6e:	f007 fc2b 	bl	80082c8 <HAL_SPI_Transmit>
	csHIGH();
 8000a72:	2201      	movs	r2, #1
 8000a74:	2110      	movs	r1, #16
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <Write_Status_Register+0x54>)
 8000a78:	f004 fc82 	bl	8005380 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	24000807 	.word	0x24000807
 8000a88:	240008c8 	.word	0x240008c8
 8000a8c:	58020000 	.word	0x58020000
 8000a90:	240008e8 	.word	0x240008e8

08000a94 <Read_ID>:

uint32_t Read_ID(void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	801a      	strh	r2, [r3, #0]
 8000aa2:	460a      	mov	r2, r1
 8000aa4:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	480f      	ldr	r0, [pc, #60]	@ (8000ae8 <Read_ID+0x54>)
 8000aac:	f004 fc68 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000ab0:	2364      	movs	r3, #100	@ 0x64
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	490d      	ldr	r1, [pc, #52]	@ (8000aec <Read_ID+0x58>)
 8000ab6:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <Read_ID+0x5c>)
 8000ab8:	f007 fc06 	bl	80082c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000abc:	1d39      	adds	r1, r7, #4
 8000abe:	2364      	movs	r3, #100	@ 0x64
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <Read_ID+0x5c>)
 8000ac4:	f007 fdee 	bl	80086a4 <HAL_SPI_Receive>
	csHIGH();
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <Read_ID+0x54>)
 8000ace:	f004 fc57 	bl	8005380 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	041a      	lsls	r2, r3, #16
 8000ad6:	797b      	ldrb	r3, [r7, #5]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	79b9      	ldrb	r1, [r7, #6]
 8000adc:	430b      	orrs	r3, r1
 8000ade:	4313      	orrs	r3, r2
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58020000 	.word	0x58020000
 8000aec:	24000804 	.word	0x24000804
 8000af0:	240008e8 	.word	0x240008e8

08000af4 <Write_Data_Buffer>:

void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	80fb      	strh	r3, [r7, #6]
 8000b00:	4613      	mov	r3, r2
 8000b02:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000b04:	f7ff fef8 	bl	80008f8 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <Write_Data_Buffer+0x6c>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b1a:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b22:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000b24:	2200      	movs	r2, #0
 8000b26:	2110      	movs	r1, #16
 8000b28:	480f      	ldr	r0, [pc, #60]	@ (8000b68 <Write_Data_Buffer+0x74>)
 8000b2a:	f004 fc29 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000b2e:	2364      	movs	r3, #100	@ 0x64
 8000b30:	2203      	movs	r2, #3
 8000b32:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <Write_Data_Buffer+0x70>)
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <Write_Data_Buffer+0x78>)
 8000b36:	f007 fbc7 	bl	80082c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000b3a:	88ba      	ldrh	r2, [r7, #4]
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <Write_Data_Buffer+0x78>)
 8000b44:	f007 fbc0 	bl	80082c8 <HAL_SPI_Transmit>
//	SPI_BUSY = 1;
	csHIGH();
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <Write_Data_Buffer+0x74>)
 8000b4e:	f004 fc17 	bl	8005380 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000b52:	2064      	movs	r0, #100	@ 0x64
 8000b54:	f000 f93e 	bl	8000dd4 <delay_ns>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2400080d 	.word	0x2400080d
 8000b64:	240008c8 	.word	0x240008c8
 8000b68:	58020000 	.word	0x58020000
 8000b6c:	240008e8 	.word	0x240008e8

08000b70 <Write_Data_Flash>:

void Write_Data_Flash(uint16_t Page_Addr){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <Write_Data_Flash+0x58>)
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b80:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b92:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000b9a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <Write_Data_Flash+0x60>)
 8000ba2:	f004 fbed 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000ba6:	2364      	movs	r3, #100	@ 0x64
 8000ba8:	2204      	movs	r2, #4
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <Write_Data_Flash+0x5c>)
 8000bac:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <Write_Data_Flash+0x64>)
 8000bae:	f007 fb8b 	bl	80082c8 <HAL_SPI_Transmit>
	csHIGH();
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <Write_Data_Flash+0x60>)
 8000bb8:	f004 fbe2 	bl	8005380 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000bbc:	f7ff fe84 	bl	80008c8 <W25N_WaitForReady>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2400080e 	.word	0x2400080e
 8000bcc:	240008c8 	.word	0x240008c8
 8000bd0:	58020000 	.word	0x58020000
 8000bd4:	240008e8 	.word	0x240008e8

08000bd8 <Select_Page_Read>:

void Select_Page_Read(uint16_t Page_Addr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <Select_Page_Read+0x58>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000be8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000bfa:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000c02:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <Select_Page_Read+0x60>)
 8000c0a:	f004 fbb9 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	2204      	movs	r2, #4
 8000c12:	4908      	ldr	r1, [pc, #32]	@ (8000c34 <Select_Page_Read+0x5c>)
 8000c14:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <Select_Page_Read+0x64>)
 8000c16:	f007 fb57 	bl	80082c8 <HAL_SPI_Transmit>
	csHIGH();
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <Select_Page_Read+0x60>)
 8000c20:	f004 fbae 	bl	8005380 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000c24:	f7ff fe50 	bl	80008c8 <W25N_WaitForReady>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2400080f 	.word	0x2400080f
 8000c34:	240008c8 	.word	0x240008c8
 8000c38:	58020000 	.word	0x58020000
 8000c3c:	240008e8 	.word	0x240008e8

08000c40 <Read_Data_Cont>:
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
	csHIGH();
}

void Read_Data_Cont(uint16_t len){
 8000c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c44:	b089      	sub	sp, #36	@ 0x24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	80fb      	strh	r3, [r7, #6]
 8000c4c:	466b      	mov	r3, sp
 8000c4e:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ffc1 	bl	8000bd8 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000c56:	88f9      	ldrh	r1, [r7, #6]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	b28b      	uxth	r3, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	4698      	mov	r8, r3
 8000c64:	4691      	mov	r9, r2
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c7a:	b28b      	uxth	r3, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	461c      	mov	r4, r3
 8000c80:	4615      	mov	r5, r2
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	00eb      	lsls	r3, r5, #3
 8000c8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c90:	00e2      	lsls	r2, r4, #3
 8000c92:	460b      	mov	r3, r1
 8000c94:	3307      	adds	r3, #7
 8000c96:	08db      	lsrs	r3, r3, #3
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c9e:	466b      	mov	r3, sp
 8000ca0:	3300      	adds	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <Read_Data_Cont+0x114>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000caa:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000cb2:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <Read_Data_Cont+0x11c>)
 8000cc4:	f004 fb5c 	bl	8005380 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000cc8:	2364      	movs	r3, #100	@ 0x64
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4922      	ldr	r1, [pc, #136]	@ (8000d58 <Read_Data_Cont+0x118>)
 8000cce:	4824      	ldr	r0, [pc, #144]	@ (8000d60 <Read_Data_Cont+0x120>)
 8000cd0:	f007 fafa 	bl	80082c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000cd4:	88fa      	ldrh	r2, [r7, #6]
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	4820      	ldr	r0, [pc, #128]	@ (8000d60 <Read_Data_Cont+0x120>)
 8000cde:	f007 fce1 	bl	80086a4 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3303      	adds	r3, #3
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	330b      	adds	r3, #11
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000cfa:	e018      	b.n	8000d2e <Read_Data_Cont+0xee>
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000cfc:	8bf9      	ldrh	r1, [r7, #30]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <Read_Data_Cont+0x124>)
 8000d04:	f000 f890 	bl	8000e28 <USART1_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	68f9      	ldr	r1, [r7, #12]
 8000d10:	4813      	ldr	r0, [pc, #76]	@ (8000d60 <Read_Data_Cont+0x120>)
 8000d12:	f007 fcc7 	bl	80086a4 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3303      	adds	r3, #3
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	330b      	adds	r3, #11
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	d103      	bne.n	8000d3e <Read_Data_Cont+0xfe>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	7bdb      	ldrb	r3, [r3, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0de      	beq.n	8000cfc <Read_Data_Cont+0xbc>
	}
	csHIGH();
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <Read_Data_Cont+0x11c>)
 8000d44:	f004 fb1c 	bl	8005380 <HAL_GPIO_WritePin>
 8000d48:	46b5      	mov	sp, r6
}
 8000d4a:	bf00      	nop
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d54:	24000810 	.word	0x24000810
 8000d58:	240008c8 	.word	0x240008c8
 8000d5c:	58020000 	.word	0x58020000
 8000d60:	240008e8 	.word	0x240008e8
 8000d64:	0800be50 	.word	0x0800be50

08000d68 <Block_Erase>:

void Block_Erase(uint16_t Page_Addr){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000d72:	f7ff fdc1 	bl	80008f8 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <Block_Erase+0x5c>)
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <Block_Erase+0x60>)
 8000d7c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <Block_Erase+0x60>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <Block_Erase+0x60>)
 8000d8e:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <Block_Erase+0x60>)
 8000d96:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <Block_Erase+0x64>)
 8000d9e:	f004 faef 	bl	8005380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000da2:	2364      	movs	r3, #100	@ 0x64
 8000da4:	2204      	movs	r2, #4
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <Block_Erase+0x60>)
 8000da8:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <Block_Erase+0x68>)
 8000daa:	f007 fa8d 	bl	80082c8 <HAL_SPI_Transmit>
	csHIGH();
 8000dae:	2201      	movs	r2, #1
 8000db0:	2110      	movs	r1, #16
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <Block_Erase+0x64>)
 8000db4:	f004 fae4 	bl	8005380 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000db8:	f7ff fd86 	bl	80008c8 <W25N_WaitForReady>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400080c 	.word	0x2400080c
 8000dc8:	240008c8 	.word	0x240008c8
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	240008e8 	.word	0x240008e8

08000dd4 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <delay_ns+0x48>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0a5b      	lsrs	r3, r3, #9
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <delay_ns+0x4c>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	09db      	lsrs	r3, r3, #7
 8000dea:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <delay_ns+0x50>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000dfc:	bf00      	nop
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <delay_ns+0x50>)
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f8      	bhi.n	8000dfe <delay_ns+0x2a>
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	24000824 	.word	0x24000824
 8000e20:	00044b83 	.word	0x00044b83
 8000e24:	e0001000 	.word	0xe0001000

08000e28 <USART1_Printf>:

void USART1_Printf(const char *format, ...) {
 8000e28:	b40f      	push	{r0, r1, r2, r3}
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b0a2      	sub	sp, #136	@ 0x88
 8000e2e:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000e30:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e34:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e36:	f107 0008 	add.w	r0, r7, #8
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	f00a fb37 	bl	800b4b4 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fa48 	bl	80002e0 <strlen>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	f107 0108 	add.w	r1, r7, #8
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <USART1_Printf+0x48>)
 8000e5e:	f008 f9dc 	bl	800921a <HAL_UART_Transmit>
}
 8000e62:	bf00      	nop
 8000e64:	3788      	adds	r7, #136	@ 0x88
 8000e66:	46bd      	mov	sp, r7
 8000e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e6c:	b004      	add	sp, #16
 8000e6e:	4770      	bx	lr
 8000e70:	24000b10 	.word	0x24000b10

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e78:	f001 f854 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7c:	f000 f890 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f000 f9d4 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e84:	f000 f9aa 	bl	80011dc <MX_DMA_Init>
  MX_SPI1_Init();
 8000e88:	f000 f906 	bl	8001098 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e8c:	f000 f95a 	bl	8001144 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 fe55 	bl	8001b40 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 fe52 	bl	8001b40 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f000 fe4f 	bl	8001b40 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 feeb 	bl	8001c80 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000eaa:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <main+0x108>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <main+0x108>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <main+0x108>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <main+0x108>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <main+0x108>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000eca:	492c      	ldr	r1, [pc, #176]	@ (8000f7c <main+0x108>)
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 ff67 	bl	8001da0 <BSP_COM_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <main+0x68>
  {
    Error_Handler();
 8000ed8:	f000 fa2e 	bl	8001338 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <main+0x10c>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	@ (8000f80 <main+0x10c>)
 8000ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee6:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <main+0x110>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a25      	ldr	r2, [pc, #148]	@ (8000f84 <main+0x110>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 8000ef4:	220a      	movs	r2, #10
 8000ef6:	4924      	ldr	r1, [pc, #144]	@ (8000f88 <main+0x114>)
 8000ef8:	4824      	ldr	r0, [pc, #144]	@ (8000f8c <main+0x118>)
 8000efa:	f008 fae5 	bl	80094c8 <HAL_UART_Receive_DMA>
  Flash_Init(0);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fd18 	bl	8000934 <Flash_Init>
  ID=Read_ID();
 8000f04:	f7ff fdc6 	bl	8000a94 <Read_ID>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a21      	ldr	r2, [pc, #132]	@ (8000f90 <main+0x11c>)
 8000f0c:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	  printf("CANID:%u,DATA:%u;\r\n", CAN_ID_TEST, (unsigned int)CAN_DATA);
//	  CAN_DATA++;
	  Read_Register();
 8000f0e:	f7ff fbd5 	bl	80006bc <Read_Register>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000f12:	2364      	movs	r3, #100	@ 0x64
 8000f14:	2201      	movs	r2, #1
 8000f16:	491f      	ldr	r1, [pc, #124]	@ (8000f94 <main+0x120>)
 8000f18:	481f      	ldr	r0, [pc, #124]	@ (8000f98 <main+0x124>)
 8000f1a:	f008 fa0c 	bl	8009336 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <main+0x120>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b31      	cmp	r3, #49	@ 0x31
 8000f24:	d105      	bne.n	8000f32 <main+0xbe>
		  Read_Data_Cont(16);
 8000f26:	2010      	movs	r0, #16
 8000f28:	f7ff fe8a 	bl	8000c40 <Read_Data_Cont>
//		  Read_Data(15, Read_data);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
//		  Read_Data(1, &Read_data[0]);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
		  command = 0;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <main+0x120>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <main+0x120>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b32      	cmp	r3, #50	@ 0x32
 8000f38:	d108      	bne.n	8000f4c <main+0xd8>
		  Start_Flight_Recording=1;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <main+0x128>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fe73 	bl	8001c2c <BSP_LED_Toggle>
		  command=0;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <main+0x120>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <main+0x120>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b33      	cmp	r3, #51	@ 0x33
 8000f52:	d108      	bne.n	8000f66 <main+0xf2>
		  Start_Flight_Recording=0;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <main+0x128>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_GREEN);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 fe66 	bl	8001c2c <BSP_LED_Toggle>
		  command=0;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <main+0x120>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <main+0x120>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b34      	cmp	r3, #52	@ 0x34
 8000f6c:	d1cf      	bne.n	8000f0e <main+0x9a>
		  Chip_Erase();
 8000f6e:	f7ff fc67 	bl	8000840 <Chip_Erase>
		  command=0;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <main+0x120>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8000f78:	e7c9      	b.n	8000f0e <main+0x9a>
 8000f7a:	bf00      	nop
 8000f7c:	240008d8 	.word	0x240008d8
 8000f80:	e000edf0 	.word	0xe000edf0
 8000f84:	e0001000 	.word	0xe0001000
 8000f88:	24000814 	.word	0x24000814
 8000f8c:	240009e8 	.word	0x240009e8
 8000f90:	24000af4 	.word	0x24000af4
 8000f94:	24000af8 	.word	0x24000af8
 8000f98:	24000b10 	.word	0x24000b10
 8000f9c:	24000af9 	.word	0x24000af9

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09c      	sub	sp, #112	@ 0x70
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000faa:	224c      	movs	r2, #76	@ 0x4c
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00a fa8e 	bl	800b4d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00a fa88 	bl	800b4d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f004 fa11 	bl	80053e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <SystemClock_Config+0xf0>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a30      	ldr	r2, [pc, #192]	@ (8001090 <SystemClock_Config+0xf0>)
 8000fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001090 <SystemClock_Config+0xf0>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8001094 <SystemClock_Config+0xf4>)
 8000fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8001094 <SystemClock_Config+0xf4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fec:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <SystemClock_Config+0xf4>)
 8000fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ff8:	bf00      	nop
 8000ffa:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <SystemClock_Config+0xf0>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001006:	d1f8      	bne.n	8000ffa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800100c:	2301      	movs	r3, #1
 800100e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001018:	2300      	movs	r3, #0
 800101a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001020:	233c      	movs	r3, #60	@ 0x3c
 8001022:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001024:	2302      	movs	r3, #2
 8001026:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001028:	2305      	movs	r3, #5
 800102a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800102c:	2302      	movs	r3, #2
 800102e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001030:	230c      	movs	r3, #12
 8001032:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001034:	2300      	movs	r3, #0
 8001036:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fa0b 	bl	800545c <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800104c:	f000 f974 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	233f      	movs	r3, #63	@ 0x3f
 8001052:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2303      	movs	r3, #3
 8001056:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800105c:	2308      	movs	r3, #8
 800105e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001060:	2340      	movs	r3, #64	@ 0x40
 8001062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001064:	2340      	movs	r3, #64	@ 0x40
 8001066:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001068:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800106e:	2340      	movs	r3, #64	@ 0x40
 8001070:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2104      	movs	r1, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f004 fe4a 	bl	8005d10 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001082:	f000 f959 	bl	8001338 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3770      	adds	r7, #112	@ 0x70
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	58024800 	.word	0x58024800
 8001094:	58000400 	.word	0x58000400

08001098 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <MX_SPI1_Init+0xa4>)
 800109e:	4a28      	ldr	r2, [pc, #160]	@ (8001140 <MX_SPI1_Init+0xa8>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010b2:	2207      	movs	r2, #7
 80010b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010cc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_SPI1_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_SPI1_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_SPI1_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_SPI1_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_SPI1_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_SPI1_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_SPI1_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_SPI1_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_SPI1_Init+0xa4>)
 800112a:	f006 ffa9 	bl	8008080 <HAL_SPI_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001134:	f000 f900 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	240008e8 	.word	0x240008e8
 8001140:	40013000 	.word	0x40013000

08001144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <MX_USART1_UART_Init+0x94>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118c:	4811      	ldr	r0, [pc, #68]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 800118e:	f007 fff4 	bl	800917a <HAL_UART_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001198:	f000 f8ce 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 80011a0:	f00a f88f 	bl	800b2c2 <HAL_UARTEx_SetTxFifoThreshold>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011aa:	f000 f8c5 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ae:	2100      	movs	r1, #0
 80011b0:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 80011b2:	f00a f8c4 	bl	800b33e <HAL_UARTEx_SetRxFifoThreshold>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011bc:	f000 f8bc 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_USART1_UART_Init+0x90>)
 80011c2:	f00a f845 	bl	800b250 <HAL_UARTEx_DisableFifoMode>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011cc:	f000 f8b4 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	240009e8 	.word	0x240009e8
 80011d8:	40011000 	.word	0x40011000

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <MX_DMA_Init+0x4c>)
 80011e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <MX_DMA_Init+0x4c>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <MX_DMA_Init+0x4c>)
 80011f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200b      	movs	r0, #11
 8001206:	f001 f82a 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800120a:	200b      	movs	r0, #11
 800120c:	f001 f841 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	200c      	movs	r0, #12
 8001216:	f001 f822 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800121a:	200c      	movs	r0, #12
 800121c:	f001 f839 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b3a      	ldr	r3, [pc, #232]	@ (800132c <MX_GPIO_Init+0x100>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	4a38      	ldr	r2, [pc, #224]	@ (800132c <MX_GPIO_Init+0x100>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001252:	4b36      	ldr	r3, [pc, #216]	@ (800132c <MX_GPIO_Init+0x100>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <MX_GPIO_Init+0x100>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	4a31      	ldr	r2, [pc, #196]	@ (800132c <MX_GPIO_Init+0x100>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001270:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <MX_GPIO_Init+0x100>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <MX_GPIO_Init+0x100>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	4a29      	ldr	r2, [pc, #164]	@ (800132c <MX_GPIO_Init+0x100>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128e:	4b27      	ldr	r3, [pc, #156]	@ (800132c <MX_GPIO_Init+0x100>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b23      	ldr	r3, [pc, #140]	@ (800132c <MX_GPIO_Init+0x100>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	4a22      	ldr	r2, [pc, #136]	@ (800132c <MX_GPIO_Init+0x100>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <MX_GPIO_Init+0x100>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <MX_GPIO_Init+0x100>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <MX_GPIO_Init+0x100>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <MX_GPIO_Init+0x100>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2110      	movs	r1, #16
 80012dc:	4814      	ldr	r0, [pc, #80]	@ (8001330 <MX_GPIO_Init+0x104>)
 80012de:	f004 f84f 	bl	8005380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2102      	movs	r1, #2
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <MX_GPIO_Init+0x108>)
 80012e8:	f004 f84a 	bl	8005380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80012ec:	2310      	movs	r3, #16
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	@ (8001330 <MX_GPIO_Init+0x104>)
 8001304:	f003 fe8c 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001308:	2302      	movs	r3, #2
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_GPIO_Init+0x108>)
 8001320:	f003 fe7e 	bl	8005020 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58024400 	.word	0x58024400
 8001330:	58020000 	.word	0x58020000
 8001334:	58021000 	.word	0x58021000

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_MspInit+0x30>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001354:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <HAL_MspInit+0x30>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_MspInit+0x30>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	58024400 	.word	0x58024400

0800137c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0bc      	sub	sp, #240	@ 0xf0
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	22c0      	movs	r2, #192	@ 0xc0
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00a f897 	bl	800b4d0 <memset>
  if(hspi->Instance==SPI1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a53      	ldr	r2, [pc, #332]	@ (80014f4 <HAL_SPI_MspInit+0x178>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	f040 809f 	bne.w	80014ec <HAL_SPI_MspInit+0x170>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 f830 	bl	8006428 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80013ce:	f7ff ffb3 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d2:	4b49      	ldr	r3, [pc, #292]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 80013d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013d8:	4a47      	ldr	r2, [pc, #284]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 80013da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013e2:	4b45      	ldr	r3, [pc, #276]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 80013e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	4a40      	ldr	r2, [pc, #256]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001400:	4b3d      	ldr	r3, [pc, #244]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	4a38      	ldr	r2, [pc, #224]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141e:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <HAL_SPI_MspInit+0x17c>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800142c:	2360      	movs	r3, #96	@ 0x60
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001444:	2305      	movs	r3, #5
 8001446:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800144e:	4619      	mov	r1, r3
 8001450:	482a      	ldr	r0, [pc, #168]	@ (80014fc <HAL_SPI_MspInit+0x180>)
 8001452:	f003 fde5 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001456:	2320      	movs	r3, #32
 8001458:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800146e:	2305      	movs	r3, #5
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001478:	4619      	mov	r1, r3
 800147a:	4821      	ldr	r0, [pc, #132]	@ (8001500 <HAL_SPI_MspInit+0x184>)
 800147c:	f003 fdd0 	bl	8005020 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 8001482:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <HAL_SPI_MspInit+0x18c>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 8001488:	2226      	movs	r2, #38	@ 0x26
 800148a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 800148e:	2240      	movs	r2, #64	@ 0x40
 8001490:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 800149a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800149e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014c0:	4810      	ldr	r0, [pc, #64]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014c2:	f000 ff01 	bl	80022c8 <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 80014cc:	f7ff ff34 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80014d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_SPI_MspInit+0x188>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2023      	movs	r0, #35	@ 0x23
 80014e2:	f000 febc 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014e6:	2023      	movs	r0, #35	@ 0x23
 80014e8:	f000 fed3 	bl	8002292 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014ec:	bf00      	nop
 80014ee:	37f0      	adds	r7, #240	@ 0xf0
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40013000 	.word	0x40013000
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020000 	.word	0x58020000
 8001500:	58020400 	.word	0x58020400
 8001504:	24000970 	.word	0x24000970
 8001508:	40020010 	.word	0x40020010

0800150c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0bc      	sub	sp, #240	@ 0xf0
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	22c0      	movs	r2, #192	@ 0xc0
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f009 ffcf 	bl	800b4d0 <memset>
  if(huart->Instance==USART1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a55      	ldr	r2, [pc, #340]	@ (800168c <HAL_UART_MspInit+0x180>)
 8001538:	4293      	cmp	r3, r2
 800153a:	f040 80a3 	bne.w	8001684 <HAL_UART_MspInit+0x178>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800153e:	f04f 0201 	mov.w	r2, #1
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4618      	mov	r0, r3
 8001556:	f004 ff67 	bl	8006428 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001560:	f7ff feea 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001564:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <HAL_UART_MspInit+0x184>)
 8001566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800156a:	4a49      	ldr	r2, [pc, #292]	@ (8001690 <HAL_UART_MspInit+0x184>)
 800156c:	f043 0310 	orr.w	r3, r3, #16
 8001570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001574:	4b46      	ldr	r3, [pc, #280]	@ (8001690 <HAL_UART_MspInit+0x184>)
 8001576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b43      	ldr	r3, [pc, #268]	@ (8001690 <HAL_UART_MspInit+0x184>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	4a41      	ldr	r2, [pc, #260]	@ (8001690 <HAL_UART_MspInit+0x184>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001592:	4b3f      	ldr	r3, [pc, #252]	@ (8001690 <HAL_UART_MspInit+0x184>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_UART_MspInit+0x184>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001690 <HAL_UART_MspInit+0x184>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b0:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <HAL_UART_MspInit+0x184>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80015d8:	2304      	movs	r3, #4
 80015da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015e2:	4619      	mov	r1, r3
 80015e4:	482b      	ldr	r0, [pc, #172]	@ (8001694 <HAL_UART_MspInit+0x188>)
 80015e6:	f003 fd1b 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001604:	2307      	movs	r3, #7
 8001606:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800160e:	4619      	mov	r1, r3
 8001610:	4821      	ldr	r0, [pc, #132]	@ (8001698 <HAL_UART_MspInit+0x18c>)
 8001612:	f003 fd05 	bl	8005020 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001618:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <HAL_UART_MspInit+0x194>)
 800161a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <HAL_UART_MspInit+0x190>)
 800161e:	2229      	movs	r2, #41	@ 0x29
 8001620:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <HAL_UART_MspInit+0x190>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <HAL_UART_MspInit+0x190>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <HAL_UART_MspInit+0x190>)
 800164a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800164e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001656:	4811      	ldr	r0, [pc, #68]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001658:	f000 fe36 	bl	80022c8 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8001662:	f7ff fe69 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <HAL_UART_MspInit+0x190>)
 800166a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800166e:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_UART_MspInit+0x190>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2025      	movs	r0, #37	@ 0x25
 800167a:	f000 fdf0 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800167e:	2025      	movs	r0, #37	@ 0x25
 8001680:	f000 fe07 	bl	8002292 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001684:	bf00      	nop
 8001686:	37f0      	adds	r7, #240	@ 0xf0
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40011000 	.word	0x40011000
 8001690:	58024400 	.word	0x58024400
 8001694:	58020400 	.word	0x58020400
 8001698:	58020000 	.word	0x58020000
 800169c:	24000a7c 	.word	0x24000a7c
 80016a0:	40020028 	.word	0x40020028

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <NMI_Handler+0x4>

080016ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <MemManage_Handler+0x4>

080016bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <UsageFault_Handler+0x4>

080016cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 fc84 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <SysTick_Handler+0x48>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d015      	beq.n	8001734 <SysTick_Handler+0x3c>
	  CLK_SIM++;
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <SysTick_Handler+0x4c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <SysTick_Handler+0x4c>)
 8001710:	6013      	str	r3, [r2, #0]
	  Time++;
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <SysTick_Handler+0x50>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <SysTick_Handler+0x50>)
 800171c:	801a      	strh	r2, [r3, #0]
	  if(Time>=100){
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <SysTick_Handler+0x50>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	2b63      	cmp	r3, #99	@ 0x63
 8001724:	d909      	bls.n	800173a <SysTick_Handler+0x42>
	    	Write_To_Flightdata=1;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <SysTick_Handler+0x54>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
	    	Time=0;
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <SysTick_Handler+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	801a      	strh	r2, [r3, #0]
  }
  else{
	  Time=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001732:	e002      	b.n	800173a <SysTick_Handler+0x42>
	  Time=0;
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <SysTick_Handler+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	801a      	strh	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	24000af9 	.word	0x24000af9
 8001744:	24000b00 	.word	0x24000b00
 8001748:	24000afc 	.word	0x24000afc
 800174c:	24000afa 	.word	0x24000afa

08001750 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <DMA1_Stream0_IRQHandler+0x10>)
 8001756:	f002 f8e1 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	24000970 	.word	0x24000970

08001764 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <DMA1_Stream1_IRQHandler+0x10>)
 800176a:	f002 f8d7 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	24000a7c 	.word	0x24000a7c

08001778 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <SPI1_IRQHandler+0x10>)
 800177e:	f007 fa03 	bl	8008b88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	240008e8 	.word	0x240008e8

0800178c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <USART1_IRQHandler+0x10>)
 8001792:	f007 ff9b 	bl	80096cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	240009e8 	.word	0x240009e8

080017a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 fadd 	bl	8001d64 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_UART_RxCpltCallback>:
//		BSP_LED_Toggle(LED_RED);
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a32      	ldr	r2, [pc, #200]	@ (8001888 <HAL_UART_RxCpltCallback+0xd8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d15d      	bne.n	800187e <HAL_UART_RxCpltCallback+0xce>
		uint8_t Temp[16];

		Temp[0]=0xFF;
 80017c2:	23ff      	movs	r3, #255	@ 0xff
 80017c4:	733b      	strb	r3, [r7, #12]
		Temp[1]=Rx_buffer[0];
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	737b      	strb	r3, [r7, #13]
		Temp[2]=Rx_buffer[1];
 80017cc:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	73bb      	strb	r3, [r7, #14]
		Temp[3]=Rx_buffer[2];
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017d4:	789b      	ldrb	r3, [r3, #2]
 80017d6:	73fb      	strb	r3, [r7, #15]
		Temp[4]=Rx_buffer[3];
 80017d8:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017da:	78db      	ldrb	r3, [r3, #3]
 80017dc:	743b      	strb	r3, [r7, #16]
		Temp[5]=Rx_buffer[4];
 80017de:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	747b      	strb	r3, [r7, #17]
		Temp[6]=Rx_buffer[5];
 80017e4:	4b29      	ldr	r3, [pc, #164]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017e6:	795b      	ldrb	r3, [r3, #5]
 80017e8:	74bb      	strb	r3, [r7, #18]
		Temp[7]=Rx_buffer[6];
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017ec:	799b      	ldrb	r3, [r3, #6]
 80017ee:	74fb      	strb	r3, [r7, #19]
		Temp[8]=Rx_buffer[7];
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017f2:	79db      	ldrb	r3, [r3, #7]
 80017f4:	753b      	strb	r3, [r7, #20]
		Temp[9]=Rx_buffer[8];
 80017f6:	4b25      	ldr	r3, [pc, #148]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017f8:	7a1b      	ldrb	r3, [r3, #8]
 80017fa:	757b      	strb	r3, [r7, #21]
		Temp[10]=Rx_buffer[9];
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 80017fe:	7a5b      	ldrb	r3, [r3, #9]
 8001800:	75bb      	strb	r3, [r7, #22]
		Temp[11]=(uint8_t)(CLK_SIM);
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_UART_RxCpltCallback+0xe0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	75fb      	strb	r3, [r7, #23]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 800180a:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <HAL_UART_RxCpltCallback+0xe0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b2db      	uxtb	r3, r3
 8001812:	763b      	strb	r3, [r7, #24]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <HAL_UART_RxCpltCallback+0xe0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	b2db      	uxtb	r3, r3
 800181c:	767b      	strb	r3, [r7, #25]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <HAL_UART_RxCpltCallback+0xe0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0e1b      	lsrs	r3, r3, #24
 8001824:	b2db      	uxtb	r3, r3
 8001826:	76bb      	strb	r3, [r7, #26]
		Temp[15]=0x00;
 8001828:	2300      	movs	r3, #0
 800182a:	76fb      	strb	r3, [r7, #27]

		if((Start_Flight_Recording==1)&&(Temp[1]==100)){
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_UART_RxCpltCallback+0xe4>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d109      	bne.n	8001848 <HAL_UART_RxCpltCallback+0x98>
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	2b64      	cmp	r3, #100	@ 0x64
 8001838:	d106      	bne.n	8001848 <HAL_UART_RxCpltCallback+0x98>
			Write_Data(&Temp[0], sizeof(Temp));
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe ff6f 	bl	8000724 <Write_Data>
 8001846:	e012      	b.n	800186e <HAL_UART_RxCpltCallback+0xbe>
		}
		else{
			HAL_UART_AbortReceive(&huart1);
 8001848:	4813      	ldr	r0, [pc, #76]	@ (8001898 <HAL_UART_RxCpltCallback+0xe8>)
 800184a:	f007 fe89 	bl	8009560 <HAL_UART_AbortReceive>
			while(huart1.Instance->ISR&0x0020){
 800184e:	e007      	b.n	8001860 <HAL_UART_RxCpltCallback+0xb0>
				uint8_t trash = huart1.Instance->RDR;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_UART_RxCpltCallback+0xe8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	77fb      	strb	r3, [r7, #31]
				trash = huart1.Instance->ISR;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <HAL_UART_RxCpltCallback+0xe8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	77fb      	strb	r3, [r7, #31]
			while(huart1.Instance->ISR&0x0020){
 8001860:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_UART_RxCpltCallback+0xe8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_UART_RxCpltCallback+0xa0>
				(void)trash;
			}
		}

		HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], 10);
 800186e:	220a      	movs	r2, #10
 8001870:	4906      	ldr	r1, [pc, #24]	@ (800188c <HAL_UART_RxCpltCallback+0xdc>)
 8001872:	4809      	ldr	r0, [pc, #36]	@ (8001898 <HAL_UART_RxCpltCallback+0xe8>)
 8001874:	f007 fe28 	bl	80094c8 <HAL_UART_Receive_DMA>
		BSP_LED_Toggle(LED_RED);
 8001878:	2002      	movs	r0, #2
 800187a:	f000 f9d7 	bl	8001c2c <BSP_LED_Toggle>
	}
}
 800187e:	bf00      	nop
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40011000 	.word	0x40011000
 800188c:	24000814 	.word	0x24000814
 8001890:	24000b00 	.word	0x24000b00
 8001894:	24000af9 	.word	0x24000af9
 8001898:	240009e8 	.word	0x240009e8

0800189c <HAL_UART_ErrorCallback>:

/* USART1 Error Callback */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a10      	ldr	r2, [pc, #64]	@ (80018ec <HAL_UART_ErrorCallback+0x50>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d119      	bne.n	80018e2 <HAL_UART_ErrorCallback+0x46>
        uint32_t error = HAL_UART_GetError(huart);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f008 fb02 	bl	8009eb8 <HAL_UART_GetError>
 80018b4:	60f8      	str	r0, [r7, #12]

        if (error & HAL_UART_ERROR_ORE) {
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_UART_ErrorCallback+0x2c>
            // Overrun error occurred
            __HAL_UART_CLEAR_OREFLAG(huart);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2208      	movs	r2, #8
 80018c6:	621a      	str	r2, [r3, #32]
        if (error & HAL_UART_ERROR_PE) {
            // Parity error occurred
        }

        // Restart USART1 DMA Reception in case of an error
        memset(Rx_buffer, 0x00, sizeof(Rx_buffer));
 80018c8:	220f      	movs	r2, #15
 80018ca:	2100      	movs	r1, #0
 80018cc:	4808      	ldr	r0, [pc, #32]	@ (80018f0 <HAL_UART_ErrorCallback+0x54>)
 80018ce:	f009 fdff 	bl	800b4d0 <memset>
        HAL_UART_AbortReceive(&huart1); // Abort current RX DMA transfer
 80018d2:	4808      	ldr	r0, [pc, #32]	@ (80018f4 <HAL_UART_ErrorCallback+0x58>)
 80018d4:	f007 fe44 	bl	8009560 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart1, &Rx_buffer[0], sizeof(Rx_buffer));
 80018d8:	220f      	movs	r2, #15
 80018da:	4905      	ldr	r1, [pc, #20]	@ (80018f0 <HAL_UART_ErrorCallback+0x54>)
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <HAL_UART_ErrorCallback+0x58>)
 80018de:	f007 fdf3 	bl	80094c8 <HAL_UART_Receive_DMA>
    }
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40011000 	.word	0x40011000
 80018f0:	24000814 	.word	0x24000814
 80018f4:	240009e8 	.word	0x240009e8

080018f8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
//	if(hspi->Instance == SPI1){
//		csHIGH();
//		SPI_BUSY = 0;
//		delay_ns(DELAY_NS);
//	}
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001914:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <_sbrk+0x5c>)
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <_sbrk+0x60>)
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <_sbrk+0x64>)
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <_sbrk+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d207      	bcs.n	800194c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800193c:	f009 fdd0 	bl	800b4e0 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	220c      	movs	r2, #12
 8001944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e009      	b.n	8001960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001952:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <_sbrk+0x64>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	24080000 	.word	0x24080000
 800196c:	00000400 	.word	0x00000400
 8001970:	24000b04 	.word	0x24000b04
 8001974:	24000cf0 	.word	0x24000cf0

08001978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800197c:	4b43      	ldr	r3, [pc, #268]	@ (8001a8c <SystemInit+0x114>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001982:	4a42      	ldr	r2, [pc, #264]	@ (8001a8c <SystemInit+0x114>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800198c:	4b40      	ldr	r3, [pc, #256]	@ (8001a90 <SystemInit+0x118>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	2b06      	cmp	r3, #6
 8001996:	d807      	bhi.n	80019a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001998:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <SystemInit+0x118>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 030f 	bic.w	r3, r3, #15
 80019a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001a90 <SystemInit+0x118>)
 80019a2:	f043 0307 	orr.w	r3, r3, #7
 80019a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <SystemInit+0x11c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a39      	ldr	r2, [pc, #228]	@ (8001a94 <SystemInit+0x11c>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019b4:	4b37      	ldr	r3, [pc, #220]	@ (8001a94 <SystemInit+0x11c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019ba:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <SystemInit+0x11c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4935      	ldr	r1, [pc, #212]	@ (8001a94 <SystemInit+0x11c>)
 80019c0:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <SystemInit+0x120>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019c6:	4b32      	ldr	r3, [pc, #200]	@ (8001a90 <SystemInit+0x118>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <SystemInit+0x118>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 030f 	bic.w	r3, r3, #15
 80019da:	4a2d      	ldr	r2, [pc, #180]	@ (8001a90 <SystemInit+0x118>)
 80019dc:	f043 0307 	orr.w	r3, r3, #7
 80019e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <SystemInit+0x11c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <SystemInit+0x11c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <SystemInit+0x11c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <SystemInit+0x11c>)
 80019f6:	4a29      	ldr	r2, [pc, #164]	@ (8001a9c <SystemInit+0x124>)
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <SystemInit+0x11c>)
 80019fc:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <SystemInit+0x128>)
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a00:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <SystemInit+0x11c>)
 8001a02:	4a28      	ldr	r2, [pc, #160]	@ (8001aa4 <SystemInit+0x12c>)
 8001a04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a06:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <SystemInit+0x11c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <SystemInit+0x11c>)
 8001a0e:	4a25      	ldr	r2, [pc, #148]	@ (8001aa4 <SystemInit+0x12c>)
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <SystemInit+0x11c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <SystemInit+0x11c>)
 8001a1a:	4a22      	ldr	r2, [pc, #136]	@ (8001aa4 <SystemInit+0x12c>)
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <SystemInit+0x11c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <SystemInit+0x11c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1a      	ldr	r2, [pc, #104]	@ (8001a94 <SystemInit+0x11c>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <SystemInit+0x11c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <SystemInit+0x130>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <SystemInit+0x134>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a42:	d202      	bcs.n	8001a4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <SystemInit+0x138>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <SystemInit+0x11c>)
 8001a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d113      	bne.n	8001a80 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <SystemInit+0x11c>)
 8001a5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a94 <SystemInit+0x11c>)
 8001a60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a64:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <SystemInit+0x13c>)
 8001a6a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <SystemInit+0x11c>)
 8001a72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a76:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <SystemInit+0x11c>)
 8001a78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	52002000 	.word	0x52002000
 8001a94:	58024400 	.word	0x58024400
 8001a98:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a9c:	02020200 	.word	0x02020200
 8001aa0:	01ff0000 	.word	0x01ff0000
 8001aa4:	01010280 	.word	0x01010280
 8001aa8:	5c001000 	.word	0x5c001000
 8001aac:	ffff0000 	.word	0xffff0000
 8001ab0:	51008108 	.word	0x51008108
 8001ab4:	52004000 	.word	0x52004000

08001ab8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <ExitRun0Mode+0x2c>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <ExitRun0Mode+0x2c>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001ac8:	bf00      	nop
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <ExitRun0Mode+0x2c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f9      	beq.n	8001aca <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	58024800 	.word	0x58024800

08001ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001b24 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001aec:	f7ff ffe4 	bl	8001ab8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001af0:	f7ff ff42 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f009 fce7 	bl	800b4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff f9a9 	bl	8000e74 <main>
  bx  lr
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b2c:	240008a0 	.word	0x240008a0
  ldr r2, =_sidata
 8001b30:	0800bf00 	.word	0x0800bf00
  ldr r2, =_sbss
 8001b34:	240008a0 	.word	0x240008a0
  ldr r4, =_ebss
 8001b38:	24000cf0 	.word	0x24000cf0

08001b3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC3_IRQHandler>
	...

08001b40 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	@ 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d009      	beq.n	8001b68 <BSP_LED_Init+0x28>
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d006      	beq.n	8001b68 <BSP_LED_Init+0x28>
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d003      	beq.n	8001b68 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b60:	f06f 0301 	mvn.w	r3, #1
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b66:	e055      	b.n	8001c14 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b74:	4a2a      	ldr	r2, [pc, #168]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b7e:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	e021      	b.n	8001bd2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d10f      	bne.n	8001bb4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001b94:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9a:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	e00e      	b.n	8001bd2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bba:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <BSP_LED_Init+0xe0>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4a13      	ldr	r2, [pc, #76]	@ (8001c24 <BSP_LED_Init+0xe4>)
 8001bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bda:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <BSP_LED_Init+0xe8>)
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	f107 0218 	add.w	r2, r7, #24
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fa12 	bl	8005020 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <BSP_LED_Init+0xe8>)
 8001c00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <BSP_LED_Init+0xe4>)
 8001c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f003 fbb6 	bl	8005380 <HAL_GPIO_WritePin>
  }

  return ret;
 8001c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3730      	adds	r7, #48	@ 0x30
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	58024400 	.word	0x58024400
 8001c24:	0800be80 	.word	0x0800be80
 8001c28:	24000830 	.word	0x24000830

08001c2c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <BSP_LED_Toggle+0x28>
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d006      	beq.n	8001c54 <BSP_LED_Toggle+0x28>
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d003      	beq.n	8001c54 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c4c:	f06f 0301 	mvn.w	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e00b      	b.n	8001c6c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <BSP_LED_Toggle+0x4c>)
 8001c58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4907      	ldr	r1, [pc, #28]	@ (8001c7c <BSP_LED_Toggle+0x50>)
 8001c60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f003 fba3 	bl	80053b2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	24000830 	.word	0x24000830
 8001c7c:	0800be80 	.word	0x0800be80

08001c80 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001c90:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <BSP_PB_Init+0xcc>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c96:	4a2d      	ldr	r2, [pc, #180]	@ (8001d4c <BSP_PB_Init+0xcc>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <BSP_PB_Init+0xcc>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001cbc:	79bb      	ldrb	r3, [r7, #6]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4a21      	ldr	r2, [pc, #132]	@ (8001d50 <BSP_PB_Init+0xd0>)
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	f107 020c 	add.w	r2, r7, #12
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 f9a3 	bl	8005020 <HAL_GPIO_Init>
 8001cda:	e031      	b.n	8001d40 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001cdc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ce0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <BSP_PB_Init+0xd0>)
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	f107 020c 	add.w	r2, r7, #12
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 f995 	bl	8005020 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <BSP_PB_Init+0xd4>)
 8001cfc:	441a      	add	r2, r3
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4915      	ldr	r1, [pc, #84]	@ (8001d58 <BSP_PB_Init+0xd8>)
 8001d02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f003 f944 	bl	8004f96 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <BSP_PB_Init+0xd4>)
 8001d14:	1898      	adds	r0, r3, r2
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <BSP_PB_Init+0xdc>)
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	f003 f919 	bl	8004f58 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001d26:	2028      	movs	r0, #40	@ 0x28
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <BSP_PB_Init+0xe0>)
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	2200      	movs	r2, #0
 8001d32:	4619      	mov	r1, r3
 8001d34:	f000 fa93 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001d38:	2328      	movs	r3, #40	@ 0x28
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 faa9 	bl	8002292 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	2400083c 	.word	0x2400083c
 8001d54:	24000b08 	.word	0x24000b08
 8001d58:	0800be88 	.word	0x0800be88
 8001d5c:	24000840 	.word	0x24000840
 8001d60:	24000844 	.word	0x24000844

08001d64 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <BSP_PB_IRQHandler+0x20>)
 8001d74:	4413      	add	r3, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 f922 	bl	8004fc0 <HAL_EXTI_IRQHandler>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	24000b08 	.word	0x24000b08

08001d88 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001db6:	f06f 0301 	mvn.w	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e018      	b.n	8001df0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2294      	movs	r2, #148	@ 0x94
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <BSP_COM_Init+0x5c>)
 8001dc8:	4413      	add	r3, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f852 	bl	8001e74 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2294      	movs	r2, #148	@ 0x94
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <BSP_COM_Init+0x5c>)
 8001dda:	4413      	add	r3, r2
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f80e 	bl	8001e00 <MX_USART3_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001dea:	f06f 0303 	mvn.w	r3, #3
 8001dee:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001df0:	68fb      	ldr	r3, [r7, #12]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	24000b10 	.word	0x24000b10

08001e00 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <MX_USART3_Init+0x60>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	895b      	ldrh	r3, [r3, #10]
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	891b      	ldrh	r3, [r3, #8]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	899b      	ldrh	r3, [r3, #12]
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e4c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f007 f993 	bl	800917a <HAL_UART_Init>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2400082c 	.word	0x2400082c

08001e64 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff ff8d 	bl	8001d88 <BSP_PB_Callback>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001e7c:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e82:	4a26      	ldr	r2, [pc, #152]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8c:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ebe:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <COM1_MspInit+0xa8>)
 8001eca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eda:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <COM1_MspInit+0xac>)
 8001ef4:	f003 f894 	bl	8005020 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001ef8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001efc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001f02:	2307      	movs	r3, #7
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <COM1_MspInit+0xac>)
 8001f0e:	f003 f887 	bl	8005020 <HAL_GPIO_Init>
}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	58020c00 	.word	0x58020c00

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	f000 f98c 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f30:	f004 f8a4 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_Init+0x68>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	4913      	ldr	r1, [pc, #76]	@ (8001f90 <HAL_Init+0x6c>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_Init+0x68>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	4a0e      	ldr	r2, [pc, #56]	@ (8001f90 <HAL_Init+0x6c>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <HAL_Init+0x70>)
 8001f66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f68:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <HAL_Init+0x74>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f814 	bl	8001f9c <HAL_InitTick>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e002      	b.n	8001f84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f7e:	f7ff f9e3 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	0800be70 	.word	0x0800be70
 8001f94:	24000828 	.word	0x24000828
 8001f98:	24000824 	.word	0x24000824

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fa4:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_InitTick+0x60>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e021      	b.n	8001ff4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <HAL_InitTick+0x64>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_InitTick+0x60>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f971 	bl	80022ae <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 f93b 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_InitTick+0x68>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2400084c 	.word	0x2400084c
 8002000:	24000824 	.word	0x24000824
 8002004:	24000848 	.word	0x24000848

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	2400084c 	.word	0x2400084c
 800202c:	24000ba4 	.word	0x24000ba4

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	24000ba4 	.word	0x24000ba4

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2400084c 	.word	0x2400084c

08002090 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_GetREVID+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0c1b      	lsrs	r3, r3, #16
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	5c001000 	.word	0x5c001000

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x40>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x40>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00
 80020ec:	05fa0000 	.word	0x05fa0000

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4907      	ldr	r1, [pc, #28]	@ (8002144 <__NVIC_EnableIRQ+0x38>)
 8002126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	@ (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	@ (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	@ 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff29 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff40 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff90 	bl	800219c <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5f 	bl	8002148 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff33 	bl	800210c <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa4 	bl	8002204 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff feae 	bl	8002030 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e316      	b.n	800290e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a66      	ldr	r2, [pc, #408]	@ (8002480 <HAL_DMA_Init+0x1b8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d04a      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a65      	ldr	r2, [pc, #404]	@ (8002484 <HAL_DMA_Init+0x1bc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d045      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a63      	ldr	r2, [pc, #396]	@ (8002488 <HAL_DMA_Init+0x1c0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d040      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a62      	ldr	r2, [pc, #392]	@ (800248c <HAL_DMA_Init+0x1c4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d03b      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a60      	ldr	r2, [pc, #384]	@ (8002490 <HAL_DMA_Init+0x1c8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d036      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a5f      	ldr	r2, [pc, #380]	@ (8002494 <HAL_DMA_Init+0x1cc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d031      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5d      	ldr	r2, [pc, #372]	@ (8002498 <HAL_DMA_Init+0x1d0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02c      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a5c      	ldr	r2, [pc, #368]	@ (800249c <HAL_DMA_Init+0x1d4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d027      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a5a      	ldr	r2, [pc, #360]	@ (80024a0 <HAL_DMA_Init+0x1d8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d022      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a59      	ldr	r2, [pc, #356]	@ (80024a4 <HAL_DMA_Init+0x1dc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d01d      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a57      	ldr	r2, [pc, #348]	@ (80024a8 <HAL_DMA_Init+0x1e0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d018      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a56      	ldr	r2, [pc, #344]	@ (80024ac <HAL_DMA_Init+0x1e4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d013      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a54      	ldr	r2, [pc, #336]	@ (80024b0 <HAL_DMA_Init+0x1e8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00e      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a53      	ldr	r2, [pc, #332]	@ (80024b4 <HAL_DMA_Init+0x1ec>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a51      	ldr	r2, [pc, #324]	@ (80024b8 <HAL_DMA_Init+0x1f0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a50      	ldr	r2, [pc, #320]	@ (80024bc <HAL_DMA_Init+0x1f4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_DMA_Init+0xbc>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_DMA_Init+0xbe>
 8002384:	2300      	movs	r3, #0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 813b 	beq.w	8002602 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a37      	ldr	r2, [pc, #220]	@ (8002480 <HAL_DMA_Init+0x1b8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d04a      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a36      	ldr	r2, [pc, #216]	@ (8002484 <HAL_DMA_Init+0x1bc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d045      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a34      	ldr	r2, [pc, #208]	@ (8002488 <HAL_DMA_Init+0x1c0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d040      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a33      	ldr	r2, [pc, #204]	@ (800248c <HAL_DMA_Init+0x1c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d03b      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a31      	ldr	r2, [pc, #196]	@ (8002490 <HAL_DMA_Init+0x1c8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d036      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a30      	ldr	r2, [pc, #192]	@ (8002494 <HAL_DMA_Init+0x1cc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d031      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002498 <HAL_DMA_Init+0x1d0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02c      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2d      	ldr	r2, [pc, #180]	@ (800249c <HAL_DMA_Init+0x1d4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d027      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	@ (80024a0 <HAL_DMA_Init+0x1d8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d022      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2a      	ldr	r2, [pc, #168]	@ (80024a4 <HAL_DMA_Init+0x1dc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d01d      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <HAL_DMA_Init+0x1e0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d018      	beq.n	800243c <HAL_DMA_Init+0x174>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a27      	ldr	r2, [pc, #156]	@ (80024ac <HAL_DMA_Init+0x1e4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a25      	ldr	r2, [pc, #148]	@ (80024b0 <HAL_DMA_Init+0x1e8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00e      	beq.n	800243c <HAL_DMA_Init+0x174>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a24      	ldr	r2, [pc, #144]	@ (80024b4 <HAL_DMA_Init+0x1ec>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a22      	ldr	r2, [pc, #136]	@ (80024b8 <HAL_DMA_Init+0x1f0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <HAL_DMA_Init+0x1f4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d108      	bne.n	800244e <HAL_DMA_Init+0x186>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e007      	b.n	800245e <HAL_DMA_Init+0x196>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800245e:	e02f      	b.n	80024c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002460:	f7ff fde6 	bl	8002030 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b05      	cmp	r3, #5
 800246c:	d928      	bls.n	80024c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2203      	movs	r2, #3
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e246      	b.n	800290e <HAL_DMA_Init+0x646>
 8002480:	40020010 	.word	0x40020010
 8002484:	40020028 	.word	0x40020028
 8002488:	40020040 	.word	0x40020040
 800248c:	40020058 	.word	0x40020058
 8002490:	40020070 	.word	0x40020070
 8002494:	40020088 	.word	0x40020088
 8002498:	400200a0 	.word	0x400200a0
 800249c:	400200b8 	.word	0x400200b8
 80024a0:	40020410 	.word	0x40020410
 80024a4:	40020428 	.word	0x40020428
 80024a8:	40020440 	.word	0x40020440
 80024ac:	40020458 	.word	0x40020458
 80024b0:	40020470 	.word	0x40020470
 80024b4:	40020488 	.word	0x40020488
 80024b8:	400204a0 	.word	0x400204a0
 80024bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1c8      	bne.n	8002460 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4b83      	ldr	r3, [pc, #524]	@ (80026e8 <HAL_DMA_Init+0x420>)
 80024da:	4013      	ands	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	2b04      	cmp	r3, #4
 8002512:	d107      	bne.n	8002524 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	4313      	orrs	r3, r2
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002524:	4b71      	ldr	r3, [pc, #452]	@ (80026ec <HAL_DMA_Init+0x424>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b71      	ldr	r3, [pc, #452]	@ (80026f0 <HAL_DMA_Init+0x428>)
 800252a:	4013      	ands	r3, r2
 800252c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002530:	d328      	bcc.n	8002584 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b28      	cmp	r3, #40	@ 0x28
 8002538:	d903      	bls.n	8002542 <HAL_DMA_Init+0x27a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002540:	d917      	bls.n	8002572 <HAL_DMA_Init+0x2aa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b3e      	cmp	r3, #62	@ 0x3e
 8002548:	d903      	bls.n	8002552 <HAL_DMA_Init+0x28a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b42      	cmp	r3, #66	@ 0x42
 8002550:	d90f      	bls.n	8002572 <HAL_DMA_Init+0x2aa>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b46      	cmp	r3, #70	@ 0x46
 8002558:	d903      	bls.n	8002562 <HAL_DMA_Init+0x29a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b48      	cmp	r3, #72	@ 0x48
 8002560:	d907      	bls.n	8002572 <HAL_DMA_Init+0x2aa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b4e      	cmp	r3, #78	@ 0x4e
 8002568:	d905      	bls.n	8002576 <HAL_DMA_Init+0x2ae>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b52      	cmp	r3, #82	@ 0x52
 8002570:	d801      	bhi.n	8002576 <HAL_DMA_Init+0x2ae>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_DMA_Init+0x2b0>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002582:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d117      	bne.n	80025de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f002 fb3f 	bl	8004c44 <DMA_CheckFifoParam>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2240      	movs	r2, #64	@ 0x40
 80025d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e197      	b.n	800290e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f002 fa7a 	bl	8004ae0 <DMA_CalcBaseAndBitshift>
 80025ec:	4603      	mov	r3, r0
 80025ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	223f      	movs	r2, #63	@ 0x3f
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e0cd      	b.n	800279e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3b      	ldr	r2, [pc, #236]	@ (80026f4 <HAL_DMA_Init+0x42c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a39      	ldr	r2, [pc, #228]	@ (80026f8 <HAL_DMA_Init+0x430>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a38      	ldr	r2, [pc, #224]	@ (80026fc <HAL_DMA_Init+0x434>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a36      	ldr	r2, [pc, #216]	@ (8002700 <HAL_DMA_Init+0x438>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a35      	ldr	r2, [pc, #212]	@ (8002704 <HAL_DMA_Init+0x43c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a33      	ldr	r2, [pc, #204]	@ (8002708 <HAL_DMA_Init+0x440>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a32      	ldr	r2, [pc, #200]	@ (800270c <HAL_DMA_Init+0x444>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a30      	ldr	r2, [pc, #192]	@ (8002710 <HAL_DMA_Init+0x448>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_DMA_Init+0x38e>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_DMA_Init+0x390>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a24      	ldr	r2, [pc, #144]	@ (80026f4 <HAL_DMA_Init+0x42c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d021      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a22      	ldr	r2, [pc, #136]	@ (80026f8 <HAL_DMA_Init+0x430>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01c      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <HAL_DMA_Init+0x434>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d017      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1f      	ldr	r2, [pc, #124]	@ (8002700 <HAL_DMA_Init+0x438>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d012      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1e      	ldr	r2, [pc, #120]	@ (8002704 <HAL_DMA_Init+0x43c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00d      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <HAL_DMA_Init+0x440>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1b      	ldr	r2, [pc, #108]	@ (800270c <HAL_DMA_Init+0x444>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d003      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <HAL_DMA_Init+0x448>)
 80026aa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_DMA_Init+0x44c>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b40      	cmp	r3, #64	@ 0x40
 80026d2:	d021      	beq.n	8002718 <HAL_DMA_Init+0x450>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b80      	cmp	r3, #128	@ 0x80
 80026da:	d102      	bne.n	80026e2 <HAL_DMA_Init+0x41a>
 80026dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026e0:	e01b      	b.n	800271a <HAL_DMA_Init+0x452>
 80026e2:	2300      	movs	r3, #0
 80026e4:	e019      	b.n	800271a <HAL_DMA_Init+0x452>
 80026e6:	bf00      	nop
 80026e8:	fe10803f 	.word	0xfe10803f
 80026ec:	5c001000 	.word	0x5c001000
 80026f0:	ffff0000 	.word	0xffff0000
 80026f4:	58025408 	.word	0x58025408
 80026f8:	5802541c 	.word	0x5802541c
 80026fc:	58025430 	.word	0x58025430
 8002700:	58025444 	.word	0x58025444
 8002704:	58025458 	.word	0x58025458
 8002708:	5802546c 	.word	0x5802546c
 800270c:	58025480 	.word	0x58025480
 8002710:	58025494 	.word	0x58025494
 8002714:	fffe000f 	.word	0xfffe000f
 8002718:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002730:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002738:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002740:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002748:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b6e      	ldr	r3, [pc, #440]	@ (8002918 <HAL_DMA_Init+0x650>)
 8002760:	4413      	add	r3, r2
 8002762:	4a6e      	ldr	r2, [pc, #440]	@ (800291c <HAL_DMA_Init+0x654>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f002 f9b5 	bl	8004ae0 <DMA_CalcBaseAndBitshift>
 8002776:	4603      	mov	r3, r0
 8002778:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2201      	movs	r2, #1
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e008      	b.n	800279e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2240      	movs	r2, #64	@ 0x40
 8002790:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2203      	movs	r2, #3
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0b7      	b.n	800290e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002920 <HAL_DMA_Init+0x658>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d072      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002924 <HAL_DMA_Init+0x65c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d06d      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002928 <HAL_DMA_Init+0x660>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d068      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5a      	ldr	r2, [pc, #360]	@ (800292c <HAL_DMA_Init+0x664>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d063      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a59      	ldr	r2, [pc, #356]	@ (8002930 <HAL_DMA_Init+0x668>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d05e      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a57      	ldr	r2, [pc, #348]	@ (8002934 <HAL_DMA_Init+0x66c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d059      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a56      	ldr	r2, [pc, #344]	@ (8002938 <HAL_DMA_Init+0x670>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d054      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a54      	ldr	r2, [pc, #336]	@ (800293c <HAL_DMA_Init+0x674>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d04f      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a53      	ldr	r2, [pc, #332]	@ (8002940 <HAL_DMA_Init+0x678>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04a      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a51      	ldr	r2, [pc, #324]	@ (8002944 <HAL_DMA_Init+0x67c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d045      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a50      	ldr	r2, [pc, #320]	@ (8002948 <HAL_DMA_Init+0x680>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d040      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a4e      	ldr	r2, [pc, #312]	@ (800294c <HAL_DMA_Init+0x684>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d03b      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4d      	ldr	r2, [pc, #308]	@ (8002950 <HAL_DMA_Init+0x688>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d036      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a4b      	ldr	r2, [pc, #300]	@ (8002954 <HAL_DMA_Init+0x68c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d031      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a4a      	ldr	r2, [pc, #296]	@ (8002958 <HAL_DMA_Init+0x690>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d02c      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a48      	ldr	r2, [pc, #288]	@ (800295c <HAL_DMA_Init+0x694>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d027      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a47      	ldr	r2, [pc, #284]	@ (8002960 <HAL_DMA_Init+0x698>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a45      	ldr	r2, [pc, #276]	@ (8002964 <HAL_DMA_Init+0x69c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01d      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a44      	ldr	r2, [pc, #272]	@ (8002968 <HAL_DMA_Init+0x6a0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d018      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a42      	ldr	r2, [pc, #264]	@ (800296c <HAL_DMA_Init+0x6a4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a41      	ldr	r2, [pc, #260]	@ (8002970 <HAL_DMA_Init+0x6a8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00e      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3f      	ldr	r2, [pc, #252]	@ (8002974 <HAL_DMA_Init+0x6ac>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3e      	ldr	r2, [pc, #248]	@ (8002978 <HAL_DMA_Init+0x6b0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3c      	ldr	r2, [pc, #240]	@ (800297c <HAL_DMA_Init+0x6b4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Init+0x5ca>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_DMA_Init+0x5cc>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d032      	beq.n	80028fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f002 fa4f 	bl	8004d3c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b80      	cmp	r3, #128	@ 0x80
 80028a4:	d102      	bne.n	80028ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_DMA_Init+0x624>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d80c      	bhi.n	80028ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f002 facc 	bl	8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	e008      	b.n	80028fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	a7fdabf8 	.word	0xa7fdabf8
 800291c:	cccccccd 	.word	0xcccccccd
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8
 8002960:	58025408 	.word	0x58025408
 8002964:	5802541c 	.word	0x5802541c
 8002968:	58025430 	.word	0x58025430
 800296c:	58025444 	.word	0x58025444
 8002970:	58025458 	.word	0x58025458
 8002974:	5802546c 	.word	0x5802546c
 8002978:	58025480 	.word	0x58025480
 800297c:	58025494 	.word	0x58025494

08002980 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e226      	b.n	8002dea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Start_IT+0x2a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e21f      	b.n	8002dea <HAL_DMA_Start_IT+0x46a>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	f040 820a 	bne.w	8002dd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a68      	ldr	r2, [pc, #416]	@ (8002b74 <HAL_DMA_Start_IT+0x1f4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a66      	ldr	r2, [pc, #408]	@ (8002b78 <HAL_DMA_Start_IT+0x1f8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a65      	ldr	r2, [pc, #404]	@ (8002b7c <HAL_DMA_Start_IT+0x1fc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a63      	ldr	r2, [pc, #396]	@ (8002b80 <HAL_DMA_Start_IT+0x200>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a62      	ldr	r2, [pc, #392]	@ (8002b84 <HAL_DMA_Start_IT+0x204>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a60      	ldr	r2, [pc, #384]	@ (8002b88 <HAL_DMA_Start_IT+0x208>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002b8c <HAL_DMA_Start_IT+0x20c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5d      	ldr	r2, [pc, #372]	@ (8002b90 <HAL_DMA_Start_IT+0x210>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5c      	ldr	r2, [pc, #368]	@ (8002b94 <HAL_DMA_Start_IT+0x214>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b98 <HAL_DMA_Start_IT+0x218>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a59      	ldr	r2, [pc, #356]	@ (8002b9c <HAL_DMA_Start_IT+0x21c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a57      	ldr	r2, [pc, #348]	@ (8002ba0 <HAL_DMA_Start_IT+0x220>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a56      	ldr	r2, [pc, #344]	@ (8002ba4 <HAL_DMA_Start_IT+0x224>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a54      	ldr	r2, [pc, #336]	@ (8002ba8 <HAL_DMA_Start_IT+0x228>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a53      	ldr	r2, [pc, #332]	@ (8002bac <HAL_DMA_Start_IT+0x22c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a51      	ldr	r2, [pc, #324]	@ (8002bb0 <HAL_DMA_Start_IT+0x230>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_Start_IT+0x100>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e007      	b.n	8002a90 <HAL_DMA_Start_IT+0x110>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f001 fe76 	bl	8004788 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	@ (8002b74 <HAL_DMA_Start_IT+0x1f4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04a      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <HAL_DMA_Start_IT+0x1f8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d045      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	@ (8002b7c <HAL_DMA_Start_IT+0x1fc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d040      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a30      	ldr	r2, [pc, #192]	@ (8002b80 <HAL_DMA_Start_IT+0x200>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d03b      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b84 <HAL_DMA_Start_IT+0x204>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d036      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <HAL_DMA_Start_IT+0x208>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d031      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b8c <HAL_DMA_Start_IT+0x20c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02c      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b90 <HAL_DMA_Start_IT+0x210>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d027      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a28      	ldr	r2, [pc, #160]	@ (8002b94 <HAL_DMA_Start_IT+0x214>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d022      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a27      	ldr	r2, [pc, #156]	@ (8002b98 <HAL_DMA_Start_IT+0x218>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01d      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a25      	ldr	r2, [pc, #148]	@ (8002b9c <HAL_DMA_Start_IT+0x21c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ba0 <HAL_DMA_Start_IT+0x220>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a22      	ldr	r2, [pc, #136]	@ (8002ba4 <HAL_DMA_Start_IT+0x224>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a21      	ldr	r2, [pc, #132]	@ (8002ba8 <HAL_DMA_Start_IT+0x228>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bac <HAL_DMA_Start_IT+0x22c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb0 <HAL_DMA_Start_IT+0x230>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_DMA_Start_IT+0x1c0>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_DMA_Start_IT+0x1c2>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d036      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 021e 	bic.w	r2, r3, #30
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0216 	orr.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d03e      	beq.n	8002be0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0208 	orr.w	r2, r2, #8
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e035      	b.n	8002be0 <HAL_DMA_Start_IT+0x260>
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 020e 	bic.w	r2, r3, #14
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 020a 	orr.w	r2, r2, #10
 8002bc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0204 	orr.w	r2, r2, #4
 8002bde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	@ (8002df4 <HAL_DMA_Start_IT+0x474>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d072      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a82      	ldr	r2, [pc, #520]	@ (8002df8 <HAL_DMA_Start_IT+0x478>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d06d      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a80      	ldr	r2, [pc, #512]	@ (8002dfc <HAL_DMA_Start_IT+0x47c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d068      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7f      	ldr	r2, [pc, #508]	@ (8002e00 <HAL_DMA_Start_IT+0x480>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d063      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e04 <HAL_DMA_Start_IT+0x484>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d05e      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7c      	ldr	r2, [pc, #496]	@ (8002e08 <HAL_DMA_Start_IT+0x488>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d059      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7a      	ldr	r2, [pc, #488]	@ (8002e0c <HAL_DMA_Start_IT+0x48c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d054      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a79      	ldr	r2, [pc, #484]	@ (8002e10 <HAL_DMA_Start_IT+0x490>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d04f      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a77      	ldr	r2, [pc, #476]	@ (8002e14 <HAL_DMA_Start_IT+0x494>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a76      	ldr	r2, [pc, #472]	@ (8002e18 <HAL_DMA_Start_IT+0x498>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a74      	ldr	r2, [pc, #464]	@ (8002e1c <HAL_DMA_Start_IT+0x49c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a73      	ldr	r2, [pc, #460]	@ (8002e20 <HAL_DMA_Start_IT+0x4a0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a71      	ldr	r2, [pc, #452]	@ (8002e24 <HAL_DMA_Start_IT+0x4a4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a70      	ldr	r2, [pc, #448]	@ (8002e28 <HAL_DMA_Start_IT+0x4a8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6e      	ldr	r2, [pc, #440]	@ (8002e2c <HAL_DMA_Start_IT+0x4ac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6d      	ldr	r2, [pc, #436]	@ (8002e30 <HAL_DMA_Start_IT+0x4b0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6b      	ldr	r2, [pc, #428]	@ (8002e34 <HAL_DMA_Start_IT+0x4b4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6a      	ldr	r2, [pc, #424]	@ (8002e38 <HAL_DMA_Start_IT+0x4b8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a68      	ldr	r2, [pc, #416]	@ (8002e3c <HAL_DMA_Start_IT+0x4bc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a67      	ldr	r2, [pc, #412]	@ (8002e40 <HAL_DMA_Start_IT+0x4c0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a65      	ldr	r2, [pc, #404]	@ (8002e44 <HAL_DMA_Start_IT+0x4c4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a64      	ldr	r2, [pc, #400]	@ (8002e48 <HAL_DMA_Start_IT+0x4c8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a62      	ldr	r2, [pc, #392]	@ (8002e4c <HAL_DMA_Start_IT+0x4cc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a61      	ldr	r2, [pc, #388]	@ (8002e50 <HAL_DMA_Start_IT+0x4d0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Start_IT+0x354>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_Start_IT+0x356>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01a      	beq.n	8002d10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cf6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a37      	ldr	r2, [pc, #220]	@ (8002df4 <HAL_DMA_Start_IT+0x474>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d04a      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a36      	ldr	r2, [pc, #216]	@ (8002df8 <HAL_DMA_Start_IT+0x478>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d045      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a34      	ldr	r2, [pc, #208]	@ (8002dfc <HAL_DMA_Start_IT+0x47c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d040      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a33      	ldr	r2, [pc, #204]	@ (8002e00 <HAL_DMA_Start_IT+0x480>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d03b      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a31      	ldr	r2, [pc, #196]	@ (8002e04 <HAL_DMA_Start_IT+0x484>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d036      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a30      	ldr	r2, [pc, #192]	@ (8002e08 <HAL_DMA_Start_IT+0x488>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d031      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2e      	ldr	r2, [pc, #184]	@ (8002e0c <HAL_DMA_Start_IT+0x48c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02c      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e10 <HAL_DMA_Start_IT+0x490>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d027      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2b      	ldr	r2, [pc, #172]	@ (8002e14 <HAL_DMA_Start_IT+0x494>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e18 <HAL_DMA_Start_IT+0x498>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01d      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a28      	ldr	r2, [pc, #160]	@ (8002e1c <HAL_DMA_Start_IT+0x49c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a27      	ldr	r2, [pc, #156]	@ (8002e20 <HAL_DMA_Start_IT+0x4a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	@ (8002e24 <HAL_DMA_Start_IT+0x4a4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a24      	ldr	r2, [pc, #144]	@ (8002e28 <HAL_DMA_Start_IT+0x4a8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	@ (8002e2c <HAL_DMA_Start_IT+0x4ac>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a21      	ldr	r2, [pc, #132]	@ (8002e30 <HAL_DMA_Start_IT+0x4b0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <HAL_DMA_Start_IT+0x442>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e012      	b.n	8002de8 <HAL_DMA_Start_IT+0x468>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e009      	b.n	8002de8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40020010 	.word	0x40020010
 8002df8:	40020028 	.word	0x40020028
 8002dfc:	40020040 	.word	0x40020040
 8002e00:	40020058 	.word	0x40020058
 8002e04:	40020070 	.word	0x40020070
 8002e08:	40020088 	.word	0x40020088
 8002e0c:	400200a0 	.word	0x400200a0
 8002e10:	400200b8 	.word	0x400200b8
 8002e14:	40020410 	.word	0x40020410
 8002e18:	40020428 	.word	0x40020428
 8002e1c:	40020440 	.word	0x40020440
 8002e20:	40020458 	.word	0x40020458
 8002e24:	40020470 	.word	0x40020470
 8002e28:	40020488 	.word	0x40020488
 8002e2c:	400204a0 	.word	0x400204a0
 8002e30:	400204b8 	.word	0x400204b8
 8002e34:	58025408 	.word	0x58025408
 8002e38:	5802541c 	.word	0x5802541c
 8002e3c:	58025430 	.word	0x58025430
 8002e40:	58025444 	.word	0x58025444
 8002e44:	58025458 	.word	0x58025458
 8002e48:	5802546c 	.word	0x5802546c
 8002e4c:	58025480 	.word	0x58025480
 8002e50:	58025494 	.word	0x58025494

08002e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff f8e8 	bl	8002030 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e2dc      	b.n	8003426 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2280      	movs	r2, #128	@ 0x80
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e2cd      	b.n	8003426 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a76      	ldr	r2, [pc, #472]	@ (8003068 <HAL_DMA_Abort+0x214>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04a      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a74      	ldr	r2, [pc, #464]	@ (800306c <HAL_DMA_Abort+0x218>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d045      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a73      	ldr	r2, [pc, #460]	@ (8003070 <HAL_DMA_Abort+0x21c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d040      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a71      	ldr	r2, [pc, #452]	@ (8003074 <HAL_DMA_Abort+0x220>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d03b      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a70      	ldr	r2, [pc, #448]	@ (8003078 <HAL_DMA_Abort+0x224>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d036      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800307c <HAL_DMA_Abort+0x228>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6d      	ldr	r2, [pc, #436]	@ (8003080 <HAL_DMA_Abort+0x22c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d02c      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8003084 <HAL_DMA_Abort+0x230>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d027      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6a      	ldr	r2, [pc, #424]	@ (8003088 <HAL_DMA_Abort+0x234>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a68      	ldr	r2, [pc, #416]	@ (800308c <HAL_DMA_Abort+0x238>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a67      	ldr	r2, [pc, #412]	@ (8003090 <HAL_DMA_Abort+0x23c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a65      	ldr	r2, [pc, #404]	@ (8003094 <HAL_DMA_Abort+0x240>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a64      	ldr	r2, [pc, #400]	@ (8003098 <HAL_DMA_Abort+0x244>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a62      	ldr	r2, [pc, #392]	@ (800309c <HAL_DMA_Abort+0x248>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a61      	ldr	r2, [pc, #388]	@ (80030a0 <HAL_DMA_Abort+0x24c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a5f      	ldr	r2, [pc, #380]	@ (80030a4 <HAL_DMA_Abort+0x250>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Abort+0xda>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_DMA_Abort+0xdc>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 021e 	bic.w	r2, r2, #30
 8002f42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e00a      	b.n	8002f72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 020e 	bic.w	r2, r2, #14
 8002f6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <HAL_DMA_Abort+0x214>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d072      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a3a      	ldr	r2, [pc, #232]	@ (800306c <HAL_DMA_Abort+0x218>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d06d      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a39      	ldr	r2, [pc, #228]	@ (8003070 <HAL_DMA_Abort+0x21c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d068      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a37      	ldr	r2, [pc, #220]	@ (8003074 <HAL_DMA_Abort+0x220>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d063      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a36      	ldr	r2, [pc, #216]	@ (8003078 <HAL_DMA_Abort+0x224>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d05e      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a34      	ldr	r2, [pc, #208]	@ (800307c <HAL_DMA_Abort+0x228>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d059      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a33      	ldr	r2, [pc, #204]	@ (8003080 <HAL_DMA_Abort+0x22c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d054      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a31      	ldr	r2, [pc, #196]	@ (8003084 <HAL_DMA_Abort+0x230>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04f      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a30      	ldr	r2, [pc, #192]	@ (8003088 <HAL_DMA_Abort+0x234>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d04a      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800308c <HAL_DMA_Abort+0x238>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d045      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2d      	ldr	r2, [pc, #180]	@ (8003090 <HAL_DMA_Abort+0x23c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d040      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8003094 <HAL_DMA_Abort+0x240>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d03b      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2a      	ldr	r2, [pc, #168]	@ (8003098 <HAL_DMA_Abort+0x244>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d036      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a28      	ldr	r2, [pc, #160]	@ (800309c <HAL_DMA_Abort+0x248>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a27      	ldr	r2, [pc, #156]	@ (80030a0 <HAL_DMA_Abort+0x24c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d02c      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a25      	ldr	r2, [pc, #148]	@ (80030a4 <HAL_DMA_Abort+0x250>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d027      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a24      	ldr	r2, [pc, #144]	@ (80030a8 <HAL_DMA_Abort+0x254>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a22      	ldr	r2, [pc, #136]	@ (80030ac <HAL_DMA_Abort+0x258>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a21      	ldr	r2, [pc, #132]	@ (80030b0 <HAL_DMA_Abort+0x25c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d018      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1f      	ldr	r2, [pc, #124]	@ (80030b4 <HAL_DMA_Abort+0x260>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1e      	ldr	r2, [pc, #120]	@ (80030b8 <HAL_DMA_Abort+0x264>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1c      	ldr	r2, [pc, #112]	@ (80030bc <HAL_DMA_Abort+0x268>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1b      	ldr	r2, [pc, #108]	@ (80030c0 <HAL_DMA_Abort+0x26c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	@ (80030c4 <HAL_DMA_Abort+0x270>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d132      	bne.n	80030c8 <HAL_DMA_Abort+0x274>
 8003062:	2301      	movs	r3, #1
 8003064:	e031      	b.n	80030ca <HAL_DMA_Abort+0x276>
 8003066:	bf00      	nop
 8003068:	40020010 	.word	0x40020010
 800306c:	40020028 	.word	0x40020028
 8003070:	40020040 	.word	0x40020040
 8003074:	40020058 	.word	0x40020058
 8003078:	40020070 	.word	0x40020070
 800307c:	40020088 	.word	0x40020088
 8003080:	400200a0 	.word	0x400200a0
 8003084:	400200b8 	.word	0x400200b8
 8003088:	40020410 	.word	0x40020410
 800308c:	40020428 	.word	0x40020428
 8003090:	40020440 	.word	0x40020440
 8003094:	40020458 	.word	0x40020458
 8003098:	40020470 	.word	0x40020470
 800309c:	40020488 	.word	0x40020488
 80030a0:	400204a0 	.word	0x400204a0
 80030a4:	400204b8 	.word	0x400204b8
 80030a8:	58025408 	.word	0x58025408
 80030ac:	5802541c 	.word	0x5802541c
 80030b0:	58025430 	.word	0x58025430
 80030b4:	58025444 	.word	0x58025444
 80030b8:	58025458 	.word	0x58025458
 80030bc:	5802546c 	.word	0x5802546c
 80030c0:	58025480 	.word	0x58025480
 80030c4:	58025494 	.word	0x58025494
 80030c8:	2300      	movs	r3, #0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003298 <HAL_DMA_Abort+0x444>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04a      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6b      	ldr	r2, [pc, #428]	@ (800329c <HAL_DMA_Abort+0x448>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d045      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6a      	ldr	r2, [pc, #424]	@ (80032a0 <HAL_DMA_Abort+0x44c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d040      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a68      	ldr	r2, [pc, #416]	@ (80032a4 <HAL_DMA_Abort+0x450>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d03b      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a67      	ldr	r2, [pc, #412]	@ (80032a8 <HAL_DMA_Abort+0x454>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d036      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a65      	ldr	r2, [pc, #404]	@ (80032ac <HAL_DMA_Abort+0x458>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a64      	ldr	r2, [pc, #400]	@ (80032b0 <HAL_DMA_Abort+0x45c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d02c      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a62      	ldr	r2, [pc, #392]	@ (80032b4 <HAL_DMA_Abort+0x460>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d027      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a61      	ldr	r2, [pc, #388]	@ (80032b8 <HAL_DMA_Abort+0x464>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5f      	ldr	r2, [pc, #380]	@ (80032bc <HAL_DMA_Abort+0x468>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01d      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5e      	ldr	r2, [pc, #376]	@ (80032c0 <HAL_DMA_Abort+0x46c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5c      	ldr	r2, [pc, #368]	@ (80032c4 <HAL_DMA_Abort+0x470>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5b      	ldr	r2, [pc, #364]	@ (80032c8 <HAL_DMA_Abort+0x474>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a59      	ldr	r2, [pc, #356]	@ (80032cc <HAL_DMA_Abort+0x478>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a58      	ldr	r2, [pc, #352]	@ (80032d0 <HAL_DMA_Abort+0x47c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a56      	ldr	r2, [pc, #344]	@ (80032d4 <HAL_DMA_Abort+0x480>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <HAL_DMA_Abort+0x33c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e007      	b.n	80031a0 <HAL_DMA_Abort+0x34c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031a0:	e013      	b.n	80031ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a2:	f7fe ff45 	bl	8002030 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d90c      	bls.n	80031ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2203      	movs	r2, #3
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e12d      	b.n	8003426 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2f      	ldr	r2, [pc, #188]	@ (8003298 <HAL_DMA_Abort+0x444>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d04a      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	@ (800329c <HAL_DMA_Abort+0x448>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d045      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2c      	ldr	r2, [pc, #176]	@ (80032a0 <HAL_DMA_Abort+0x44c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d040      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2a      	ldr	r2, [pc, #168]	@ (80032a4 <HAL_DMA_Abort+0x450>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d03b      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a29      	ldr	r2, [pc, #164]	@ (80032a8 <HAL_DMA_Abort+0x454>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d036      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a27      	ldr	r2, [pc, #156]	@ (80032ac <HAL_DMA_Abort+0x458>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a26      	ldr	r2, [pc, #152]	@ (80032b0 <HAL_DMA_Abort+0x45c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d02c      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a24      	ldr	r2, [pc, #144]	@ (80032b4 <HAL_DMA_Abort+0x460>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d027      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a23      	ldr	r2, [pc, #140]	@ (80032b8 <HAL_DMA_Abort+0x464>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <HAL_DMA_Abort+0x468>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a20      	ldr	r2, [pc, #128]	@ (80032c0 <HAL_DMA_Abort+0x46c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1e      	ldr	r2, [pc, #120]	@ (80032c4 <HAL_DMA_Abort+0x470>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <HAL_DMA_Abort+0x474>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <HAL_DMA_Abort+0x478>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1a      	ldr	r2, [pc, #104]	@ (80032d0 <HAL_DMA_Abort+0x47c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a18      	ldr	r2, [pc, #96]	@ (80032d4 <HAL_DMA_Abort+0x480>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_DMA_Abort+0x426>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_DMA_Abort+0x428>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d02b      	beq.n	80032d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	223f      	movs	r2, #63	@ 0x3f
 8003290:	409a      	lsls	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	e02a      	b.n	80032ee <HAL_DMA_Abort+0x49a>
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003430 <HAL_DMA_Abort+0x5dc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d072      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003434 <HAL_DMA_Abort+0x5e0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d06d      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a4c      	ldr	r2, [pc, #304]	@ (8003438 <HAL_DMA_Abort+0x5e4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d068      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4a      	ldr	r2, [pc, #296]	@ (800343c <HAL_DMA_Abort+0x5e8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d063      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a49      	ldr	r2, [pc, #292]	@ (8003440 <HAL_DMA_Abort+0x5ec>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d05e      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a47      	ldr	r2, [pc, #284]	@ (8003444 <HAL_DMA_Abort+0x5f0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d059      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a46      	ldr	r2, [pc, #280]	@ (8003448 <HAL_DMA_Abort+0x5f4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d054      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a44      	ldr	r2, [pc, #272]	@ (800344c <HAL_DMA_Abort+0x5f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d04f      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a43      	ldr	r2, [pc, #268]	@ (8003450 <HAL_DMA_Abort+0x5fc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a41      	ldr	r2, [pc, #260]	@ (8003454 <HAL_DMA_Abort+0x600>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d045      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a40      	ldr	r2, [pc, #256]	@ (8003458 <HAL_DMA_Abort+0x604>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d040      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3e      	ldr	r2, [pc, #248]	@ (800345c <HAL_DMA_Abort+0x608>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03b      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3d      	ldr	r2, [pc, #244]	@ (8003460 <HAL_DMA_Abort+0x60c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d036      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3b      	ldr	r2, [pc, #236]	@ (8003464 <HAL_DMA_Abort+0x610>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a3a      	ldr	r2, [pc, #232]	@ (8003468 <HAL_DMA_Abort+0x614>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02c      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a38      	ldr	r2, [pc, #224]	@ (800346c <HAL_DMA_Abort+0x618>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a37      	ldr	r2, [pc, #220]	@ (8003470 <HAL_DMA_Abort+0x61c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a35      	ldr	r2, [pc, #212]	@ (8003474 <HAL_DMA_Abort+0x620>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a34      	ldr	r2, [pc, #208]	@ (8003478 <HAL_DMA_Abort+0x624>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a32      	ldr	r2, [pc, #200]	@ (800347c <HAL_DMA_Abort+0x628>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a31      	ldr	r2, [pc, #196]	@ (8003480 <HAL_DMA_Abort+0x62c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003484 <HAL_DMA_Abort+0x630>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003488 <HAL_DMA_Abort+0x634>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <HAL_DMA_Abort+0x638>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Abort+0x58e>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_DMA_Abort+0x590>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003412:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40020010 	.word	0x40020010
 8003434:	40020028 	.word	0x40020028
 8003438:	40020040 	.word	0x40020040
 800343c:	40020058 	.word	0x40020058
 8003440:	40020070 	.word	0x40020070
 8003444:	40020088 	.word	0x40020088
 8003448:	400200a0 	.word	0x400200a0
 800344c:	400200b8 	.word	0x400200b8
 8003450:	40020410 	.word	0x40020410
 8003454:	40020428 	.word	0x40020428
 8003458:	40020440 	.word	0x40020440
 800345c:	40020458 	.word	0x40020458
 8003460:	40020470 	.word	0x40020470
 8003464:	40020488 	.word	0x40020488
 8003468:	400204a0 	.word	0x400204a0
 800346c:	400204b8 	.word	0x400204b8
 8003470:	58025408 	.word	0x58025408
 8003474:	5802541c 	.word	0x5802541c
 8003478:	58025430 	.word	0x58025430
 800347c:	58025444 	.word	0x58025444
 8003480:	58025458 	.word	0x58025458
 8003484:	5802546c 	.word	0x5802546c
 8003488:	58025480 	.word	0x58025480
 800348c:	58025494 	.word	0x58025494

08003490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e237      	b.n	8003912 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d004      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2280      	movs	r2, #128	@ 0x80
 80034b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e22c      	b.n	8003912 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003630 <HAL_DMA_Abort_IT+0x1a0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d04a      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003634 <HAL_DMA_Abort_IT+0x1a4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d045      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a59      	ldr	r2, [pc, #356]	@ (8003638 <HAL_DMA_Abort_IT+0x1a8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d040      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a58      	ldr	r2, [pc, #352]	@ (800363c <HAL_DMA_Abort_IT+0x1ac>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d03b      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a56      	ldr	r2, [pc, #344]	@ (8003640 <HAL_DMA_Abort_IT+0x1b0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d036      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a55      	ldr	r2, [pc, #340]	@ (8003644 <HAL_DMA_Abort_IT+0x1b4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d031      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a53      	ldr	r2, [pc, #332]	@ (8003648 <HAL_DMA_Abort_IT+0x1b8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02c      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a52      	ldr	r2, [pc, #328]	@ (800364c <HAL_DMA_Abort_IT+0x1bc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d027      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a50      	ldr	r2, [pc, #320]	@ (8003650 <HAL_DMA_Abort_IT+0x1c0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d022      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4f      	ldr	r2, [pc, #316]	@ (8003654 <HAL_DMA_Abort_IT+0x1c4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d01d      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a4d      	ldr	r2, [pc, #308]	@ (8003658 <HAL_DMA_Abort_IT+0x1c8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d018      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4c      	ldr	r2, [pc, #304]	@ (800365c <HAL_DMA_Abort_IT+0x1cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4a      	ldr	r2, [pc, #296]	@ (8003660 <HAL_DMA_Abort_IT+0x1d0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00e      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a49      	ldr	r2, [pc, #292]	@ (8003664 <HAL_DMA_Abort_IT+0x1d4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d009      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a47      	ldr	r2, [pc, #284]	@ (8003668 <HAL_DMA_Abort_IT+0x1d8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a46      	ldr	r2, [pc, #280]	@ (800366c <HAL_DMA_Abort_IT+0x1dc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_DMA_Abort_IT+0xcc>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_DMA_Abort_IT+0xce>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8086 	beq.w	8003670 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2204      	movs	r2, #4
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2f      	ldr	r2, [pc, #188]	@ (8003630 <HAL_DMA_Abort_IT+0x1a0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d04a      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2e      	ldr	r2, [pc, #184]	@ (8003634 <HAL_DMA_Abort_IT+0x1a4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d045      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2c      	ldr	r2, [pc, #176]	@ (8003638 <HAL_DMA_Abort_IT+0x1a8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d040      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2b      	ldr	r2, [pc, #172]	@ (800363c <HAL_DMA_Abort_IT+0x1ac>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d03b      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a29      	ldr	r2, [pc, #164]	@ (8003640 <HAL_DMA_Abort_IT+0x1b0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d036      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a28      	ldr	r2, [pc, #160]	@ (8003644 <HAL_DMA_Abort_IT+0x1b4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d031      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a26      	ldr	r2, [pc, #152]	@ (8003648 <HAL_DMA_Abort_IT+0x1b8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d02c      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a25      	ldr	r2, [pc, #148]	@ (800364c <HAL_DMA_Abort_IT+0x1bc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d027      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a23      	ldr	r2, [pc, #140]	@ (8003650 <HAL_DMA_Abort_IT+0x1c0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d022      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a22      	ldr	r2, [pc, #136]	@ (8003654 <HAL_DMA_Abort_IT+0x1c4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d01d      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a20      	ldr	r2, [pc, #128]	@ (8003658 <HAL_DMA_Abort_IT+0x1c8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d018      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1f      	ldr	r2, [pc, #124]	@ (800365c <HAL_DMA_Abort_IT+0x1cc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <HAL_DMA_Abort_IT+0x1d0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00e      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <HAL_DMA_Abort_IT+0x1d4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003668 <HAL_DMA_Abort_IT+0x1d8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_DMA_Abort_IT+0x17c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a19      	ldr	r2, [pc, #100]	@ (800366c <HAL_DMA_Abort_IT+0x1dc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <HAL_DMA_Abort_IT+0x18e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e178      	b.n	8003910 <HAL_DMA_Abort_IT+0x480>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e16f      	b.n	8003910 <HAL_DMA_Abort_IT+0x480>
 8003630:	40020010 	.word	0x40020010
 8003634:	40020028 	.word	0x40020028
 8003638:	40020040 	.word	0x40020040
 800363c:	40020058 	.word	0x40020058
 8003640:	40020070 	.word	0x40020070
 8003644:	40020088 	.word	0x40020088
 8003648:	400200a0 	.word	0x400200a0
 800364c:	400200b8 	.word	0x400200b8
 8003650:	40020410 	.word	0x40020410
 8003654:	40020428 	.word	0x40020428
 8003658:	40020440 	.word	0x40020440
 800365c:	40020458 	.word	0x40020458
 8003660:	40020470 	.word	0x40020470
 8003664:	40020488 	.word	0x40020488
 8003668:	400204a0 	.word	0x400204a0
 800366c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 020e 	bic.w	r2, r2, #14
 800367e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6c      	ldr	r2, [pc, #432]	@ (8003838 <HAL_DMA_Abort_IT+0x3a8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d04a      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6b      	ldr	r2, [pc, #428]	@ (800383c <HAL_DMA_Abort_IT+0x3ac>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d045      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a69      	ldr	r2, [pc, #420]	@ (8003840 <HAL_DMA_Abort_IT+0x3b0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d040      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a68      	ldr	r2, [pc, #416]	@ (8003844 <HAL_DMA_Abort_IT+0x3b4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d03b      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a66      	ldr	r2, [pc, #408]	@ (8003848 <HAL_DMA_Abort_IT+0x3b8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a65      	ldr	r2, [pc, #404]	@ (800384c <HAL_DMA_Abort_IT+0x3bc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d031      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a63      	ldr	r2, [pc, #396]	@ (8003850 <HAL_DMA_Abort_IT+0x3c0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02c      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a62      	ldr	r2, [pc, #392]	@ (8003854 <HAL_DMA_Abort_IT+0x3c4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d027      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a60      	ldr	r2, [pc, #384]	@ (8003858 <HAL_DMA_Abort_IT+0x3c8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a5f      	ldr	r2, [pc, #380]	@ (800385c <HAL_DMA_Abort_IT+0x3cc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003860 <HAL_DMA_Abort_IT+0x3d0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003864 <HAL_DMA_Abort_IT+0x3d4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003868 <HAL_DMA_Abort_IT+0x3d8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a59      	ldr	r2, [pc, #356]	@ (800386c <HAL_DMA_Abort_IT+0x3dc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a57      	ldr	r2, [pc, #348]	@ (8003870 <HAL_DMA_Abort_IT+0x3e0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_DMA_Abort_IT+0x290>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a56      	ldr	r2, [pc, #344]	@ (8003874 <HAL_DMA_Abort_IT+0x3e4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <HAL_DMA_Abort_IT+0x2a2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e007      	b.n	8003742 <HAL_DMA_Abort_IT+0x2b2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a3c      	ldr	r2, [pc, #240]	@ (8003838 <HAL_DMA_Abort_IT+0x3a8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d072      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3a      	ldr	r2, [pc, #232]	@ (800383c <HAL_DMA_Abort_IT+0x3ac>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d06d      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a39      	ldr	r2, [pc, #228]	@ (8003840 <HAL_DMA_Abort_IT+0x3b0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d068      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a37      	ldr	r2, [pc, #220]	@ (8003844 <HAL_DMA_Abort_IT+0x3b4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d063      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a36      	ldr	r2, [pc, #216]	@ (8003848 <HAL_DMA_Abort_IT+0x3b8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d05e      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a34      	ldr	r2, [pc, #208]	@ (800384c <HAL_DMA_Abort_IT+0x3bc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d059      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a33      	ldr	r2, [pc, #204]	@ (8003850 <HAL_DMA_Abort_IT+0x3c0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d054      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a31      	ldr	r2, [pc, #196]	@ (8003854 <HAL_DMA_Abort_IT+0x3c4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d04f      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <HAL_DMA_Abort_IT+0x3c8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04a      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2e      	ldr	r2, [pc, #184]	@ (800385c <HAL_DMA_Abort_IT+0x3cc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d045      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003860 <HAL_DMA_Abort_IT+0x3d0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d040      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <HAL_DMA_Abort_IT+0x3d4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d03b      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2a      	ldr	r2, [pc, #168]	@ (8003868 <HAL_DMA_Abort_IT+0x3d8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d036      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a28      	ldr	r2, [pc, #160]	@ (800386c <HAL_DMA_Abort_IT+0x3dc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d031      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a27      	ldr	r2, [pc, #156]	@ (8003870 <HAL_DMA_Abort_IT+0x3e0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d02c      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a25      	ldr	r2, [pc, #148]	@ (8003874 <HAL_DMA_Abort_IT+0x3e4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d027      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a24      	ldr	r2, [pc, #144]	@ (8003878 <HAL_DMA_Abort_IT+0x3e8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a22      	ldr	r2, [pc, #136]	@ (800387c <HAL_DMA_Abort_IT+0x3ec>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01d      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <HAL_DMA_Abort_IT+0x3f0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1f      	ldr	r2, [pc, #124]	@ (8003884 <HAL_DMA_Abort_IT+0x3f4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1e      	ldr	r2, [pc, #120]	@ (8003888 <HAL_DMA_Abort_IT+0x3f8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1c      	ldr	r2, [pc, #112]	@ (800388c <HAL_DMA_Abort_IT+0x3fc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1b      	ldr	r2, [pc, #108]	@ (8003890 <HAL_DMA_Abort_IT+0x400>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_DMA_Abort_IT+0x3a2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	@ (8003894 <HAL_DMA_Abort_IT+0x404>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d132      	bne.n	8003898 <HAL_DMA_Abort_IT+0x408>
 8003832:	2301      	movs	r3, #1
 8003834:	e031      	b.n	800389a <HAL_DMA_Abort_IT+0x40a>
 8003836:	bf00      	nop
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	58025408 	.word	0x58025408
 800387c:	5802541c 	.word	0x5802541c
 8003880:	58025430 	.word	0x58025430
 8003884:	58025444 	.word	0x58025444
 8003888:	58025458 	.word	0x58025458
 800388c:	5802546c 	.word	0x5802546c
 8003890:	58025480 	.word	0x58025480
 8003894:	58025494 	.word	0x58025494
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d028      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop

0800391c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	@ 0x28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003928:	4b67      	ldr	r3, [pc, #412]	@ (8003ac8 <HAL_DMA_IRQHandler+0x1ac>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a67      	ldr	r2, [pc, #412]	@ (8003acc <HAL_DMA_IRQHandler+0x1b0>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0a9b      	lsrs	r3, r3, #10
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad0 <HAL_DMA_IRQHandler+0x1b4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d04a      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ad4 <HAL_DMA_IRQHandler+0x1b8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d045      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad8 <HAL_DMA_IRQHandler+0x1bc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d040      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a5a      	ldr	r2, [pc, #360]	@ (8003adc <HAL_DMA_IRQHandler+0x1c0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d03b      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a59      	ldr	r2, [pc, #356]	@ (8003ae0 <HAL_DMA_IRQHandler+0x1c4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d036      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a57      	ldr	r2, [pc, #348]	@ (8003ae4 <HAL_DMA_IRQHandler+0x1c8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d031      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a56      	ldr	r2, [pc, #344]	@ (8003ae8 <HAL_DMA_IRQHandler+0x1cc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d02c      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a54      	ldr	r2, [pc, #336]	@ (8003aec <HAL_DMA_IRQHandler+0x1d0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d027      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a53      	ldr	r2, [pc, #332]	@ (8003af0 <HAL_DMA_IRQHandler+0x1d4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d022      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a51      	ldr	r2, [pc, #324]	@ (8003af4 <HAL_DMA_IRQHandler+0x1d8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01d      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a50      	ldr	r2, [pc, #320]	@ (8003af8 <HAL_DMA_IRQHandler+0x1dc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d018      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a4e      	ldr	r2, [pc, #312]	@ (8003afc <HAL_DMA_IRQHandler+0x1e0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003b00 <HAL_DMA_IRQHandler+0x1e4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b04 <HAL_DMA_IRQHandler+0x1e8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d009      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a4a      	ldr	r2, [pc, #296]	@ (8003b08 <HAL_DMA_IRQHandler+0x1ec>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_DMA_IRQHandler+0xd2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a48      	ldr	r2, [pc, #288]	@ (8003b0c <HAL_DMA_IRQHandler+0x1f0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_DMA_IRQHandler+0xd6>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_DMA_IRQHandler+0xd8>
 80039f2:	2300      	movs	r3, #0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 842b 	beq.w	8004250 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2208      	movs	r2, #8
 8003a04:	409a      	lsls	r2, r3
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80a2 	beq.w	8003b54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2e      	ldr	r2, [pc, #184]	@ (8003ad0 <HAL_DMA_IRQHandler+0x1b4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d04a      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad4 <HAL_DMA_IRQHandler+0x1b8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d045      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad8 <HAL_DMA_IRQHandler+0x1bc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d040      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2a      	ldr	r2, [pc, #168]	@ (8003adc <HAL_DMA_IRQHandler+0x1c0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d03b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a28      	ldr	r2, [pc, #160]	@ (8003ae0 <HAL_DMA_IRQHandler+0x1c4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d036      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a27      	ldr	r2, [pc, #156]	@ (8003ae4 <HAL_DMA_IRQHandler+0x1c8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d031      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a25      	ldr	r2, [pc, #148]	@ (8003ae8 <HAL_DMA_IRQHandler+0x1cc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d02c      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a24      	ldr	r2, [pc, #144]	@ (8003aec <HAL_DMA_IRQHandler+0x1d0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d027      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a22      	ldr	r2, [pc, #136]	@ (8003af0 <HAL_DMA_IRQHandler+0x1d4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d022      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a21      	ldr	r2, [pc, #132]	@ (8003af4 <HAL_DMA_IRQHandler+0x1d8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d01d      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1f      	ldr	r2, [pc, #124]	@ (8003af8 <HAL_DMA_IRQHandler+0x1dc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d018      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1e      	ldr	r2, [pc, #120]	@ (8003afc <HAL_DMA_IRQHandler+0x1e0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b00 <HAL_DMA_IRQHandler+0x1e4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1b      	ldr	r2, [pc, #108]	@ (8003b04 <HAL_DMA_IRQHandler+0x1e8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	@ (8003b08 <HAL_DMA_IRQHandler+0x1ec>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x194>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a18      	ldr	r2, [pc, #96]	@ (8003b0c <HAL_DMA_IRQHandler+0x1f0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d12f      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x1f4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf14      	ite	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	e02e      	b.n	8003b24 <HAL_DMA_IRQHandler+0x208>
 8003ac6:	bf00      	nop
 8003ac8:	24000824 	.word	0x24000824
 8003acc:	1b4e81b5 	.word	0x1b4e81b5
 8003ad0:	40020010 	.word	0x40020010
 8003ad4:	40020028 	.word	0x40020028
 8003ad8:	40020040 	.word	0x40020040
 8003adc:	40020058 	.word	0x40020058
 8003ae0:	40020070 	.word	0x40020070
 8003ae4:	40020088 	.word	0x40020088
 8003ae8:	400200a0 	.word	0x400200a0
 8003aec:	400200b8 	.word	0x400200b8
 8003af0:	40020410 	.word	0x40020410
 8003af4:	40020428 	.word	0x40020428
 8003af8:	40020440 	.word	0x40020440
 8003afc:	40020458 	.word	0x40020458
 8003b00:	40020470 	.word	0x40020470
 8003b04:	40020488 	.word	0x40020488
 8003b08:	400204a0 	.word	0x400204a0
 8003b0c:	400204b8 	.word	0x400204b8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2208      	movs	r2, #8
 8003b42:	409a      	lsls	r2, r3
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d06e      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a69      	ldr	r2, [pc, #420]	@ (8003d14 <HAL_DMA_IRQHandler+0x3f8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04a      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a67      	ldr	r2, [pc, #412]	@ (8003d18 <HAL_DMA_IRQHandler+0x3fc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d045      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a66      	ldr	r2, [pc, #408]	@ (8003d1c <HAL_DMA_IRQHandler+0x400>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d040      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a64      	ldr	r2, [pc, #400]	@ (8003d20 <HAL_DMA_IRQHandler+0x404>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d03b      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a63      	ldr	r2, [pc, #396]	@ (8003d24 <HAL_DMA_IRQHandler+0x408>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d036      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a61      	ldr	r2, [pc, #388]	@ (8003d28 <HAL_DMA_IRQHandler+0x40c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d031      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a60      	ldr	r2, [pc, #384]	@ (8003d2c <HAL_DMA_IRQHandler+0x410>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d02c      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8003d30 <HAL_DMA_IRQHandler+0x414>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d027      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8003d34 <HAL_DMA_IRQHandler+0x418>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d022      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8003d38 <HAL_DMA_IRQHandler+0x41c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01d      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d3c <HAL_DMA_IRQHandler+0x420>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	@ (8003d40 <HAL_DMA_IRQHandler+0x424>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a57      	ldr	r2, [pc, #348]	@ (8003d44 <HAL_DMA_IRQHandler+0x428>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a55      	ldr	r2, [pc, #340]	@ (8003d48 <HAL_DMA_IRQHandler+0x42c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a54      	ldr	r2, [pc, #336]	@ (8003d4c <HAL_DMA_IRQHandler+0x430>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d004      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x2ee>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a52      	ldr	r2, [pc, #328]	@ (8003d50 <HAL_DMA_IRQHandler+0x434>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10a      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x304>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e003      	b.n	8003c28 <HAL_DMA_IRQHandler+0x30c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00d      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2201      	movs	r2, #1
 8003c36:	409a      	lsls	r2, r3
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c40:	f043 0202 	orr.w	r2, r3, #2
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2204      	movs	r2, #4
 8003c52:	409a      	lsls	r2, r3
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 808f 	beq.w	8003d7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2c      	ldr	r2, [pc, #176]	@ (8003d14 <HAL_DMA_IRQHandler+0x3f8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d04a      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d18 <HAL_DMA_IRQHandler+0x3fc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d045      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a29      	ldr	r2, [pc, #164]	@ (8003d1c <HAL_DMA_IRQHandler+0x400>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d040      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a27      	ldr	r2, [pc, #156]	@ (8003d20 <HAL_DMA_IRQHandler+0x404>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d03b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a26      	ldr	r2, [pc, #152]	@ (8003d24 <HAL_DMA_IRQHandler+0x408>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d036      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a24      	ldr	r2, [pc, #144]	@ (8003d28 <HAL_DMA_IRQHandler+0x40c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <HAL_DMA_IRQHandler+0x410>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d02c      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <HAL_DMA_IRQHandler+0x414>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d027      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a20      	ldr	r2, [pc, #128]	@ (8003d34 <HAL_DMA_IRQHandler+0x418>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d38 <HAL_DMA_IRQHandler+0x41c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01d      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <HAL_DMA_IRQHandler+0x420>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <HAL_DMA_IRQHandler+0x424>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1a      	ldr	r2, [pc, #104]	@ (8003d44 <HAL_DMA_IRQHandler+0x428>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a18      	ldr	r2, [pc, #96]	@ (8003d48 <HAL_DMA_IRQHandler+0x42c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_DMA_IRQHandler+0x430>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x3e2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <HAL_DMA_IRQHandler+0x434>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d12a      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x438>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e023      	b.n	8003d5c <HAL_DMA_IRQHandler+0x440>
 8003d14:	40020010 	.word	0x40020010
 8003d18:	40020028 	.word	0x40020028
 8003d1c:	40020040 	.word	0x40020040
 8003d20:	40020058 	.word	0x40020058
 8003d24:	40020070 	.word	0x40020070
 8003d28:	40020088 	.word	0x40020088
 8003d2c:	400200a0 	.word	0x400200a0
 8003d30:	400200b8 	.word	0x400200b8
 8003d34:	40020410 	.word	0x40020410
 8003d38:	40020428 	.word	0x40020428
 8003d3c:	40020440 	.word	0x40020440
 8003d40:	40020458 	.word	0x40020458
 8003d44:	40020470 	.word	0x40020470
 8003d48:	40020488 	.word	0x40020488
 8003d4c:	400204a0 	.word	0x400204a0
 8003d50:	400204b8 	.word	0x400204b8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2204      	movs	r2, #4
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	f043 0204 	orr.w	r2, r3, #4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2210      	movs	r2, #16
 8003d86:	409a      	lsls	r2, r3
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80a6 	beq.w	8003ede <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a85      	ldr	r2, [pc, #532]	@ (8003fac <HAL_DMA_IRQHandler+0x690>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d04a      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a83      	ldr	r2, [pc, #524]	@ (8003fb0 <HAL_DMA_IRQHandler+0x694>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d045      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a82      	ldr	r2, [pc, #520]	@ (8003fb4 <HAL_DMA_IRQHandler+0x698>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d040      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a80      	ldr	r2, [pc, #512]	@ (8003fb8 <HAL_DMA_IRQHandler+0x69c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d03b      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7f      	ldr	r2, [pc, #508]	@ (8003fbc <HAL_DMA_IRQHandler+0x6a0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d036      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc0 <HAL_DMA_IRQHandler+0x6a4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d031      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc4 <HAL_DMA_IRQHandler+0x6a8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d02c      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a7a      	ldr	r2, [pc, #488]	@ (8003fc8 <HAL_DMA_IRQHandler+0x6ac>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d027      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a79      	ldr	r2, [pc, #484]	@ (8003fcc <HAL_DMA_IRQHandler+0x6b0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a77      	ldr	r2, [pc, #476]	@ (8003fd0 <HAL_DMA_IRQHandler+0x6b4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01d      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a76      	ldr	r2, [pc, #472]	@ (8003fd4 <HAL_DMA_IRQHandler+0x6b8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d018      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a74      	ldr	r2, [pc, #464]	@ (8003fd8 <HAL_DMA_IRQHandler+0x6bc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a73      	ldr	r2, [pc, #460]	@ (8003fdc <HAL_DMA_IRQHandler+0x6c0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a71      	ldr	r2, [pc, #452]	@ (8003fe0 <HAL_DMA_IRQHandler+0x6c4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a70      	ldr	r2, [pc, #448]	@ (8003fe4 <HAL_DMA_IRQHandler+0x6c8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x516>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_DMA_IRQHandler+0x6cc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10a      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x52c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e009      	b.n	8003e5c <HAL_DMA_IRQHandler+0x540>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03e      	beq.n	8003ede <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2210      	movs	r2, #16
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d018      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d108      	bne.n	8003e9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d024      	beq.n	8003ede <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
 8003e9c:	e01f      	b.n	8003ede <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01b      	beq.n	8003ede <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
 8003eae:	e016      	b.n	8003ede <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0208 	bic.w	r2, r2, #8
 8003ecc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8110 	beq.w	8004114 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8003fac <HAL_DMA_IRQHandler+0x690>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb0 <HAL_DMA_IRQHandler+0x694>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d045      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a29      	ldr	r2, [pc, #164]	@ (8003fb4 <HAL_DMA_IRQHandler+0x698>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a28      	ldr	r2, [pc, #160]	@ (8003fb8 <HAL_DMA_IRQHandler+0x69c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d03b      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a26      	ldr	r2, [pc, #152]	@ (8003fbc <HAL_DMA_IRQHandler+0x6a0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d036      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a25      	ldr	r2, [pc, #148]	@ (8003fc0 <HAL_DMA_IRQHandler+0x6a4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d031      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a23      	ldr	r2, [pc, #140]	@ (8003fc4 <HAL_DMA_IRQHandler+0x6a8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <HAL_DMA_IRQHandler+0x6ac>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <HAL_DMA_IRQHandler+0x6b0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd0 <HAL_DMA_IRQHandler+0x6b4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_DMA_IRQHandler+0x6b8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd8 <HAL_DMA_IRQHandler+0x6bc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1a      	ldr	r2, [pc, #104]	@ (8003fdc <HAL_DMA_IRQHandler+0x6c0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a19      	ldr	r2, [pc, #100]	@ (8003fe0 <HAL_DMA_IRQHandler+0x6c4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_DMA_IRQHandler+0x6c8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x678>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	@ (8003fe8 <HAL_DMA_IRQHandler+0x6cc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d12b      	bne.n	8003fec <HAL_DMA_IRQHandler+0x6d0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bf14      	ite	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	2300      	moveq	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	e02a      	b.n	8004000 <HAL_DMA_IRQHandler+0x6e4>
 8003faa:	bf00      	nop
 8003fac:	40020010 	.word	0x40020010
 8003fb0:	40020028 	.word	0x40020028
 8003fb4:	40020040 	.word	0x40020040
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	40020070 	.word	0x40020070
 8003fc0:	40020088 	.word	0x40020088
 8003fc4:	400200a0 	.word	0x400200a0
 8003fc8:	400200b8 	.word	0x400200b8
 8003fcc:	40020410 	.word	0x40020410
 8003fd0:	40020428 	.word	0x40020428
 8003fd4:	40020440 	.word	0x40020440
 8003fd8:	40020458 	.word	0x40020458
 8003fdc:	40020470 	.word	0x40020470
 8003fe0:	40020488 	.word	0x40020488
 8003fe4:	400204a0 	.word	0x400204a0
 8003fe8:	400204b8 	.word	0x400204b8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bf14      	ite	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	2300      	moveq	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8087 	beq.w	8004114 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2220      	movs	r2, #32
 8004010:	409a      	lsls	r2, r3
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b04      	cmp	r3, #4
 8004020:	d139      	bne.n	8004096 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0216 	bic.w	r2, r2, #22
 8004030:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004040:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_DMA_IRQHandler+0x736>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0208 	bic.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	223f      	movs	r2, #63	@ 0x3f
 800406c:	409a      	lsls	r2, r3
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 834a 	beq.w	8004720 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
          }
          return;
 8004094:	e344      	b.n	8004720 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d018      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d02c      	beq.n	8004114 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
 80040c2:	e027      	b.n	8004114 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d023      	beq.n	8004114 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
 80040d4:	e01e      	b.n	8004114 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0210 	bic.w	r2, r2, #16
 80040f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8306 	beq.w	800472a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8088 	beq.w	800423c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2204      	movs	r2, #4
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a7a      	ldr	r2, [pc, #488]	@ (8004324 <HAL_DMA_IRQHandler+0xa08>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d04a      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a79      	ldr	r2, [pc, #484]	@ (8004328 <HAL_DMA_IRQHandler+0xa0c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d045      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a77      	ldr	r2, [pc, #476]	@ (800432c <HAL_DMA_IRQHandler+0xa10>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d040      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a76      	ldr	r2, [pc, #472]	@ (8004330 <HAL_DMA_IRQHandler+0xa14>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d03b      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a74      	ldr	r2, [pc, #464]	@ (8004334 <HAL_DMA_IRQHandler+0xa18>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d036      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a73      	ldr	r2, [pc, #460]	@ (8004338 <HAL_DMA_IRQHandler+0xa1c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d031      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a71      	ldr	r2, [pc, #452]	@ (800433c <HAL_DMA_IRQHandler+0xa20>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d02c      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a70      	ldr	r2, [pc, #448]	@ (8004340 <HAL_DMA_IRQHandler+0xa24>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d027      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6e      	ldr	r2, [pc, #440]	@ (8004344 <HAL_DMA_IRQHandler+0xa28>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d022      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6d      	ldr	r2, [pc, #436]	@ (8004348 <HAL_DMA_IRQHandler+0xa2c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d01d      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6b      	ldr	r2, [pc, #428]	@ (800434c <HAL_DMA_IRQHandler+0xa30>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d018      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004350 <HAL_DMA_IRQHandler+0xa34>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d013      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a68      	ldr	r2, [pc, #416]	@ (8004354 <HAL_DMA_IRQHandler+0xa38>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00e      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a67      	ldr	r2, [pc, #412]	@ (8004358 <HAL_DMA_IRQHandler+0xa3c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d009      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a65      	ldr	r2, [pc, #404]	@ (800435c <HAL_DMA_IRQHandler+0xa40>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x8b8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a64      	ldr	r2, [pc, #400]	@ (8004360 <HAL_DMA_IRQHandler+0xa44>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x8ca>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e007      	b.n	80041f6 <HAL_DMA_IRQHandler+0x8da>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3301      	adds	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fe:	429a      	cmp	r2, r3
 8004200:	d307      	bcc.n	8004212 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f2      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x8da>
 8004210:	e000      	b.n	8004214 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004212:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2203      	movs	r2, #3
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800422a:	e003      	b.n	8004234 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8272 	beq.w	800472a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
 800424e:	e26c      	b.n	800472a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a43      	ldr	r2, [pc, #268]	@ (8004364 <HAL_DMA_IRQHandler+0xa48>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x984>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a42      	ldr	r2, [pc, #264]	@ (8004368 <HAL_DMA_IRQHandler+0xa4c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x984>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a40      	ldr	r2, [pc, #256]	@ (800436c <HAL_DMA_IRQHandler+0xa50>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x984>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3f      	ldr	r2, [pc, #252]	@ (8004370 <HAL_DMA_IRQHandler+0xa54>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x984>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3d      	ldr	r2, [pc, #244]	@ (8004374 <HAL_DMA_IRQHandler+0xa58>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x984>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a3c      	ldr	r2, [pc, #240]	@ (8004378 <HAL_DMA_IRQHandler+0xa5c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x984>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3a      	ldr	r2, [pc, #232]	@ (800437c <HAL_DMA_IRQHandler+0xa60>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x984>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a39      	ldr	r2, [pc, #228]	@ (8004380 <HAL_DMA_IRQHandler+0xa64>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x988>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_DMA_IRQHandler+0x98a>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 823f 	beq.w	800472a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2204      	movs	r2, #4
 80042be:	409a      	lsls	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80cd 	beq.w	8004464 <HAL_DMA_IRQHandler+0xb48>
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80c7 	beq.w	8004464 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2204      	movs	r2, #4
 80042e0:	409a      	lsls	r2, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d049      	beq.n	8004384 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8210 	beq.w	8004724 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800430c:	e20a      	b.n	8004724 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8206 	beq.w	8004724 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004320:	e200      	b.n	8004724 <HAL_DMA_IRQHandler+0xe08>
 8004322:	bf00      	nop
 8004324:	40020010 	.word	0x40020010
 8004328:	40020028 	.word	0x40020028
 800432c:	40020040 	.word	0x40020040
 8004330:	40020058 	.word	0x40020058
 8004334:	40020070 	.word	0x40020070
 8004338:	40020088 	.word	0x40020088
 800433c:	400200a0 	.word	0x400200a0
 8004340:	400200b8 	.word	0x400200b8
 8004344:	40020410 	.word	0x40020410
 8004348:	40020428 	.word	0x40020428
 800434c:	40020440 	.word	0x40020440
 8004350:	40020458 	.word	0x40020458
 8004354:	40020470 	.word	0x40020470
 8004358:	40020488 	.word	0x40020488
 800435c:	400204a0 	.word	0x400204a0
 8004360:	400204b8 	.word	0x400204b8
 8004364:	58025408 	.word	0x58025408
 8004368:	5802541c 	.word	0x5802541c
 800436c:	58025430 	.word	0x58025430
 8004370:	58025444 	.word	0x58025444
 8004374:	58025458 	.word	0x58025458
 8004378:	5802546c 	.word	0x5802546c
 800437c:	58025480 	.word	0x58025480
 8004380:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d160      	bne.n	8004450 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7f      	ldr	r2, [pc, #508]	@ (8004590 <HAL_DMA_IRQHandler+0xc74>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04a      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a7d      	ldr	r2, [pc, #500]	@ (8004594 <HAL_DMA_IRQHandler+0xc78>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d045      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004598 <HAL_DMA_IRQHandler+0xc7c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d040      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a7a      	ldr	r2, [pc, #488]	@ (800459c <HAL_DMA_IRQHandler+0xc80>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d03b      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a79      	ldr	r2, [pc, #484]	@ (80045a0 <HAL_DMA_IRQHandler+0xc84>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d036      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a77      	ldr	r2, [pc, #476]	@ (80045a4 <HAL_DMA_IRQHandler+0xc88>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d031      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a76      	ldr	r2, [pc, #472]	@ (80045a8 <HAL_DMA_IRQHandler+0xc8c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d02c      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a74      	ldr	r2, [pc, #464]	@ (80045ac <HAL_DMA_IRQHandler+0xc90>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d027      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	@ (80045b0 <HAL_DMA_IRQHandler+0xc94>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a71      	ldr	r2, [pc, #452]	@ (80045b4 <HAL_DMA_IRQHandler+0xc98>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a70      	ldr	r2, [pc, #448]	@ (80045b8 <HAL_DMA_IRQHandler+0xc9c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6e      	ldr	r2, [pc, #440]	@ (80045bc <HAL_DMA_IRQHandler+0xca0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6d      	ldr	r2, [pc, #436]	@ (80045c0 <HAL_DMA_IRQHandler+0xca4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <HAL_DMA_IRQHandler+0xca8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6a      	ldr	r2, [pc, #424]	@ (80045c8 <HAL_DMA_IRQHandler+0xcac>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_IRQHandler+0xb12>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a68      	ldr	r2, [pc, #416]	@ (80045cc <HAL_DMA_IRQHandler+0xcb0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d108      	bne.n	8004440 <HAL_DMA_IRQHandler+0xb24>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0208 	bic.w	r2, r2, #8
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	e007      	b.n	8004450 <HAL_DMA_IRQHandler+0xb34>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8165 	beq.w	8004724 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004462:	e15f      	b.n	8004724 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2202      	movs	r2, #2
 800446e:	409a      	lsls	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80c5 	beq.w	8004604 <HAL_DMA_IRQHandler+0xce8>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80bf 	beq.w	8004604 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	2202      	movs	r2, #2
 8004490:	409a      	lsls	r2, r3
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 813a 	beq.w	8004728 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044bc:	e134      	b.n	8004728 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8130 	beq.w	8004728 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d0:	e12a      	b.n	8004728 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 8089 	bne.w	80045f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004590 <HAL_DMA_IRQHandler+0xc74>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d04a      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a29      	ldr	r2, [pc, #164]	@ (8004594 <HAL_DMA_IRQHandler+0xc78>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d045      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a28      	ldr	r2, [pc, #160]	@ (8004598 <HAL_DMA_IRQHandler+0xc7c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d040      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a26      	ldr	r2, [pc, #152]	@ (800459c <HAL_DMA_IRQHandler+0xc80>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a25      	ldr	r2, [pc, #148]	@ (80045a0 <HAL_DMA_IRQHandler+0xc84>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d036      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a23      	ldr	r2, [pc, #140]	@ (80045a4 <HAL_DMA_IRQHandler+0xc88>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d031      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a22      	ldr	r2, [pc, #136]	@ (80045a8 <HAL_DMA_IRQHandler+0xc8c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d02c      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a20      	ldr	r2, [pc, #128]	@ (80045ac <HAL_DMA_IRQHandler+0xc90>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d027      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1f      	ldr	r2, [pc, #124]	@ (80045b0 <HAL_DMA_IRQHandler+0xc94>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <HAL_DMA_IRQHandler+0xc98>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1c      	ldr	r2, [pc, #112]	@ (80045b8 <HAL_DMA_IRQHandler+0xc9c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1a      	ldr	r2, [pc, #104]	@ (80045bc <HAL_DMA_IRQHandler+0xca0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <HAL_DMA_IRQHandler+0xca4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <HAL_DMA_IRQHandler+0xca8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <HAL_DMA_IRQHandler+0xcac>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_DMA_IRQHandler+0xc62>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a14      	ldr	r2, [pc, #80]	@ (80045cc <HAL_DMA_IRQHandler+0xcb0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d128      	bne.n	80045d0 <HAL_DMA_IRQHandler+0xcb4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0214 	bic.w	r2, r2, #20
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e027      	b.n	80045e0 <HAL_DMA_IRQHandler+0xcc4>
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 020a 	bic.w	r2, r2, #10
 80045de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8097 	beq.w	8004728 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004602:	e091      	b.n	8004728 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2208      	movs	r2, #8
 800460e:	409a      	lsls	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8088 	beq.w	800472a <HAL_DMA_IRQHandler+0xe0e>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8082 	beq.w	800472a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a41      	ldr	r2, [pc, #260]	@ (8004730 <HAL_DMA_IRQHandler+0xe14>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d04a      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a3f      	ldr	r2, [pc, #252]	@ (8004734 <HAL_DMA_IRQHandler+0xe18>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d045      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3e      	ldr	r2, [pc, #248]	@ (8004738 <HAL_DMA_IRQHandler+0xe1c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d040      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a3c      	ldr	r2, [pc, #240]	@ (800473c <HAL_DMA_IRQHandler+0xe20>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d03b      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3b      	ldr	r2, [pc, #236]	@ (8004740 <HAL_DMA_IRQHandler+0xe24>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d036      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a39      	ldr	r2, [pc, #228]	@ (8004744 <HAL_DMA_IRQHandler+0xe28>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a38      	ldr	r2, [pc, #224]	@ (8004748 <HAL_DMA_IRQHandler+0xe2c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d02c      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a36      	ldr	r2, [pc, #216]	@ (800474c <HAL_DMA_IRQHandler+0xe30>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d027      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a35      	ldr	r2, [pc, #212]	@ (8004750 <HAL_DMA_IRQHandler+0xe34>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a33      	ldr	r2, [pc, #204]	@ (8004754 <HAL_DMA_IRQHandler+0xe38>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01d      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a32      	ldr	r2, [pc, #200]	@ (8004758 <HAL_DMA_IRQHandler+0xe3c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a30      	ldr	r2, [pc, #192]	@ (800475c <HAL_DMA_IRQHandler+0xe40>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004760 <HAL_DMA_IRQHandler+0xe44>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004764 <HAL_DMA_IRQHandler+0xe48>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <HAL_DMA_IRQHandler+0xe4c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xdaa>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2a      	ldr	r2, [pc, #168]	@ (800476c <HAL_DMA_IRQHandler+0xe50>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <HAL_DMA_IRQHandler+0xdbc>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 021c 	bic.w	r2, r2, #28
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e007      	b.n	80046e8 <HAL_DMA_IRQHandler+0xdcc>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 020e 	bic.w	r2, r2, #14
 80046e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2201      	movs	r2, #1
 80046f2:	409a      	lsls	r2, r3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
 800471e:	e004      	b.n	800472a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004720:	bf00      	nop
 8004722:	e002      	b.n	800472a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004724:	bf00      	nop
 8004726:	e000      	b.n	800472a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004728:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800472a:	3728      	adds	r7, #40	@ 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40020010 	.word	0x40020010
 8004734:	40020028 	.word	0x40020028
 8004738:	40020040 	.word	0x40020040
 800473c:	40020058 	.word	0x40020058
 8004740:	40020070 	.word	0x40020070
 8004744:	40020088 	.word	0x40020088
 8004748:	400200a0 	.word	0x400200a0
 800474c:	400200b8 	.word	0x400200b8
 8004750:	40020410 	.word	0x40020410
 8004754:	40020428 	.word	0x40020428
 8004758:	40020440 	.word	0x40020440
 800475c:	40020458 	.word	0x40020458
 8004760:	40020470 	.word	0x40020470
 8004764:	40020488 	.word	0x40020488
 8004768:	400204a0 	.word	0x400204a0
 800476c:	400204b8 	.word	0x400204b8

08004770 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7f      	ldr	r2, [pc, #508]	@ (80049a4 <DMA_SetConfig+0x21c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d072      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a7d      	ldr	r2, [pc, #500]	@ (80049a8 <DMA_SetConfig+0x220>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d06d      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a7c      	ldr	r2, [pc, #496]	@ (80049ac <DMA_SetConfig+0x224>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d068      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a7a      	ldr	r2, [pc, #488]	@ (80049b0 <DMA_SetConfig+0x228>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d063      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a79      	ldr	r2, [pc, #484]	@ (80049b4 <DMA_SetConfig+0x22c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d05e      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a77      	ldr	r2, [pc, #476]	@ (80049b8 <DMA_SetConfig+0x230>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d059      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a76      	ldr	r2, [pc, #472]	@ (80049bc <DMA_SetConfig+0x234>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d054      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a74      	ldr	r2, [pc, #464]	@ (80049c0 <DMA_SetConfig+0x238>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d04f      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a73      	ldr	r2, [pc, #460]	@ (80049c4 <DMA_SetConfig+0x23c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d04a      	beq.n	8004892 <DMA_SetConfig+0x10a>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a71      	ldr	r2, [pc, #452]	@ (80049c8 <DMA_SetConfig+0x240>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d045      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a70      	ldr	r2, [pc, #448]	@ (80049cc <DMA_SetConfig+0x244>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d040      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6e      	ldr	r2, [pc, #440]	@ (80049d0 <DMA_SetConfig+0x248>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d03b      	beq.n	8004892 <DMA_SetConfig+0x10a>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6d      	ldr	r2, [pc, #436]	@ (80049d4 <DMA_SetConfig+0x24c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d036      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a6b      	ldr	r2, [pc, #428]	@ (80049d8 <DMA_SetConfig+0x250>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d031      	beq.n	8004892 <DMA_SetConfig+0x10a>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a6a      	ldr	r2, [pc, #424]	@ (80049dc <DMA_SetConfig+0x254>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d02c      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a68      	ldr	r2, [pc, #416]	@ (80049e0 <DMA_SetConfig+0x258>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d027      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a67      	ldr	r2, [pc, #412]	@ (80049e4 <DMA_SetConfig+0x25c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d022      	beq.n	8004892 <DMA_SetConfig+0x10a>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a65      	ldr	r2, [pc, #404]	@ (80049e8 <DMA_SetConfig+0x260>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01d      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a64      	ldr	r2, [pc, #400]	@ (80049ec <DMA_SetConfig+0x264>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d018      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a62      	ldr	r2, [pc, #392]	@ (80049f0 <DMA_SetConfig+0x268>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <DMA_SetConfig+0x10a>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a61      	ldr	r2, [pc, #388]	@ (80049f4 <DMA_SetConfig+0x26c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a5f      	ldr	r2, [pc, #380]	@ (80049f8 <DMA_SetConfig+0x270>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <DMA_SetConfig+0x10a>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a5e      	ldr	r2, [pc, #376]	@ (80049fc <DMA_SetConfig+0x274>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <DMA_SetConfig+0x10a>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a5c      	ldr	r2, [pc, #368]	@ (8004a00 <DMA_SetConfig+0x278>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <DMA_SetConfig+0x10e>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <DMA_SetConfig+0x110>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a39      	ldr	r2, [pc, #228]	@ (80049a4 <DMA_SetConfig+0x21c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d04a      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a38      	ldr	r2, [pc, #224]	@ (80049a8 <DMA_SetConfig+0x220>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d045      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a36      	ldr	r2, [pc, #216]	@ (80049ac <DMA_SetConfig+0x224>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d040      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a35      	ldr	r2, [pc, #212]	@ (80049b0 <DMA_SetConfig+0x228>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d03b      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a33      	ldr	r2, [pc, #204]	@ (80049b4 <DMA_SetConfig+0x22c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d036      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a32      	ldr	r2, [pc, #200]	@ (80049b8 <DMA_SetConfig+0x230>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d031      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a30      	ldr	r2, [pc, #192]	@ (80049bc <DMA_SetConfig+0x234>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d02c      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2f      	ldr	r2, [pc, #188]	@ (80049c0 <DMA_SetConfig+0x238>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d027      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2d      	ldr	r2, [pc, #180]	@ (80049c4 <DMA_SetConfig+0x23c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2c      	ldr	r2, [pc, #176]	@ (80049c8 <DMA_SetConfig+0x240>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d01d      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2a      	ldr	r2, [pc, #168]	@ (80049cc <DMA_SetConfig+0x244>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a29      	ldr	r2, [pc, #164]	@ (80049d0 <DMA_SetConfig+0x248>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a27      	ldr	r2, [pc, #156]	@ (80049d4 <DMA_SetConfig+0x24c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a26      	ldr	r2, [pc, #152]	@ (80049d8 <DMA_SetConfig+0x250>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a24      	ldr	r2, [pc, #144]	@ (80049dc <DMA_SetConfig+0x254>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <DMA_SetConfig+0x1d0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a23      	ldr	r2, [pc, #140]	@ (80049e0 <DMA_SetConfig+0x258>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <DMA_SetConfig+0x1d4>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <DMA_SetConfig+0x1d6>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d059      	beq.n	8004a16 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	223f      	movs	r2, #63	@ 0x3f
 800496c:	409a      	lsls	r2, r3
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004980:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b40      	cmp	r3, #64	@ 0x40
 8004990:	d138      	bne.n	8004a04 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049a2:	e086      	b.n	8004ab2 <DMA_SetConfig+0x32a>
 80049a4:	40020010 	.word	0x40020010
 80049a8:	40020028 	.word	0x40020028
 80049ac:	40020040 	.word	0x40020040
 80049b0:	40020058 	.word	0x40020058
 80049b4:	40020070 	.word	0x40020070
 80049b8:	40020088 	.word	0x40020088
 80049bc:	400200a0 	.word	0x400200a0
 80049c0:	400200b8 	.word	0x400200b8
 80049c4:	40020410 	.word	0x40020410
 80049c8:	40020428 	.word	0x40020428
 80049cc:	40020440 	.word	0x40020440
 80049d0:	40020458 	.word	0x40020458
 80049d4:	40020470 	.word	0x40020470
 80049d8:	40020488 	.word	0x40020488
 80049dc:	400204a0 	.word	0x400204a0
 80049e0:	400204b8 	.word	0x400204b8
 80049e4:	58025408 	.word	0x58025408
 80049e8:	5802541c 	.word	0x5802541c
 80049ec:	58025430 	.word	0x58025430
 80049f0:	58025444 	.word	0x58025444
 80049f4:	58025458 	.word	0x58025458
 80049f8:	5802546c 	.word	0x5802546c
 80049fc:	58025480 	.word	0x58025480
 8004a00:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]
}
 8004a14:	e04d      	b.n	8004ab2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <DMA_SetConfig+0x338>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <DMA_SetConfig+0x2de>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <DMA_SetConfig+0x33c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <DMA_SetConfig+0x2de>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ac8 <DMA_SetConfig+0x340>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <DMA_SetConfig+0x2de>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a24      	ldr	r2, [pc, #144]	@ (8004acc <DMA_SetConfig+0x344>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <DMA_SetConfig+0x2de>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a23      	ldr	r2, [pc, #140]	@ (8004ad0 <DMA_SetConfig+0x348>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <DMA_SetConfig+0x2de>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <DMA_SetConfig+0x34c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <DMA_SetConfig+0x2de>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a20      	ldr	r2, [pc, #128]	@ (8004ad8 <DMA_SetConfig+0x350>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <DMA_SetConfig+0x2de>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <DMA_SetConfig+0x354>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <DMA_SetConfig+0x2e2>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <DMA_SetConfig+0x2e4>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	f003 031f 	and.w	r3, r3, #31
 8004a78:	2201      	movs	r2, #1
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b40      	cmp	r3, #64	@ 0x40
 8004a8e:	d108      	bne.n	8004aa2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	60da      	str	r2, [r3, #12]
}
 8004aa0:	e007      	b.n	8004ab2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	58025408 	.word	0x58025408
 8004ac4:	5802541c 	.word	0x5802541c
 8004ac8:	58025430 	.word	0x58025430
 8004acc:	58025444 	.word	0x58025444
 8004ad0:	58025458 	.word	0x58025458
 8004ad4:	5802546c 	.word	0x5802546c
 8004ad8:	58025480 	.word	0x58025480
 8004adc:	58025494 	.word	0x58025494

08004ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a42      	ldr	r2, [pc, #264]	@ (8004bf8 <DMA_CalcBaseAndBitshift+0x118>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d04a      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a41      	ldr	r2, [pc, #260]	@ (8004bfc <DMA_CalcBaseAndBitshift+0x11c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d045      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a3f      	ldr	r2, [pc, #252]	@ (8004c00 <DMA_CalcBaseAndBitshift+0x120>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d040      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c04 <DMA_CalcBaseAndBitshift+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d03b      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3c      	ldr	r2, [pc, #240]	@ (8004c08 <DMA_CalcBaseAndBitshift+0x128>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d036      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c0c <DMA_CalcBaseAndBitshift+0x12c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d031      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a39      	ldr	r2, [pc, #228]	@ (8004c10 <DMA_CalcBaseAndBitshift+0x130>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02c      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a38      	ldr	r2, [pc, #224]	@ (8004c14 <DMA_CalcBaseAndBitshift+0x134>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d027      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a36      	ldr	r2, [pc, #216]	@ (8004c18 <DMA_CalcBaseAndBitshift+0x138>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d022      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a35      	ldr	r2, [pc, #212]	@ (8004c1c <DMA_CalcBaseAndBitshift+0x13c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d01d      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a33      	ldr	r2, [pc, #204]	@ (8004c20 <DMA_CalcBaseAndBitshift+0x140>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d018      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a32      	ldr	r2, [pc, #200]	@ (8004c24 <DMA_CalcBaseAndBitshift+0x144>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a30      	ldr	r2, [pc, #192]	@ (8004c28 <DMA_CalcBaseAndBitshift+0x148>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00e      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c2c <DMA_CalcBaseAndBitshift+0x14c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d009      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2d      	ldr	r2, [pc, #180]	@ (8004c30 <DMA_CalcBaseAndBitshift+0x150>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2c      	ldr	r2, [pc, #176]	@ (8004c34 <DMA_CalcBaseAndBitshift+0x154>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <DMA_CalcBaseAndBitshift+0xac>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <DMA_CalcBaseAndBitshift+0xae>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d024      	beq.n	8004bdc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	3b10      	subs	r3, #16
 8004b9a:	4a27      	ldr	r2, [pc, #156]	@ (8004c38 <DMA_CalcBaseAndBitshift+0x158>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	4a24      	ldr	r2, [pc, #144]	@ (8004c3c <DMA_CalcBaseAndBitshift+0x15c>)
 8004bac:	5cd3      	ldrb	r3, [r2, r3]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d908      	bls.n	8004bcc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <DMA_CalcBaseAndBitshift+0x160>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	1d1a      	adds	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bca:	e00d      	b.n	8004be8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <DMA_CalcBaseAndBitshift+0x160>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bda:	e005      	b.n	8004be8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40020010 	.word	0x40020010
 8004bfc:	40020028 	.word	0x40020028
 8004c00:	40020040 	.word	0x40020040
 8004c04:	40020058 	.word	0x40020058
 8004c08:	40020070 	.word	0x40020070
 8004c0c:	40020088 	.word	0x40020088
 8004c10:	400200a0 	.word	0x400200a0
 8004c14:	400200b8 	.word	0x400200b8
 8004c18:	40020410 	.word	0x40020410
 8004c1c:	40020428 	.word	0x40020428
 8004c20:	40020440 	.word	0x40020440
 8004c24:	40020458 	.word	0x40020458
 8004c28:	40020470 	.word	0x40020470
 8004c2c:	40020488 	.word	0x40020488
 8004c30:	400204a0 	.word	0x400204a0
 8004c34:	400204b8 	.word	0x400204b8
 8004c38:	aaaaaaab 	.word	0xaaaaaaab
 8004c3c:	0800be8c 	.word	0x0800be8c
 8004c40:	fffffc00 	.word	0xfffffc00

08004c44 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d120      	bne.n	8004c9a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d858      	bhi.n	8004d12 <DMA_CheckFifoParam+0xce>
 8004c60:	a201      	add	r2, pc, #4	@ (adr r2, 8004c68 <DMA_CheckFifoParam+0x24>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004c8b 	.word	0x08004c8b
 8004c70:	08004c79 	.word	0x08004c79
 8004c74:	08004d13 	.word	0x08004d13
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d048      	beq.n	8004d16 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c88:	e045      	b.n	8004d16 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c92:	d142      	bne.n	8004d1a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c98:	e03f      	b.n	8004d1a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca2:	d123      	bne.n	8004cec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d838      	bhi.n	8004d1e <DMA_CheckFifoParam+0xda>
 8004cac:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <DMA_CheckFifoParam+0x70>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004ccb 	.word	0x08004ccb
 8004cbc:	08004cc5 	.word	0x08004cc5
 8004cc0:	08004cdd 	.word	0x08004cdd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
        break;
 8004cc8:	e030      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d025      	beq.n	8004d22 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cda:	e022      	b.n	8004d22 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ce4:	d11f      	bne.n	8004d26 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cea:	e01c      	b.n	8004d26 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d902      	bls.n	8004cfa <DMA_CheckFifoParam+0xb6>
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d003      	beq.n	8004d00 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004cf8:	e018      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cfe:	e015      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8004d10:	e00b      	b.n	8004d2a <DMA_CheckFifoParam+0xe6>
        break;
 8004d12:	bf00      	nop
 8004d14:	e00a      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
        break;
 8004d16:	bf00      	nop
 8004d18:	e008      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
        break;
 8004d1a:	bf00      	nop
 8004d1c:	e006      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
        break;
 8004d1e:	bf00      	nop
 8004d20:	e004      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
        break;
 8004d22:	bf00      	nop
 8004d24:	e002      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
        break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <DMA_CheckFifoParam+0xe8>
    break;
 8004d2a:	bf00      	nop
    }
  }

  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop

08004d3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a38      	ldr	r2, [pc, #224]	@ (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d022      	beq.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a36      	ldr	r2, [pc, #216]	@ (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01d      	beq.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a35      	ldr	r2, [pc, #212]	@ (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a33      	ldr	r2, [pc, #204]	@ (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a32      	ldr	r2, [pc, #200]	@ (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2d      	ldr	r2, [pc, #180]	@ (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01a      	beq.n	8004dda <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	3b08      	subs	r3, #8
 8004dac:	4a28      	ldr	r2, [pc, #160]	@ (8004e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4b26      	ldr	r3, [pc, #152]	@ (8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a24      	ldr	r2, [pc, #144]	@ (8004e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004dc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004dd8:	e024      	b.n	8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3b10      	subs	r3, #16
 8004de2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d806      	bhi.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d902      	bls.n	8004e02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4b18      	ldr	r3, [pc, #96]	@ (8004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e14:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	58025408 	.word	0x58025408
 8004e34:	5802541c 	.word	0x5802541c
 8004e38:	58025430 	.word	0x58025430
 8004e3c:	58025444 	.word	0x58025444
 8004e40:	58025458 	.word	0x58025458
 8004e44:	5802546c 	.word	0x5802546c
 8004e48:	58025480 	.word	0x58025480
 8004e4c:	58025494 	.word	0x58025494
 8004e50:	cccccccd 	.word	0xcccccccd
 8004e54:	16009600 	.word	0x16009600
 8004e58:	58025880 	.word	0x58025880
 8004e5c:	aaaaaaab 	.word	0xaaaaaaab
 8004e60:	400204b8 	.word	0x400204b8
 8004e64:	4002040f 	.word	0x4002040f
 8004e68:	10008200 	.word	0x10008200
 8004e6c:	40020880 	.word	0x40020880

08004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d04a      	beq.n	8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d847      	bhi.n	8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a25      	ldr	r2, [pc, #148]	@ (8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d022      	beq.n	8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a24      	ldr	r2, [pc, #144]	@ (8004f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d01d      	beq.n	8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a22      	ldr	r2, [pc, #136]	@ (8004f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d018      	beq.n	8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00e      	beq.n	8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d009      	beq.n	8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d101      	bne.n	8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4b17      	ldr	r3, [pc, #92]	@ (8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	461a      	mov	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ef8:	671a      	str	r2, [r3, #112]	@ 0x70
 8004efa:	e009      	b.n	8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a11      	ldr	r2, [pc, #68]	@ (8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f0e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	58025408 	.word	0x58025408
 8004f2c:	5802541c 	.word	0x5802541c
 8004f30:	58025430 	.word	0x58025430
 8004f34:	58025444 	.word	0x58025444
 8004f38:	58025458 	.word	0x58025458
 8004f3c:	5802546c 	.word	0x5802546c
 8004f40:	58025480 	.word	0x58025480
 8004f44:	58025494 	.word	0x58025494
 8004f48:	1600963f 	.word	0x1600963f
 8004f4c:	58025940 	.word	0x58025940
 8004f50:	1000823f 	.word	0x1000823f
 8004f54:	40020940 	.word	0x40020940

08004f58 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	460b      	mov	r3, r1
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e00a      	b.n	8004f8a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004f74:	7afb      	ldrb	r3, [r7, #11]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d103      	bne.n	8004f82 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	605a      	str	r2, [r3, #4]
      break;
 8004f80:	e002      	b.n	8004f88 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	75fb      	strb	r3, [r7, #23]
      break;
 8004f86:	bf00      	nop
  }

  return status;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e003      	b.n	8004fb2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2201      	movs	r2, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	011a      	lsls	r2, r3, #4
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800501c <HAL_EXTI_IRQHandler+0x5c>)
 8004fea:	4413      	add	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4798      	blx	r3
    }
  }
}
 8005012:	bf00      	nop
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	58000088 	.word	0x58000088

08005020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	@ 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800502e:	4b89      	ldr	r3, [pc, #548]	@ (8005254 <HAL_GPIO_Init+0x234>)
 8005030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005032:	e194      	b.n	800535e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2101      	movs	r1, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa01 f303 	lsl.w	r3, r1, r3
 8005040:	4013      	ands	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8186 	beq.w	8005358 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d005      	beq.n	8005064 <HAL_GPIO_Init+0x44>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d130      	bne.n	80050c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	2203      	movs	r2, #3
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800509a:	2201      	movs	r2, #1
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	f003 0201 	and.w	r2, r3, #1
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d017      	beq.n	8005102 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	2203      	movs	r2, #3
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d123      	bne.n	8005156 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	08da      	lsrs	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3208      	adds	r2, #8
 8005116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	220f      	movs	r2, #15
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	08da      	lsrs	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3208      	adds	r2, #8
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	2203      	movs	r2, #3
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f003 0203 	and.w	r2, r3, #3
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80e0 	beq.w	8005358 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005198:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <HAL_GPIO_Init+0x238>)
 800519a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800519e:	4a2e      	ldr	r2, [pc, #184]	@ (8005258 <HAL_GPIO_Init+0x238>)
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80051a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <HAL_GPIO_Init+0x238>)
 80051aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051b6:	4a29      	ldr	r2, [pc, #164]	@ (800525c <HAL_GPIO_Init+0x23c>)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	3302      	adds	r3, #2
 80051be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	220f      	movs	r2, #15
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43db      	mvns	r3, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4013      	ands	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a20      	ldr	r2, [pc, #128]	@ (8005260 <HAL_GPIO_Init+0x240>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d052      	beq.n	8005288 <HAL_GPIO_Init+0x268>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005264 <HAL_GPIO_Init+0x244>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d031      	beq.n	800524e <HAL_GPIO_Init+0x22e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <HAL_GPIO_Init+0x248>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d02b      	beq.n	800524a <HAL_GPIO_Init+0x22a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <HAL_GPIO_Init+0x24c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d025      	beq.n	8005246 <HAL_GPIO_Init+0x226>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <HAL_GPIO_Init+0x250>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01f      	beq.n	8005242 <HAL_GPIO_Init+0x222>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <HAL_GPIO_Init+0x254>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d019      	beq.n	800523e <HAL_GPIO_Init+0x21e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1a      	ldr	r2, [pc, #104]	@ (8005278 <HAL_GPIO_Init+0x258>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_GPIO_Init+0x21a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_GPIO_Init+0x25c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00d      	beq.n	8005236 <HAL_GPIO_Init+0x216>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a18      	ldr	r2, [pc, #96]	@ (8005280 <HAL_GPIO_Init+0x260>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <HAL_GPIO_Init+0x212>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <HAL_GPIO_Init+0x264>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <HAL_GPIO_Init+0x20e>
 800522a:	2309      	movs	r3, #9
 800522c:	e02d      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800522e:	230a      	movs	r3, #10
 8005230:	e02b      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005232:	2308      	movs	r3, #8
 8005234:	e029      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005236:	2307      	movs	r3, #7
 8005238:	e027      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800523a:	2306      	movs	r3, #6
 800523c:	e025      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800523e:	2305      	movs	r3, #5
 8005240:	e023      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005242:	2304      	movs	r3, #4
 8005244:	e021      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005246:	2303      	movs	r3, #3
 8005248:	e01f      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800524a:	2302      	movs	r3, #2
 800524c:	e01d      	b.n	800528a <HAL_GPIO_Init+0x26a>
 800524e:	2301      	movs	r3, #1
 8005250:	e01b      	b.n	800528a <HAL_GPIO_Init+0x26a>
 8005252:	bf00      	nop
 8005254:	58000080 	.word	0x58000080
 8005258:	58024400 	.word	0x58024400
 800525c:	58000400 	.word	0x58000400
 8005260:	58020000 	.word	0x58020000
 8005264:	58020400 	.word	0x58020400
 8005268:	58020800 	.word	0x58020800
 800526c:	58020c00 	.word	0x58020c00
 8005270:	58021000 	.word	0x58021000
 8005274:	58021400 	.word	0x58021400
 8005278:	58021800 	.word	0x58021800
 800527c:	58021c00 	.word	0x58021c00
 8005280:	58022000 	.word	0x58022000
 8005284:	58022400 	.word	0x58022400
 8005288:	2300      	movs	r3, #0
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	f002 0203 	and.w	r2, r2, #3
 8005290:	0092      	lsls	r2, r2, #2
 8005292:	4093      	lsls	r3, r2
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800529a:	4938      	ldr	r1, [pc, #224]	@ (800537c <HAL_GPIO_Init+0x35c>)
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	089b      	lsrs	r3, r3, #2
 80052a0:	3302      	adds	r3, #2
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80052ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80052fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	43db      	mvns	r3, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4013      	ands	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	f47f ae63 	bne.w	8005034 <HAL_GPIO_Init+0x14>
  }
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	3724      	adds	r7, #36	@ 0x24
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	58000400 	.word	0x58000400

08005380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	807b      	strh	r3, [r7, #2]
 800538c:	4613      	mov	r3, r2
 800538e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005390:	787b      	ldrb	r3, [r7, #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800539c:	e003      	b.n	80053a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800539e:	887b      	ldrh	r3, [r7, #2]
 80053a0:	041a      	lsls	r2, r3, #16
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	619a      	str	r2, [r3, #24]
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053c4:	887a      	ldrh	r2, [r7, #2]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4013      	ands	r3, r2
 80053ca:	041a      	lsls	r2, r3, #16
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	43d9      	mvns	r1, r3
 80053d0:	887b      	ldrh	r3, [r7, #2]
 80053d2:	400b      	ands	r3, r1
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	619a      	str	r2, [r3, #24]
}
 80053da:	bf00      	nop
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80053f0:	4b19      	ldr	r3, [pc, #100]	@ (8005458 <HAL_PWREx_ConfigSupply+0x70>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d00a      	beq.n	8005412 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053fc:	4b16      	ldr	r3, [pc, #88]	@ (8005458 <HAL_PWREx_ConfigSupply+0x70>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d001      	beq.n	800540e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e01f      	b.n	800544e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e01d      	b.n	800544e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005412:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <HAL_PWREx_ConfigSupply+0x70>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f023 0207 	bic.w	r2, r3, #7
 800541a:	490f      	ldr	r1, [pc, #60]	@ (8005458 <HAL_PWREx_ConfigSupply+0x70>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4313      	orrs	r3, r2
 8005420:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005422:	f7fc fe05 	bl	8002030 <HAL_GetTick>
 8005426:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005428:	e009      	b.n	800543e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800542a:	f7fc fe01 	bl	8002030 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005438:	d901      	bls.n	800543e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e007      	b.n	800544e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800543e:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <HAL_PWREx_ConfigSupply+0x70>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800544a:	d1ee      	bne.n	800542a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	58024800 	.word	0x58024800

0800545c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08c      	sub	sp, #48	@ 0x30
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f000 bc48 	b.w	8005d00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8088 	beq.w	800558e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547e:	4b99      	ldr	r3, [pc, #612]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005488:	4b96      	ldr	r3, [pc, #600]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005490:	2b10      	cmp	r3, #16
 8005492:	d007      	beq.n	80054a4 <HAL_RCC_OscConfig+0x48>
 8005494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005496:	2b18      	cmp	r3, #24
 8005498:	d111      	bne.n	80054be <HAL_RCC_OscConfig+0x62>
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d10c      	bne.n	80054be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a4:	4b8f      	ldr	r3, [pc, #572]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d06d      	beq.n	800558c <HAL_RCC_OscConfig+0x130>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d169      	bne.n	800558c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	f000 bc21 	b.w	8005d00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x7a>
 80054c8:	4b86      	ldr	r3, [pc, #536]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a85      	ldr	r2, [pc, #532]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80054ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e02e      	b.n	8005534 <HAL_RCC_OscConfig+0xd8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x9c>
 80054de:	4b81      	ldr	r3, [pc, #516]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a80      	ldr	r2, [pc, #512]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80054e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b7e      	ldr	r3, [pc, #504]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a7d      	ldr	r2, [pc, #500]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80054f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e01d      	b.n	8005534 <HAL_RCC_OscConfig+0xd8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0xc0>
 8005502:	4b78      	ldr	r3, [pc, #480]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a77      	ldr	r2, [pc, #476]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b75      	ldr	r3, [pc, #468]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a74      	ldr	r2, [pc, #464]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e00b      	b.n	8005534 <HAL_RCC_OscConfig+0xd8>
 800551c:	4b71      	ldr	r3, [pc, #452]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a70      	ldr	r2, [pc, #448]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	4b6e      	ldr	r3, [pc, #440]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a6d      	ldr	r2, [pc, #436]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800552e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d013      	beq.n	8005564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fc fd78 	bl	8002030 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005544:	f7fc fd74 	bl	8002030 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	@ 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e3d4      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005556:	4b63      	ldr	r3, [pc, #396]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0xe8>
 8005562:	e014      	b.n	800558e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fc fd64 	bl	8002030 <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556c:	f7fc fd60 	bl	8002030 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	@ 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e3c0      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800557e:	4b59      	ldr	r3, [pc, #356]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x110>
 800558a:	e000      	b.n	800558e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80ca 	beq.w	8005730 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800559c:	4b51      	ldr	r3, [pc, #324]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055a6:	4b4f      	ldr	r3, [pc, #316]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_RCC_OscConfig+0x166>
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2b18      	cmp	r3, #24
 80055b6:	d156      	bne.n	8005666 <HAL_RCC_OscConfig+0x20a>
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d151      	bne.n	8005666 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c2:	4b48      	ldr	r3, [pc, #288]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_RCC_OscConfig+0x17e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e392      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055da:	4b42      	ldr	r3, [pc, #264]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 0219 	bic.w	r2, r3, #25
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	493f      	ldr	r1, [pc, #252]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fc fd20 	bl	8002030 <HAL_GetTick>
 80055f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f4:	f7fc fd1c 	bl	8002030 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e37c      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005606:	4b37      	ldr	r3, [pc, #220]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005612:	f7fc fd3d 	bl	8002090 <HAL_GetREVID>
 8005616:	4603      	mov	r3, r0
 8005618:	f241 0203 	movw	r2, #4099	@ 0x1003
 800561c:	4293      	cmp	r3, r2
 800561e:	d817      	bhi.n	8005650 <HAL_RCC_OscConfig+0x1f4>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d108      	bne.n	800563a <HAL_RCC_OscConfig+0x1de>
 8005628:	4b2e      	ldr	r3, [pc, #184]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005630:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005636:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005638:	e07a      	b.n	8005730 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563a:	4b2a      	ldr	r3, [pc, #168]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	031b      	lsls	r3, r3, #12
 8005648:	4926      	ldr	r1, [pc, #152]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800564a:	4313      	orrs	r3, r2
 800564c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800564e:	e06f      	b.n	8005730 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005650:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	4921      	ldr	r1, [pc, #132]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005664:	e064      	b.n	8005730 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d047      	beq.n	80056fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800566e:	4b1d      	ldr	r3, [pc, #116]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 0219 	bic.w	r2, r3, #25
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	491a      	ldr	r1, [pc, #104]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fc fcd6 	bl	8002030 <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005688:	f7fc fcd2 	bl	8002030 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e332      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a6:	f7fc fcf3 	bl	8002090 <HAL_GetREVID>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d819      	bhi.n	80056e8 <HAL_RCC_OscConfig+0x28c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b40      	cmp	r3, #64	@ 0x40
 80056ba:	d108      	bne.n	80056ce <HAL_RCC_OscConfig+0x272>
 80056bc:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80056c4:	4a07      	ldr	r2, [pc, #28]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80056c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ca:	6053      	str	r3, [r2, #4]
 80056cc:	e030      	b.n	8005730 <HAL_RCC_OscConfig+0x2d4>
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	031b      	lsls	r3, r3, #12
 80056dc:	4901      	ldr	r1, [pc, #4]	@ (80056e4 <HAL_RCC_OscConfig+0x288>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	604b      	str	r3, [r1, #4]
 80056e2:	e025      	b.n	8005730 <HAL_RCC_OscConfig+0x2d4>
 80056e4:	58024400 	.word	0x58024400
 80056e8:	4b9a      	ldr	r3, [pc, #616]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	4997      	ldr	r1, [pc, #604]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
 80056fc:	e018      	b.n	8005730 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fe:	4b95      	ldr	r3, [pc, #596]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a94      	ldr	r2, [pc, #592]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fc fc91 	bl	8002030 <HAL_GetTick>
 800570e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005712:	f7fc fc8d 	bl	8002030 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e2ed      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005724:	4b8b      	ldr	r3, [pc, #556]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 80a9 	beq.w	8005890 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573e:	4b85      	ldr	r3, [pc, #532]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005746:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005748:	4b82      	ldr	r3, [pc, #520]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 800574a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b08      	cmp	r3, #8
 8005752:	d007      	beq.n	8005764 <HAL_RCC_OscConfig+0x308>
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b18      	cmp	r3, #24
 8005758:	d13a      	bne.n	80057d0 <HAL_RCC_OscConfig+0x374>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d135      	bne.n	80057d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005764:	4b7b      	ldr	r3, [pc, #492]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_RCC_OscConfig+0x320>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2b80      	cmp	r3, #128	@ 0x80
 8005776:	d001      	beq.n	800577c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e2c1      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800577c:	f7fc fc88 	bl	8002090 <HAL_GetREVID>
 8005780:	4603      	mov	r3, r0
 8005782:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005786:	4293      	cmp	r3, r2
 8005788:	d817      	bhi.n	80057ba <HAL_RCC_OscConfig+0x35e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	2b20      	cmp	r3, #32
 8005790:	d108      	bne.n	80057a4 <HAL_RCC_OscConfig+0x348>
 8005792:	4b70      	ldr	r3, [pc, #448]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800579a:	4a6e      	ldr	r2, [pc, #440]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 800579c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057a2:	e075      	b.n	8005890 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	069b      	lsls	r3, r3, #26
 80057b2:	4968      	ldr	r1, [pc, #416]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057b8:	e06a      	b.n	8005890 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057ba:	4b66      	ldr	r3, [pc, #408]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	061b      	lsls	r3, r3, #24
 80057c8:	4962      	ldr	r1, [pc, #392]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057ce:	e05f      	b.n	8005890 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d042      	beq.n	800585e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80057d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80057de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fc fc24 	bl	8002030 <HAL_GetTick>
 80057e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80057ec:	f7fc fc20 	bl	8002030 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e280      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057fe:	4b55      	ldr	r3, [pc, #340]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800580a:	f7fc fc41 	bl	8002090 <HAL_GetREVID>
 800580e:	4603      	mov	r3, r0
 8005810:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005814:	4293      	cmp	r3, r2
 8005816:	d817      	bhi.n	8005848 <HAL_RCC_OscConfig+0x3ec>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	2b20      	cmp	r3, #32
 800581e:	d108      	bne.n	8005832 <HAL_RCC_OscConfig+0x3d6>
 8005820:	4b4c      	ldr	r3, [pc, #304]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005828:	4a4a      	ldr	r2, [pc, #296]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 800582a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800582e:	6053      	str	r3, [r2, #4]
 8005830:	e02e      	b.n	8005890 <HAL_RCC_OscConfig+0x434>
 8005832:	4b48      	ldr	r3, [pc, #288]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	069b      	lsls	r3, r3, #26
 8005840:	4944      	ldr	r1, [pc, #272]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005842:	4313      	orrs	r3, r2
 8005844:	604b      	str	r3, [r1, #4]
 8005846:	e023      	b.n	8005890 <HAL_RCC_OscConfig+0x434>
 8005848:	4b42      	ldr	r3, [pc, #264]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	493f      	ldr	r1, [pc, #252]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005858:	4313      	orrs	r3, r2
 800585a:	60cb      	str	r3, [r1, #12]
 800585c:	e018      	b.n	8005890 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800585e:	4b3d      	ldr	r3, [pc, #244]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a3c      	ldr	r2, [pc, #240]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fc fbe1 	bl	8002030 <HAL_GetTick>
 800586e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005872:	f7fc fbdd 	bl	8002030 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e23d      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005884:	4b33      	ldr	r3, [pc, #204]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d036      	beq.n	800590a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d019      	beq.n	80058d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80058a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fc fbbe 	bl	8002030 <HAL_GetTick>
 80058b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b8:	f7fc fbba 	bl	8002030 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e21a      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058ca:	4b22      	ldr	r3, [pc, #136]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x45c>
 80058d6:	e018      	b.n	800590a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80058da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fc fba4 	bl	8002030 <HAL_GetTick>
 80058e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ec:	f7fc fba0 	bl	8002030 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e200      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d039      	beq.n	800598a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01c      	beq.n	8005958 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800591e:	4b0d      	ldr	r3, [pc, #52]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a0c      	ldr	r2, [pc, #48]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005928:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800592a:	f7fc fb81 	bl	8002030 <HAL_GetTick>
 800592e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005932:	f7fc fb7d 	bl	8002030 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e1dd      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005944:	4b03      	ldr	r3, [pc, #12]	@ (8005954 <HAL_RCC_OscConfig+0x4f8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0x4d6>
 8005950:	e01b      	b.n	800598a <HAL_RCC_OscConfig+0x52e>
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005958:	4b9b      	ldr	r3, [pc, #620]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a9a      	ldr	r2, [pc, #616]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 800595e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005962:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005964:	f7fc fb64 	bl	8002030 <HAL_GetTick>
 8005968:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800596c:	f7fc fb60 	bl	8002030 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e1c0      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800597e:	4b92      	ldr	r3, [pc, #584]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8081 	beq.w	8005a9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005998:	4b8c      	ldr	r3, [pc, #560]	@ (8005bcc <HAL_RCC_OscConfig+0x770>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a8b      	ldr	r2, [pc, #556]	@ (8005bcc <HAL_RCC_OscConfig+0x770>)
 800599e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059a4:	f7fc fb44 	bl	8002030 <HAL_GetTick>
 80059a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ac:	f7fc fb40 	bl	8002030 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	@ 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e1a0      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059be:	4b83      	ldr	r3, [pc, #524]	@ (8005bcc <HAL_RCC_OscConfig+0x770>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d106      	bne.n	80059e0 <HAL_RCC_OscConfig+0x584>
 80059d2:	4b7d      	ldr	r3, [pc, #500]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d6:	4a7c      	ldr	r2, [pc, #496]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059de:	e02d      	b.n	8005a3c <HAL_RCC_OscConfig+0x5e0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCC_OscConfig+0x5a6>
 80059e8:	4b77      	ldr	r3, [pc, #476]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ec:	4a76      	ldr	r2, [pc, #472]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f4:	4b74      	ldr	r3, [pc, #464]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f8:	4a73      	ldr	r2, [pc, #460]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 80059fa:	f023 0304 	bic.w	r3, r3, #4
 80059fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a00:	e01c      	b.n	8005a3c <HAL_RCC_OscConfig+0x5e0>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	d10c      	bne.n	8005a24 <HAL_RCC_OscConfig+0x5c8>
 8005a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a10:	f043 0304 	orr.w	r3, r3, #4
 8005a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a16:	4b6c      	ldr	r3, [pc, #432]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	4a6b      	ldr	r2, [pc, #428]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a22:	e00b      	b.n	8005a3c <HAL_RCC_OscConfig+0x5e0>
 8005a24:	4b68      	ldr	r3, [pc, #416]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	4a67      	ldr	r2, [pc, #412]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a2a:	f023 0301 	bic.w	r3, r3, #1
 8005a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a30:	4b65      	ldr	r3, [pc, #404]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a34:	4a64      	ldr	r2, [pc, #400]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a36:	f023 0304 	bic.w	r3, r3, #4
 8005a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fc faf4 	bl	8002030 <HAL_GetTick>
 8005a48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4c:	f7fc faf0 	bl	8002030 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e14e      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a62:	4b59      	ldr	r3, [pc, #356]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0ee      	beq.n	8005a4c <HAL_RCC_OscConfig+0x5f0>
 8005a6e:	e014      	b.n	8005a9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fc fade 	bl	8002030 <HAL_GetTick>
 8005a74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a78:	f7fc fada 	bl	8002030 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e138      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1ee      	bne.n	8005a78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 812d 	beq.w	8005cfe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005aa4:	4b48      	ldr	r3, [pc, #288]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aac:	2b18      	cmp	r3, #24
 8005aae:	f000 80bd 	beq.w	8005c2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	f040 809e 	bne.w	8005bf8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005abc:	4b42      	ldr	r3, [pc, #264]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a41      	ldr	r2, [pc, #260]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7fc fab2 	bl	8002030 <HAL_GetTick>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fc faae 	bl	8002030 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e10e      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ae2:	4b39      	ldr	r3, [pc, #228]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aee:	4b36      	ldr	r3, [pc, #216]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005af0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005af2:	4b37      	ldr	r3, [pc, #220]	@ (8005bd0 <HAL_RCC_OscConfig+0x774>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005afe:	0112      	lsls	r2, r2, #4
 8005b00:	430a      	orrs	r2, r1
 8005b02:	4931      	ldr	r1, [pc, #196]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b16:	3b01      	subs	r3, #1
 8005b18:	025b      	lsls	r3, r3, #9
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	3b01      	subs	r3, #1
 8005b24:	041b      	lsls	r3, r3, #16
 8005b26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	3b01      	subs	r3, #1
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b38:	4923      	ldr	r1, [pc, #140]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b3e:	4b22      	ldr	r3, [pc, #136]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b4e:	4b21      	ldr	r3, [pc, #132]	@ (8005bd4 <HAL_RCC_OscConfig+0x778>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b56:	00d2      	lsls	r2, r2, #3
 8005b58:	491b      	ldr	r1, [pc, #108]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	f023 020c 	bic.w	r2, r3, #12
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	4917      	ldr	r1, [pc, #92]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b70:	4b15      	ldr	r3, [pc, #84]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	f023 0202 	bic.w	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7c:	4912      	ldr	r1, [pc, #72]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b82:	4b11      	ldr	r3, [pc, #68]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b86:	4a10      	ldr	r2, [pc, #64]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ba6:	4b08      	ldr	r3, [pc, #32]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005baa:	4a07      	ldr	r2, [pc, #28]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb2:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a04      	ldr	r2, [pc, #16]	@ (8005bc8 <HAL_RCC_OscConfig+0x76c>)
 8005bb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fc fa37 	bl	8002030 <HAL_GetTick>
 8005bc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bc4:	e011      	b.n	8005bea <HAL_RCC_OscConfig+0x78e>
 8005bc6:	bf00      	nop
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	58024800 	.word	0x58024800
 8005bd0:	fffffc0c 	.word	0xfffffc0c
 8005bd4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fc fa2a 	bl	8002030 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e08a      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bea:	4b47      	ldr	r3, [pc, #284]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x77c>
 8005bf6:	e082      	b.n	8005cfe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf8:	4b43      	ldr	r3, [pc, #268]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a42      	ldr	r2, [pc, #264]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c04:	f7fc fa14 	bl	8002030 <HAL_GetTick>
 8005c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fc fa10 	bl	8002030 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e070      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x7b0>
 8005c2a:	e068      	b.n	8005cfe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c2c:	4b36      	ldr	r3, [pc, #216]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c32:	4b35      	ldr	r3, [pc, #212]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d031      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f003 0203 	and.w	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d12a      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d122      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d11a      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	0a5b      	lsrs	r3, r3, #9
 8005c72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d111      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	0c1b      	lsrs	r3, r3, #16
 8005c84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d108      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	0e1b      	lsrs	r3, r3, #24
 8005c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e02b      	b.n	8005d00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005ca8:	4b17      	ldr	r3, [pc, #92]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	08db      	lsrs	r3, r3, #3
 8005cae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d01f      	beq.n	8005cfe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005cbe:	4b12      	ldr	r3, [pc, #72]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	4a11      	ldr	r2, [pc, #68]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cca:	f7fc f9b1 	bl	8002030 <HAL_GetTick>
 8005cce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005cd0:	bf00      	nop
 8005cd2:	f7fc f9ad 	bl	8002030 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d0f9      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005cde:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <HAL_RCC_OscConfig+0x8b0>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005cea:	00d2      	lsls	r2, r2, #3
 8005cec:	4906      	ldr	r1, [pc, #24]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005cf2:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <HAL_RCC_OscConfig+0x8ac>)
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3730      	adds	r7, #48	@ 0x30
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	ffff0007 	.word	0xffff0007

08005d10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e19c      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d24:	4b8a      	ldr	r3, [pc, #552]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d910      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b87      	ldr	r3, [pc, #540]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 020f 	bic.w	r2, r3, #15
 8005d3a:	4985      	ldr	r1, [pc, #532]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b83      	ldr	r3, [pc, #524]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e184      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	4b7b      	ldr	r3, [pc, #492]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d908      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d70:	4b78      	ldr	r3, [pc, #480]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	4975      	ldr	r1, [pc, #468]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d010      	beq.n	8005db0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	4b70      	ldr	r3, [pc, #448]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d908      	bls.n	8005db0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	496a      	ldr	r1, [pc, #424]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	4b64      	ldr	r3, [pc, #400]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d908      	bls.n	8005dde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005dcc:	4b61      	ldr	r3, [pc, #388]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	495e      	ldr	r1, [pc, #376]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d010      	beq.n	8005e0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	4b59      	ldr	r3, [pc, #356]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d908      	bls.n	8005e0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dfa:	4b56      	ldr	r3, [pc, #344]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	4953      	ldr	r1, [pc, #332]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d908      	bls.n	8005e3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e28:	4b4a      	ldr	r3, [pc, #296]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f023 020f 	bic.w	r2, r3, #15
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	4947      	ldr	r1, [pc, #284]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d055      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e46:	4b43      	ldr	r3, [pc, #268]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4940      	ldr	r1, [pc, #256]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d107      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e60:	4b3c      	ldr	r3, [pc, #240]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d121      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0f6      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d107      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e78:	4b36      	ldr	r3, [pc, #216]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d115      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0ea      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e90:	4b30      	ldr	r3, [pc, #192]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0de      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0d6      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005eb0:	4b28      	ldr	r3, [pc, #160]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f023 0207 	bic.w	r2, r3, #7
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4925      	ldr	r1, [pc, #148]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec2:	f7fc f8b5 	bl	8002030 <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eca:	f7fc f8b1 	bl	8002030 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e0be      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d1eb      	bne.n	8005eca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d010      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	4b14      	ldr	r3, [pc, #80]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d208      	bcs.n	8005f20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f0e:	4b11      	ldr	r3, [pc, #68]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f023 020f 	bic.w	r2, r3, #15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	490e      	ldr	r1, [pc, #56]	@ (8005f54 <HAL_RCC_ClockConfig+0x244>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f20:	4b0b      	ldr	r3, [pc, #44]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d214      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f023 020f 	bic.w	r2, r3, #15
 8005f36:	4906      	ldr	r1, [pc, #24]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3e:	4b04      	ldr	r3, [pc, #16]	@ (8005f50 <HAL_RCC_ClockConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e086      	b.n	800605e <HAL_RCC_ClockConfig+0x34e>
 8005f50:	52002000 	.word	0x52002000
 8005f54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d010      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	4b3f      	ldr	r3, [pc, #252]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d208      	bcs.n	8005f86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f74:	4b3c      	ldr	r3, [pc, #240]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	4939      	ldr	r1, [pc, #228]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d010      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	4b34      	ldr	r3, [pc, #208]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d208      	bcs.n	8005fb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fa2:	4b31      	ldr	r3, [pc, #196]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	492e      	ldr	r1, [pc, #184]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d010      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d208      	bcs.n	8005fe2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fd0:	4b25      	ldr	r3, [pc, #148]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	4922      	ldr	r1, [pc, #136]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d208      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4917      	ldr	r1, [pc, #92]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 800600c:	4313      	orrs	r3, r2
 800600e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006010:	f000 f834 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8006014:	4602      	mov	r2, r0
 8006016:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	4912      	ldr	r1, [pc, #72]	@ (800606c <HAL_RCC_ClockConfig+0x35c>)
 8006022:	5ccb      	ldrb	r3, [r1, r3]
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
 800602c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800602e:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <HAL_RCC_ClockConfig+0x358>)
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a0d      	ldr	r2, [pc, #52]	@ (800606c <HAL_RCC_ClockConfig+0x35c>)
 8006038:	5cd3      	ldrb	r3, [r2, r3]
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
 8006044:	4a0a      	ldr	r2, [pc, #40]	@ (8006070 <HAL_RCC_ClockConfig+0x360>)
 8006046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006048:	4a0a      	ldr	r2, [pc, #40]	@ (8006074 <HAL_RCC_ClockConfig+0x364>)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800604e:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <HAL_RCC_ClockConfig+0x368>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fb ffa2 	bl	8001f9c <HAL_InitTick>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	58024400 	.word	0x58024400
 800606c:	0800be70 	.word	0x0800be70
 8006070:	24000828 	.word	0x24000828
 8006074:	24000824 	.word	0x24000824
 8006078:	24000848 	.word	0x24000848

0800607c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	@ 0x24
 8006080:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006082:	4bb3      	ldr	r3, [pc, #716]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800608a:	2b18      	cmp	r3, #24
 800608c:	f200 8155 	bhi.w	800633a <HAL_RCC_GetSysClockFreq+0x2be>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060fd 	.word	0x080060fd
 800609c:	0800633b 	.word	0x0800633b
 80060a0:	0800633b 	.word	0x0800633b
 80060a4:	0800633b 	.word	0x0800633b
 80060a8:	0800633b 	.word	0x0800633b
 80060ac:	0800633b 	.word	0x0800633b
 80060b0:	0800633b 	.word	0x0800633b
 80060b4:	0800633b 	.word	0x0800633b
 80060b8:	08006123 	.word	0x08006123
 80060bc:	0800633b 	.word	0x0800633b
 80060c0:	0800633b 	.word	0x0800633b
 80060c4:	0800633b 	.word	0x0800633b
 80060c8:	0800633b 	.word	0x0800633b
 80060cc:	0800633b 	.word	0x0800633b
 80060d0:	0800633b 	.word	0x0800633b
 80060d4:	0800633b 	.word	0x0800633b
 80060d8:	08006129 	.word	0x08006129
 80060dc:	0800633b 	.word	0x0800633b
 80060e0:	0800633b 	.word	0x0800633b
 80060e4:	0800633b 	.word	0x0800633b
 80060e8:	0800633b 	.word	0x0800633b
 80060ec:	0800633b 	.word	0x0800633b
 80060f0:	0800633b 	.word	0x0800633b
 80060f4:	0800633b 	.word	0x0800633b
 80060f8:	0800612f 	.word	0x0800612f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060fc:	4b94      	ldr	r3, [pc, #592]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006108:	4b91      	ldr	r3, [pc, #580]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	4a90      	ldr	r2, [pc, #576]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800611a:	e111      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800611c:	4b8d      	ldr	r3, [pc, #564]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800611e:	61bb      	str	r3, [r7, #24]
      break;
 8006120:	e10e      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006122:	4b8d      	ldr	r3, [pc, #564]	@ (8006358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006124:	61bb      	str	r3, [r7, #24]
      break;
 8006126:	e10b      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006128:	4b8c      	ldr	r3, [pc, #560]	@ (800635c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800612a:	61bb      	str	r3, [r7, #24]
      break;
 800612c:	e108      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800612e:	4b88      	ldr	r3, [pc, #544]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006138:	4b85      	ldr	r3, [pc, #532]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006142:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006144:	4b82      	ldr	r3, [pc, #520]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800614e:	4b80      	ldr	r3, [pc, #512]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006152:	08db      	lsrs	r3, r3, #3
 8006154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 80e1 	beq.w	8006334 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b02      	cmp	r3, #2
 8006176:	f000 8083 	beq.w	8006280 <HAL_RCC_GetSysClockFreq+0x204>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b02      	cmp	r3, #2
 800617e:	f200 80a1 	bhi.w	80062c4 <HAL_RCC_GetSysClockFreq+0x248>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x114>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d056      	beq.n	800623c <HAL_RCC_GetSysClockFreq+0x1c0>
 800618e:	e099      	b.n	80062c4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006190:	4b6f      	ldr	r3, [pc, #444]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d02d      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800619c:	4b6c      	ldr	r3, [pc, #432]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	08db      	lsrs	r3, r3, #3
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	4a6b      	ldr	r2, [pc, #428]	@ (8006354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c6:	4b62      	ldr	r3, [pc, #392]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80061f6:	e087      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006364 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620a:	4b51      	ldr	r3, [pc, #324]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621a:	ed97 6a02 	vldr	s12, [r7, #8]
 800621e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800623a:	e065      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006246:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006368 <HAL_RCC_GetSysClockFreq+0x2ec>
 800624a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624e:	4b40      	ldr	r3, [pc, #256]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006262:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800627e:	e043      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800636c <HAL_RCC_GetSysClockFreq+0x2f0>
 800628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006292:	4b2f      	ldr	r3, [pc, #188]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062c2:	e021      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006368 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006306:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006308:	4b11      	ldr	r3, [pc, #68]	@ (8006350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	0a5b      	lsrs	r3, r3, #9
 800630e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006312:	3301      	adds	r3, #1
 8006314:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006320:	edd7 6a07 	vldr	s13, [r7, #28]
 8006324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632c:	ee17 3a90 	vmov	r3, s15
 8006330:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006332:	e005      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
      break;
 8006338:	e002      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800633a:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800633c:	61bb      	str	r3, [r7, #24]
      break;
 800633e:	bf00      	nop
  }

  return sysclockfreq;
 8006340:	69bb      	ldr	r3, [r7, #24]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3724      	adds	r7, #36	@ 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	58024400 	.word	0x58024400
 8006354:	03d09000 	.word	0x03d09000
 8006358:	003d0900 	.word	0x003d0900
 800635c:	007a1200 	.word	0x007a1200
 8006360:	46000000 	.word	0x46000000
 8006364:	4c742400 	.word	0x4c742400
 8006368:	4a742400 	.word	0x4a742400
 800636c:	4af42400 	.word	0x4af42400

08006370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006376:	f7ff fe81 	bl	800607c <HAL_RCC_GetSysClockFreq>
 800637a:	4602      	mov	r2, r0
 800637c:	4b10      	ldr	r3, [pc, #64]	@ (80063c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	490f      	ldr	r1, [pc, #60]	@ (80063c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006388:	5ccb      	ldrb	r3, [r1, r3]
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006394:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800639e:	5cd3      	ldrb	r3, [r2, r3]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	4a07      	ldr	r2, [pc, #28]	@ (80063c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80063ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063ae:	4a07      	ldr	r2, [pc, #28]	@ (80063cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063b4:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80063b6:	681b      	ldr	r3, [r3, #0]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	58024400 	.word	0x58024400
 80063c4:	0800be70 	.word	0x0800be70
 80063c8:	24000828 	.word	0x24000828
 80063cc:	24000824 	.word	0x24000824

080063d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063d4:	f7ff ffcc 	bl	8006370 <HAL_RCC_GetHCLKFreq>
 80063d8:	4602      	mov	r2, r0
 80063da:	4b06      	ldr	r3, [pc, #24]	@ (80063f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	091b      	lsrs	r3, r3, #4
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	4904      	ldr	r1, [pc, #16]	@ (80063f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	58024400 	.word	0x58024400
 80063f8:	0800be70 	.word	0x0800be70

080063fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006400:	f7ff ffb6 	bl	8006370 <HAL_RCC_GetHCLKFreq>
 8006404:	4602      	mov	r2, r0
 8006406:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	4904      	ldr	r1, [pc, #16]	@ (8006424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006412:	5ccb      	ldrb	r3, [r1, r3]
 8006414:	f003 031f 	and.w	r3, r3, #31
 8006418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800641c:	4618      	mov	r0, r3
 800641e:	bd80      	pop	{r7, pc}
 8006420:	58024400 	.word	0x58024400
 8006424:	0800be70 	.word	0x0800be70

08006428 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b0ca      	sub	sp, #296	@ 0x128
 800642e:	af00      	add	r7, sp, #0
 8006430:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800643a:	2300      	movs	r3, #0
 800643c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800644c:	2500      	movs	r5, #0
 800644e:	ea54 0305 	orrs.w	r3, r4, r5
 8006452:	d049      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800645a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800645e:	d02f      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006460:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006464:	d828      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800646a:	d01a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800646c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006470:	d822      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800647a:	d007      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800647c:	e01c      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647e:	4bb8      	ldr	r3, [pc, #736]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006482:	4ab7      	ldr	r2, [pc, #732]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800648a:	e01a      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	3308      	adds	r3, #8
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f001 fc8f 	bl	8007db8 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064a0:	e00f      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	3328      	adds	r3, #40	@ 0x28
 80064a8:	2102      	movs	r1, #2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 fd36 	bl	8007f1c <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064b6:	e004      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80064c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064ca:	4ba5      	ldr	r3, [pc, #660]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064d8:	4aa1      	ldr	r2, [pc, #644]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80064f4:	f04f 0900 	mov.w	r9, #0
 80064f8:	ea58 0309 	orrs.w	r3, r8, r9
 80064fc:	d047      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006504:	2b04      	cmp	r3, #4
 8006506:	d82a      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006508:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006525 	.word	0x08006525
 8006514:	08006533 	.word	0x08006533
 8006518:	08006549 	.word	0x08006549
 800651c:	08006567 	.word	0x08006567
 8006520:	08006567 	.word	0x08006567
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006524:	4b8e      	ldr	r3, [pc, #568]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	4a8d      	ldr	r2, [pc, #564]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800652a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800652e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006530:	e01a      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	3308      	adds	r3, #8
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fc3c 	bl	8007db8 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006546:	e00f      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	3328      	adds	r3, #40	@ 0x28
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fce3 	bl	8007f1c <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800655c:	e004      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006570:	4b7b      	ldr	r3, [pc, #492]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006574:	f023 0107 	bic.w	r1, r3, #7
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657e:	4a78      	ldr	r2, [pc, #480]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6513      	str	r3, [r2, #80]	@ 0x50
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800659a:	f04f 0b00 	mov.w	fp, #0
 800659e:	ea5a 030b 	orrs.w	r3, sl, fp
 80065a2:	d04c      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ae:	d030      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80065b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065b4:	d829      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065b8:	d02d      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80065ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80065bc:	d825      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065be:	2b80      	cmp	r3, #128	@ 0x80
 80065c0:	d018      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80065c2:	2b80      	cmp	r3, #128	@ 0x80
 80065c4:	d821      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80065ca:	2b40      	cmp	r3, #64	@ 0x40
 80065cc:	d007      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80065ce:	e01c      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d0:	4b63      	ldr	r3, [pc, #396]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d4:	4a62      	ldr	r2, [pc, #392]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80065dc:	e01c      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	3308      	adds	r3, #8
 80065e4:	2100      	movs	r1, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fbe6 	bl	8007db8 <RCCEx_PLL2_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80065f2:	e011      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f8:	3328      	adds	r3, #40	@ 0x28
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fc8d 	bl	8007f1c <RCCEx_PLL3_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006608:	e006      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006610:	e002      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006620:	4b4f      	ldr	r3, [pc, #316]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006624:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800662e:	4a4c      	ldr	r2, [pc, #304]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006630:	430b      	orrs	r3, r1
 8006632:	6513      	str	r3, [r2, #80]	@ 0x50
 8006634:	e003      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800664a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006654:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d053      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006666:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800666a:	d035      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800666c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006670:	d82e      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006672:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006676:	d031      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006678:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800667c:	d828      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800667e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006682:	d01a      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006688:	d822      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800668e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006692:	d007      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006694:	e01c      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006696:	4b32      	ldr	r3, [pc, #200]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	4a31      	ldr	r2, [pc, #196]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800669c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066a2:	e01c      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a8:	3308      	adds	r3, #8
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fb83 	bl	8007db8 <RCCEx_PLL2_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066b8:	e011      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	3328      	adds	r3, #40	@ 0x28
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 fc2a 	bl	8007f1c <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066ce:	e006      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80066e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80066fc:	e003      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006712:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006716:	2300      	movs	r3, #0
 8006718:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800671c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d056      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800672e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006732:	d038      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006734:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006738:	d831      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800673a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800673e:	d034      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006740:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006744:	d82b      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006746:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800674a:	d01d      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800674c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006750:	d825      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d006      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006756:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800675a:	d00a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800675c:	e01f      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800675e:	bf00      	nop
 8006760:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006764:	4ba2      	ldr	r3, [pc, #648]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	4aa1      	ldr	r2, [pc, #644]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800676a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006770:	e01c      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	3308      	adds	r3, #8
 8006778:	2100      	movs	r1, #0
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fb1c 	bl	8007db8 <RCCEx_PLL2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006786:	e011      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	3328      	adds	r3, #40	@ 0x28
 800678e:	2100      	movs	r1, #0
 8006790:	4618      	mov	r0, r3
 8006792:	f001 fbc3 	bl	8007f1c <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80067aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10b      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80067b4:	4b8e      	ldr	r3, [pc, #568]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067c4:	4a8a      	ldr	r2, [pc, #552]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80067ca:	e003      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067e4:	2300      	movs	r3, #0
 80067e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80067ee:	460b      	mov	r3, r1
 80067f0:	4313      	orrs	r3, r2
 80067f2:	d03a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80067f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fa:	2b30      	cmp	r3, #48	@ 0x30
 80067fc:	d01f      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80067fe:	2b30      	cmp	r3, #48	@ 0x30
 8006800:	d819      	bhi.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006802:	2b20      	cmp	r3, #32
 8006804:	d00c      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006806:	2b20      	cmp	r3, #32
 8006808:	d815      	bhi.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d019      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800680e:	2b10      	cmp	r3, #16
 8006810:	d111      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006812:	4b77      	ldr	r3, [pc, #476]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	4a76      	ldr	r2, [pc, #472]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800681c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800681e:	e011      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	3308      	adds	r3, #8
 8006826:	2102      	movs	r1, #2
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fac5 	bl	8007db8 <RCCEx_PLL2_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006834:	e006      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800683c:	e002      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800683e:	bf00      	nop
 8006840:	e000      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800684c:	4b68      	ldr	r3, [pc, #416]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006850:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800685a:	4a65      	ldr	r2, [pc, #404]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800685c:	430b      	orrs	r3, r1
 800685e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006860:	e003      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006876:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800687a:	2300      	movs	r3, #0
 800687c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006880:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d051      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006894:	d035      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800689a:	d82e      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800689c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068a0:	d031      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80068a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068a6:	d828      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068ac:	d01a      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b2:	d822      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068bc:	d007      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80068be:	e01c      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c0:	4b4b      	ldr	r3, [pc, #300]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	4a4a      	ldr	r2, [pc, #296]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068cc:	e01c      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	3308      	adds	r3, #8
 80068d4:	2100      	movs	r1, #0
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 fa6e 	bl	8007db8 <RCCEx_PLL2_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068e2:	e011      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e8:	3328      	adds	r3, #40	@ 0x28
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 fb15 	bl	8007f1c <RCCEx_PLL3_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068f8:	e006      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006900:	e002      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006910:	4b37      	ldr	r3, [pc, #220]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006914:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800691e:	4a34      	ldr	r2, [pc, #208]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006920:	430b      	orrs	r3, r1
 8006922:	6513      	str	r3, [r2, #80]	@ 0x50
 8006924:	e003      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800693a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800693e:	2300      	movs	r3, #0
 8006940:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006944:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006948:	460b      	mov	r3, r1
 800694a:	4313      	orrs	r3, r2
 800694c:	d056      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006958:	d033      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800695a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800695e:	d82c      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006964:	d02f      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006966:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800696a:	d826      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800696c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006970:	d02b      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006972:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006976:	d820      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800697c:	d012      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800697e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006982:	d81a      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d022      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698c:	d115      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	3308      	adds	r3, #8
 8006994:	2101      	movs	r1, #1
 8006996:	4618      	mov	r0, r3
 8006998:	f001 fa0e 	bl	8007db8 <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069a2:	e015      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	3328      	adds	r3, #40	@ 0x28
 80069aa:	2101      	movs	r1, #1
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fab5 	bl	8007f1c <RCCEx_PLL3_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069b8:	e00a      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069c0:	e006      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069c2:	bf00      	nop
 80069c4:	e004      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069c6:	bf00      	nop
 80069c8:	e002      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10d      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069d8:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e6:	4a02      	ldr	r2, [pc, #8]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80069ec:	e006      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80069ee:	bf00      	nop
 80069f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	d055      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a28:	d033      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a2e:	d82c      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a34:	d02f      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a3a:	d826      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a40:	d02b      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a46:	d820      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a4c:	d012      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a52:	d81a      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d022      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a5c:	d115      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	3308      	adds	r3, #8
 8006a64:	2101      	movs	r1, #1
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f9a6 	bl	8007db8 <RCCEx_PLL2_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a72:	e015      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a78:	3328      	adds	r3, #40	@ 0x28
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 fa4d 	bl	8007f1c <RCCEx_PLL3_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a88:	e00a      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a90:	e006      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a92:	bf00      	nop
 8006a94:	e004      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a96:	bf00      	nop
 8006a98:	e002      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a9a:	bf00      	nop
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006aa8:	4ba3      	ldr	r3, [pc, #652]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ab8:	4a9f      	ldr	r2, [pc, #636]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d037      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006af2:	d00e      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006af8:	d816      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d018      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b02:	d111      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b04:	4b8c      	ldr	r3, [pc, #560]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	4a8b      	ldr	r2, [pc, #556]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b10:	e00f      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	3308      	adds	r3, #8
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f94c 	bl	8007db8 <RCCEx_PLL2_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b26:	e004      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b2e:	e000      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b48:	4a7b      	ldr	r2, [pc, #492]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d039      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d81c      	bhi.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006b82:	a201      	add	r2, pc, #4	@ (adr r2, 8006b88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006bc5 	.word	0x08006bc5
 8006b8c:	08006b99 	.word	0x08006b99
 8006b90:	08006ba7 	.word	0x08006ba7
 8006b94:	08006bc5 	.word	0x08006bc5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b98:	4b67      	ldr	r3, [pc, #412]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	4a66      	ldr	r2, [pc, #408]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ba4:	e00f      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	3308      	adds	r3, #8
 8006bac:	2102      	movs	r1, #2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 f902 	bl	8007db8 <RCCEx_PLL2_Config>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006bba:	e004      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bce:	4b5a      	ldr	r3, [pc, #360]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd2:	f023 0103 	bic.w	r1, r3, #3
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bdc:	4a56      	ldr	r2, [pc, #344]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bde:	430b      	orrs	r3, r1
 8006be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006be2:	e003      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	f000 809f 	beq.w	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a4a      	ldr	r2, [pc, #296]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c1a:	f7fb fa09 	bl	8002030 <HAL_GetTick>
 8006c1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c22:	e00b      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c24:	f7fb fa04 	bl	8002030 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b64      	cmp	r3, #100	@ 0x64
 8006c32:	d903      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c3a:	e005      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ed      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d179      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c50:	4b39      	ldr	r3, [pc, #228]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c5c:	4053      	eors	r3, r2
 8006c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d015      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c66:	4b34      	ldr	r3, [pc, #208]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c72:	4b31      	ldr	r3, [pc, #196]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c76:	4a30      	ldr	r2, [pc, #192]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c82:	4a2d      	ldr	r2, [pc, #180]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c9e:	d118      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fb f9c6 	bl	8002030 <HAL_GetTick>
 8006ca4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ca8:	e00d      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006caa:	f7fb f9c1 	bl	8002030 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006cb4:	1ad2      	subs	r2, r2, r3
 8006cb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d903      	bls.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006cc4:	e005      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0eb      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d129      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cea:	d10e      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006cec:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cfc:	091a      	lsrs	r2, r3, #4
 8006cfe:	4b10      	ldr	r3, [pc, #64]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	4a0d      	ldr	r2, [pc, #52]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6113      	str	r3, [r2, #16]
 8006d08:	e005      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d14:	6113      	str	r3, [r2, #16]
 8006d16:	4b08      	ldr	r3, [pc, #32]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d26:	4a04      	ldr	r2, [pc, #16]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d2c:	e00e      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006d36:	e009      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006d38:	58024400 	.word	0x58024400
 8006d3c:	58024800 	.word	0x58024800
 8006d40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f002 0301 	and.w	r3, r2, #1
 8006d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f000 8089 	beq.w	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d74:	2b28      	cmp	r3, #40	@ 0x28
 8006d76:	d86b      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006d78:	a201      	add	r2, pc, #4	@ (adr r2, 8006d80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006e59 	.word	0x08006e59
 8006d84:	08006e51 	.word	0x08006e51
 8006d88:	08006e51 	.word	0x08006e51
 8006d8c:	08006e51 	.word	0x08006e51
 8006d90:	08006e51 	.word	0x08006e51
 8006d94:	08006e51 	.word	0x08006e51
 8006d98:	08006e51 	.word	0x08006e51
 8006d9c:	08006e51 	.word	0x08006e51
 8006da0:	08006e25 	.word	0x08006e25
 8006da4:	08006e51 	.word	0x08006e51
 8006da8:	08006e51 	.word	0x08006e51
 8006dac:	08006e51 	.word	0x08006e51
 8006db0:	08006e51 	.word	0x08006e51
 8006db4:	08006e51 	.word	0x08006e51
 8006db8:	08006e51 	.word	0x08006e51
 8006dbc:	08006e51 	.word	0x08006e51
 8006dc0:	08006e3b 	.word	0x08006e3b
 8006dc4:	08006e51 	.word	0x08006e51
 8006dc8:	08006e51 	.word	0x08006e51
 8006dcc:	08006e51 	.word	0x08006e51
 8006dd0:	08006e51 	.word	0x08006e51
 8006dd4:	08006e51 	.word	0x08006e51
 8006dd8:	08006e51 	.word	0x08006e51
 8006ddc:	08006e51 	.word	0x08006e51
 8006de0:	08006e59 	.word	0x08006e59
 8006de4:	08006e51 	.word	0x08006e51
 8006de8:	08006e51 	.word	0x08006e51
 8006dec:	08006e51 	.word	0x08006e51
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	08006e51 	.word	0x08006e51
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	08006e51 	.word	0x08006e51
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e51 	.word	0x08006e51
 8006e08:	08006e51 	.word	0x08006e51
 8006e0c:	08006e51 	.word	0x08006e51
 8006e10:	08006e51 	.word	0x08006e51
 8006e14:	08006e51 	.word	0x08006e51
 8006e18:	08006e51 	.word	0x08006e51
 8006e1c:	08006e51 	.word	0x08006e51
 8006e20:	08006e59 	.word	0x08006e59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	3308      	adds	r3, #8
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 ffc3 	bl	8007db8 <RCCEx_PLL2_Config>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e38:	e00f      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	3328      	adds	r3, #40	@ 0x28
 8006e40:	2101      	movs	r1, #1
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 f86a 	bl	8007f1c <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e4e:	e004      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e56:	e000      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e62:	4bbf      	ldr	r3, [pc, #764]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e70:	4abb      	ldr	r2, [pc, #748]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e72:	430b      	orrs	r3, r1
 8006e74:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e76:	e003      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f002 0302 	and.w	r3, r2, #2
 8006e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e90:	2300      	movs	r3, #0
 8006e92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	d041      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d824      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006edf 	.word	0x08006edf
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006efd 	.word	0x08006efd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ecc:	3308      	adds	r3, #8
 8006ece:	2101      	movs	r1, #1
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 ff71 	bl	8007db8 <RCCEx_PLL2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006edc:	e00f      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee2:	3328      	adds	r3, #40	@ 0x28
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 f818 	bl	8007f1c <RCCEx_PLL3_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ef2:	e004      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006efa:	e000      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f06:	4b96      	ldr	r3, [pc, #600]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0a:	f023 0107 	bic.w	r1, r3, #7
 8006f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f14:	4a92      	ldr	r2, [pc, #584]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f16:	430b      	orrs	r3, r1
 8006f18:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f1a:	e003      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f002 0304 	and.w	r3, r2, #4
 8006f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d044      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f4c:	2b05      	cmp	r3, #5
 8006f4e:	d825      	bhi.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006f50:	a201      	add	r2, pc, #4	@ (adr r2, 8006f58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006fa5 	.word	0x08006fa5
 8006f5c:	08006f71 	.word	0x08006f71
 8006f60:	08006f87 	.word	0x08006f87
 8006f64:	08006fa5 	.word	0x08006fa5
 8006f68:	08006fa5 	.word	0x08006fa5
 8006f6c:	08006fa5 	.word	0x08006fa5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f74:	3308      	adds	r3, #8
 8006f76:	2101      	movs	r1, #1
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 ff1d 	bl	8007db8 <RCCEx_PLL2_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f84:	e00f      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8a:	3328      	adds	r3, #40	@ 0x28
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 ffc4 	bl	8007f1c <RCCEx_PLL3_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f9a:	e004      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fae:	4b6c      	ldr	r3, [pc, #432]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb2:	f023 0107 	bic.w	r1, r3, #7
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fbe:	4a68      	ldr	r2, [pc, #416]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc4:	e003      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f002 0320 	and.w	r3, r2, #32
 8006fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4313      	orrs	r3, r2
 8006fec:	d055      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ffa:	d033      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007000:	d82c      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007006:	d02f      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700c:	d826      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800700e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007012:	d02b      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007014:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007018:	d820      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800701a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701e:	d012      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007024:	d81a      	bhi.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d022      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800702a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800702e:	d115      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	3308      	adds	r3, #8
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f000 febd 	bl	8007db8 <RCCEx_PLL2_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007044:	e015      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	3328      	adds	r3, #40	@ 0x28
 800704c:	2102      	movs	r1, #2
 800704e:	4618      	mov	r0, r3
 8007050:	f000 ff64 	bl	8007f1c <RCCEx_PLL3_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800705a:	e00a      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007062:	e006      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007064:	bf00      	nop
 8007066:	e004      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007068:	bf00      	nop
 800706a:	e002      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800706c:	bf00      	nop
 800706e:	e000      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800707a:	4b39      	ldr	r3, [pc, #228]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800707c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708a:	4a35      	ldr	r2, [pc, #212]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800708c:	430b      	orrs	r3, r1
 800708e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007090:	e003      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80070a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070aa:	2300      	movs	r3, #0
 80070ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4313      	orrs	r3, r2
 80070b8:	d058      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80070c6:	d033      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80070c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80070cc:	d82c      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d2:	d02f      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80070d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d8:	d826      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070de:	d02b      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80070e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070e4:	d820      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ea:	d012      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80070ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070f0:	d81a      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d022      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fa:	d115      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007100:	3308      	adds	r3, #8
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fe57 	bl	8007db8 <RCCEx_PLL2_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007110:	e015      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007116:	3328      	adds	r3, #40	@ 0x28
 8007118:	2102      	movs	r1, #2
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fefe 	bl	8007f1c <RCCEx_PLL3_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007126:	e00a      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800712e:	e006      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007130:	bf00      	nop
 8007132:	e004      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007134:	bf00      	nop
 8007136:	e002      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007138:	bf00      	nop
 800713a:	e000      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800713c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800713e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10e      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007146:	4b06      	ldr	r3, [pc, #24]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800714e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007156:	4a02      	ldr	r2, [pc, #8]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007158:	430b      	orrs	r3, r1
 800715a:	6593      	str	r3, [r2, #88]	@ 0x58
 800715c:	e006      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800715e:	bf00      	nop
 8007160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800716c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800717c:	2300      	movs	r3, #0
 800717e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007182:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	d055      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007194:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007198:	d033      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800719a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800719e:	d82c      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071a4:	d02f      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80071a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071aa:	d826      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80071b0:	d02b      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80071b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80071b6:	d820      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071bc:	d012      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80071be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071c2:	d81a      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d022      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80071c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071cc:	d115      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d2:	3308      	adds	r3, #8
 80071d4:	2100      	movs	r1, #0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fdee 	bl	8007db8 <RCCEx_PLL2_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071e2:	e015      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e8:	3328      	adds	r3, #40	@ 0x28
 80071ea:	2102      	movs	r1, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fe95 	bl	8007f1c <RCCEx_PLL3_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071f8:	e00a      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007200:	e006      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007202:	bf00      	nop
 8007204:	e004      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800720e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007218:	4ba1      	ldr	r3, [pc, #644]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800721a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007224:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007228:	4a9d      	ldr	r2, [pc, #628]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800722a:	430b      	orrs	r3, r1
 800722c:	6593      	str	r3, [r2, #88]	@ 0x58
 800722e:	e003      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f002 0308 	and.w	r3, r2, #8
 8007244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007248:	2300      	movs	r3, #0
 800724a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800724e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d01e      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007264:	d10c      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3328      	adds	r3, #40	@ 0x28
 800726c:	2102      	movs	r1, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fe54 	bl	8007f1c <RCCEx_PLL3_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007280:	4b87      	ldr	r3, [pc, #540]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007284:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007290:	4a83      	ldr	r2, [pc, #524]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007292:	430b      	orrs	r3, r1
 8007294:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f002 0310 	and.w	r3, r2, #16
 80072a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072a6:	2300      	movs	r3, #0
 80072a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80072b0:	460b      	mov	r3, r1
 80072b2:	4313      	orrs	r3, r2
 80072b4:	d01e      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d10c      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c8:	3328      	adds	r3, #40	@ 0x28
 80072ca:	2102      	movs	r1, #2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fe25 	bl	8007f1c <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072de:	4b70      	ldr	r3, [pc, #448]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072ee:	4a6c      	ldr	r2, [pc, #432]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007304:	2300      	movs	r3, #0
 8007306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800730a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d03e      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800731c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007320:	d022      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007326:	d81b      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007330:	d00b      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007332:	e015      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007338:	3308      	adds	r3, #8
 800733a:	2100      	movs	r1, #0
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fd3b 	bl	8007db8 <RCCEx_PLL2_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007348:	e00f      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	3328      	adds	r3, #40	@ 0x28
 8007350:	2102      	movs	r1, #2
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fde2 	bl	8007f1c <RCCEx_PLL3_Config>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800735e:	e004      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007366:	e000      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10b      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007372:	4b4b      	ldr	r3, [pc, #300]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007376:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007382:	4a47      	ldr	r2, [pc, #284]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007384:	430b      	orrs	r3, r1
 8007386:	6593      	str	r3, [r2, #88]	@ 0x58
 8007388:	e003      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800738e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800739e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073a0:	2300      	movs	r3, #0
 80073a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d03b      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073ba:	d01f      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80073bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073c0:	d818      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80073c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073c6:	d003      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80073c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073cc:	d007      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80073ce:	e011      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d0:	4b33      	ldr	r3, [pc, #204]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	4a32      	ldr	r2, [pc, #200]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80073dc:	e00f      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	3328      	adds	r3, #40	@ 0x28
 80073e4:	2101      	movs	r1, #1
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fd98 	bl	8007f1c <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80073f2:	e004      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073fa:	e000      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10b      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007406:	4b26      	ldr	r3, [pc, #152]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007416:	4a22      	ldr	r2, [pc, #136]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007418:	430b      	orrs	r3, r1
 800741a:	6553      	str	r3, [r2, #84]	@ 0x54
 800741c:	e003      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007432:	673b      	str	r3, [r7, #112]	@ 0x70
 8007434:	2300      	movs	r3, #0
 8007436:	677b      	str	r3, [r7, #116]	@ 0x74
 8007438:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800743c:	460b      	mov	r3, r1
 800743e:	4313      	orrs	r3, r2
 8007440:	d034      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800744c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007450:	d007      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007452:	e011      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007454:	4b12      	ldr	r3, [pc, #72]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a11      	ldr	r2, [pc, #68]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800745a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007460:	e00e      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007466:	3308      	adds	r3, #8
 8007468:	2102      	movs	r1, #2
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fca4 	bl	8007db8 <RCCEx_PLL2_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007476:	e003      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800747e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10d      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007488:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800748a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007496:	4a02      	ldr	r2, [pc, #8]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007498:	430b      	orrs	r3, r1
 800749a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800749c:	e006      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800749e:	bf00      	nop
 80074a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80074b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074ba:	2300      	movs	r3, #0
 80074bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d00c      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	3328      	adds	r3, #40	@ 0x28
 80074ce:	2102      	movs	r1, #2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fd23 	bl	8007f1c <RCCEx_PLL3_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80074ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80074f0:	2300      	movs	r3, #0
 80074f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80074f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80074f8:	460b      	mov	r3, r1
 80074fa:	4313      	orrs	r3, r2
 80074fc:	d038      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800750a:	d018      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800750c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007510:	d811      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007516:	d014      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800751c:	d80b      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d011      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007526:	d106      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007528:	4bc3      	ldr	r3, [pc, #780]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	4ac2      	ldr	r2, [pc, #776]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800752e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007534:	e008      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800753c:	e004      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800753e:	bf00      	nop
 8007540:	e002      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007542:	bf00      	nop
 8007544:	e000      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007550:	4bb9      	ldr	r3, [pc, #740]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007554:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007560:	4ab5      	ldr	r2, [pc, #724]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007562:	430b      	orrs	r3, r1
 8007564:	6553      	str	r3, [r2, #84]	@ 0x54
 8007566:	e003      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800756c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800757c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800757e:	2300      	movs	r3, #0
 8007580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007582:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007586:	460b      	mov	r3, r1
 8007588:	4313      	orrs	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800758c:	4baa      	ldr	r3, [pc, #680]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800758e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007590:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800759a:	4aa7      	ldr	r2, [pc, #668]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800759c:	430b      	orrs	r3, r1
 800759e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80075ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80075ae:	2300      	movs	r3, #0
 80075b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80075b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d00a      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80075bc:	4b9e      	ldr	r3, [pc, #632]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80075cc:	4a9a      	ldr	r2, [pc, #616]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ce:	430b      	orrs	r3, r1
 80075d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80075de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075e0:	2300      	movs	r3, #0
 80075e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80075e8:	460b      	mov	r3, r1
 80075ea:	4313      	orrs	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075ee:	4b92      	ldr	r3, [pc, #584]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075fc:	4a8e      	ldr	r2, [pc, #568]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075fe:	430b      	orrs	r3, r1
 8007600:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800760e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007610:	2300      	movs	r3, #0
 8007612:	647b      	str	r3, [r7, #68]	@ 0x44
 8007614:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007618:	460b      	mov	r3, r1
 800761a:	4313      	orrs	r3, r2
 800761c:	d00e      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800761e:	4b86      	ldr	r3, [pc, #536]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	4a85      	ldr	r2, [pc, #532]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007624:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007628:	6113      	str	r3, [r2, #16]
 800762a:	4b83      	ldr	r3, [pc, #524]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800762c:	6919      	ldr	r1, [r3, #16]
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007632:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007636:	4a80      	ldr	r2, [pc, #512]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007638:	430b      	orrs	r3, r1
 800763a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800764a:	2300      	movs	r3, #0
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800764e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007652:	460b      	mov	r3, r1
 8007654:	4313      	orrs	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007658:	4b77      	ldr	r3, [pc, #476]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800765a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800765c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007666:	4a74      	ldr	r2, [pc, #464]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007668:	430b      	orrs	r3, r1
 800766a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007678:	633b      	str	r3, [r7, #48]	@ 0x30
 800767a:	2300      	movs	r3, #0
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
 800767e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007682:	460b      	mov	r3, r1
 8007684:	4313      	orrs	r3, r2
 8007686:	d00a      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007688:	4b6b      	ldr	r3, [pc, #428]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800768a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007698:	4a67      	ldr	r2, [pc, #412]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800769a:	430b      	orrs	r3, r1
 800769c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800769e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	2100      	movs	r1, #0
 80076a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80076b4:	460b      	mov	r3, r1
 80076b6:	4313      	orrs	r3, r2
 80076b8:	d011      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076be:	3308      	adds	r3, #8
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fb78 	bl	8007db8 <RCCEx_PLL2_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80076ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	2100      	movs	r1, #0
 80076e8:	6239      	str	r1, [r7, #32]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80076f4:	460b      	mov	r3, r1
 80076f6:	4313      	orrs	r3, r2
 80076f8:	d011      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fe:	3308      	adds	r3, #8
 8007700:	2101      	movs	r1, #1
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fb58 	bl	8007db8 <RCCEx_PLL2_Config>
 8007708:	4603      	mov	r3, r0
 800770a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800771a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	2100      	movs	r1, #0
 8007728:	61b9      	str	r1, [r7, #24]
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007734:	460b      	mov	r3, r1
 8007736:	4313      	orrs	r3, r2
 8007738:	d011      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773e:	3308      	adds	r3, #8
 8007740:	2102      	movs	r1, #2
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fb38 	bl	8007db8 <RCCEx_PLL2_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800775a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	2100      	movs	r1, #0
 8007768:	6139      	str	r1, [r7, #16]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007774:	460b      	mov	r3, r1
 8007776:	4313      	orrs	r3, r2
 8007778:	d011      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	3328      	adds	r3, #40	@ 0x28
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fbca 	bl	8007f1c <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800778e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800779a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	2100      	movs	r1, #0
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077b4:	460b      	mov	r3, r1
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d011      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	3328      	adds	r3, #40	@ 0x28
 80077c0:	2101      	movs	r1, #1
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fbaa 	bl	8007f1c <RCCEx_PLL3_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80077ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	2100      	movs	r1, #0
 80077e8:	6039      	str	r1, [r7, #0]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	607b      	str	r3, [r7, #4]
 80077f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077f4:	460b      	mov	r3, r1
 80077f6:	4313      	orrs	r3, r2
 80077f8:	d011      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	3328      	adds	r3, #40	@ 0x28
 8007800:	2102      	movs	r1, #2
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fb8a 	bl	8007f1c <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800780e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800781e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e000      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
}
 800782c:	4618      	mov	r0, r3
 800782e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007832:	46bd      	mov	sp, r7
 8007834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007838:	58024400 	.word	0x58024400

0800783c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007840:	f7fe fd96 	bl	8006370 <HAL_RCC_GetHCLKFreq>
 8007844:	4602      	mov	r2, r0
 8007846:	4b06      	ldr	r3, [pc, #24]	@ (8007860 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	091b      	lsrs	r3, r3, #4
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	4904      	ldr	r1, [pc, #16]	@ (8007864 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007852:	5ccb      	ldrb	r3, [r1, r3]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800785c:	4618      	mov	r0, r3
 800785e:	bd80      	pop	{r7, pc}
 8007860:	58024400 	.word	0x58024400
 8007864:	0800be70 	.word	0x0800be70

08007868 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007868:	b480      	push	{r7}
 800786a:	b089      	sub	sp, #36	@ 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007870:	4ba1      	ldr	r3, [pc, #644]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800787a:	4b9f      	ldr	r3, [pc, #636]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787e:	0b1b      	lsrs	r3, r3, #12
 8007880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007884:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007886:	4b9c      	ldr	r3, [pc, #624]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	091b      	lsrs	r3, r3, #4
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007892:	4b99      	ldr	r3, [pc, #612]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007896:	08db      	lsrs	r3, r3, #3
 8007898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8111 	beq.w	8007ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	f000 8083 	beq.w	80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	f200 80a1 	bhi.w	8007a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d056      	beq.n	8007980 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80078d2:	e099      	b.n	8007a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d4:	4b88      	ldr	r3, [pc, #544]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d02d      	beq.n	800793c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078e0:	4b85      	ldr	r3, [pc, #532]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	08db      	lsrs	r3, r3, #3
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	4a84      	ldr	r2, [pc, #528]	@ (8007afc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
 80078f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b7b      	ldr	r3, [pc, #492]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800790c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a03 	vldr	s12, [r7, #12]
 800791e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800793a:	e087      	b.n	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794e:	4b6a      	ldr	r3, [pc, #424]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007962:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800797e:	e065      	b.n	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800798e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007992:	4b59      	ldr	r3, [pc, #356]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c2:	e043      	b.n	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b48      	ldr	r3, [pc, #288]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a06:	e021      	b.n	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1a:	4b37      	ldr	r3, [pc, #220]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a50:	0a5b      	lsrs	r3, r3, #9
 8007a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a72:	ee17 2a90 	vmov	r2, s15
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa0:	ee17 2a90 	vmov	r2, s15
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007aa8:	4b13      	ldr	r3, [pc, #76]	@ (8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ace:	ee17 2a90 	vmov	r2, s15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ad6:	e008      	b.n	8007aea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	609a      	str	r2, [r3, #8]
}
 8007aea:	bf00      	nop
 8007aec:	3724      	adds	r7, #36	@ 0x24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	58024400 	.word	0x58024400
 8007afc:	03d09000 	.word	0x03d09000
 8007b00:	46000000 	.word	0x46000000
 8007b04:	4c742400 	.word	0x4c742400
 8007b08:	4a742400 	.word	0x4a742400
 8007b0c:	4af42400 	.word	0x4af42400

08007b10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	@ 0x24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b18:	4ba1      	ldr	r3, [pc, #644]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b22:	4b9f      	ldr	r3, [pc, #636]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	0d1b      	lsrs	r3, r3, #20
 8007b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b3a:	4b99      	ldr	r3, [pc, #612]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3e:	08db      	lsrs	r3, r3, #3
 8007b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8111 	beq.w	8007d80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	f000 8083 	beq.w	8007c6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	f200 80a1 	bhi.w	8007cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d056      	beq.n	8007c28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b7a:	e099      	b.n	8007cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b7c:	4b88      	ldr	r3, [pc, #544]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d02d      	beq.n	8007be4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b88:	4b85      	ldr	r3, [pc, #532]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	08db      	lsrs	r3, r3, #3
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	4a84      	ldr	r2, [pc, #528]	@ (8007da4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
 8007b98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007be2:	e087      	b.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007dac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c26:	e065      	b.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3a:	4b59      	ldr	r3, [pc, #356]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c6a:	e043      	b.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b48      	ldr	r3, [pc, #288]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cae:	e021      	b.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc2:	4b37      	ldr	r3, [pc, #220]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf8:	0a5b      	lsrs	r3, r3, #9
 8007cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1a:	ee17 2a90 	vmov	r2, s15
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d22:	4b1f      	ldr	r3, [pc, #124]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d26:	0c1b      	lsrs	r3, r3, #16
 8007d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d48:	ee17 2a90 	vmov	r2, s15
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d50:	4b13      	ldr	r3, [pc, #76]	@ (8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	0e1b      	lsrs	r3, r3, #24
 8007d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d76:	ee17 2a90 	vmov	r2, s15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d7e:	e008      	b.n	8007d92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	609a      	str	r2, [r3, #8]
}
 8007d92:	bf00      	nop
 8007d94:	3724      	adds	r7, #36	@ 0x24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	58024400 	.word	0x58024400
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	46000000 	.word	0x46000000
 8007dac:	4c742400 	.word	0x4c742400
 8007db0:	4a742400 	.word	0x4a742400
 8007db4:	4af42400 	.word	0x4af42400

08007db8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007dc6:	4b53      	ldr	r3, [pc, #332]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d101      	bne.n	8007dd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e099      	b.n	8007f0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a4e      	ldr	r2, [pc, #312]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007ddc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007de2:	f7fa f925 	bl	8002030 <HAL_GetTick>
 8007de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007de8:	e008      	b.n	8007dfc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dea:	f7fa f921 	bl	8002030 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e086      	b.n	8007f0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dfc:	4b45      	ldr	r3, [pc, #276]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1f0      	bne.n	8007dea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e08:	4b42      	ldr	r3, [pc, #264]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	031b      	lsls	r3, r3, #12
 8007e16:	493f      	ldr	r1, [pc, #252]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	025b      	lsls	r3, r3, #9
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	041b      	lsls	r3, r3, #16
 8007e3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	061b      	lsls	r3, r3, #24
 8007e48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e4c:	4931      	ldr	r1, [pc, #196]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e52:	4b30      	ldr	r3, [pc, #192]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	492d      	ldr	r1, [pc, #180]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e64:	4b2b      	ldr	r3, [pc, #172]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e68:	f023 0220 	bic.w	r2, r3, #32
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	4928      	ldr	r1, [pc, #160]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e76:	4b27      	ldr	r3, [pc, #156]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7a:	4a26      	ldr	r2, [pc, #152]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	f023 0310 	bic.w	r3, r3, #16
 8007e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e82:	4b24      	ldr	r3, [pc, #144]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e86:	4b24      	ldr	r3, [pc, #144]	@ (8007f18 <RCCEx_PLL2_Config+0x160>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	69d2      	ldr	r2, [r2, #28]
 8007e8e:	00d2      	lsls	r2, r2, #3
 8007e90:	4920      	ldr	r1, [pc, #128]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e96:	4b1f      	ldr	r3, [pc, #124]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007e9c:	f043 0310 	orr.w	r3, r3, #16
 8007ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d106      	bne.n	8007eb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eac:	4a19      	ldr	r2, [pc, #100]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007eae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007eb4:	e00f      	b.n	8007ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d106      	bne.n	8007eca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ebc:	4b15      	ldr	r3, [pc, #84]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	4a14      	ldr	r2, [pc, #80]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ec8:	e005      	b.n	8007ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007eca:	4b12      	ldr	r3, [pc, #72]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	4a11      	ldr	r2, [pc, #68]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007ed0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a0e      	ldr	r2, [pc, #56]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007edc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ee2:	f7fa f8a5 	bl	8002030 <HAL_GetTick>
 8007ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ee8:	e008      	b.n	8007efc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007eea:	f7fa f8a1 	bl	8002030 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d901      	bls.n	8007efc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e006      	b.n	8007f0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <RCCEx_PLL2_Config+0x15c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f0      	beq.n	8007eea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	ffff0007 	.word	0xffff0007

08007f1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f2a:	4b53      	ldr	r3, [pc, #332]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d101      	bne.n	8007f3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e099      	b.n	800806e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f46:	f7fa f873 	bl	8002030 <HAL_GetTick>
 8007f4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f4c:	e008      	b.n	8007f60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f4e:	f7fa f86f 	bl	8002030 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d901      	bls.n	8007f60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e086      	b.n	800806e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f60:	4b45      	ldr	r3, [pc, #276]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1f0      	bne.n	8007f4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f6c:	4b42      	ldr	r3, [pc, #264]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	051b      	lsls	r3, r3, #20
 8007f7a:	493f      	ldr	r1, [pc, #252]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	025b      	lsls	r3, r3, #9
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	041b      	lsls	r3, r3, #16
 8007f9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	061b      	lsls	r3, r3, #24
 8007fac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007fb0:	4931      	ldr	r1, [pc, #196]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007fb6:	4b30      	ldr	r3, [pc, #192]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	492d      	ldr	r1, [pc, #180]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	4928      	ldr	r1, [pc, #160]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fda:	4b27      	ldr	r3, [pc, #156]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fde:	4a26      	ldr	r2, [pc, #152]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fe6:	4b24      	ldr	r3, [pc, #144]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fea:	4b24      	ldr	r3, [pc, #144]	@ (800807c <RCCEx_PLL3_Config+0x160>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	69d2      	ldr	r2, [r2, #28]
 8007ff2:	00d2      	lsls	r2, r2, #3
 8007ff4:	4920      	ldr	r1, [pc, #128]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d106      	bne.n	800801a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800800c:	4b1a      	ldr	r3, [pc, #104]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 800800e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008010:	4a19      	ldr	r2, [pc, #100]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008018:	e00f      	b.n	800803a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d106      	bne.n	800802e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008020:	4b15      	ldr	r3, [pc, #84]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008024:	4a14      	ldr	r2, [pc, #80]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008026:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800802a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800802c:	e005      	b.n	800803a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800802e:	4b12      	ldr	r3, [pc, #72]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	4a11      	ldr	r2, [pc, #68]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008038:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800803a:	4b0f      	ldr	r3, [pc, #60]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a0e      	ldr	r2, [pc, #56]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008046:	f7f9 fff3 	bl	8002030 <HAL_GetTick>
 800804a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800804c:	e008      	b.n	8008060 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800804e:	f7f9 ffef 	bl	8002030 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e006      	b.n	800806e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <RCCEx_PLL3_Config+0x15c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0f0      	beq.n	800804e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	58024400 	.word	0x58024400
 800807c:	ffff0007 	.word	0xffff0007

08008080 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e10f      	b.n	80082b2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a87      	ldr	r2, [pc, #540]	@ (80082bc <HAL_SPI_Init+0x23c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00f      	beq.n	80080c2 <HAL_SPI_Init+0x42>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a86      	ldr	r2, [pc, #536]	@ (80082c0 <HAL_SPI_Init+0x240>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00a      	beq.n	80080c2 <HAL_SPI_Init+0x42>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a84      	ldr	r2, [pc, #528]	@ (80082c4 <HAL_SPI_Init+0x244>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d005      	beq.n	80080c2 <HAL_SPI_Init+0x42>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	2b0f      	cmp	r3, #15
 80080bc:	d901      	bls.n	80080c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e0f7      	b.n	80082b2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f83e 	bl	8009144 <SPI_GetPacketSize>
 80080c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a7b      	ldr	r2, [pc, #492]	@ (80082bc <HAL_SPI_Init+0x23c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00c      	beq.n	80080ee <HAL_SPI_Init+0x6e>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a79      	ldr	r2, [pc, #484]	@ (80082c0 <HAL_SPI_Init+0x240>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d007      	beq.n	80080ee <HAL_SPI_Init+0x6e>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a78      	ldr	r2, [pc, #480]	@ (80082c4 <HAL_SPI_Init+0x244>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d002      	beq.n	80080ee <HAL_SPI_Init+0x6e>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d811      	bhi.n	8008112 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80080f2:	4a72      	ldr	r2, [pc, #456]	@ (80082bc <HAL_SPI_Init+0x23c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d009      	beq.n	800810c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a70      	ldr	r2, [pc, #448]	@ (80082c0 <HAL_SPI_Init+0x240>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d004      	beq.n	800810c <HAL_SPI_Init+0x8c>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a6f      	ldr	r2, [pc, #444]	@ (80082c4 <HAL_SPI_Init+0x244>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d104      	bne.n	8008116 <HAL_SPI_Init+0x96>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b10      	cmp	r3, #16
 8008110:	d901      	bls.n	8008116 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e0cd      	b.n	80082b2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7f9 f926 	bl	800137c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008152:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800815c:	d119      	bne.n	8008192 <HAL_SPI_Init+0x112>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008166:	d103      	bne.n	8008170 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800816c:	2b00      	cmp	r3, #0
 800816e:	d008      	beq.n	8008182 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10c      	bne.n	8008192 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800817c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008180:	d107      	bne.n	8008192 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008190:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00f      	beq.n	80081be <HAL_SPI_Init+0x13e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	2b06      	cmp	r3, #6
 80081a4:	d90b      	bls.n	80081be <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e007      	b.n	80081ce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69da      	ldr	r2, [r3, #28]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d6:	431a      	orrs	r2, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e0:	ea42 0103 	orr.w	r1, r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	431a      	orrs	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	431a      	orrs	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800822e:	ea42 0103 	orr.w	r1, r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d113      	bne.n	800826e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008258:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800826c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0201 	bic.w	r2, r2, #1
 800827c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	40013000 	.word	0x40013000
 80082c0:	40003800 	.word	0x40003800
 80082c4:	40003c00 	.word	0x40003c00

080082c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3320      	adds	r3, #32
 80082de:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082e0:	f7f9 fea6 	bl	8002030 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d001      	beq.n	80082f6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80082f2:	2302      	movs	r3, #2
 80082f4:	e1d1      	b.n	800869a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_SPI_Transmit+0x3a>
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e1c9      	b.n	800869a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_SPI_Transmit+0x4c>
 8008310:	2302      	movs	r3, #2
 8008312:	e1c2      	b.n	800869a <HAL_SPI_Transmit+0x3d2>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2203      	movs	r2, #3
 8008320:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800836c:	d108      	bne.n	8008380 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e009      	b.n	8008394 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008392:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	4b96      	ldr	r3, [pc, #600]	@ (80085f4 <HAL_SPI_Transmit+0x32c>)
 800839c:	4013      	ands	r3, r2
 800839e:	88f9      	ldrh	r1, [r7, #6]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	6812      	ldr	r2, [r2, #0]
 80083a4:	430b      	orrs	r3, r1
 80083a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0201 	orr.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083c0:	d107      	bne.n	80083d2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	2b0f      	cmp	r3, #15
 80083d8:	d947      	bls.n	800846a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80083da:	e03f      	b.n	800845c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d114      	bne.n	8008414 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6812      	ldr	r2, [r2, #0]
 80083f4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083fa:	1d1a      	adds	r2, r3, #4
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008412:	e023      	b.n	800845c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008414:	f7f9 fe0c 	bl	8002030 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d803      	bhi.n	800842c <HAL_SPI_Transmit+0x164>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d102      	bne.n	8008432 <HAL_SPI_Transmit+0x16a>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d114      	bne.n	800845c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fdb8 	bl	8008fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800843e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e11e      	b.n	800869a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1b9      	bne.n	80083dc <HAL_SPI_Transmit+0x114>
 8008468:	e0f1      	b.n	800864e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b07      	cmp	r3, #7
 8008470:	f240 80e6 	bls.w	8008640 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008474:	e05d      	b.n	8008532 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b02      	cmp	r3, #2
 8008482:	d132      	bne.n	80084ea <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b01      	cmp	r3, #1
 800848e:	d918      	bls.n	80084c2 <HAL_SPI_Transmit+0x1fa>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d014      	beq.n	80084c2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6812      	ldr	r2, [r2, #0]
 80084a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b02      	subs	r3, #2
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80084c0:	e037      	b.n	8008532 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c6:	881a      	ldrh	r2, [r3, #0]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084d0:	1c9a      	adds	r2, r3, #2
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80084e8:	e023      	b.n	8008532 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ea:	f7f9 fda1 	bl	8002030 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d803      	bhi.n	8008502 <HAL_SPI_Transmit+0x23a>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d102      	bne.n	8008508 <HAL_SPI_Transmit+0x240>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d114      	bne.n	8008532 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fd4d 	bl	8008fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008514:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e0b3      	b.n	800869a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d19b      	bne.n	8008476 <HAL_SPI_Transmit+0x1ae>
 800853e:	e086      	b.n	800864e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b02      	cmp	r3, #2
 800854c:	d154      	bne.n	80085f8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b03      	cmp	r3, #3
 8008558:	d918      	bls.n	800858c <HAL_SPI_Transmit+0x2c4>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855e:	2b40      	cmp	r3, #64	@ 0x40
 8008560:	d914      	bls.n	800858c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008572:	1d1a      	adds	r2, r3, #4
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800857e:	b29b      	uxth	r3, r3
 8008580:	3b04      	subs	r3, #4
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800858a:	e059      	b.n	8008640 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	d917      	bls.n	80085c8 <HAL_SPI_Transmit+0x300>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d013      	beq.n	80085c8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085a4:	881a      	ldrh	r2, [r3, #0]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ae:	1c9a      	adds	r2, r3, #2
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b02      	subs	r3, #2
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80085c6:	e03b      	b.n	8008640 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3320      	adds	r3, #32
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80085f2:	e025      	b.n	8008640 <HAL_SPI_Transmit+0x378>
 80085f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085f8:	f7f9 fd1a 	bl	8002030 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d803      	bhi.n	8008610 <HAL_SPI_Transmit+0x348>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860e:	d102      	bne.n	8008616 <HAL_SPI_Transmit+0x34e>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d114      	bne.n	8008640 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fcc6 	bl	8008fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008622:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e02c      	b.n	800869a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	f47f af79 	bne.w	8008540 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2200      	movs	r2, #0
 8008656:	2108      	movs	r1, #8
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fd45 	bl	80090e8 <SPI_WaitOnFlagUntilTimeout>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d007      	beq.n	8008674 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fc97 	bl	8008fa8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008698:	2300      	movs	r3, #0
  }
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop

080086a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	4613      	mov	r3, r2
 80086b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	3301      	adds	r3, #1
 80086be:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3330      	adds	r3, #48	@ 0x30
 80086c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086c8:	f7f9 fcb2 	bl	8002030 <HAL_GetTick>
 80086cc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d001      	beq.n	80086de <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80086da:	2302      	movs	r3, #2
 80086dc:	e250      	b.n	8008b80 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_SPI_Receive+0x46>
 80086e4:	88fb      	ldrh	r3, [r7, #6]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e248      	b.n	8008b80 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_SPI_Receive+0x58>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e241      	b.n	8008b80 <HAL_SPI_Receive+0x4dc>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2204      	movs	r2, #4
 8008708:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	88fa      	ldrh	r2, [r7, #6]
 800871e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	88fa      	ldrh	r2, [r7, #6]
 8008726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008754:	d108      	bne.n	8008768 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e009      	b.n	800877c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800877a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	4b95      	ldr	r3, [pc, #596]	@ (80089d8 <HAL_SPI_Receive+0x334>)
 8008784:	4013      	ands	r3, r2
 8008786:	88f9      	ldrh	r1, [r7, #6]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	430b      	orrs	r3, r1
 800878e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0201 	orr.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a8:	d107      	bne.n	80087ba <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d96c      	bls.n	800889c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80087c2:	e064      	b.n	800888e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d114      	bne.n	8008804 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ea:	1d1a      	adds	r2, r3, #4
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008802:	e044      	b.n	800888e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800880a:	b29b      	uxth	r3, r3
 800880c:	8bfa      	ldrh	r2, [r7, #30]
 800880e:	429a      	cmp	r2, r3
 8008810:	d919      	bls.n	8008846 <HAL_SPI_Receive+0x1a2>
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d014      	beq.n	8008846 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008824:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008826:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800882c:	1d1a      	adds	r2, r3, #4
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008844:	e023      	b.n	800888e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008846:	f7f9 fbf3 	bl	8002030 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d803      	bhi.n	800885e <HAL_SPI_Receive+0x1ba>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d102      	bne.n	8008864 <HAL_SPI_Receive+0x1c0>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d114      	bne.n	800888e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fb9f 	bl	8008fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008870:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e178      	b.n	8008b80 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d194      	bne.n	80087c4 <HAL_SPI_Receive+0x120>
 800889a:	e15e      	b.n	8008b5a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b07      	cmp	r3, #7
 80088a2:	f240 8153 	bls.w	8008b4c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80088a6:	e08f      	b.n	80089c8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d114      	bne.n	80088e8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	8812      	ldrh	r2, [r2, #0]
 80088c6:	b292      	uxth	r2, r2
 80088c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ce:	1c9a      	adds	r2, r3, #2
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088e6:	e06f      	b.n	80089c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	8bfa      	ldrh	r2, [r7, #30]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d924      	bls.n	8008940 <HAL_SPI_Receive+0x29c>
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01f      	beq.n	8008940 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	8812      	ldrh	r2, [r2, #0]
 8008908:	b292      	uxth	r2, r2
 800890a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008910:	1c9a      	adds	r2, r3, #2
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	8812      	ldrh	r2, [r2, #0]
 800891e:	b292      	uxth	r2, r2
 8008920:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008926:	1c9a      	adds	r2, r3, #2
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b02      	subs	r3, #2
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800893e:	e043      	b.n	80089c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b01      	cmp	r3, #1
 800894a:	d119      	bne.n	8008980 <HAL_SPI_Receive+0x2dc>
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d014      	beq.n	8008980 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	8812      	ldrh	r2, [r2, #0]
 800895e:	b292      	uxth	r2, r2
 8008960:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008966:	1c9a      	adds	r2, r3, #2
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800897e:	e023      	b.n	80089c8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008980:	f7f9 fb56 	bl	8002030 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d803      	bhi.n	8008998 <HAL_SPI_Receive+0x2f4>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d102      	bne.n	800899e <HAL_SPI_Receive+0x2fa>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d114      	bne.n	80089c8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fb02 	bl	8008fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e0db      	b.n	8008b80 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f47f af69 	bne.w	80088a8 <HAL_SPI_Receive+0x204>
 80089d6:	e0c0      	b.n	8008b5a <HAL_SPI_Receive+0x4b6>
 80089d8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d117      	bne.n	8008a22 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089fe:	7812      	ldrb	r2, [r2, #0]
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008a20:	e094      	b.n	8008b4c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	8bfa      	ldrh	r2, [r7, #30]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d946      	bls.n	8008abe <HAL_SPI_Receive+0x41a>
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d041      	beq.n	8008abe <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a46:	7812      	ldrb	r2, [r2, #0]
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	b2d2      	uxtb	r2, r2
 8008a66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a7e:	7812      	ldrb	r2, [r2, #0]
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a9a:	7812      	ldrb	r2, [r2, #0]
 8008a9c:	b2d2      	uxtb	r2, r2
 8008a9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	3b04      	subs	r3, #4
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008abc:	e046      	b.n	8008b4c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d81c      	bhi.n	8008b04 <HAL_SPI_Receive+0x460>
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d017      	beq.n	8008b04 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ae0:	7812      	ldrb	r2, [r2, #0]
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b02:	e023      	b.n	8008b4c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b04:	f7f9 fa94 	bl	8002030 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d803      	bhi.n	8008b1c <HAL_SPI_Receive+0x478>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d102      	bne.n	8008b22 <HAL_SPI_Receive+0x47e>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d114      	bne.n	8008b4c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fa40 	bl	8008fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e019      	b.n	8008b80 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f47f af41 	bne.w	80089dc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fa24 	bl	8008fa8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
  }
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08a      	sub	sp, #40	@ 0x28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008ba0:	6a3a      	ldr	r2, [r7, #32]
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3330      	adds	r3, #48	@ 0x30
 8008bc2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d010      	beq.n	8008bf0 <HAL_SPI_IRQHandler+0x68>
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008be6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9b9 	bl	8008f60 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008bee:	e192      	b.n	8008f16 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d113      	bne.n	8008c22 <HAL_SPI_IRQHandler+0x9a>
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10e      	bne.n	8008c22 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
    handled = 1UL;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10f      	bne.n	8008c4c <HAL_SPI_IRQHandler+0xc4>
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00a      	beq.n	8008c4c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d105      	bne.n	8008c4c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	4798      	blx	r3
    handled = 1UL;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10f      	bne.n	8008c76 <HAL_SPI_IRQHandler+0xee>
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	f003 0302 	and.w	r3, r3, #2
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00a      	beq.n	8008c76 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d105      	bne.n	8008c76 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	4798      	blx	r3
    handled = 1UL;
 8008c72:	2301      	movs	r3, #1
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f040 8147 	bne.w	8008f0c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 808b 	beq.w	8008da0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 0208 	orr.w	r2, r2, #8
 8008c98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0210 	orr.w	r2, r2, #16
 8008ca8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cb8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	691a      	ldr	r2, [r3, #16]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0208 	bic.w	r2, r2, #8
 8008cc8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d13d      	bne.n	8008d54 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008cd8:	e036      	b.n	8008d48 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	2b0f      	cmp	r3, #15
 8008ce0:	d90b      	bls.n	8008cfa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008cec:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf2:	1d1a      	adds	r2, r3, #4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	665a      	str	r2, [r3, #100]	@ 0x64
 8008cf8:	e01d      	b.n	8008d36 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	2b07      	cmp	r3, #7
 8008d00:	d90b      	bls.n	8008d1a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	8812      	ldrh	r2, [r2, #0]
 8008d0a:	b292      	uxth	r2, r2
 8008d0c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d12:	1c9a      	adds	r2, r3, #2
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	665a      	str	r2, [r3, #100]	@ 0x64
 8008d18:	e00d      	b.n	8008d36 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d26:	7812      	ldrb	r2, [r2, #0]
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1c2      	bne.n	8008cda <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f927 	bl	8008fa8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f8ed 	bl	8008f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008d72:	e0d0      	b.n	8008f16 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008d74:	7cfb      	ldrb	r3, [r7, #19]
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d103      	bne.n	8008d82 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8dc 	bl	8008f38 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008d80:	e0c6      	b.n	8008f10 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008d82:	7cfb      	ldrb	r3, [r7, #19]
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d103      	bne.n	8008d90 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8cb 	bl	8008f24 <HAL_SPI_RxCpltCallback>
    return;
 8008d8e:	e0bf      	b.n	8008f10 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	f040 80bc 	bne.w	8008f10 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7f8 fdad 	bl	80018f8 <HAL_SPI_TxCpltCallback>
    return;
 8008d9e:	e0b7      	b.n	8008f10 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80b5 	beq.w	8008f16 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00f      	beq.n	8008dd6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dbc:	f043 0204 	orr.w	r2, r3, #4
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699a      	ldr	r2, [r3, #24]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dd4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00f      	beq.n	8008e00 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008de6:	f043 0201 	orr.w	r2, r3, #1
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dfe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00f      	beq.n	8008e2a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e10:	f043 0208 	orr.w	r2, r3, #8
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e28:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00f      	beq.n	8008e54 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0220 	orr.w	r2, r2, #32
 8008e52:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d05a      	beq.n	8008f14 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0201 	bic.w	r2, r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6919      	ldr	r1, [r3, #16]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4b28      	ldr	r3, [pc, #160]	@ (8008f1c <HAL_SPI_IRQHandler+0x394>)
 8008e7a:	400b      	ands	r3, r1
 8008e7c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008e84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008e88:	d138      	bne.n	8008efc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008e98:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d013      	beq.n	8008eca <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8008f20 <HAL_SPI_IRQHandler+0x398>)
 8008ea8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fa faee 	bl	8003490 <HAL_DMA_Abort_IT>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ec0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d020      	beq.n	8008f14 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ed6:	4a12      	ldr	r2, [pc, #72]	@ (8008f20 <HAL_SPI_IRQHandler+0x398>)
 8008ed8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fa fad6 	bl	8003490 <HAL_DMA_Abort_IT>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d014      	beq.n	8008f14 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ef0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008efa:	e00b      	b.n	8008f14 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f821 	bl	8008f4c <HAL_SPI_ErrorCallback>
    return;
 8008f0a:	e003      	b.n	8008f14 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008f0c:	bf00      	nop
 8008f0e:	e002      	b.n	8008f16 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008f10:	bf00      	nop
 8008f12:	e000      	b.n	8008f16 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008f14:	bf00      	nop
  }
}
 8008f16:	3728      	adds	r7, #40	@ 0x28
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	fffffc94 	.word	0xfffffc94
 8008f20:	08008f75 	.word	0x08008f75

08008f24 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff ffd6 	bl	8008f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	699a      	ldr	r2, [r3, #24]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0208 	orr.w	r2, r2, #8
 8008fc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699a      	ldr	r2, [r3, #24]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0210 	orr.w	r2, r2, #16
 8008fd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0201 	bic.w	r2, r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6919      	ldr	r1, [r3, #16]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80090e4 <SPI_CloseTransfer+0x13c>)
 8008ff4:	400b      	ands	r3, r1
 8008ff6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009006:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b04      	cmp	r3, #4
 8009012:	d014      	beq.n	800903e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00f      	beq.n	800903e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009024:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0220 	orr.w	r2, r2, #32
 800903c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b03      	cmp	r3, #3
 8009048:	d014      	beq.n	8009074 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00f      	beq.n	8009074 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800905a:	f043 0204 	orr.w	r2, r3, #4
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009072:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00f      	beq.n	800909e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009084:	f043 0201 	orr.w	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	699a      	ldr	r2, [r3, #24]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800909c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00f      	beq.n	80090c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ae:	f043 0208 	orr.w	r2, r3, #8
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80090d8:	bf00      	nop
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	fffffc90 	.word	0xfffffc90

080090e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090f8:	e010      	b.n	800911c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090fa:	f7f8 ff99 	bl	8002030 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d803      	bhi.n	8009112 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009110:	d102      	bne.n	8009118 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e00f      	b.n	800913c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	695a      	ldr	r2, [r3, #20]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4013      	ands	r3, r2
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	429a      	cmp	r2, r3
 800912a:	bf0c      	ite	eq
 800912c:	2301      	moveq	r3, #1
 800912e:	2300      	movne	r3, #0
 8009130:	b2db      	uxtb	r3, r3
 8009132:	461a      	mov	r2, r3
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	429a      	cmp	r2, r3
 8009138:	d0df      	beq.n	80090fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009150:	095b      	lsrs	r3, r3, #5
 8009152:	3301      	adds	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	3301      	adds	r3, #1
 800915c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	3307      	adds	r3, #7
 8009162:	08db      	lsrs	r3, r3, #3
 8009164:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	fb02 f303 	mul.w	r3, r2, r3
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e042      	b.n	8009212 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009192:	2b00      	cmp	r3, #0
 8009194:	d106      	bne.n	80091a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7f8 f9b4 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2224      	movs	r2, #36	@ 0x24
 80091a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fbed 	bl	800a9a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fe82 	bl	8009ed4 <UART_SetConfig>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d101      	bne.n	80091da <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e01b      	b.n	8009212 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f042 0201 	orr.w	r2, r2, #1
 8009208:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 fc6c 	bl	800aae8 <UART_CheckIdleState>
 8009210:	4603      	mov	r3, r0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b08a      	sub	sp, #40	@ 0x28
 800921e:	af02      	add	r7, sp, #8
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009230:	2b20      	cmp	r3, #32
 8009232:	d17b      	bne.n	800932c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <HAL_UART_Transmit+0x26>
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e074      	b.n	800932e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2221      	movs	r2, #33	@ 0x21
 8009250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009254:	f7f8 feec 	bl	8002030 <HAL_GetTick>
 8009258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	88fa      	ldrh	r2, [r7, #6]
 800925e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009272:	d108      	bne.n	8009286 <HAL_UART_Transmit+0x6c>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	61bb      	str	r3, [r7, #24]
 8009284:	e003      	b.n	800928e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800928e:	e030      	b.n	80092f2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	2180      	movs	r1, #128	@ 0x80
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f001 fcce 	bl	800ac3c <UART_WaitOnFlagUntilTimeout>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	e03d      	b.n	800932e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	3302      	adds	r3, #2
 80092cc:	61bb      	str	r3, [r7, #24]
 80092ce:	e007      	b.n	80092e0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	3301      	adds	r3, #1
 80092de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	3b01      	subs	r3, #1
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1c8      	bne.n	8009290 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2200      	movs	r2, #0
 8009306:	2140      	movs	r1, #64	@ 0x40
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f001 fc97 	bl	800ac3c <UART_WaitOnFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2220      	movs	r2, #32
 8009318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e006      	b.n	800932e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e000      	b.n	800932e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800932c:	2302      	movs	r3, #2
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b08a      	sub	sp, #40	@ 0x28
 800933a:	af02      	add	r7, sp, #8
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	603b      	str	r3, [r7, #0]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800934c:	2b20      	cmp	r3, #32
 800934e:	f040 80b5 	bne.w	80094bc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <HAL_UART_Receive+0x28>
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e0ad      	b.n	80094be <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2222      	movs	r2, #34	@ 0x22
 800936e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009378:	f7f8 fe5a 	bl	8002030 <HAL_GetTick>
 800937c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	88fa      	ldrh	r2, [r7, #6]
 8009382:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	88fa      	ldrh	r2, [r7, #6]
 800938a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009396:	d10e      	bne.n	80093b6 <HAL_UART_Receive+0x80>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d105      	bne.n	80093ac <HAL_UART_Receive+0x76>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80093a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093aa:	e02d      	b.n	8009408 <HAL_UART_Receive+0xd2>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	22ff      	movs	r2, #255	@ 0xff
 80093b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093b4:	e028      	b.n	8009408 <HAL_UART_Receive+0xd2>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10d      	bne.n	80093da <HAL_UART_Receive+0xa4>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d104      	bne.n	80093d0 <HAL_UART_Receive+0x9a>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	22ff      	movs	r2, #255	@ 0xff
 80093ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093ce:	e01b      	b.n	8009408 <HAL_UART_Receive+0xd2>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	227f      	movs	r2, #127	@ 0x7f
 80093d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093d8:	e016      	b.n	8009408 <HAL_UART_Receive+0xd2>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093e2:	d10d      	bne.n	8009400 <HAL_UART_Receive+0xca>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d104      	bne.n	80093f6 <HAL_UART_Receive+0xc0>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	227f      	movs	r2, #127	@ 0x7f
 80093f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093f4:	e008      	b.n	8009408 <HAL_UART_Receive+0xd2>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	223f      	movs	r2, #63	@ 0x3f
 80093fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80093fe:	e003      	b.n	8009408 <HAL_UART_Receive+0xd2>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800940e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009418:	d108      	bne.n	800942c <HAL_UART_Receive+0xf6>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	e003      	b.n	8009434 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009430:	2300      	movs	r3, #0
 8009432:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009434:	e036      	b.n	80094a4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2200      	movs	r2, #0
 800943e:	2120      	movs	r1, #32
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f001 fbfb 	bl	800ac3c <UART_WaitOnFlagUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2220      	movs	r2, #32
 8009450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e032      	b.n	80094be <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10c      	bne.n	8009478 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009464:	b29a      	uxth	r2, r3
 8009466:	8a7b      	ldrh	r3, [r7, #18]
 8009468:	4013      	ands	r3, r2
 800946a:	b29a      	uxth	r2, r3
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	3302      	adds	r3, #2
 8009474:	61bb      	str	r3, [r7, #24]
 8009476:	e00c      	b.n	8009492 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947e:	b2da      	uxtb	r2, r3
 8009480:	8a7b      	ldrh	r3, [r7, #18]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	4013      	ands	r3, r2
 8009486:	b2da      	uxtb	r2, r3
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	3301      	adds	r3, #1
 8009490:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1c2      	bne.n	8009436 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	e000      	b.n	80094be <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80094bc:	2302      	movs	r3, #2
  }
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08a      	sub	sp, #40	@ 0x28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	4613      	mov	r3, r2
 80094d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d137      	bne.n	8009550 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_UART_Receive_DMA+0x24>
 80094e6:	88fb      	ldrh	r3, [r7, #6]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e030      	b.n	8009552 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a18      	ldr	r2, [pc, #96]	@ (800955c <HAL_UART_Receive_DMA+0x94>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d01f      	beq.n	8009540 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d018      	beq.n	8009540 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	e853 3f00 	ldrex	r3, [r3]
 800951a:	613b      	str	r3, [r7, #16]
   return(result);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009522:	627b      	str	r3, [r7, #36]	@ 0x24
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	623b      	str	r3, [r7, #32]
 800952e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	69f9      	ldr	r1, [r7, #28]
 8009532:	6a3a      	ldr	r2, [r7, #32]
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	61bb      	str	r3, [r7, #24]
   return(result);
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e6      	bne.n	800950e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009540:	88fb      	ldrh	r3, [r7, #6]
 8009542:	461a      	mov	r2, r3
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f001 fbe6 	bl	800ad18 <UART_Start_Receive_DMA>
 800954c:	4603      	mov	r3, r0
 800954e:	e000      	b.n	8009552 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009550:	2302      	movs	r3, #2
  }
}
 8009552:	4618      	mov	r0, r3
 8009554:	3728      	adds	r7, #40	@ 0x28
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	58000c00 	.word	0x58000c00

08009560 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b09a      	sub	sp, #104	@ 0x68
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009570:	e853 3f00 	ldrex	r3, [r3]
 8009574:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800957c:	667b      	str	r3, [r7, #100]	@ 0x64
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009586:	657b      	str	r3, [r7, #84]	@ 0x54
 8009588:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800958c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e6      	bne.n	8009568 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3308      	adds	r3, #8
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ac:	4b46      	ldr	r3, [pc, #280]	@ (80096c8 <HAL_UART_AbortReceive+0x168>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3308      	adds	r3, #8
 80095b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80095bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e5      	bne.n	800959a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d118      	bne.n	8009608 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	f023 0310 	bic.w	r3, r3, #16
 80095ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095fc:	e841 2300 	strex	r3, r2, [r1]
 8009600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e6      	bne.n	80095d6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009612:	2b40      	cmp	r3, #64	@ 0x40
 8009614:	d13b      	bne.n	800968e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3308      	adds	r3, #8
 800961c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	60bb      	str	r3, [r7, #8]
   return(result);
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800962c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009636:	61ba      	str	r2, [r7, #24]
 8009638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6979      	ldr	r1, [r7, #20]
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	613b      	str	r3, [r7, #16]
   return(result);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e5      	bne.n	8009616 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01c      	beq.n	800968e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800965a:	2200      	movs	r2, #0
 800965c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009664:	4618      	mov	r0, r3
 8009666:	f7f9 fbf5 	bl	8002e54 <HAL_DMA_Abort>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00e      	beq.n	800968e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009676:	4618      	mov	r0, r3
 8009678:	f7fb f87a 	bl	8004770 <HAL_DMA_GetError>
 800967c:	4603      	mov	r3, r0
 800967e:	2b20      	cmp	r3, #32
 8009680:	d105      	bne.n	800968e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2210      	movs	r2, #16
 8009686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e017      	b.n	80096be <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	220f      	movs	r2, #15
 800969c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0208 	orr.w	r2, r2, #8
 80096ac:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3768      	adds	r7, #104	@ 0x68
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	effffffe 	.word	0xeffffffe

080096cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b0ba      	sub	sp, #232	@ 0xe8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096fa:	4013      	ands	r3, r2
 80096fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11b      	bne.n	8009740 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b00      	cmp	r3, #0
 8009712:	d015      	beq.n	8009740 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d105      	bne.n	800972c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d009      	beq.n	8009740 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8393 	beq.w	8009e5c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	4798      	blx	r3
      }
      return;
 800973e:	e38d      	b.n	8009e5c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 8123 	beq.w	8009990 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800974a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800974e:	4b8d      	ldr	r3, [pc, #564]	@ (8009984 <HAL_UART_IRQHandler+0x2b8>)
 8009750:	4013      	ands	r3, r2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d106      	bne.n	8009764 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009756:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800975a:	4b8b      	ldr	r3, [pc, #556]	@ (8009988 <HAL_UART_IRQHandler+0x2bc>)
 800975c:	4013      	ands	r3, r2
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 8116 	beq.w	8009990 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	d011      	beq.n	8009794 <HAL_UART_IRQHandler+0xc8>
 8009770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2201      	movs	r2, #1
 8009782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800978a:	f043 0201 	orr.w	r2, r3, #1
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d011      	beq.n	80097c4 <HAL_UART_IRQHandler+0xf8>
 80097a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2202      	movs	r2, #2
 80097b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ba:	f043 0204 	orr.w	r2, r3, #4
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d011      	beq.n	80097f4 <HAL_UART_IRQHandler+0x128>
 80097d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2204      	movs	r2, #4
 80097e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ea:	f043 0202 	orr.w	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f8:	f003 0308 	and.w	r3, r3, #8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d017      	beq.n	8009830 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b00      	cmp	r3, #0
 800980a:	d105      	bne.n	8009818 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800980c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009810:	4b5c      	ldr	r3, [pc, #368]	@ (8009984 <HAL_UART_IRQHandler+0x2b8>)
 8009812:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2208      	movs	r2, #8
 800981e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009826:	f043 0208 	orr.w	r2, r3, #8
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009838:	2b00      	cmp	r3, #0
 800983a:	d012      	beq.n	8009862 <HAL_UART_IRQHandler+0x196>
 800983c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009840:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00c      	beq.n	8009862 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009858:	f043 0220 	orr.w	r2, r3, #32
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 82f9 	beq.w	8009e60 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800986e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d013      	beq.n	80098a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800987a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d105      	bne.n	8009892 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800988a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b6:	2b40      	cmp	r3, #64	@ 0x40
 80098b8:	d005      	beq.n	80098c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d054      	beq.n	8009970 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fb0e 	bl	800aee8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d6:	2b40      	cmp	r3, #64	@ 0x40
 80098d8:	d146      	bne.n	8009968 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009906:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800990a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800991e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1d9      	bne.n	80098da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800992c:	2b00      	cmp	r3, #0
 800992e:	d017      	beq.n	8009960 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009936:	4a15      	ldr	r2, [pc, #84]	@ (800998c <HAL_UART_IRQHandler+0x2c0>)
 8009938:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009940:	4618      	mov	r0, r3
 8009942:	f7f9 fda5 	bl	8003490 <HAL_DMA_Abort_IT>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d019      	beq.n	8009980 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800995a:	4610      	mov	r0, r2
 800995c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995e:	e00f      	b.n	8009980 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7f7 ff9b 	bl	800189c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009966:	e00b      	b.n	8009980 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7f7 ff97 	bl	800189c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996e:	e007      	b.n	8009980 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7f7 ff93 	bl	800189c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800997e:	e26f      	b.n	8009e60 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009980:	bf00      	nop
    return;
 8009982:	e26d      	b.n	8009e60 <HAL_UART_IRQHandler+0x794>
 8009984:	10000001 	.word	0x10000001
 8009988:	04000120 	.word	0x04000120
 800998c:	0800b19b 	.word	0x0800b19b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009994:	2b01      	cmp	r3, #1
 8009996:	f040 8203 	bne.w	8009da0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800999a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800999e:	f003 0310 	and.w	r3, r3, #16
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 81fc 	beq.w	8009da0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ac:	f003 0310 	and.w	r3, r3, #16
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 81f5 	beq.w	8009da0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2210      	movs	r2, #16
 80099bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c8:	2b40      	cmp	r3, #64	@ 0x40
 80099ca:	f040 816d 	bne.w	8009ca8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4aa4      	ldr	r2, [pc, #656]	@ (8009c68 <HAL_UART_IRQHandler+0x59c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d068      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4aa1      	ldr	r2, [pc, #644]	@ (8009c6c <HAL_UART_IRQHandler+0x5a0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d061      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a9f      	ldr	r2, [pc, #636]	@ (8009c70 <HAL_UART_IRQHandler+0x5a4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d05a      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a9c      	ldr	r2, [pc, #624]	@ (8009c74 <HAL_UART_IRQHandler+0x5a8>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d053      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a9a      	ldr	r2, [pc, #616]	@ (8009c78 <HAL_UART_IRQHandler+0x5ac>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d04c      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a97      	ldr	r2, [pc, #604]	@ (8009c7c <HAL_UART_IRQHandler+0x5b0>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d045      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a95      	ldr	r2, [pc, #596]	@ (8009c80 <HAL_UART_IRQHandler+0x5b4>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d03e      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a92      	ldr	r2, [pc, #584]	@ (8009c84 <HAL_UART_IRQHandler+0x5b8>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d037      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a90      	ldr	r2, [pc, #576]	@ (8009c88 <HAL_UART_IRQHandler+0x5bc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d030      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a8d      	ldr	r2, [pc, #564]	@ (8009c8c <HAL_UART_IRQHandler+0x5c0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d029      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a8b      	ldr	r2, [pc, #556]	@ (8009c90 <HAL_UART_IRQHandler+0x5c4>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d022      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a88      	ldr	r2, [pc, #544]	@ (8009c94 <HAL_UART_IRQHandler+0x5c8>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01b      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a86      	ldr	r2, [pc, #536]	@ (8009c98 <HAL_UART_IRQHandler+0x5cc>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d014      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a83      	ldr	r2, [pc, #524]	@ (8009c9c <HAL_UART_IRQHandler+0x5d0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00d      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a81      	ldr	r2, [pc, #516]	@ (8009ca0 <HAL_UART_IRQHandler+0x5d4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d006      	beq.n	8009aae <HAL_UART_IRQHandler+0x3e2>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a7e      	ldr	r2, [pc, #504]	@ (8009ca4 <HAL_UART_IRQHandler+0x5d8>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d106      	bne.n	8009abc <HAL_UART_IRQHandler+0x3f0>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	e005      	b.n	8009ac8 <HAL_UART_IRQHandler+0x3fc>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 80ad 	beq.w	8009c30 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	f080 80a5 	bcs.w	8009c30 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009aec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009afc:	f000 8087 	beq.w	8009c0e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	461a      	mov	r2, r3
 8009b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1da      	bne.n	8009b00 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b7a:	e841 2300 	strex	r3, r2, [r1]
 8009b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1e1      	bne.n	8009b4a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009baa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e3      	bne.n	8009b86 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bdc:	f023 0310 	bic.w	r3, r3, #16
 8009be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bf0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e4      	bne.n	8009bcc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7f9 f923 	bl	8002e54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2202      	movs	r2, #2
 8009c12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f939 	bl	8009ea0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009c2e:	e119      	b.n	8009e64 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	f040 8112 	bne.w	8009e64 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c4c:	f040 810a 	bne.w	8009e64 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f91e 	bl	8009ea0 <HAL_UARTEx_RxEventCallback>
      return;
 8009c64:	e0fe      	b.n	8009e64 <HAL_UART_IRQHandler+0x798>
 8009c66:	bf00      	nop
 8009c68:	40020010 	.word	0x40020010
 8009c6c:	40020028 	.word	0x40020028
 8009c70:	40020040 	.word	0x40020040
 8009c74:	40020058 	.word	0x40020058
 8009c78:	40020070 	.word	0x40020070
 8009c7c:	40020088 	.word	0x40020088
 8009c80:	400200a0 	.word	0x400200a0
 8009c84:	400200b8 	.word	0x400200b8
 8009c88:	40020410 	.word	0x40020410
 8009c8c:	40020428 	.word	0x40020428
 8009c90:	40020440 	.word	0x40020440
 8009c94:	40020458 	.word	0x40020458
 8009c98:	40020470 	.word	0x40020470
 8009c9c:	40020488 	.word	0x40020488
 8009ca0:	400204a0 	.word	0x400204a0
 8009ca4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 80cf 	beq.w	8009e68 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009cca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 80ca 	beq.w	8009e68 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cf8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e4      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1a:	6a3a      	ldr	r2, [r7, #32]
 8009d1c:	4b55      	ldr	r3, [pc, #340]	@ (8009e74 <HAL_UART_IRQHandler+0x7a8>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e3      	bne.n	8009d0a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f023 0310 	bic.w	r3, r3, #16
 8009d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d78:	61fb      	str	r3, [r7, #28]
 8009d7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	69b9      	ldr	r1, [r7, #24]
 8009d7e:	69fa      	ldr	r2, [r7, #28]
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	617b      	str	r3, [r7, #20]
   return(result);
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e4      	bne.n	8009d56 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f881 	bl	8009ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d9e:	e063      	b.n	8009e68 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00e      	beq.n	8009dca <HAL_UART_IRQHandler+0x6fe>
 8009dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d008      	beq.n	8009dca <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 fa26 	bl	800b214 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dc8:	e051      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d014      	beq.n	8009e00 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d008      	beq.n	8009e00 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d03a      	beq.n	8009e6c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	4798      	blx	r3
    }
    return;
 8009dfe:	e035      	b.n	8009e6c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d009      	beq.n	8009e20 <HAL_UART_IRQHandler+0x754>
 8009e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 f9d0 	bl	800b1be <UART_EndTransmit_IT>
    return;
 8009e1e:	e026      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d009      	beq.n	8009e40 <HAL_UART_IRQHandler+0x774>
 8009e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f001 f9ff 	bl	800b23c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e3e:	e016      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d010      	beq.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
 8009e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da0c      	bge.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 f9e7 	bl	800b228 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e5a:	e008      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e5c:	bf00      	nop
 8009e5e:	e006      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e60:	bf00      	nop
 8009e62:	e004      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e64:	bf00      	nop
 8009e66:	e002      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e68:	bf00      	nop
 8009e6a:	e000      	b.n	8009e6e <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e6c:	bf00      	nop
  }
}
 8009e6e:	37e8      	adds	r7, #232	@ 0xe8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	effffffe 	.word	0xeffffffe

08009e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
	...

08009ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ed8:	b092      	sub	sp, #72	@ 0x48
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	431a      	orrs	r2, r3
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	4bbe      	ldr	r3, [pc, #760]	@ (800a1fc <UART_SetConfig+0x328>)
 8009f04:	4013      	ands	r3, r2
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	6812      	ldr	r2, [r2, #0]
 8009f0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4ab3      	ldr	r2, [pc, #716]	@ (800a200 <UART_SetConfig+0x32c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d004      	beq.n	8009f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689a      	ldr	r2, [r3, #8]
 8009f46:	4baf      	ldr	r3, [pc, #700]	@ (800a204 <UART_SetConfig+0x330>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	6812      	ldr	r2, [r2, #0]
 8009f4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f50:	430b      	orrs	r3, r1
 8009f52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5a:	f023 010f 	bic.w	r1, r3, #15
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4aa6      	ldr	r2, [pc, #664]	@ (800a208 <UART_SetConfig+0x334>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d177      	bne.n	800a064 <UART_SetConfig+0x190>
 8009f74:	4ba5      	ldr	r3, [pc, #660]	@ (800a20c <UART_SetConfig+0x338>)
 8009f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f7c:	2b28      	cmp	r3, #40	@ 0x28
 8009f7e:	d86d      	bhi.n	800a05c <UART_SetConfig+0x188>
 8009f80:	a201      	add	r2, pc, #4	@ (adr r2, 8009f88 <UART_SetConfig+0xb4>)
 8009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f86:	bf00      	nop
 8009f88:	0800a02d 	.word	0x0800a02d
 8009f8c:	0800a05d 	.word	0x0800a05d
 8009f90:	0800a05d 	.word	0x0800a05d
 8009f94:	0800a05d 	.word	0x0800a05d
 8009f98:	0800a05d 	.word	0x0800a05d
 8009f9c:	0800a05d 	.word	0x0800a05d
 8009fa0:	0800a05d 	.word	0x0800a05d
 8009fa4:	0800a05d 	.word	0x0800a05d
 8009fa8:	0800a035 	.word	0x0800a035
 8009fac:	0800a05d 	.word	0x0800a05d
 8009fb0:	0800a05d 	.word	0x0800a05d
 8009fb4:	0800a05d 	.word	0x0800a05d
 8009fb8:	0800a05d 	.word	0x0800a05d
 8009fbc:	0800a05d 	.word	0x0800a05d
 8009fc0:	0800a05d 	.word	0x0800a05d
 8009fc4:	0800a05d 	.word	0x0800a05d
 8009fc8:	0800a03d 	.word	0x0800a03d
 8009fcc:	0800a05d 	.word	0x0800a05d
 8009fd0:	0800a05d 	.word	0x0800a05d
 8009fd4:	0800a05d 	.word	0x0800a05d
 8009fd8:	0800a05d 	.word	0x0800a05d
 8009fdc:	0800a05d 	.word	0x0800a05d
 8009fe0:	0800a05d 	.word	0x0800a05d
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a045 	.word	0x0800a045
 8009fec:	0800a05d 	.word	0x0800a05d
 8009ff0:	0800a05d 	.word	0x0800a05d
 8009ff4:	0800a05d 	.word	0x0800a05d
 8009ff8:	0800a05d 	.word	0x0800a05d
 8009ffc:	0800a05d 	.word	0x0800a05d
 800a000:	0800a05d 	.word	0x0800a05d
 800a004:	0800a05d 	.word	0x0800a05d
 800a008:	0800a04d 	.word	0x0800a04d
 800a00c:	0800a05d 	.word	0x0800a05d
 800a010:	0800a05d 	.word	0x0800a05d
 800a014:	0800a05d 	.word	0x0800a05d
 800a018:	0800a05d 	.word	0x0800a05d
 800a01c:	0800a05d 	.word	0x0800a05d
 800a020:	0800a05d 	.word	0x0800a05d
 800a024:	0800a05d 	.word	0x0800a05d
 800a028:	0800a055 	.word	0x0800a055
 800a02c:	2301      	movs	r3, #1
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a032:	e222      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a034:	2304      	movs	r3, #4
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e21e      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a03c:	2308      	movs	r3, #8
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e21a      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a044:	2310      	movs	r3, #16
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e216      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a04c:	2320      	movs	r3, #32
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e212      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a054:	2340      	movs	r3, #64	@ 0x40
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e20e      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a05c:	2380      	movs	r3, #128	@ 0x80
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e20a      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a69      	ldr	r2, [pc, #420]	@ (800a210 <UART_SetConfig+0x33c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d130      	bne.n	800a0d0 <UART_SetConfig+0x1fc>
 800a06e:	4b67      	ldr	r3, [pc, #412]	@ (800a20c <UART_SetConfig+0x338>)
 800a070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	2b05      	cmp	r3, #5
 800a078:	d826      	bhi.n	800a0c8 <UART_SetConfig+0x1f4>
 800a07a:	a201      	add	r2, pc, #4	@ (adr r2, 800a080 <UART_SetConfig+0x1ac>)
 800a07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a080:	0800a099 	.word	0x0800a099
 800a084:	0800a0a1 	.word	0x0800a0a1
 800a088:	0800a0a9 	.word	0x0800a0a9
 800a08c:	0800a0b1 	.word	0x0800a0b1
 800a090:	0800a0b9 	.word	0x0800a0b9
 800a094:	0800a0c1 	.word	0x0800a0c1
 800a098:	2300      	movs	r3, #0
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e1ec      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e1e8      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a0a8:	2308      	movs	r3, #8
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e1e4      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e1e0      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e1dc      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a0c0:	2340      	movs	r3, #64	@ 0x40
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c6:	e1d8      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a0c8:	2380      	movs	r3, #128	@ 0x80
 800a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ce:	e1d4      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a4f      	ldr	r2, [pc, #316]	@ (800a214 <UART_SetConfig+0x340>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d130      	bne.n	800a13c <UART_SetConfig+0x268>
 800a0da:	4b4c      	ldr	r3, [pc, #304]	@ (800a20c <UART_SetConfig+0x338>)
 800a0dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0de:	f003 0307 	and.w	r3, r3, #7
 800a0e2:	2b05      	cmp	r3, #5
 800a0e4:	d826      	bhi.n	800a134 <UART_SetConfig+0x260>
 800a0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ec <UART_SetConfig+0x218>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a105 	.word	0x0800a105
 800a0f0:	0800a10d 	.word	0x0800a10d
 800a0f4:	0800a115 	.word	0x0800a115
 800a0f8:	0800a11d 	.word	0x0800a11d
 800a0fc:	0800a125 	.word	0x0800a125
 800a100:	0800a12d 	.word	0x0800a12d
 800a104:	2300      	movs	r3, #0
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e1b6      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a10c:	2304      	movs	r3, #4
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e1b2      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a114:	2308      	movs	r3, #8
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e1ae      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a11c:	2310      	movs	r3, #16
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e1aa      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a124:	2320      	movs	r3, #32
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e1a6      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a12c:	2340      	movs	r3, #64	@ 0x40
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a132:	e1a2      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a134:	2380      	movs	r3, #128	@ 0x80
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13a:	e19e      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a35      	ldr	r2, [pc, #212]	@ (800a218 <UART_SetConfig+0x344>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d130      	bne.n	800a1a8 <UART_SetConfig+0x2d4>
 800a146:	4b31      	ldr	r3, [pc, #196]	@ (800a20c <UART_SetConfig+0x338>)
 800a148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14a:	f003 0307 	and.w	r3, r3, #7
 800a14e:	2b05      	cmp	r3, #5
 800a150:	d826      	bhi.n	800a1a0 <UART_SetConfig+0x2cc>
 800a152:	a201      	add	r2, pc, #4	@ (adr r2, 800a158 <UART_SetConfig+0x284>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a171 	.word	0x0800a171
 800a15c:	0800a179 	.word	0x0800a179
 800a160:	0800a181 	.word	0x0800a181
 800a164:	0800a189 	.word	0x0800a189
 800a168:	0800a191 	.word	0x0800a191
 800a16c:	0800a199 	.word	0x0800a199
 800a170:	2300      	movs	r3, #0
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e180      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a178:	2304      	movs	r3, #4
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e17c      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a180:	2308      	movs	r3, #8
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e178      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a188:	2310      	movs	r3, #16
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e174      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a190:	2320      	movs	r3, #32
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a196:	e170      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a198:	2340      	movs	r3, #64	@ 0x40
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19e:	e16c      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a1a0:	2380      	movs	r3, #128	@ 0x80
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a6:	e168      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a21c <UART_SetConfig+0x348>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d142      	bne.n	800a238 <UART_SetConfig+0x364>
 800a1b2:	4b16      	ldr	r3, [pc, #88]	@ (800a20c <UART_SetConfig+0x338>)
 800a1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	2b05      	cmp	r3, #5
 800a1bc:	d838      	bhi.n	800a230 <UART_SetConfig+0x35c>
 800a1be:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c4 <UART_SetConfig+0x2f0>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1dd 	.word	0x0800a1dd
 800a1c8:	0800a1e5 	.word	0x0800a1e5
 800a1cc:	0800a1ed 	.word	0x0800a1ed
 800a1d0:	0800a1f5 	.word	0x0800a1f5
 800a1d4:	0800a221 	.word	0x0800a221
 800a1d8:	0800a229 	.word	0x0800a229
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e14a      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e146      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e142      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e13e      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a1fc:	cfff69f3 	.word	0xcfff69f3
 800a200:	58000c00 	.word	0x58000c00
 800a204:	11fff4ff 	.word	0x11fff4ff
 800a208:	40011000 	.word	0x40011000
 800a20c:	58024400 	.word	0x58024400
 800a210:	40004400 	.word	0x40004400
 800a214:	40004800 	.word	0x40004800
 800a218:	40004c00 	.word	0x40004c00
 800a21c:	40005000 	.word	0x40005000
 800a220:	2320      	movs	r3, #32
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a226:	e128      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a228:	2340      	movs	r3, #64	@ 0x40
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22e:	e124      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a236:	e120      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4acb      	ldr	r2, [pc, #812]	@ (800a56c <UART_SetConfig+0x698>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d176      	bne.n	800a330 <UART_SetConfig+0x45c>
 800a242:	4bcb      	ldr	r3, [pc, #812]	@ (800a570 <UART_SetConfig+0x69c>)
 800a244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a24a:	2b28      	cmp	r3, #40	@ 0x28
 800a24c:	d86c      	bhi.n	800a328 <UART_SetConfig+0x454>
 800a24e:	a201      	add	r2, pc, #4	@ (adr r2, 800a254 <UART_SetConfig+0x380>)
 800a250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a254:	0800a2f9 	.word	0x0800a2f9
 800a258:	0800a329 	.word	0x0800a329
 800a25c:	0800a329 	.word	0x0800a329
 800a260:	0800a329 	.word	0x0800a329
 800a264:	0800a329 	.word	0x0800a329
 800a268:	0800a329 	.word	0x0800a329
 800a26c:	0800a329 	.word	0x0800a329
 800a270:	0800a329 	.word	0x0800a329
 800a274:	0800a301 	.word	0x0800a301
 800a278:	0800a329 	.word	0x0800a329
 800a27c:	0800a329 	.word	0x0800a329
 800a280:	0800a329 	.word	0x0800a329
 800a284:	0800a329 	.word	0x0800a329
 800a288:	0800a329 	.word	0x0800a329
 800a28c:	0800a329 	.word	0x0800a329
 800a290:	0800a329 	.word	0x0800a329
 800a294:	0800a309 	.word	0x0800a309
 800a298:	0800a329 	.word	0x0800a329
 800a29c:	0800a329 	.word	0x0800a329
 800a2a0:	0800a329 	.word	0x0800a329
 800a2a4:	0800a329 	.word	0x0800a329
 800a2a8:	0800a329 	.word	0x0800a329
 800a2ac:	0800a329 	.word	0x0800a329
 800a2b0:	0800a329 	.word	0x0800a329
 800a2b4:	0800a311 	.word	0x0800a311
 800a2b8:	0800a329 	.word	0x0800a329
 800a2bc:	0800a329 	.word	0x0800a329
 800a2c0:	0800a329 	.word	0x0800a329
 800a2c4:	0800a329 	.word	0x0800a329
 800a2c8:	0800a329 	.word	0x0800a329
 800a2cc:	0800a329 	.word	0x0800a329
 800a2d0:	0800a329 	.word	0x0800a329
 800a2d4:	0800a319 	.word	0x0800a319
 800a2d8:	0800a329 	.word	0x0800a329
 800a2dc:	0800a329 	.word	0x0800a329
 800a2e0:	0800a329 	.word	0x0800a329
 800a2e4:	0800a329 	.word	0x0800a329
 800a2e8:	0800a329 	.word	0x0800a329
 800a2ec:	0800a329 	.word	0x0800a329
 800a2f0:	0800a329 	.word	0x0800a329
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fe:	e0bc      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a300:	2304      	movs	r3, #4
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a306:	e0b8      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a308:	2308      	movs	r3, #8
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30e:	e0b4      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a310:	2310      	movs	r3, #16
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e0b0      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a318:	2320      	movs	r3, #32
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31e:	e0ac      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a320:	2340      	movs	r3, #64	@ 0x40
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a326:	e0a8      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a328:	2380      	movs	r3, #128	@ 0x80
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32e:	e0a4      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a8f      	ldr	r2, [pc, #572]	@ (800a574 <UART_SetConfig+0x6a0>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d130      	bne.n	800a39c <UART_SetConfig+0x4c8>
 800a33a:	4b8d      	ldr	r3, [pc, #564]	@ (800a570 <UART_SetConfig+0x69c>)
 800a33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	2b05      	cmp	r3, #5
 800a344:	d826      	bhi.n	800a394 <UART_SetConfig+0x4c0>
 800a346:	a201      	add	r2, pc, #4	@ (adr r2, 800a34c <UART_SetConfig+0x478>)
 800a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34c:	0800a365 	.word	0x0800a365
 800a350:	0800a36d 	.word	0x0800a36d
 800a354:	0800a375 	.word	0x0800a375
 800a358:	0800a37d 	.word	0x0800a37d
 800a35c:	0800a385 	.word	0x0800a385
 800a360:	0800a38d 	.word	0x0800a38d
 800a364:	2300      	movs	r3, #0
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e086      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a36c:	2304      	movs	r3, #4
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e082      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a374:	2308      	movs	r3, #8
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e07e      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a37c:	2310      	movs	r3, #16
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e07a      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a384:	2320      	movs	r3, #32
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e076      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a38c:	2340      	movs	r3, #64	@ 0x40
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e072      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a394:	2380      	movs	r3, #128	@ 0x80
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e06e      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a75      	ldr	r2, [pc, #468]	@ (800a578 <UART_SetConfig+0x6a4>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d130      	bne.n	800a408 <UART_SetConfig+0x534>
 800a3a6:	4b72      	ldr	r3, [pc, #456]	@ (800a570 <UART_SetConfig+0x69c>)
 800a3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	2b05      	cmp	r3, #5
 800a3b0:	d826      	bhi.n	800a400 <UART_SetConfig+0x52c>
 800a3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b8 <UART_SetConfig+0x4e4>)
 800a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b8:	0800a3d1 	.word	0x0800a3d1
 800a3bc:	0800a3d9 	.word	0x0800a3d9
 800a3c0:	0800a3e1 	.word	0x0800a3e1
 800a3c4:	0800a3e9 	.word	0x0800a3e9
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f9 	.word	0x0800a3f9
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e050      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e04c      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e048      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e044      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a3f0:	2320      	movs	r3, #32
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e040      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a3f8:	2340      	movs	r3, #64	@ 0x40
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e03c      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a400:	2380      	movs	r3, #128	@ 0x80
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a406:	e038      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a5b      	ldr	r2, [pc, #364]	@ (800a57c <UART_SetConfig+0x6a8>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d130      	bne.n	800a474 <UART_SetConfig+0x5a0>
 800a412:	4b57      	ldr	r3, [pc, #348]	@ (800a570 <UART_SetConfig+0x69c>)
 800a414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	d826      	bhi.n	800a46c <UART_SetConfig+0x598>
 800a41e:	a201      	add	r2, pc, #4	@ (adr r2, 800a424 <UART_SetConfig+0x550>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a43d 	.word	0x0800a43d
 800a428:	0800a445 	.word	0x0800a445
 800a42c:	0800a44d 	.word	0x0800a44d
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a45d 	.word	0x0800a45d
 800a438:	0800a465 	.word	0x0800a465
 800a43c:	2302      	movs	r3, #2
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e01a      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a444:	2304      	movs	r3, #4
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e016      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a44c:	2308      	movs	r3, #8
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e012      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a454:	2310      	movs	r3, #16
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e00e      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a45c:	2320      	movs	r3, #32
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e00a      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a464:	2340      	movs	r3, #64	@ 0x40
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46a:	e006      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a46c:	2380      	movs	r3, #128	@ 0x80
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a472:	e002      	b.n	800a47a <UART_SetConfig+0x5a6>
 800a474:	2380      	movs	r3, #128	@ 0x80
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a3f      	ldr	r2, [pc, #252]	@ (800a57c <UART_SetConfig+0x6a8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	f040 80f8 	bne.w	800a676 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a486:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	dc46      	bgt.n	800a51c <UART_SetConfig+0x648>
 800a48e:	2b02      	cmp	r3, #2
 800a490:	f2c0 8082 	blt.w	800a598 <UART_SetConfig+0x6c4>
 800a494:	3b02      	subs	r3, #2
 800a496:	2b1e      	cmp	r3, #30
 800a498:	d87e      	bhi.n	800a598 <UART_SetConfig+0x6c4>
 800a49a:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a0 <UART_SetConfig+0x5cc>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a523 	.word	0x0800a523
 800a4a4:	0800a599 	.word	0x0800a599
 800a4a8:	0800a52b 	.word	0x0800a52b
 800a4ac:	0800a599 	.word	0x0800a599
 800a4b0:	0800a599 	.word	0x0800a599
 800a4b4:	0800a599 	.word	0x0800a599
 800a4b8:	0800a53b 	.word	0x0800a53b
 800a4bc:	0800a599 	.word	0x0800a599
 800a4c0:	0800a599 	.word	0x0800a599
 800a4c4:	0800a599 	.word	0x0800a599
 800a4c8:	0800a599 	.word	0x0800a599
 800a4cc:	0800a599 	.word	0x0800a599
 800a4d0:	0800a599 	.word	0x0800a599
 800a4d4:	0800a599 	.word	0x0800a599
 800a4d8:	0800a54b 	.word	0x0800a54b
 800a4dc:	0800a599 	.word	0x0800a599
 800a4e0:	0800a599 	.word	0x0800a599
 800a4e4:	0800a599 	.word	0x0800a599
 800a4e8:	0800a599 	.word	0x0800a599
 800a4ec:	0800a599 	.word	0x0800a599
 800a4f0:	0800a599 	.word	0x0800a599
 800a4f4:	0800a599 	.word	0x0800a599
 800a4f8:	0800a599 	.word	0x0800a599
 800a4fc:	0800a599 	.word	0x0800a599
 800a500:	0800a599 	.word	0x0800a599
 800a504:	0800a599 	.word	0x0800a599
 800a508:	0800a599 	.word	0x0800a599
 800a50c:	0800a599 	.word	0x0800a599
 800a510:	0800a599 	.word	0x0800a599
 800a514:	0800a599 	.word	0x0800a599
 800a518:	0800a58b 	.word	0x0800a58b
 800a51c:	2b40      	cmp	r3, #64	@ 0x40
 800a51e:	d037      	beq.n	800a590 <UART_SetConfig+0x6bc>
 800a520:	e03a      	b.n	800a598 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a522:	f7fd f98b 	bl	800783c <HAL_RCCEx_GetD3PCLK1Freq>
 800a526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a528:	e03c      	b.n	800a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a52a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fd f99a 	bl	8007868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a538:	e034      	b.n	800a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a53a:	f107 0318 	add.w	r3, r7, #24
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fd fae6 	bl	8007b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a548:	e02c      	b.n	800a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a54a:	4b09      	ldr	r3, [pc, #36]	@ (800a570 <UART_SetConfig+0x69c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d016      	beq.n	800a584 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a556:	4b06      	ldr	r3, [pc, #24]	@ (800a570 <UART_SetConfig+0x69c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	08db      	lsrs	r3, r3, #3
 800a55c:	f003 0303 	and.w	r3, r3, #3
 800a560:	4a07      	ldr	r2, [pc, #28]	@ (800a580 <UART_SetConfig+0x6ac>)
 800a562:	fa22 f303 	lsr.w	r3, r2, r3
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a568:	e01c      	b.n	800a5a4 <UART_SetConfig+0x6d0>
 800a56a:	bf00      	nop
 800a56c:	40011400 	.word	0x40011400
 800a570:	58024400 	.word	0x58024400
 800a574:	40007800 	.word	0x40007800
 800a578:	40007c00 	.word	0x40007c00
 800a57c:	58000c00 	.word	0x58000c00
 800a580:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a584:	4b9d      	ldr	r3, [pc, #628]	@ (800a7fc <UART_SetConfig+0x928>)
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a588:	e00c      	b.n	800a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a58a:	4b9d      	ldr	r3, [pc, #628]	@ (800a800 <UART_SetConfig+0x92c>)
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58e:	e009      	b.n	800a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a596:	e005      	b.n	800a5a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 81de 	beq.w	800a968 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b0:	4a94      	ldr	r2, [pc, #592]	@ (800a804 <UART_SetConfig+0x930>)
 800a5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	4413      	add	r3, r2
 800a5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d305      	bcc.n	800a5dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d903      	bls.n	800a5e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a5e2:	e1c1      	b.n	800a968 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	60bb      	str	r3, [r7, #8]
 800a5ea:	60fa      	str	r2, [r7, #12]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f0:	4a84      	ldr	r2, [pc, #528]	@ (800a804 <UART_SetConfig+0x930>)
 800a5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	603b      	str	r3, [r7, #0]
 800a5fc:	607a      	str	r2, [r7, #4]
 800a5fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a606:	f7f5 fec3 	bl	8000390 <__aeabi_uldivmod>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4610      	mov	r0, r2
 800a610:	4619      	mov	r1, r3
 800a612:	f04f 0200 	mov.w	r2, #0
 800a616:	f04f 0300 	mov.w	r3, #0
 800a61a:	020b      	lsls	r3, r1, #8
 800a61c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a620:	0202      	lsls	r2, r0, #8
 800a622:	6979      	ldr	r1, [r7, #20]
 800a624:	6849      	ldr	r1, [r1, #4]
 800a626:	0849      	lsrs	r1, r1, #1
 800a628:	2000      	movs	r0, #0
 800a62a:	460c      	mov	r4, r1
 800a62c:	4605      	mov	r5, r0
 800a62e:	eb12 0804 	adds.w	r8, r2, r4
 800a632:	eb43 0905 	adc.w	r9, r3, r5
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	469a      	mov	sl, r3
 800a63e:	4693      	mov	fp, r2
 800a640:	4652      	mov	r2, sl
 800a642:	465b      	mov	r3, fp
 800a644:	4640      	mov	r0, r8
 800a646:	4649      	mov	r1, r9
 800a648:	f7f5 fea2 	bl	8000390 <__aeabi_uldivmod>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4613      	mov	r3, r2
 800a652:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a65a:	d308      	bcc.n	800a66e <UART_SetConfig+0x79a>
 800a65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a662:	d204      	bcs.n	800a66e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a66a:	60da      	str	r2, [r3, #12]
 800a66c:	e17c      	b.n	800a968 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a674:	e178      	b.n	800a968 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a67e:	f040 80c5 	bne.w	800a80c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a682:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a686:	2b20      	cmp	r3, #32
 800a688:	dc48      	bgt.n	800a71c <UART_SetConfig+0x848>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	db7b      	blt.n	800a786 <UART_SetConfig+0x8b2>
 800a68e:	2b20      	cmp	r3, #32
 800a690:	d879      	bhi.n	800a786 <UART_SetConfig+0x8b2>
 800a692:	a201      	add	r2, pc, #4	@ (adr r2, 800a698 <UART_SetConfig+0x7c4>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a723 	.word	0x0800a723
 800a69c:	0800a72b 	.word	0x0800a72b
 800a6a0:	0800a787 	.word	0x0800a787
 800a6a4:	0800a787 	.word	0x0800a787
 800a6a8:	0800a733 	.word	0x0800a733
 800a6ac:	0800a787 	.word	0x0800a787
 800a6b0:	0800a787 	.word	0x0800a787
 800a6b4:	0800a787 	.word	0x0800a787
 800a6b8:	0800a743 	.word	0x0800a743
 800a6bc:	0800a787 	.word	0x0800a787
 800a6c0:	0800a787 	.word	0x0800a787
 800a6c4:	0800a787 	.word	0x0800a787
 800a6c8:	0800a787 	.word	0x0800a787
 800a6cc:	0800a787 	.word	0x0800a787
 800a6d0:	0800a787 	.word	0x0800a787
 800a6d4:	0800a787 	.word	0x0800a787
 800a6d8:	0800a753 	.word	0x0800a753
 800a6dc:	0800a787 	.word	0x0800a787
 800a6e0:	0800a787 	.word	0x0800a787
 800a6e4:	0800a787 	.word	0x0800a787
 800a6e8:	0800a787 	.word	0x0800a787
 800a6ec:	0800a787 	.word	0x0800a787
 800a6f0:	0800a787 	.word	0x0800a787
 800a6f4:	0800a787 	.word	0x0800a787
 800a6f8:	0800a787 	.word	0x0800a787
 800a6fc:	0800a787 	.word	0x0800a787
 800a700:	0800a787 	.word	0x0800a787
 800a704:	0800a787 	.word	0x0800a787
 800a708:	0800a787 	.word	0x0800a787
 800a70c:	0800a787 	.word	0x0800a787
 800a710:	0800a787 	.word	0x0800a787
 800a714:	0800a787 	.word	0x0800a787
 800a718:	0800a779 	.word	0x0800a779
 800a71c:	2b40      	cmp	r3, #64	@ 0x40
 800a71e:	d02e      	beq.n	800a77e <UART_SetConfig+0x8aa>
 800a720:	e031      	b.n	800a786 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a722:	f7fb fe55 	bl	80063d0 <HAL_RCC_GetPCLK1Freq>
 800a726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a728:	e033      	b.n	800a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a72a:	f7fb fe67 	bl	80063fc <HAL_RCC_GetPCLK2Freq>
 800a72e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a730:	e02f      	b.n	800a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd f896 	bl	8007868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a740:	e027      	b.n	800a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a742:	f107 0318 	add.w	r3, r7, #24
 800a746:	4618      	mov	r0, r3
 800a748:	f7fd f9e2 	bl	8007b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a750:	e01f      	b.n	800a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a752:	4b2d      	ldr	r3, [pc, #180]	@ (800a808 <UART_SetConfig+0x934>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d009      	beq.n	800a772 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a75e:	4b2a      	ldr	r3, [pc, #168]	@ (800a808 <UART_SetConfig+0x934>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	08db      	lsrs	r3, r3, #3
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	4a24      	ldr	r2, [pc, #144]	@ (800a7fc <UART_SetConfig+0x928>)
 800a76a:	fa22 f303 	lsr.w	r3, r2, r3
 800a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a770:	e00f      	b.n	800a792 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a772:	4b22      	ldr	r3, [pc, #136]	@ (800a7fc <UART_SetConfig+0x928>)
 800a774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a776:	e00c      	b.n	800a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a778:	4b21      	ldr	r3, [pc, #132]	@ (800a800 <UART_SetConfig+0x92c>)
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77c:	e009      	b.n	800a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a77e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a784:	e005      	b.n	800a792 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 80e7 	beq.w	800a968 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79e:	4a19      	ldr	r2, [pc, #100]	@ (800a804 <UART_SetConfig+0x930>)
 800a7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ac:	005a      	lsls	r2, r3, #1
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	441a      	add	r2, r3
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	2b0f      	cmp	r3, #15
 800a7c4:	d916      	bls.n	800a7f4 <UART_SetConfig+0x920>
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7cc:	d212      	bcs.n	800a7f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	f023 030f 	bic.w	r3, r3, #15
 800a7d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7da:	085b      	lsrs	r3, r3, #1
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	f003 0307 	and.w	r3, r3, #7
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a7f0:	60da      	str	r2, [r3, #12]
 800a7f2:	e0b9      	b.n	800a968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7fa:	e0b5      	b.n	800a968 <UART_SetConfig+0xa94>
 800a7fc:	03d09000 	.word	0x03d09000
 800a800:	003d0900 	.word	0x003d0900
 800a804:	0800be94 	.word	0x0800be94
 800a808:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a80c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a810:	2b20      	cmp	r3, #32
 800a812:	dc49      	bgt.n	800a8a8 <UART_SetConfig+0x9d4>
 800a814:	2b00      	cmp	r3, #0
 800a816:	db7c      	blt.n	800a912 <UART_SetConfig+0xa3e>
 800a818:	2b20      	cmp	r3, #32
 800a81a:	d87a      	bhi.n	800a912 <UART_SetConfig+0xa3e>
 800a81c:	a201      	add	r2, pc, #4	@ (adr r2, 800a824 <UART_SetConfig+0x950>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a8af 	.word	0x0800a8af
 800a828:	0800a8b7 	.word	0x0800a8b7
 800a82c:	0800a913 	.word	0x0800a913
 800a830:	0800a913 	.word	0x0800a913
 800a834:	0800a8bf 	.word	0x0800a8bf
 800a838:	0800a913 	.word	0x0800a913
 800a83c:	0800a913 	.word	0x0800a913
 800a840:	0800a913 	.word	0x0800a913
 800a844:	0800a8cf 	.word	0x0800a8cf
 800a848:	0800a913 	.word	0x0800a913
 800a84c:	0800a913 	.word	0x0800a913
 800a850:	0800a913 	.word	0x0800a913
 800a854:	0800a913 	.word	0x0800a913
 800a858:	0800a913 	.word	0x0800a913
 800a85c:	0800a913 	.word	0x0800a913
 800a860:	0800a913 	.word	0x0800a913
 800a864:	0800a8df 	.word	0x0800a8df
 800a868:	0800a913 	.word	0x0800a913
 800a86c:	0800a913 	.word	0x0800a913
 800a870:	0800a913 	.word	0x0800a913
 800a874:	0800a913 	.word	0x0800a913
 800a878:	0800a913 	.word	0x0800a913
 800a87c:	0800a913 	.word	0x0800a913
 800a880:	0800a913 	.word	0x0800a913
 800a884:	0800a913 	.word	0x0800a913
 800a888:	0800a913 	.word	0x0800a913
 800a88c:	0800a913 	.word	0x0800a913
 800a890:	0800a913 	.word	0x0800a913
 800a894:	0800a913 	.word	0x0800a913
 800a898:	0800a913 	.word	0x0800a913
 800a89c:	0800a913 	.word	0x0800a913
 800a8a0:	0800a913 	.word	0x0800a913
 800a8a4:	0800a905 	.word	0x0800a905
 800a8a8:	2b40      	cmp	r3, #64	@ 0x40
 800a8aa:	d02e      	beq.n	800a90a <UART_SetConfig+0xa36>
 800a8ac:	e031      	b.n	800a912 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ae:	f7fb fd8f 	bl	80063d0 <HAL_RCC_GetPCLK1Freq>
 800a8b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8b4:	e033      	b.n	800a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8b6:	f7fb fda1 	bl	80063fc <HAL_RCC_GetPCLK2Freq>
 800a8ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8bc:	e02f      	b.n	800a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fc ffd0 	bl	8007868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	e027      	b.n	800a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ce:	f107 0318 	add.w	r3, r7, #24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fd f91c 	bl	8007b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8dc:	e01f      	b.n	800a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8de:	4b2d      	ldr	r3, [pc, #180]	@ (800a994 <UART_SetConfig+0xac0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0320 	and.w	r3, r3, #32
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8ea:	4b2a      	ldr	r3, [pc, #168]	@ (800a994 <UART_SetConfig+0xac0>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	08db      	lsrs	r3, r3, #3
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	4a28      	ldr	r2, [pc, #160]	@ (800a998 <UART_SetConfig+0xac4>)
 800a8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8fc:	e00f      	b.n	800a91e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a8fe:	4b26      	ldr	r3, [pc, #152]	@ (800a998 <UART_SetConfig+0xac4>)
 800a900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a902:	e00c      	b.n	800a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a904:	4b25      	ldr	r3, [pc, #148]	@ (800a99c <UART_SetConfig+0xac8>)
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a908:	e009      	b.n	800a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a910:	e005      	b.n	800a91e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a91c:	bf00      	nop
    }

    if (pclk != 0U)
 800a91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d021      	beq.n	800a968 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a928:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <UART_SetConfig+0xacc>)
 800a92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a92e:	461a      	mov	r2, r3
 800a930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a932:	fbb3 f2f2 	udiv	r2, r3, r2
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	085b      	lsrs	r3, r3, #1
 800a93c:	441a      	add	r2, r3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	fbb2 f3f3 	udiv	r3, r2, r3
 800a946:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94a:	2b0f      	cmp	r3, #15
 800a94c:	d909      	bls.n	800a962 <UART_SetConfig+0xa8e>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a954:	d205      	bcs.n	800a962 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a958:	b29a      	uxth	r2, r3
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	60da      	str	r2, [r3, #12]
 800a960:	e002      	b.n	800a968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2201      	movs	r2, #1
 800a974:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2200      	movs	r2, #0
 800a97c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2200      	movs	r2, #0
 800a982:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a984:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3748      	adds	r7, #72	@ 0x48
 800a98c:	46bd      	mov	sp, r7
 800a98e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a992:	bf00      	nop
 800a994:	58024400 	.word	0x58024400
 800a998:	03d09000 	.word	0x03d09000
 800a99c:	003d0900 	.word	0x003d0900
 800a9a0:	0800be94 	.word	0x0800be94

0800a9a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b0:	f003 0308 	and.w	r3, r3, #8
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00a      	beq.n	800a9ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00a      	beq.n	800a9f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00a      	beq.n	800aa12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa38:	f003 0310 	and.w	r3, r3, #16
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00a      	beq.n	800aa56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5a:	f003 0320 	and.w	r3, r3, #32
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d01a      	beq.n	800aaba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaa2:	d10a      	bne.n	800aaba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	430a      	orrs	r2, r1
 800aab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aabe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00a      	beq.n	800aadc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	430a      	orrs	r2, r1
 800aada:	605a      	str	r2, [r3, #4]
  }
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b098      	sub	sp, #96	@ 0x60
 800aaec:	af02      	add	r7, sp, #8
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aaf8:	f7f7 fa9a 	bl	8002030 <HAL_GetTick>
 800aafc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0308 	and.w	r3, r3, #8
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d12f      	bne.n	800ab6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab14:	2200      	movs	r2, #0
 800ab16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f88e 	bl	800ac3c <UART_WaitOnFlagUntilTimeout>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d022      	beq.n	800ab6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab44:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e6      	bne.n	800ab26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e063      	b.n	800ac34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0304 	and.w	r3, r3, #4
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d149      	bne.n	800ac0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab82:	2200      	movs	r2, #0
 800ab84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f857 	bl	800ac3c <UART_WaitOnFlagUntilTimeout>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d03c      	beq.n	800ac0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9c:	e853 3f00 	ldrex	r3, [r3]
 800aba0:	623b      	str	r3, [r7, #32]
   return(result);
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800abb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abba:	e841 2300 	strex	r3, r2, [r1]
 800abbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1e6      	bne.n	800ab94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3308      	adds	r3, #8
 800abcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	e853 3f00 	ldrex	r3, [r3]
 800abd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f023 0301 	bic.w	r3, r3, #1
 800abdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3308      	adds	r3, #8
 800abe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abe6:	61fa      	str	r2, [r7, #28]
 800abe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abea:	69b9      	ldr	r1, [r7, #24]
 800abec:	69fa      	ldr	r2, [r7, #28]
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	617b      	str	r3, [r7, #20]
   return(result);
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1e5      	bne.n	800abc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e012      	b.n	800ac34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2220      	movs	r2, #32
 800ac12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3758      	adds	r7, #88	@ 0x58
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	603b      	str	r3, [r7, #0]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac4c:	e04f      	b.n	800acee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac54:	d04b      	beq.n	800acee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac56:	f7f7 f9eb 	bl	8002030 <HAL_GetTick>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	69ba      	ldr	r2, [r7, #24]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d302      	bcc.n	800ac6c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e04e      	b.n	800ad0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0304 	and.w	r3, r3, #4
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d037      	beq.n	800acee <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b80      	cmp	r3, #128	@ 0x80
 800ac82:	d034      	beq.n	800acee <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2b40      	cmp	r3, #64	@ 0x40
 800ac88:	d031      	beq.n	800acee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	f003 0308 	and.w	r3, r3, #8
 800ac94:	2b08      	cmp	r3, #8
 800ac96:	d110      	bne.n	800acba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2208      	movs	r2, #8
 800ac9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f921 	bl	800aee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2208      	movs	r2, #8
 800acaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e029      	b.n	800ad0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69db      	ldr	r3, [r3, #28]
 800acc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acc8:	d111      	bne.n	800acee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 f907 	bl	800aee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2220      	movs	r2, #32
 800acde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e00f      	b.n	800ad0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	4013      	ands	r3, r2
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	bf0c      	ite	eq
 800acfe:	2301      	moveq	r3, #1
 800ad00:	2300      	movne	r3, #0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	461a      	mov	r2, r3
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d0a0      	beq.n	800ac4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b096      	sub	sp, #88	@ 0x58
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	4613      	mov	r3, r2
 800ad24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	88fa      	ldrh	r2, [r7, #6]
 800ad30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2222      	movs	r2, #34	@ 0x22
 800ad40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d02d      	beq.n	800adaa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad54:	4a40      	ldr	r2, [pc, #256]	@ (800ae58 <UART_Start_Receive_DMA+0x140>)
 800ad56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad5e:	4a3f      	ldr	r2, [pc, #252]	@ (800ae5c <UART_Start_Receive_DMA+0x144>)
 800ad60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad68:	4a3d      	ldr	r2, [pc, #244]	@ (800ae60 <UART_Start_Receive_DMA+0x148>)
 800ad6a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad72:	2200      	movs	r2, #0
 800ad74:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3324      	adds	r3, #36	@ 0x24
 800ad82:	4619      	mov	r1, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad88:	461a      	mov	r2, r3
 800ad8a:	88fb      	ldrh	r3, [r7, #6]
 800ad8c:	f7f7 fdf8 	bl	8002980 <HAL_DMA_Start_IT>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2210      	movs	r2, #16
 800ad9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2220      	movs	r2, #32
 800ada2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e051      	b.n	800ae4e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d018      	beq.n	800ade4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adc6:	657b      	str	r3, [r7, #84]	@ 0x54
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800add0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800add2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800add6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800adde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e6      	bne.n	800adb2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3308      	adds	r3, #8
 800adea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	f043 0301 	orr.w	r3, r3, #1
 800adfa:	653b      	str	r3, [r7, #80]	@ 0x50
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3308      	adds	r3, #8
 800ae02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae04:	637a      	str	r2, [r7, #52]	@ 0x34
 800ae06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae0c:	e841 2300 	strex	r3, r2, [r1]
 800ae10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ae12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e5      	bne.n	800ade4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	613b      	str	r3, [r7, #16]
   return(result);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3308      	adds	r3, #8
 800ae36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae38:	623a      	str	r2, [r7, #32]
 800ae3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	69f9      	ldr	r1, [r7, #28]
 800ae3e:	6a3a      	ldr	r2, [r7, #32]
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e5      	bne.n	800ae18 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3758      	adds	r7, #88	@ 0x58
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	0800afb5 	.word	0x0800afb5
 800ae5c:	0800b0dd 	.word	0x0800b0dd
 800ae60:	0800b11b 	.word	0x0800b11b

0800ae64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b08f      	sub	sp, #60	@ 0x3c
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e6      	bne.n	800ae6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3308      	adds	r3, #8
 800aea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aeb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aebe:	61ba      	str	r2, [r7, #24]
 800aec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	6979      	ldr	r1, [r7, #20]
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	613b      	str	r3, [r7, #16]
   return(result);
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1e5      	bne.n	800ae9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aeda:	bf00      	nop
 800aedc:	373c      	adds	r7, #60	@ 0x3c
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
	...

0800aee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b095      	sub	sp, #84	@ 0x54
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800af10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af16:	e841 2300 	strex	r3, r2, [r1]
 800af1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1e6      	bne.n	800aef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3308      	adds	r3, #8
 800af28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	e853 3f00 	ldrex	r3, [r3]
 800af30:	61fb      	str	r3, [r7, #28]
   return(result);
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	4b1e      	ldr	r3, [pc, #120]	@ (800afb0 <UART_EndRxTransfer+0xc8>)
 800af36:	4013      	ands	r3, r2
 800af38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3308      	adds	r3, #8
 800af40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af4a:	e841 2300 	strex	r3, r2, [r1]
 800af4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1e5      	bne.n	800af22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d118      	bne.n	800af90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	e853 3f00 	ldrex	r3, [r3]
 800af6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f023 0310 	bic.w	r3, r3, #16
 800af72:	647b      	str	r3, [r7, #68]	@ 0x44
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af7c:	61bb      	str	r3, [r7, #24]
 800af7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	6979      	ldr	r1, [r7, #20]
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	613b      	str	r3, [r7, #16]
   return(result);
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e6      	bne.n	800af5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2220      	movs	r2, #32
 800af94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afa4:	bf00      	nop
 800afa6:	3754      	adds	r7, #84	@ 0x54
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	effffffe 	.word	0xeffffffe

0800afb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b09c      	sub	sp, #112	@ 0x70
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afca:	d071      	beq.n	800b0b0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800afcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afce:	2200      	movs	r2, #0
 800afd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800afe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aff4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aff8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e6      	bne.n	800afd4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3308      	adds	r3, #8
 800b00c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b018:	f023 0301 	bic.w	r3, r3, #1
 800b01c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b01e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3308      	adds	r3, #8
 800b024:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b026:	647a      	str	r2, [r7, #68]	@ 0x44
 800b028:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b02c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b02e:	e841 2300 	strex	r3, r2, [r1]
 800b032:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e5      	bne.n	800b006 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b03a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3308      	adds	r3, #8
 800b040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b044:	e853 3f00 	ldrex	r3, [r3]
 800b048:	623b      	str	r3, [r7, #32]
   return(result);
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b050:	663b      	str	r3, [r7, #96]	@ 0x60
 800b052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3308      	adds	r3, #8
 800b058:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b05a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b062:	e841 2300 	strex	r3, r2, [r1]
 800b066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1e5      	bne.n	800b03a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b06e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b070:	2220      	movs	r2, #32
 800b072:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d118      	bne.n	800b0b0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b07e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	e853 3f00 	ldrex	r3, [r3]
 800b08a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 0310 	bic.w	r3, r3, #16
 800b092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	461a      	mov	r2, r3
 800b09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b09c:	61fb      	str	r3, [r7, #28]
 800b09e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a0:	69b9      	ldr	r1, [r7, #24]
 800b0a2:	69fa      	ldr	r2, [r7, #28]
 800b0a4:	e841 2300 	strex	r3, r2, [r1]
 800b0a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1e6      	bne.n	800b07e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d107      	bne.n	800b0ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0c8:	f7fe feea 	bl	8009ea0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0cc:	e002      	b.n	800b0d4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b0ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0d0:	f7f6 fb6e 	bl	80017b0 <HAL_UART_RxCpltCallback>
}
 800b0d4:	bf00      	nop
 800b0d6:	3770      	adds	r7, #112	@ 0x70
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d109      	bne.n	800b10c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0fe:	085b      	lsrs	r3, r3, #1
 800b100:	b29b      	uxth	r3, r3
 800b102:	4619      	mov	r1, r3
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7fe fecb 	bl	8009ea0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b10a:	e002      	b.n	800b112 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7fe febd 	bl	8009e8c <HAL_UART_RxHalfCpltCallback>
}
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b086      	sub	sp, #24
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b126:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b12e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b136:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b142:	2b80      	cmp	r3, #128	@ 0x80
 800b144:	d109      	bne.n	800b15a <UART_DMAError+0x40>
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	2b21      	cmp	r3, #33	@ 0x21
 800b14a:	d106      	bne.n	800b15a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2200      	movs	r2, #0
 800b150:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b154:	6978      	ldr	r0, [r7, #20]
 800b156:	f7ff fe85 	bl	800ae64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b164:	2b40      	cmp	r3, #64	@ 0x40
 800b166:	d109      	bne.n	800b17c <UART_DMAError+0x62>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b22      	cmp	r3, #34	@ 0x22
 800b16c:	d106      	bne.n	800b17c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2200      	movs	r2, #0
 800b172:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b176:	6978      	ldr	r0, [r7, #20]
 800b178:	f7ff feb6 	bl	800aee8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b182:	f043 0210 	orr.w	r2, r3, #16
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b18c:	6978      	ldr	r0, [r7, #20]
 800b18e:	f7f6 fb85 	bl	800189c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b192:	bf00      	nop
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7f6 fb73 	bl	800189c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b088      	sub	sp, #32
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	e853 3f00 	ldrex	r3, [r3]
 800b1d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1da:	61fb      	str	r3, [r7, #28]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	61bb      	str	r3, [r7, #24]
 800b1e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e8:	6979      	ldr	r1, [r7, #20]
 800b1ea:	69ba      	ldr	r2, [r7, #24]
 800b1ec:	e841 2300 	strex	r3, r2, [r1]
 800b1f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e6      	bne.n	800b1c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2220      	movs	r2, #32
 800b1fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7fe fe36 	bl	8009e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b20c:	bf00      	nop
 800b20e:	3720      	adds	r7, #32
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d101      	bne.n	800b266 <HAL_UARTEx_DisableFifoMode+0x16>
 800b262:	2302      	movs	r3, #2
 800b264:	e027      	b.n	800b2b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2224      	movs	r2, #36	@ 0x24
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0201 	bic.w	r2, r2, #1
 800b28c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b294:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d101      	bne.n	800b2da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e02d      	b.n	800b336 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2224      	movs	r2, #36	@ 0x24
 800b2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f022 0201 	bic.w	r2, r2, #1
 800b300:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	430a      	orrs	r2, r1
 800b314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f850 	bl	800b3bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2220      	movs	r2, #32
 800b328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d101      	bne.n	800b356 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b352:	2302      	movs	r3, #2
 800b354:	e02d      	b.n	800b3b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2224      	movs	r2, #36	@ 0x24
 800b362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 0201 	bic.w	r2, r2, #1
 800b37c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f812 	bl	800b3bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2220      	movs	r2, #32
 800b3a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d108      	bne.n	800b3de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3dc:	e031      	b.n	800b442 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3de:	2310      	movs	r3, #16
 800b3e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3e2:	2310      	movs	r3, #16
 800b3e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	0e5b      	lsrs	r3, r3, #25
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	f003 0307 	and.w	r3, r3, #7
 800b3f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	0f5b      	lsrs	r3, r3, #29
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	f003 0307 	and.w	r3, r3, #7
 800b404:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	7b3a      	ldrb	r2, [r7, #12]
 800b40a:	4911      	ldr	r1, [pc, #68]	@ (800b450 <UARTEx_SetNbDataToProcess+0x94>)
 800b40c:	5c8a      	ldrb	r2, [r1, r2]
 800b40e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b412:	7b3a      	ldrb	r2, [r7, #12]
 800b414:	490f      	ldr	r1, [pc, #60]	@ (800b454 <UARTEx_SetNbDataToProcess+0x98>)
 800b416:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b418:	fb93 f3f2 	sdiv	r3, r3, r2
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	7b7a      	ldrb	r2, [r7, #13]
 800b428:	4909      	ldr	r1, [pc, #36]	@ (800b450 <UARTEx_SetNbDataToProcess+0x94>)
 800b42a:	5c8a      	ldrb	r2, [r1, r2]
 800b42c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b430:	7b7a      	ldrb	r2, [r7, #13]
 800b432:	4908      	ldr	r1, [pc, #32]	@ (800b454 <UARTEx_SetNbDataToProcess+0x98>)
 800b434:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b436:	fb93 f3f2 	sdiv	r3, r3, r2
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	0800beac 	.word	0x0800beac
 800b454:	0800beb4 	.word	0x0800beb4

0800b458 <_vsniprintf_r>:
 800b458:	b530      	push	{r4, r5, lr}
 800b45a:	4614      	mov	r4, r2
 800b45c:	2c00      	cmp	r4, #0
 800b45e:	b09b      	sub	sp, #108	@ 0x6c
 800b460:	4605      	mov	r5, r0
 800b462:	461a      	mov	r2, r3
 800b464:	da05      	bge.n	800b472 <_vsniprintf_r+0x1a>
 800b466:	238b      	movs	r3, #139	@ 0x8b
 800b468:	6003      	str	r3, [r0, #0]
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	b01b      	add	sp, #108	@ 0x6c
 800b470:	bd30      	pop	{r4, r5, pc}
 800b472:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b476:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b47a:	f04f 0300 	mov.w	r3, #0
 800b47e:	9319      	str	r3, [sp, #100]	@ 0x64
 800b480:	bf14      	ite	ne
 800b482:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b486:	4623      	moveq	r3, r4
 800b488:	9302      	str	r3, [sp, #8]
 800b48a:	9305      	str	r3, [sp, #20]
 800b48c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b490:	9100      	str	r1, [sp, #0]
 800b492:	9104      	str	r1, [sp, #16]
 800b494:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b498:	4669      	mov	r1, sp
 800b49a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b49c:	f000 f9a0 	bl	800b7e0 <_svfiprintf_r>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	bfbc      	itt	lt
 800b4a4:	238b      	movlt	r3, #139	@ 0x8b
 800b4a6:	602b      	strlt	r3, [r5, #0]
 800b4a8:	2c00      	cmp	r4, #0
 800b4aa:	d0e0      	beq.n	800b46e <_vsniprintf_r+0x16>
 800b4ac:	9b00      	ldr	r3, [sp, #0]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	e7dc      	b.n	800b46e <_vsniprintf_r+0x16>

0800b4b4 <vsniprintf>:
 800b4b4:	b507      	push	{r0, r1, r2, lr}
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	460a      	mov	r2, r1
 800b4bc:	4601      	mov	r1, r0
 800b4be:	4803      	ldr	r0, [pc, #12]	@ (800b4cc <vsniprintf+0x18>)
 800b4c0:	6800      	ldr	r0, [r0, #0]
 800b4c2:	f7ff ffc9 	bl	800b458 <_vsniprintf_r>
 800b4c6:	b003      	add	sp, #12
 800b4c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4cc:	24000850 	.word	0x24000850

0800b4d0 <memset>:
 800b4d0:	4402      	add	r2, r0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d100      	bne.n	800b4da <memset+0xa>
 800b4d8:	4770      	bx	lr
 800b4da:	f803 1b01 	strb.w	r1, [r3], #1
 800b4de:	e7f9      	b.n	800b4d4 <memset+0x4>

0800b4e0 <__errno>:
 800b4e0:	4b01      	ldr	r3, [pc, #4]	@ (800b4e8 <__errno+0x8>)
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	24000850 	.word	0x24000850

0800b4ec <__libc_init_array>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4d0d      	ldr	r5, [pc, #52]	@ (800b524 <__libc_init_array+0x38>)
 800b4f0:	4c0d      	ldr	r4, [pc, #52]	@ (800b528 <__libc_init_array+0x3c>)
 800b4f2:	1b64      	subs	r4, r4, r5
 800b4f4:	10a4      	asrs	r4, r4, #2
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	42a6      	cmp	r6, r4
 800b4fa:	d109      	bne.n	800b510 <__libc_init_array+0x24>
 800b4fc:	4d0b      	ldr	r5, [pc, #44]	@ (800b52c <__libc_init_array+0x40>)
 800b4fe:	4c0c      	ldr	r4, [pc, #48]	@ (800b530 <__libc_init_array+0x44>)
 800b500:	f000 fc64 	bl	800bdcc <_init>
 800b504:	1b64      	subs	r4, r4, r5
 800b506:	10a4      	asrs	r4, r4, #2
 800b508:	2600      	movs	r6, #0
 800b50a:	42a6      	cmp	r6, r4
 800b50c:	d105      	bne.n	800b51a <__libc_init_array+0x2e>
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	f855 3b04 	ldr.w	r3, [r5], #4
 800b514:	4798      	blx	r3
 800b516:	3601      	adds	r6, #1
 800b518:	e7ee      	b.n	800b4f8 <__libc_init_array+0xc>
 800b51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51e:	4798      	blx	r3
 800b520:	3601      	adds	r6, #1
 800b522:	e7f2      	b.n	800b50a <__libc_init_array+0x1e>
 800b524:	0800bef8 	.word	0x0800bef8
 800b528:	0800bef8 	.word	0x0800bef8
 800b52c:	0800bef8 	.word	0x0800bef8
 800b530:	0800befc 	.word	0x0800befc

0800b534 <__retarget_lock_acquire_recursive>:
 800b534:	4770      	bx	lr

0800b536 <__retarget_lock_release_recursive>:
 800b536:	4770      	bx	lr

0800b538 <_free_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4605      	mov	r5, r0
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d041      	beq.n	800b5c4 <_free_r+0x8c>
 800b540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b544:	1f0c      	subs	r4, r1, #4
 800b546:	2b00      	cmp	r3, #0
 800b548:	bfb8      	it	lt
 800b54a:	18e4      	addlt	r4, r4, r3
 800b54c:	f000 f8e0 	bl	800b710 <__malloc_lock>
 800b550:	4a1d      	ldr	r2, [pc, #116]	@ (800b5c8 <_free_r+0x90>)
 800b552:	6813      	ldr	r3, [r2, #0]
 800b554:	b933      	cbnz	r3, 800b564 <_free_r+0x2c>
 800b556:	6063      	str	r3, [r4, #4]
 800b558:	6014      	str	r4, [r2, #0]
 800b55a:	4628      	mov	r0, r5
 800b55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b560:	f000 b8dc 	b.w	800b71c <__malloc_unlock>
 800b564:	42a3      	cmp	r3, r4
 800b566:	d908      	bls.n	800b57a <_free_r+0x42>
 800b568:	6820      	ldr	r0, [r4, #0]
 800b56a:	1821      	adds	r1, r4, r0
 800b56c:	428b      	cmp	r3, r1
 800b56e:	bf01      	itttt	eq
 800b570:	6819      	ldreq	r1, [r3, #0]
 800b572:	685b      	ldreq	r3, [r3, #4]
 800b574:	1809      	addeq	r1, r1, r0
 800b576:	6021      	streq	r1, [r4, #0]
 800b578:	e7ed      	b.n	800b556 <_free_r+0x1e>
 800b57a:	461a      	mov	r2, r3
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	b10b      	cbz	r3, 800b584 <_free_r+0x4c>
 800b580:	42a3      	cmp	r3, r4
 800b582:	d9fa      	bls.n	800b57a <_free_r+0x42>
 800b584:	6811      	ldr	r1, [r2, #0]
 800b586:	1850      	adds	r0, r2, r1
 800b588:	42a0      	cmp	r0, r4
 800b58a:	d10b      	bne.n	800b5a4 <_free_r+0x6c>
 800b58c:	6820      	ldr	r0, [r4, #0]
 800b58e:	4401      	add	r1, r0
 800b590:	1850      	adds	r0, r2, r1
 800b592:	4283      	cmp	r3, r0
 800b594:	6011      	str	r1, [r2, #0]
 800b596:	d1e0      	bne.n	800b55a <_free_r+0x22>
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	6053      	str	r3, [r2, #4]
 800b59e:	4408      	add	r0, r1
 800b5a0:	6010      	str	r0, [r2, #0]
 800b5a2:	e7da      	b.n	800b55a <_free_r+0x22>
 800b5a4:	d902      	bls.n	800b5ac <_free_r+0x74>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	e7d6      	b.n	800b55a <_free_r+0x22>
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	1821      	adds	r1, r4, r0
 800b5b0:	428b      	cmp	r3, r1
 800b5b2:	bf04      	itt	eq
 800b5b4:	6819      	ldreq	r1, [r3, #0]
 800b5b6:	685b      	ldreq	r3, [r3, #4]
 800b5b8:	6063      	str	r3, [r4, #4]
 800b5ba:	bf04      	itt	eq
 800b5bc:	1809      	addeq	r1, r1, r0
 800b5be:	6021      	streq	r1, [r4, #0]
 800b5c0:	6054      	str	r4, [r2, #4]
 800b5c2:	e7ca      	b.n	800b55a <_free_r+0x22>
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	24000cec 	.word	0x24000cec

0800b5cc <sbrk_aligned>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	4e0f      	ldr	r6, [pc, #60]	@ (800b60c <sbrk_aligned+0x40>)
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	6831      	ldr	r1, [r6, #0]
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	b911      	cbnz	r1, 800b5de <sbrk_aligned+0x12>
 800b5d8:	f000 fba4 	bl	800bd24 <_sbrk_r>
 800b5dc:	6030      	str	r0, [r6, #0]
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f000 fb9f 	bl	800bd24 <_sbrk_r>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d103      	bne.n	800b5f2 <sbrk_aligned+0x26>
 800b5ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	bd70      	pop	{r4, r5, r6, pc}
 800b5f2:	1cc4      	adds	r4, r0, #3
 800b5f4:	f024 0403 	bic.w	r4, r4, #3
 800b5f8:	42a0      	cmp	r0, r4
 800b5fa:	d0f8      	beq.n	800b5ee <sbrk_aligned+0x22>
 800b5fc:	1a21      	subs	r1, r4, r0
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 fb90 	bl	800bd24 <_sbrk_r>
 800b604:	3001      	adds	r0, #1
 800b606:	d1f2      	bne.n	800b5ee <sbrk_aligned+0x22>
 800b608:	e7ef      	b.n	800b5ea <sbrk_aligned+0x1e>
 800b60a:	bf00      	nop
 800b60c:	24000ce8 	.word	0x24000ce8

0800b610 <_malloc_r>:
 800b610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b614:	1ccd      	adds	r5, r1, #3
 800b616:	f025 0503 	bic.w	r5, r5, #3
 800b61a:	3508      	adds	r5, #8
 800b61c:	2d0c      	cmp	r5, #12
 800b61e:	bf38      	it	cc
 800b620:	250c      	movcc	r5, #12
 800b622:	2d00      	cmp	r5, #0
 800b624:	4606      	mov	r6, r0
 800b626:	db01      	blt.n	800b62c <_malloc_r+0x1c>
 800b628:	42a9      	cmp	r1, r5
 800b62a:	d904      	bls.n	800b636 <_malloc_r+0x26>
 800b62c:	230c      	movs	r3, #12
 800b62e:	6033      	str	r3, [r6, #0]
 800b630:	2000      	movs	r0, #0
 800b632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b70c <_malloc_r+0xfc>
 800b63a:	f000 f869 	bl	800b710 <__malloc_lock>
 800b63e:	f8d8 3000 	ldr.w	r3, [r8]
 800b642:	461c      	mov	r4, r3
 800b644:	bb44      	cbnz	r4, 800b698 <_malloc_r+0x88>
 800b646:	4629      	mov	r1, r5
 800b648:	4630      	mov	r0, r6
 800b64a:	f7ff ffbf 	bl	800b5cc <sbrk_aligned>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	4604      	mov	r4, r0
 800b652:	d158      	bne.n	800b706 <_malloc_r+0xf6>
 800b654:	f8d8 4000 	ldr.w	r4, [r8]
 800b658:	4627      	mov	r7, r4
 800b65a:	2f00      	cmp	r7, #0
 800b65c:	d143      	bne.n	800b6e6 <_malloc_r+0xd6>
 800b65e:	2c00      	cmp	r4, #0
 800b660:	d04b      	beq.n	800b6fa <_malloc_r+0xea>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	4639      	mov	r1, r7
 800b666:	4630      	mov	r0, r6
 800b668:	eb04 0903 	add.w	r9, r4, r3
 800b66c:	f000 fb5a 	bl	800bd24 <_sbrk_r>
 800b670:	4581      	cmp	r9, r0
 800b672:	d142      	bne.n	800b6fa <_malloc_r+0xea>
 800b674:	6821      	ldr	r1, [r4, #0]
 800b676:	1a6d      	subs	r5, r5, r1
 800b678:	4629      	mov	r1, r5
 800b67a:	4630      	mov	r0, r6
 800b67c:	f7ff ffa6 	bl	800b5cc <sbrk_aligned>
 800b680:	3001      	adds	r0, #1
 800b682:	d03a      	beq.n	800b6fa <_malloc_r+0xea>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	442b      	add	r3, r5
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	f8d8 3000 	ldr.w	r3, [r8]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	bb62      	cbnz	r2, 800b6ec <_malloc_r+0xdc>
 800b692:	f8c8 7000 	str.w	r7, [r8]
 800b696:	e00f      	b.n	800b6b8 <_malloc_r+0xa8>
 800b698:	6822      	ldr	r2, [r4, #0]
 800b69a:	1b52      	subs	r2, r2, r5
 800b69c:	d420      	bmi.n	800b6e0 <_malloc_r+0xd0>
 800b69e:	2a0b      	cmp	r2, #11
 800b6a0:	d917      	bls.n	800b6d2 <_malloc_r+0xc2>
 800b6a2:	1961      	adds	r1, r4, r5
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	6025      	str	r5, [r4, #0]
 800b6a8:	bf18      	it	ne
 800b6aa:	6059      	strne	r1, [r3, #4]
 800b6ac:	6863      	ldr	r3, [r4, #4]
 800b6ae:	bf08      	it	eq
 800b6b0:	f8c8 1000 	streq.w	r1, [r8]
 800b6b4:	5162      	str	r2, [r4, r5]
 800b6b6:	604b      	str	r3, [r1, #4]
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f000 f82f 	bl	800b71c <__malloc_unlock>
 800b6be:	f104 000b 	add.w	r0, r4, #11
 800b6c2:	1d23      	adds	r3, r4, #4
 800b6c4:	f020 0007 	bic.w	r0, r0, #7
 800b6c8:	1ac2      	subs	r2, r0, r3
 800b6ca:	bf1c      	itt	ne
 800b6cc:	1a1b      	subne	r3, r3, r0
 800b6ce:	50a3      	strne	r3, [r4, r2]
 800b6d0:	e7af      	b.n	800b632 <_malloc_r+0x22>
 800b6d2:	6862      	ldr	r2, [r4, #4]
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	bf0c      	ite	eq
 800b6d8:	f8c8 2000 	streq.w	r2, [r8]
 800b6dc:	605a      	strne	r2, [r3, #4]
 800b6de:	e7eb      	b.n	800b6b8 <_malloc_r+0xa8>
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	6864      	ldr	r4, [r4, #4]
 800b6e4:	e7ae      	b.n	800b644 <_malloc_r+0x34>
 800b6e6:	463c      	mov	r4, r7
 800b6e8:	687f      	ldr	r7, [r7, #4]
 800b6ea:	e7b6      	b.n	800b65a <_malloc_r+0x4a>
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	d1fb      	bne.n	800b6ec <_malloc_r+0xdc>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	6053      	str	r3, [r2, #4]
 800b6f8:	e7de      	b.n	800b6b8 <_malloc_r+0xa8>
 800b6fa:	230c      	movs	r3, #12
 800b6fc:	6033      	str	r3, [r6, #0]
 800b6fe:	4630      	mov	r0, r6
 800b700:	f000 f80c 	bl	800b71c <__malloc_unlock>
 800b704:	e794      	b.n	800b630 <_malloc_r+0x20>
 800b706:	6005      	str	r5, [r0, #0]
 800b708:	e7d6      	b.n	800b6b8 <_malloc_r+0xa8>
 800b70a:	bf00      	nop
 800b70c:	24000cec 	.word	0x24000cec

0800b710 <__malloc_lock>:
 800b710:	4801      	ldr	r0, [pc, #4]	@ (800b718 <__malloc_lock+0x8>)
 800b712:	f7ff bf0f 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800b716:	bf00      	nop
 800b718:	24000ce4 	.word	0x24000ce4

0800b71c <__malloc_unlock>:
 800b71c:	4801      	ldr	r0, [pc, #4]	@ (800b724 <__malloc_unlock+0x8>)
 800b71e:	f7ff bf0a 	b.w	800b536 <__retarget_lock_release_recursive>
 800b722:	bf00      	nop
 800b724:	24000ce4 	.word	0x24000ce4

0800b728 <__ssputs_r>:
 800b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	688e      	ldr	r6, [r1, #8]
 800b72e:	461f      	mov	r7, r3
 800b730:	42be      	cmp	r6, r7
 800b732:	680b      	ldr	r3, [r1, #0]
 800b734:	4682      	mov	sl, r0
 800b736:	460c      	mov	r4, r1
 800b738:	4690      	mov	r8, r2
 800b73a:	d82d      	bhi.n	800b798 <__ssputs_r+0x70>
 800b73c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b740:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b744:	d026      	beq.n	800b794 <__ssputs_r+0x6c>
 800b746:	6965      	ldr	r5, [r4, #20]
 800b748:	6909      	ldr	r1, [r1, #16]
 800b74a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b74e:	eba3 0901 	sub.w	r9, r3, r1
 800b752:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b756:	1c7b      	adds	r3, r7, #1
 800b758:	444b      	add	r3, r9
 800b75a:	106d      	asrs	r5, r5, #1
 800b75c:	429d      	cmp	r5, r3
 800b75e:	bf38      	it	cc
 800b760:	461d      	movcc	r5, r3
 800b762:	0553      	lsls	r3, r2, #21
 800b764:	d527      	bpl.n	800b7b6 <__ssputs_r+0x8e>
 800b766:	4629      	mov	r1, r5
 800b768:	f7ff ff52 	bl	800b610 <_malloc_r>
 800b76c:	4606      	mov	r6, r0
 800b76e:	b360      	cbz	r0, 800b7ca <__ssputs_r+0xa2>
 800b770:	6921      	ldr	r1, [r4, #16]
 800b772:	464a      	mov	r2, r9
 800b774:	f000 fae6 	bl	800bd44 <memcpy>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b782:	81a3      	strh	r3, [r4, #12]
 800b784:	6126      	str	r6, [r4, #16]
 800b786:	6165      	str	r5, [r4, #20]
 800b788:	444e      	add	r6, r9
 800b78a:	eba5 0509 	sub.w	r5, r5, r9
 800b78e:	6026      	str	r6, [r4, #0]
 800b790:	60a5      	str	r5, [r4, #8]
 800b792:	463e      	mov	r6, r7
 800b794:	42be      	cmp	r6, r7
 800b796:	d900      	bls.n	800b79a <__ssputs_r+0x72>
 800b798:	463e      	mov	r6, r7
 800b79a:	6820      	ldr	r0, [r4, #0]
 800b79c:	4632      	mov	r2, r6
 800b79e:	4641      	mov	r1, r8
 800b7a0:	f000 faa6 	bl	800bcf0 <memmove>
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	1b9b      	subs	r3, r3, r6
 800b7a8:	60a3      	str	r3, [r4, #8]
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	4433      	add	r3, r6
 800b7ae:	6023      	str	r3, [r4, #0]
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b6:	462a      	mov	r2, r5
 800b7b8:	f000 fad2 	bl	800bd60 <_realloc_r>
 800b7bc:	4606      	mov	r6, r0
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d1e0      	bne.n	800b784 <__ssputs_r+0x5c>
 800b7c2:	6921      	ldr	r1, [r4, #16]
 800b7c4:	4650      	mov	r0, sl
 800b7c6:	f7ff feb7 	bl	800b538 <_free_r>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	f8ca 3000 	str.w	r3, [sl]
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d6:	81a3      	strh	r3, [r4, #12]
 800b7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7dc:	e7e9      	b.n	800b7b2 <__ssputs_r+0x8a>
	...

0800b7e0 <_svfiprintf_r>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	4698      	mov	r8, r3
 800b7e6:	898b      	ldrh	r3, [r1, #12]
 800b7e8:	061b      	lsls	r3, r3, #24
 800b7ea:	b09d      	sub	sp, #116	@ 0x74
 800b7ec:	4607      	mov	r7, r0
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	4614      	mov	r4, r2
 800b7f2:	d510      	bpl.n	800b816 <_svfiprintf_r+0x36>
 800b7f4:	690b      	ldr	r3, [r1, #16]
 800b7f6:	b973      	cbnz	r3, 800b816 <_svfiprintf_r+0x36>
 800b7f8:	2140      	movs	r1, #64	@ 0x40
 800b7fa:	f7ff ff09 	bl	800b610 <_malloc_r>
 800b7fe:	6028      	str	r0, [r5, #0]
 800b800:	6128      	str	r0, [r5, #16]
 800b802:	b930      	cbnz	r0, 800b812 <_svfiprintf_r+0x32>
 800b804:	230c      	movs	r3, #12
 800b806:	603b      	str	r3, [r7, #0]
 800b808:	f04f 30ff 	mov.w	r0, #4294967295
 800b80c:	b01d      	add	sp, #116	@ 0x74
 800b80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b812:	2340      	movs	r3, #64	@ 0x40
 800b814:	616b      	str	r3, [r5, #20]
 800b816:	2300      	movs	r3, #0
 800b818:	9309      	str	r3, [sp, #36]	@ 0x24
 800b81a:	2320      	movs	r3, #32
 800b81c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b820:	f8cd 800c 	str.w	r8, [sp, #12]
 800b824:	2330      	movs	r3, #48	@ 0x30
 800b826:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9c4 <_svfiprintf_r+0x1e4>
 800b82a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b82e:	f04f 0901 	mov.w	r9, #1
 800b832:	4623      	mov	r3, r4
 800b834:	469a      	mov	sl, r3
 800b836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b83a:	b10a      	cbz	r2, 800b840 <_svfiprintf_r+0x60>
 800b83c:	2a25      	cmp	r2, #37	@ 0x25
 800b83e:	d1f9      	bne.n	800b834 <_svfiprintf_r+0x54>
 800b840:	ebba 0b04 	subs.w	fp, sl, r4
 800b844:	d00b      	beq.n	800b85e <_svfiprintf_r+0x7e>
 800b846:	465b      	mov	r3, fp
 800b848:	4622      	mov	r2, r4
 800b84a:	4629      	mov	r1, r5
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff ff6b 	bl	800b728 <__ssputs_r>
 800b852:	3001      	adds	r0, #1
 800b854:	f000 80a7 	beq.w	800b9a6 <_svfiprintf_r+0x1c6>
 800b858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b85a:	445a      	add	r2, fp
 800b85c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b85e:	f89a 3000 	ldrb.w	r3, [sl]
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 809f 	beq.w	800b9a6 <_svfiprintf_r+0x1c6>
 800b868:	2300      	movs	r3, #0
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b872:	f10a 0a01 	add.w	sl, sl, #1
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	9307      	str	r3, [sp, #28]
 800b87a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b87e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b880:	4654      	mov	r4, sl
 800b882:	2205      	movs	r2, #5
 800b884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b888:	484e      	ldr	r0, [pc, #312]	@ (800b9c4 <_svfiprintf_r+0x1e4>)
 800b88a:	f7f4 fd31 	bl	80002f0 <memchr>
 800b88e:	9a04      	ldr	r2, [sp, #16]
 800b890:	b9d8      	cbnz	r0, 800b8ca <_svfiprintf_r+0xea>
 800b892:	06d0      	lsls	r0, r2, #27
 800b894:	bf44      	itt	mi
 800b896:	2320      	movmi	r3, #32
 800b898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b89c:	0711      	lsls	r1, r2, #28
 800b89e:	bf44      	itt	mi
 800b8a0:	232b      	movmi	r3, #43	@ 0x2b
 800b8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ac:	d015      	beq.n	800b8da <_svfiprintf_r+0xfa>
 800b8ae:	9a07      	ldr	r2, [sp, #28]
 800b8b0:	4654      	mov	r4, sl
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	f04f 0c0a 	mov.w	ip, #10
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8be:	3b30      	subs	r3, #48	@ 0x30
 800b8c0:	2b09      	cmp	r3, #9
 800b8c2:	d94b      	bls.n	800b95c <_svfiprintf_r+0x17c>
 800b8c4:	b1b0      	cbz	r0, 800b8f4 <_svfiprintf_r+0x114>
 800b8c6:	9207      	str	r2, [sp, #28]
 800b8c8:	e014      	b.n	800b8f4 <_svfiprintf_r+0x114>
 800b8ca:	eba0 0308 	sub.w	r3, r0, r8
 800b8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	46a2      	mov	sl, r4
 800b8d8:	e7d2      	b.n	800b880 <_svfiprintf_r+0xa0>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	1d19      	adds	r1, r3, #4
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	9103      	str	r1, [sp, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bfbb      	ittet	lt
 800b8e6:	425b      	neglt	r3, r3
 800b8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ec:	9307      	strge	r3, [sp, #28]
 800b8ee:	9307      	strlt	r3, [sp, #28]
 800b8f0:	bfb8      	it	lt
 800b8f2:	9204      	strlt	r2, [sp, #16]
 800b8f4:	7823      	ldrb	r3, [r4, #0]
 800b8f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8f8:	d10a      	bne.n	800b910 <_svfiprintf_r+0x130>
 800b8fa:	7863      	ldrb	r3, [r4, #1]
 800b8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8fe:	d132      	bne.n	800b966 <_svfiprintf_r+0x186>
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	1d1a      	adds	r2, r3, #4
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	9203      	str	r2, [sp, #12]
 800b908:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b90c:	3402      	adds	r4, #2
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9d4 <_svfiprintf_r+0x1f4>
 800b914:	7821      	ldrb	r1, [r4, #0]
 800b916:	2203      	movs	r2, #3
 800b918:	4650      	mov	r0, sl
 800b91a:	f7f4 fce9 	bl	80002f0 <memchr>
 800b91e:	b138      	cbz	r0, 800b930 <_svfiprintf_r+0x150>
 800b920:	9b04      	ldr	r3, [sp, #16]
 800b922:	eba0 000a 	sub.w	r0, r0, sl
 800b926:	2240      	movs	r2, #64	@ 0x40
 800b928:	4082      	lsls	r2, r0
 800b92a:	4313      	orrs	r3, r2
 800b92c:	3401      	adds	r4, #1
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b934:	4824      	ldr	r0, [pc, #144]	@ (800b9c8 <_svfiprintf_r+0x1e8>)
 800b936:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b93a:	2206      	movs	r2, #6
 800b93c:	f7f4 fcd8 	bl	80002f0 <memchr>
 800b940:	2800      	cmp	r0, #0
 800b942:	d036      	beq.n	800b9b2 <_svfiprintf_r+0x1d2>
 800b944:	4b21      	ldr	r3, [pc, #132]	@ (800b9cc <_svfiprintf_r+0x1ec>)
 800b946:	bb1b      	cbnz	r3, 800b990 <_svfiprintf_r+0x1b0>
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	3307      	adds	r3, #7
 800b94c:	f023 0307 	bic.w	r3, r3, #7
 800b950:	3308      	adds	r3, #8
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b956:	4433      	add	r3, r6
 800b958:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95a:	e76a      	b.n	800b832 <_svfiprintf_r+0x52>
 800b95c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b960:	460c      	mov	r4, r1
 800b962:	2001      	movs	r0, #1
 800b964:	e7a8      	b.n	800b8b8 <_svfiprintf_r+0xd8>
 800b966:	2300      	movs	r3, #0
 800b968:	3401      	adds	r4, #1
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	4619      	mov	r1, r3
 800b96e:	f04f 0c0a 	mov.w	ip, #10
 800b972:	4620      	mov	r0, r4
 800b974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b978:	3a30      	subs	r2, #48	@ 0x30
 800b97a:	2a09      	cmp	r2, #9
 800b97c:	d903      	bls.n	800b986 <_svfiprintf_r+0x1a6>
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d0c6      	beq.n	800b910 <_svfiprintf_r+0x130>
 800b982:	9105      	str	r1, [sp, #20]
 800b984:	e7c4      	b.n	800b910 <_svfiprintf_r+0x130>
 800b986:	fb0c 2101 	mla	r1, ip, r1, r2
 800b98a:	4604      	mov	r4, r0
 800b98c:	2301      	movs	r3, #1
 800b98e:	e7f0      	b.n	800b972 <_svfiprintf_r+0x192>
 800b990:	ab03      	add	r3, sp, #12
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	462a      	mov	r2, r5
 800b996:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d0 <_svfiprintf_r+0x1f0>)
 800b998:	a904      	add	r1, sp, #16
 800b99a:	4638      	mov	r0, r7
 800b99c:	f3af 8000 	nop.w
 800b9a0:	1c42      	adds	r2, r0, #1
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	d1d6      	bne.n	800b954 <_svfiprintf_r+0x174>
 800b9a6:	89ab      	ldrh	r3, [r5, #12]
 800b9a8:	065b      	lsls	r3, r3, #25
 800b9aa:	f53f af2d 	bmi.w	800b808 <_svfiprintf_r+0x28>
 800b9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9b0:	e72c      	b.n	800b80c <_svfiprintf_r+0x2c>
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4b05      	ldr	r3, [pc, #20]	@ (800b9d0 <_svfiprintf_r+0x1f0>)
 800b9ba:	a904      	add	r1, sp, #16
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f000 f879 	bl	800bab4 <_printf_i>
 800b9c2:	e7ed      	b.n	800b9a0 <_svfiprintf_r+0x1c0>
 800b9c4:	0800bebc 	.word	0x0800bebc
 800b9c8:	0800bec6 	.word	0x0800bec6
 800b9cc:	00000000 	.word	0x00000000
 800b9d0:	0800b729 	.word	0x0800b729
 800b9d4:	0800bec2 	.word	0x0800bec2

0800b9d8 <_printf_common>:
 800b9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9dc:	4616      	mov	r6, r2
 800b9de:	4698      	mov	r8, r3
 800b9e0:	688a      	ldr	r2, [r1, #8]
 800b9e2:	690b      	ldr	r3, [r1, #16]
 800b9e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	bfb8      	it	lt
 800b9ec:	4613      	movlt	r3, r2
 800b9ee:	6033      	str	r3, [r6, #0]
 800b9f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	b10a      	cbz	r2, 800b9fe <_printf_common+0x26>
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	6033      	str	r3, [r6, #0]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	0699      	lsls	r1, r3, #26
 800ba02:	bf42      	ittt	mi
 800ba04:	6833      	ldrmi	r3, [r6, #0]
 800ba06:	3302      	addmi	r3, #2
 800ba08:	6033      	strmi	r3, [r6, #0]
 800ba0a:	6825      	ldr	r5, [r4, #0]
 800ba0c:	f015 0506 	ands.w	r5, r5, #6
 800ba10:	d106      	bne.n	800ba20 <_printf_common+0x48>
 800ba12:	f104 0a19 	add.w	sl, r4, #25
 800ba16:	68e3      	ldr	r3, [r4, #12]
 800ba18:	6832      	ldr	r2, [r6, #0]
 800ba1a:	1a9b      	subs	r3, r3, r2
 800ba1c:	42ab      	cmp	r3, r5
 800ba1e:	dc26      	bgt.n	800ba6e <_printf_common+0x96>
 800ba20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba24:	6822      	ldr	r2, [r4, #0]
 800ba26:	3b00      	subs	r3, #0
 800ba28:	bf18      	it	ne
 800ba2a:	2301      	movne	r3, #1
 800ba2c:	0692      	lsls	r2, r2, #26
 800ba2e:	d42b      	bmi.n	800ba88 <_printf_common+0xb0>
 800ba30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba34:	4641      	mov	r1, r8
 800ba36:	4638      	mov	r0, r7
 800ba38:	47c8      	blx	r9
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d01e      	beq.n	800ba7c <_printf_common+0xa4>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	6922      	ldr	r2, [r4, #16]
 800ba42:	f003 0306 	and.w	r3, r3, #6
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	bf02      	ittt	eq
 800ba4a:	68e5      	ldreq	r5, [r4, #12]
 800ba4c:	6833      	ldreq	r3, [r6, #0]
 800ba4e:	1aed      	subeq	r5, r5, r3
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	bf0c      	ite	eq
 800ba54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba58:	2500      	movne	r5, #0
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	bfc4      	itt	gt
 800ba5e:	1a9b      	subgt	r3, r3, r2
 800ba60:	18ed      	addgt	r5, r5, r3
 800ba62:	2600      	movs	r6, #0
 800ba64:	341a      	adds	r4, #26
 800ba66:	42b5      	cmp	r5, r6
 800ba68:	d11a      	bne.n	800baa0 <_printf_common+0xc8>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	e008      	b.n	800ba80 <_printf_common+0xa8>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	4652      	mov	r2, sl
 800ba72:	4641      	mov	r1, r8
 800ba74:	4638      	mov	r0, r7
 800ba76:	47c8      	blx	r9
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d103      	bne.n	800ba84 <_printf_common+0xac>
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba84:	3501      	adds	r5, #1
 800ba86:	e7c6      	b.n	800ba16 <_printf_common+0x3e>
 800ba88:	18e1      	adds	r1, r4, r3
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	2030      	movs	r0, #48	@ 0x30
 800ba8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba92:	4422      	add	r2, r4
 800ba94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba9c:	3302      	adds	r3, #2
 800ba9e:	e7c7      	b.n	800ba30 <_printf_common+0x58>
 800baa0:	2301      	movs	r3, #1
 800baa2:	4622      	mov	r2, r4
 800baa4:	4641      	mov	r1, r8
 800baa6:	4638      	mov	r0, r7
 800baa8:	47c8      	blx	r9
 800baaa:	3001      	adds	r0, #1
 800baac:	d0e6      	beq.n	800ba7c <_printf_common+0xa4>
 800baae:	3601      	adds	r6, #1
 800bab0:	e7d9      	b.n	800ba66 <_printf_common+0x8e>
	...

0800bab4 <_printf_i>:
 800bab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	7e0f      	ldrb	r7, [r1, #24]
 800baba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800babc:	2f78      	cmp	r7, #120	@ 0x78
 800babe:	4691      	mov	r9, r2
 800bac0:	4680      	mov	r8, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	469a      	mov	sl, r3
 800bac6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800baca:	d807      	bhi.n	800badc <_printf_i+0x28>
 800bacc:	2f62      	cmp	r7, #98	@ 0x62
 800bace:	d80a      	bhi.n	800bae6 <_printf_i+0x32>
 800bad0:	2f00      	cmp	r7, #0
 800bad2:	f000 80d1 	beq.w	800bc78 <_printf_i+0x1c4>
 800bad6:	2f58      	cmp	r7, #88	@ 0x58
 800bad8:	f000 80b8 	beq.w	800bc4c <_printf_i+0x198>
 800badc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bae0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bae4:	e03a      	b.n	800bb5c <_printf_i+0xa8>
 800bae6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baea:	2b15      	cmp	r3, #21
 800baec:	d8f6      	bhi.n	800badc <_printf_i+0x28>
 800baee:	a101      	add	r1, pc, #4	@ (adr r1, 800baf4 <_printf_i+0x40>)
 800baf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baf4:	0800bb4d 	.word	0x0800bb4d
 800baf8:	0800bb61 	.word	0x0800bb61
 800bafc:	0800badd 	.word	0x0800badd
 800bb00:	0800badd 	.word	0x0800badd
 800bb04:	0800badd 	.word	0x0800badd
 800bb08:	0800badd 	.word	0x0800badd
 800bb0c:	0800bb61 	.word	0x0800bb61
 800bb10:	0800badd 	.word	0x0800badd
 800bb14:	0800badd 	.word	0x0800badd
 800bb18:	0800badd 	.word	0x0800badd
 800bb1c:	0800badd 	.word	0x0800badd
 800bb20:	0800bc5f 	.word	0x0800bc5f
 800bb24:	0800bb8b 	.word	0x0800bb8b
 800bb28:	0800bc19 	.word	0x0800bc19
 800bb2c:	0800badd 	.word	0x0800badd
 800bb30:	0800badd 	.word	0x0800badd
 800bb34:	0800bc81 	.word	0x0800bc81
 800bb38:	0800badd 	.word	0x0800badd
 800bb3c:	0800bb8b 	.word	0x0800bb8b
 800bb40:	0800badd 	.word	0x0800badd
 800bb44:	0800badd 	.word	0x0800badd
 800bb48:	0800bc21 	.word	0x0800bc21
 800bb4c:	6833      	ldr	r3, [r6, #0]
 800bb4e:	1d1a      	adds	r2, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	6032      	str	r2, [r6, #0]
 800bb54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e09c      	b.n	800bc9a <_printf_i+0x1e6>
 800bb60:	6833      	ldr	r3, [r6, #0]
 800bb62:	6820      	ldr	r0, [r4, #0]
 800bb64:	1d19      	adds	r1, r3, #4
 800bb66:	6031      	str	r1, [r6, #0]
 800bb68:	0606      	lsls	r6, r0, #24
 800bb6a:	d501      	bpl.n	800bb70 <_printf_i+0xbc>
 800bb6c:	681d      	ldr	r5, [r3, #0]
 800bb6e:	e003      	b.n	800bb78 <_printf_i+0xc4>
 800bb70:	0645      	lsls	r5, r0, #25
 800bb72:	d5fb      	bpl.n	800bb6c <_printf_i+0xb8>
 800bb74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb78:	2d00      	cmp	r5, #0
 800bb7a:	da03      	bge.n	800bb84 <_printf_i+0xd0>
 800bb7c:	232d      	movs	r3, #45	@ 0x2d
 800bb7e:	426d      	negs	r5, r5
 800bb80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb84:	4858      	ldr	r0, [pc, #352]	@ (800bce8 <_printf_i+0x234>)
 800bb86:	230a      	movs	r3, #10
 800bb88:	e011      	b.n	800bbae <_printf_i+0xfa>
 800bb8a:	6821      	ldr	r1, [r4, #0]
 800bb8c:	6833      	ldr	r3, [r6, #0]
 800bb8e:	0608      	lsls	r0, r1, #24
 800bb90:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb94:	d402      	bmi.n	800bb9c <_printf_i+0xe8>
 800bb96:	0649      	lsls	r1, r1, #25
 800bb98:	bf48      	it	mi
 800bb9a:	b2ad      	uxthmi	r5, r5
 800bb9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb9e:	4852      	ldr	r0, [pc, #328]	@ (800bce8 <_printf_i+0x234>)
 800bba0:	6033      	str	r3, [r6, #0]
 800bba2:	bf14      	ite	ne
 800bba4:	230a      	movne	r3, #10
 800bba6:	2308      	moveq	r3, #8
 800bba8:	2100      	movs	r1, #0
 800bbaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbae:	6866      	ldr	r6, [r4, #4]
 800bbb0:	60a6      	str	r6, [r4, #8]
 800bbb2:	2e00      	cmp	r6, #0
 800bbb4:	db05      	blt.n	800bbc2 <_printf_i+0x10e>
 800bbb6:	6821      	ldr	r1, [r4, #0]
 800bbb8:	432e      	orrs	r6, r5
 800bbba:	f021 0104 	bic.w	r1, r1, #4
 800bbbe:	6021      	str	r1, [r4, #0]
 800bbc0:	d04b      	beq.n	800bc5a <_printf_i+0x1a6>
 800bbc2:	4616      	mov	r6, r2
 800bbc4:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbc8:	fb03 5711 	mls	r7, r3, r1, r5
 800bbcc:	5dc7      	ldrb	r7, [r0, r7]
 800bbce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbd2:	462f      	mov	r7, r5
 800bbd4:	42bb      	cmp	r3, r7
 800bbd6:	460d      	mov	r5, r1
 800bbd8:	d9f4      	bls.n	800bbc4 <_printf_i+0x110>
 800bbda:	2b08      	cmp	r3, #8
 800bbdc:	d10b      	bne.n	800bbf6 <_printf_i+0x142>
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	07df      	lsls	r7, r3, #31
 800bbe2:	d508      	bpl.n	800bbf6 <_printf_i+0x142>
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	6861      	ldr	r1, [r4, #4]
 800bbe8:	4299      	cmp	r1, r3
 800bbea:	bfde      	ittt	le
 800bbec:	2330      	movle	r3, #48	@ 0x30
 800bbee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbf2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbf6:	1b92      	subs	r2, r2, r6
 800bbf8:	6122      	str	r2, [r4, #16]
 800bbfa:	f8cd a000 	str.w	sl, [sp]
 800bbfe:	464b      	mov	r3, r9
 800bc00:	aa03      	add	r2, sp, #12
 800bc02:	4621      	mov	r1, r4
 800bc04:	4640      	mov	r0, r8
 800bc06:	f7ff fee7 	bl	800b9d8 <_printf_common>
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d14a      	bne.n	800bca4 <_printf_i+0x1f0>
 800bc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc12:	b004      	add	sp, #16
 800bc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	f043 0320 	orr.w	r3, r3, #32
 800bc1e:	6023      	str	r3, [r4, #0]
 800bc20:	4832      	ldr	r0, [pc, #200]	@ (800bcec <_printf_i+0x238>)
 800bc22:	2778      	movs	r7, #120	@ 0x78
 800bc24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	6831      	ldr	r1, [r6, #0]
 800bc2c:	061f      	lsls	r7, r3, #24
 800bc2e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc32:	d402      	bmi.n	800bc3a <_printf_i+0x186>
 800bc34:	065f      	lsls	r7, r3, #25
 800bc36:	bf48      	it	mi
 800bc38:	b2ad      	uxthmi	r5, r5
 800bc3a:	6031      	str	r1, [r6, #0]
 800bc3c:	07d9      	lsls	r1, r3, #31
 800bc3e:	bf44      	itt	mi
 800bc40:	f043 0320 	orrmi.w	r3, r3, #32
 800bc44:	6023      	strmi	r3, [r4, #0]
 800bc46:	b11d      	cbz	r5, 800bc50 <_printf_i+0x19c>
 800bc48:	2310      	movs	r3, #16
 800bc4a:	e7ad      	b.n	800bba8 <_printf_i+0xf4>
 800bc4c:	4826      	ldr	r0, [pc, #152]	@ (800bce8 <_printf_i+0x234>)
 800bc4e:	e7e9      	b.n	800bc24 <_printf_i+0x170>
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	f023 0320 	bic.w	r3, r3, #32
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	e7f6      	b.n	800bc48 <_printf_i+0x194>
 800bc5a:	4616      	mov	r6, r2
 800bc5c:	e7bd      	b.n	800bbda <_printf_i+0x126>
 800bc5e:	6833      	ldr	r3, [r6, #0]
 800bc60:	6825      	ldr	r5, [r4, #0]
 800bc62:	6961      	ldr	r1, [r4, #20]
 800bc64:	1d18      	adds	r0, r3, #4
 800bc66:	6030      	str	r0, [r6, #0]
 800bc68:	062e      	lsls	r6, r5, #24
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	d501      	bpl.n	800bc72 <_printf_i+0x1be>
 800bc6e:	6019      	str	r1, [r3, #0]
 800bc70:	e002      	b.n	800bc78 <_printf_i+0x1c4>
 800bc72:	0668      	lsls	r0, r5, #25
 800bc74:	d5fb      	bpl.n	800bc6e <_printf_i+0x1ba>
 800bc76:	8019      	strh	r1, [r3, #0]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	6123      	str	r3, [r4, #16]
 800bc7c:	4616      	mov	r6, r2
 800bc7e:	e7bc      	b.n	800bbfa <_printf_i+0x146>
 800bc80:	6833      	ldr	r3, [r6, #0]
 800bc82:	1d1a      	adds	r2, r3, #4
 800bc84:	6032      	str	r2, [r6, #0]
 800bc86:	681e      	ldr	r6, [r3, #0]
 800bc88:	6862      	ldr	r2, [r4, #4]
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7f4 fb2f 	bl	80002f0 <memchr>
 800bc92:	b108      	cbz	r0, 800bc98 <_printf_i+0x1e4>
 800bc94:	1b80      	subs	r0, r0, r6
 800bc96:	6060      	str	r0, [r4, #4]
 800bc98:	6863      	ldr	r3, [r4, #4]
 800bc9a:	6123      	str	r3, [r4, #16]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bca2:	e7aa      	b.n	800bbfa <_printf_i+0x146>
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	4632      	mov	r2, r6
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4640      	mov	r0, r8
 800bcac:	47d0      	blx	sl
 800bcae:	3001      	adds	r0, #1
 800bcb0:	d0ad      	beq.n	800bc0e <_printf_i+0x15a>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	079b      	lsls	r3, r3, #30
 800bcb6:	d413      	bmi.n	800bce0 <_printf_i+0x22c>
 800bcb8:	68e0      	ldr	r0, [r4, #12]
 800bcba:	9b03      	ldr	r3, [sp, #12]
 800bcbc:	4298      	cmp	r0, r3
 800bcbe:	bfb8      	it	lt
 800bcc0:	4618      	movlt	r0, r3
 800bcc2:	e7a6      	b.n	800bc12 <_printf_i+0x15e>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4649      	mov	r1, r9
 800bcca:	4640      	mov	r0, r8
 800bccc:	47d0      	blx	sl
 800bcce:	3001      	adds	r0, #1
 800bcd0:	d09d      	beq.n	800bc0e <_printf_i+0x15a>
 800bcd2:	3501      	adds	r5, #1
 800bcd4:	68e3      	ldr	r3, [r4, #12]
 800bcd6:	9903      	ldr	r1, [sp, #12]
 800bcd8:	1a5b      	subs	r3, r3, r1
 800bcda:	42ab      	cmp	r3, r5
 800bcdc:	dcf2      	bgt.n	800bcc4 <_printf_i+0x210>
 800bcde:	e7eb      	b.n	800bcb8 <_printf_i+0x204>
 800bce0:	2500      	movs	r5, #0
 800bce2:	f104 0619 	add.w	r6, r4, #25
 800bce6:	e7f5      	b.n	800bcd4 <_printf_i+0x220>
 800bce8:	0800becd 	.word	0x0800becd
 800bcec:	0800bede 	.word	0x0800bede

0800bcf0 <memmove>:
 800bcf0:	4288      	cmp	r0, r1
 800bcf2:	b510      	push	{r4, lr}
 800bcf4:	eb01 0402 	add.w	r4, r1, r2
 800bcf8:	d902      	bls.n	800bd00 <memmove+0x10>
 800bcfa:	4284      	cmp	r4, r0
 800bcfc:	4623      	mov	r3, r4
 800bcfe:	d807      	bhi.n	800bd10 <memmove+0x20>
 800bd00:	1e43      	subs	r3, r0, #1
 800bd02:	42a1      	cmp	r1, r4
 800bd04:	d008      	beq.n	800bd18 <memmove+0x28>
 800bd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd0e:	e7f8      	b.n	800bd02 <memmove+0x12>
 800bd10:	4402      	add	r2, r0
 800bd12:	4601      	mov	r1, r0
 800bd14:	428a      	cmp	r2, r1
 800bd16:	d100      	bne.n	800bd1a <memmove+0x2a>
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd22:	e7f7      	b.n	800bd14 <memmove+0x24>

0800bd24 <_sbrk_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	4d06      	ldr	r5, [pc, #24]	@ (800bd40 <_sbrk_r+0x1c>)
 800bd28:	2300      	movs	r3, #0
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	602b      	str	r3, [r5, #0]
 800bd30:	f7f5 fdec 	bl	800190c <_sbrk>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d102      	bne.n	800bd3e <_sbrk_r+0x1a>
 800bd38:	682b      	ldr	r3, [r5, #0]
 800bd3a:	b103      	cbz	r3, 800bd3e <_sbrk_r+0x1a>
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	bd38      	pop	{r3, r4, r5, pc}
 800bd40:	24000ce0 	.word	0x24000ce0

0800bd44 <memcpy>:
 800bd44:	440a      	add	r2, r1
 800bd46:	4291      	cmp	r1, r2
 800bd48:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd4c:	d100      	bne.n	800bd50 <memcpy+0xc>
 800bd4e:	4770      	bx	lr
 800bd50:	b510      	push	{r4, lr}
 800bd52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd5a:	4291      	cmp	r1, r2
 800bd5c:	d1f9      	bne.n	800bd52 <memcpy+0xe>
 800bd5e:	bd10      	pop	{r4, pc}

0800bd60 <_realloc_r>:
 800bd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd64:	4607      	mov	r7, r0
 800bd66:	4614      	mov	r4, r2
 800bd68:	460d      	mov	r5, r1
 800bd6a:	b921      	cbnz	r1, 800bd76 <_realloc_r+0x16>
 800bd6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd70:	4611      	mov	r1, r2
 800bd72:	f7ff bc4d 	b.w	800b610 <_malloc_r>
 800bd76:	b92a      	cbnz	r2, 800bd84 <_realloc_r+0x24>
 800bd78:	f7ff fbde 	bl	800b538 <_free_r>
 800bd7c:	4625      	mov	r5, r4
 800bd7e:	4628      	mov	r0, r5
 800bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd84:	f000 f81a 	bl	800bdbc <_malloc_usable_size_r>
 800bd88:	4284      	cmp	r4, r0
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	d802      	bhi.n	800bd94 <_realloc_r+0x34>
 800bd8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd92:	d8f4      	bhi.n	800bd7e <_realloc_r+0x1e>
 800bd94:	4621      	mov	r1, r4
 800bd96:	4638      	mov	r0, r7
 800bd98:	f7ff fc3a 	bl	800b610 <_malloc_r>
 800bd9c:	4680      	mov	r8, r0
 800bd9e:	b908      	cbnz	r0, 800bda4 <_realloc_r+0x44>
 800bda0:	4645      	mov	r5, r8
 800bda2:	e7ec      	b.n	800bd7e <_realloc_r+0x1e>
 800bda4:	42b4      	cmp	r4, r6
 800bda6:	4622      	mov	r2, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	bf28      	it	cs
 800bdac:	4632      	movcs	r2, r6
 800bdae:	f7ff ffc9 	bl	800bd44 <memcpy>
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	4638      	mov	r0, r7
 800bdb6:	f7ff fbbf 	bl	800b538 <_free_r>
 800bdba:	e7f1      	b.n	800bda0 <_realloc_r+0x40>

0800bdbc <_malloc_usable_size_r>:
 800bdbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc0:	1f18      	subs	r0, r3, #4
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bfbc      	itt	lt
 800bdc6:	580b      	ldrlt	r3, [r1, r0]
 800bdc8:	18c0      	addlt	r0, r0, r3
 800bdca:	4770      	bx	lr

0800bdcc <_init>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	bf00      	nop
 800bdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd2:	bc08      	pop	{r3}
 800bdd4:	469e      	mov	lr, r3
 800bdd6:	4770      	bx	lr

0800bdd8 <_fini>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	bf00      	nop
 800bddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdde:	bc08      	pop	{r3}
 800bde0:	469e      	mov	lr, r3
 800bde2:	4770      	bx	lr
