
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ccc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008f6c  08008f6c  00009f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080090e4  080090e4  0000a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  080090e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000013b0  24000060  08009148  0000b060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001410  08009148  0000b410  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018730  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c2c  00000000  00000000  000237be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  000263f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ca4  00000000  00000000  00027458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039790  00000000  00000000  000280fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015b33  00000000  00000000  0006188c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169c4c  00000000  00000000  000773bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e100b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004aa4  00000000  00000000  001e1050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001e5af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f54 	.word	0x08008f54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08008f54 	.word	0x08008f54

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN.Tx_Buffer) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f001 ff68 	bl	80025d6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f001 f848 	bl	80017a0 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010dc 	.word	0x240010dc
 800071c:	24000080 	.word	0x24000080
 8000720:	24001100 	.word	0x24001100

08000724 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800072e:	f000 fce7 	bl	8001100 <W25N_WaitForReady>
	//HAL_Delay(1000);
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d012      	beq.n	800075e <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000738:	4b67      	ldr	r3, [pc, #412]	@ (80008d8 <Flash_Init+0x1b4>)
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 faf3 	bl	8000d28 <Read_Status_Register>
 8000742:	4603      	mov	r3, r0
 8000744:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000746:	7ebb      	ldrb	r3, [r7, #26]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 800074e:	4b62      	ldr	r3, [pc, #392]	@ (80008d8 <Flash_Init+0x1b4>)
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	7eba      	ldrb	r2, [r7, #26]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fb16 	bl	8000d88 <Write_Status_Register>
 800075c:	e011      	b.n	8000782 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 800075e:	4b5e      	ldr	r3, [pc, #376]	@ (80008d8 <Flash_Init+0x1b4>)
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fae0 	bl	8000d28 <Read_Status_Register>
 8000768:	4603      	mov	r3, r0
 800076a:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	f023 0308 	bic.w	r3, r3, #8
 8000772:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000774:	4b58      	ldr	r3, [pc, #352]	@ (80008d8 <Flash_Init+0x1b4>)
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	7efa      	ldrb	r2, [r7, #27]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fb03 	bl	8000d88 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 8000782:	4b55      	ldr	r3, [pc, #340]	@ (80008d8 <Flash_Init+0x1b4>)
 8000784:	78db      	ldrb	r3, [r3, #3]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 face 	bl	8000d28 <Read_Status_Register>
 800078c:	4603      	mov	r3, r0
 800078e:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000790:	7e7b      	ldrb	r3, [r7, #25]
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 8000798:	7e7b      	ldrb	r3, [r7, #25]
 800079a:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 800079e:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 80007a0:	4b4d      	ldr	r3, [pc, #308]	@ (80008d8 <Flash_Init+0x1b4>)
 80007a2:	78db      	ldrb	r3, [r3, #3]
 80007a4:	7e7a      	ldrb	r2, [r7, #25]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 faed 	bl	8000d88 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007bc:	2300      	movs	r3, #0
 80007be:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007c4:	e031      	b.n	800082a <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80007c6:	2300      	movs	r3, #0
 80007c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007ca:	f107 0108 	add.w	r1, r7, #8
 80007ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007d0:	2210      	movs	r2, #16
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f950 	bl	8000a78 <Read_Data>

		for(int i = 0; i < 16; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e013      	b.n	8000806 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d109      	bne.n	8000800 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 80007ec:	2201      	movs	r2, #1
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3301      	adds	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	dde8      	ble.n	80007de <Flash_Init+0xba>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 800080c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d003      	beq.n	800081e <Flash_Init+0xfa>
			Temp_Page += 64;
 8000816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000818:	3340      	adds	r3, #64	@ 0x40
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800081c:	e005      	b.n	800082a <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 800081e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <Flash_Init+0x112>
				break;
			}
			else{
				Temp_Page -= 64;
 8000824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000826:	3b40      	subs	r3, #64	@ 0x40
 8000828:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 800082a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800082c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000830:	4293      	cmp	r3, r2
 8000832:	d1c8      	bne.n	80007c6 <Flash_Init+0xa2>
 8000834:	e000      	b.n	8000838 <Flash_Init+0x114>
				break;
 8000836:	bf00      	nop
			}
		}
	}
	Page_Bit=0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 800083c:	e02a      	b.n	8000894 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 800083e:	2300      	movs	r3, #0
 8000840:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000842:	f107 0108 	add.w	r1, r7, #8
 8000846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000848:	2210      	movs	r2, #16
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f914 	bl	8000a78 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e013      	b.n	800087e <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 8000856:	f107 0208 	add.w	r2, r7, #8
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2bff      	cmp	r3, #255	@ 0xff
 8000862:	d109      	bne.n	8000878 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	b21a      	sxth	r2, r3
 800086e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000872:	4313      	orrs	r3, r2
 8000874:	b21b      	sxth	r3, r3
 8000876:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	3301      	adds	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	dde8      	ble.n	8000856 <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088a:	4293      	cmp	r3, r2
 800088c:	d002      	beq.n	8000894 <Flash_Init+0x170>
			Temp_Page++;
 800088e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000890:	3301      	adds	r3, #1
 8000892:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000894:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089a:	4293      	cmp	r3, r2
 800089c:	d1cf      	bne.n	800083e <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <Flash_Init+0x1b8>)
 80008a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008a4:	461a      	mov	r2, r3
 80008a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008a8:	8153      	strh	r3, [r2, #10]
	Flash.Block_Mem=(Flash.Page_Index/64);
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <Flash_Init+0x1b8>)
 80008ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008b0:	895b      	ldrh	r3, [r3, #10]
 80008b2:	099b      	lsrs	r3, r3, #6
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <Flash_Init+0x1b8>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008bc:	811a      	strh	r2, [r3, #8]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <Flash_Init+0x1b8>)
 80008c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008c4:	895b      	ldrh	r3, [r3, #10]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <Flash_Init+0x1bc>)
 80008ca:	f000 fbf3 	bl	80010b4 <USART3_Printf>
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2400009c 	.word	0x2400009c
 80008dc:	240000a4 	.word	0x240000a4
 80008e0:	08008f6c 	.word	0x08008f6c

080008e4 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	463b      	mov	r3, r7
 80008ec:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fa18 	bl	8000d28 <Read_Status_Register>
 80008f8:	4603      	mov	r3, r0
 80008fa:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 80008fc:	2064      	movs	r0, #100	@ 0x64
 80008fe:	f000 fbaf 	bl	8001060 <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 8000902:	793b      	ldrb	r3, [r7, #4]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fa0f 	bl	8000d28 <Read_Status_Register>
 800090a:	4603      	mov	r3, r0
 800090c:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 800090e:	2064      	movs	r0, #100	@ 0x64
 8000910:	f000 fba6 	bl	8001060 <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fa06 	bl	8000d28 <Read_Status_Register>
 800091c:	4603      	mov	r3, r0
 800091e:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f000 fb9d 	bl	8001060 <delay_ns>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 800093c:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <Write_Data+0x94>)
 800093e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000942:	895b      	ldrh	r3, [r3, #10]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d108      	bne.n	800095a <Write_Data+0x2a>
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <Write_Data+0x94>)
 800094a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <Write_Data+0x2a>
		Block_Erase(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb4f 	bl	8000ff8 <Block_Erase>
	}
	uint16_t count=0;
 800095a:	2300      	movs	r3, #0
 800095c:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800095e:	e028      	b.n	80009b2 <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <Write_Data+0x94>)
 8000962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <Write_Data+0x94>)
 8000970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	3301      	adds	r3, #1
 8000978:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <Write_Data+0x94>)
 800097a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800097e:	6053      	str	r3, [r2, #4]
		data++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <Write_Data+0x94>)
 8000988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <Write_Data+0x94>)
 8000994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000998:	801a      	strh	r2, [r3, #0]
		count++;
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	3301      	adds	r3, #1
 800099e:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <Write_Data+0x94>)
 80009a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009ac:	d301      	bcc.n	80009b2 <Write_Data+0x82>
			Write_to_page();
 80009ae:	f000 f80b 	bl	80009c8 <Write_to_page>
	while(count<lenght){
 80009b2:	89fa      	ldrh	r2, [r7, #14]
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d2      	bcc.n	8000960 <Write_Data+0x30>
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	240000a4 	.word	0x240000a4

080009c8 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	if(Flash.Buffer_flip==0){
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <Write_to_page+0xa8>)
 80009ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d116      	bne.n	8000a06 <Write_to_page+0x3e>
		Flash.Buffer_flip=1;
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <Write_to_page+0xa8>)
 80009da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009de:	2201      	movs	r2, #1
 80009e0:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_1;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <Write_to_page+0xa8>)
 80009e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <Write_to_page+0xac>)
 80009ec:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <Write_to_page+0xa8>)
 80009f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009f4:	2200      	movs	r2, #0
 80009f6:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 80009f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009fc:	491c      	ldr	r1, [pc, #112]	@ (8000a70 <Write_to_page+0xa8>)
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fa24 	bl	8000e4c <Write_Data_Buffer>
 8000a04:	e015      	b.n	8000a32 <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_flip=0;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <Write_to_page+0xa8>)
 8000a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <Write_to_page+0xa8>)
 8000a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <Write_to_page+0xa8>)
 8000a1a:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <Write_to_page+0xa8>)
 8000a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a2a:	4912      	ldr	r1, [pc, #72]	@ (8000a74 <Write_to_page+0xac>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fa0d 	bl	8000e4c <Write_Data_Buffer>
	}
	Write_Data_Flash(Flash.Page_Index);
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <Write_to_page+0xa8>)
 8000a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a38:	895b      	ldrh	r3, [r3, #10]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fa42 	bl	8000ec4 <Write_Data_Flash>
	Flash.Page_Index++;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <Write_to_page+0xa8>)
 8000a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a46:	895b      	ldrh	r3, [r3, #10]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <Write_to_page+0xa8>)
 8000a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a52:	815a      	strh	r2, [r3, #10]
	Flash.Buffer_Index=0;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <Write_to_page+0xa8>)
 8000a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <Write_to_page+0xa8>)
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	895b      	ldrh	r3, [r3, #10]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f81c 	bl	8000aa4 <Automatic_Block_Managment>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	240000a4 	.word	0x240000a4
 8000a74:	240008a4 	.word	0x240008a4

08000a78 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fa4e 	bl	8000f2c <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	4619      	mov	r1, r3
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f000 fa7b 	bl	8000f90 <Read_Data_Buffer>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	099b      	lsrs	r3, r3, #6
 8000ab2:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aba:	891b      	ldrh	r3, [r3, #8]
 8000abc:	89fa      	ldrh	r2, [r7, #14]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d00a      	beq.n	8000ad8 <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa97 	bl	8000ff8 <Block_Erase>
		Flash.Block_Mem=Block;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	89fb      	ldrh	r3, [r7, #14]
 8000ad4:	8113      	strh	r3, [r2, #8]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000ad6:	e005      	b.n	8000ae4 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ade:	461a      	mov	r2, r3
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	8113      	strh	r3, [r2, #8]
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	240000a4 	.word	0x240000a4

08000af0 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000af6:	482c      	ldr	r0, [pc, #176]	@ (8000ba8 <Chip_Erase+0xb8>)
 8000af8:	f000 fadc 	bl	80010b4 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	2201      	movs	r2, #1
 8000b02:	492a      	ldr	r1, [pc, #168]	@ (8000bac <Chip_Erase+0xbc>)
 8000b04:	482a      	ldr	r0, [pc, #168]	@ (8000bb0 <Chip_Erase+0xc0>)
 8000b06:	f006 fc16 	bl	8007336 <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <Chip_Erase+0xbc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b59      	cmp	r3, #89	@ 0x59
 8000b10:	d143      	bne.n	8000b9a <Chip_Erase+0xaa>
		USART3_Printf("Sletter minne ...\r\n");
 8000b12:	4828      	ldr	r0, [pc, #160]	@ (8000bb4 <Chip_Erase+0xc4>)
 8000b14:	f000 face 	bl	80010b4 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	e009      	b.n	8000b32 <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	019b      	lsls	r3, r3, #6
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fa66 	bl	8000ff8 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b38:	ddf1      	ble.n	8000b1e <Chip_Erase+0x2e>
		}
		Flash.Buffer_Index=0;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b40:	2200      	movs	r2, #0
 8000b42:	801a      	strh	r2, [r3, #0]
		Flash.Page_Index=0;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	815a      	strh	r2, [r3, #10]
		Flash.Block_Mem=0;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b54:	2200      	movs	r2, #0
 8000b56:	811a      	strh	r2, [r3, #8]
		Flash.Buffer_flip=0;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b5e:	2200      	movs	r2, #0
 8000b60:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b6c:	6053      	str	r3, [r2, #4]

		Flash_Data* pointer = &Flash;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b70:	603b      	str	r3, [r7, #0]
		memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b78:	21ff      	movs	r1, #255	@ 0xff
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 fd6c 	bl	8008658 <memset>
		memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b8a:	21ff      	movs	r1, #255	@ 0xff
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 fd63 	bl	8008658 <memset>
		USART3_Printf("Ferdig\r\n");
 8000b92:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <Chip_Erase+0xcc>)
 8000b94:	f000 fa8e 	bl	80010b4 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b98:	e002      	b.n	8000ba0 <Chip_Erase+0xb0>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b9a:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <Chip_Erase+0xd0>)
 8000b9c:	f000 fa8a 	bl	80010b4 <USART3_Printf>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08008f84 	.word	0x08008f84
 8000bac:	2400007d 	.word	0x2400007d
 8000bb0:	24001228 	.word	0x24001228
 8000bb4:	08008fb8 	.word	0x08008fb8
 8000bb8:	240000a4 	.word	0x240000a4
 8000bbc:	08008fcc 	.word	0x08008fcc
 8000bc0:	08008fd8 	.word	0x08008fd8

08000bc4 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	b089      	sub	sp, #36	@ 0x24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80fb      	strh	r3, [r7, #6]
 8000bd0:	466b      	mov	r3, sp
 8000bd2:	461e      	mov	r6, r3
	Select_Page_Read(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f9a9 	bl	8000f2c <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000bda:	88f9      	ldrh	r1, [r7, #6]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	3b01      	subs	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	b28b      	uxth	r3, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	4698      	mov	r8, r3
 8000be8:	4691      	mov	r9, r2
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bfe:	b28b      	uxth	r3, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	461c      	mov	r4, r3
 8000c04:	4615      	mov	r5, r2
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	00eb      	lsls	r3, r5, #3
 8000c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c14:	00e2      	lsls	r2, r4, #3
 8000c16:	460b      	mov	r3, r1
 8000c18:	3307      	adds	r3, #7
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c22:	466b      	mov	r3, sp
 8000c24:	3300      	adds	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000c34:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <Read_Data_Cont+0x118>)
 8000c46:	f002 fdc5 	bl	80037d4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c4a:	2364      	movs	r3, #100	@ 0x64
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4922      	ldr	r1, [pc, #136]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c50:	4823      	ldr	r0, [pc, #140]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c52:	f005 fd49 	bl	80066e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	4820      	ldr	r0, [pc, #128]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c60:	f005 ff30 	bl	8006ac4 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3303      	adds	r3, #3
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	330b      	adds	r3, #11
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c7c:	e018      	b.n	8000cb0 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c7e:	8bf9      	ldrh	r1, [r7, #30]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4817      	ldr	r0, [pc, #92]	@ (8000ce4 <Read_Data_Cont+0x120>)
 8000c86:	f000 fa15 	bl	80010b4 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	4813      	ldr	r0, [pc, #76]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c94:	f005 ff16 	bl	8006ac4 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	330b      	adds	r3, #11
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cb6:	d103      	bne.n	8000cc0 <Read_Data_Cont+0xfc>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	7bdb      	ldrb	r3, [r3, #15]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d0de      	beq.n	8000c7e <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <Read_Data_Cont+0x118>)
 8000cc6:	f002 fd85 	bl	80037d4 <HAL_GPIO_WritePin>
 8000cca:	46b5      	mov	sp, r6
}
 8000ccc:	bf00      	nop
 8000cce:	3724      	adds	r7, #36	@ 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000090 	.word	0x24000090
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240011a0 	.word	0x240011a0
 8000ce4:	08008ff0 	.word	0x08008ff0

08000ce8 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <Write_Enable+0x34>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <Write_Enable+0x38>)
 8000cf8:	f002 fd6c 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000cfc:	2364      	movs	r3, #100	@ 0x64
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4906      	ldr	r1, [pc, #24]	@ (8000d1c <Write_Enable+0x34>)
 8000d02:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <Write_Enable+0x3c>)
 8000d04:	f005 fcf0 	bl	80066e8 <HAL_SPI_Transmit>
	csHIGH();
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <Write_Enable+0x38>)
 8000d0e:	f002 fd61 	bl	80037d4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d12:	2064      	movs	r0, #100	@ 0x64
 8000d14:	f000 f9a4 	bl	8001060 <delay_ns>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000090 	.word	0x24000090
 8000d20:	58020000 	.word	0x58020000
 8000d24:	240011a0 	.word	0x240011a0

08000d28 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d34:	220f      	movs	r2, #15
 8000d36:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <Read_Status_Register+0x54>)
 8000d44:	f002 fd46 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d48:	2364      	movs	r3, #100	@ 0x64
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	490a      	ldr	r1, [pc, #40]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <Read_Status_Register+0x58>)
 8000d50:	f005 fcca 	bl	80066e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d54:	2364      	movs	r3, #100	@ 0x64
 8000d56:	2201      	movs	r2, #1
 8000d58:	490a      	ldr	r1, [pc, #40]	@ (8000d84 <Read_Status_Register+0x5c>)
 8000d5a:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <Read_Status_Register+0x58>)
 8000d5c:	f005 feb2 	bl	8006ac4 <HAL_SPI_Receive>
	csHIGH();
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <Read_Status_Register+0x54>)
 8000d66:	f002 fd35 	bl	80037d4 <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d6a:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d6c:	795b      	ldrb	r3, [r3, #5]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000090 	.word	0x24000090
 8000d7c:	58020000 	.word	0x58020000
 8000d80:	240011a0 	.word	0x240011a0
 8000d84:	24000095 	.word	0x24000095

08000d88 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460a      	mov	r2, r1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000daa:	2200      	movs	r2, #0
 8000dac:	2110      	movs	r1, #16
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <Write_Status_Register+0x54>)
 8000db0:	f002 fd10 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000db4:	2364      	movs	r3, #100	@ 0x64
 8000db6:	2203      	movs	r2, #3
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000dba:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <Write_Status_Register+0x58>)
 8000dbc:	f005 fc94 	bl	80066e8 <HAL_SPI_Transmit>
	csHIGH();
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <Write_Status_Register+0x54>)
 8000dc6:	f002 fd05 	bl	80037d4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dca:	2064      	movs	r0, #100	@ 0x64
 8000dcc:	f000 f948 	bl	8001060 <delay_ns>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000090 	.word	0x24000090
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	240011a0 	.word	0x240011a0

08000de4 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <Read_ID+0x5c>)
 8000dec:	229f      	movs	r2, #159	@ 0x9f
 8000dee:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <Read_ID+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000df6:	2200      	movs	r2, #0
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <Read_ID+0x60>)
 8000dfc:	f002 fcea 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	2202      	movs	r2, #2
 8000e04:	490e      	ldr	r1, [pc, #56]	@ (8000e40 <Read_ID+0x5c>)
 8000e06:	4810      	ldr	r0, [pc, #64]	@ (8000e48 <Read_ID+0x64>)
 8000e08:	f005 fc6e 	bl	80066e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000e0c:	1d39      	adds	r1, r7, #4
 8000e0e:	2364      	movs	r3, #100	@ 0x64
 8000e10:	2204      	movs	r2, #4
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <Read_ID+0x64>)
 8000e14:	f005 fe56 	bl	8006ac4 <HAL_SPI_Receive>
	csHIGH();
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <Read_ID+0x60>)
 8000e1e:	f002 fcd9 	bl	80037d4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e22:	2064      	movs	r0, #100	@ 0x64
 8000e24:	f000 f91c 	bl	8001060 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	041a      	lsls	r2, r3, #16
 8000e2c:	797b      	ldrb	r3, [r7, #5]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	79b9      	ldrb	r1, [r7, #6]
 8000e32:	430b      	orrs	r3, r1
 8000e34:	4313      	orrs	r3, r2
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000090 	.word	0x24000090
 8000e44:	58020000 	.word	0x58020000
 8000e48:	240011a0 	.word	0x240011a0

08000e4c <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e5c:	f7ff ff44 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e70:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e78:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	480f      	ldr	r0, [pc, #60]	@ (8000ebc <Write_Data_Buffer+0x70>)
 8000e80:	f002 fca8 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000e84:	2364      	movs	r3, #100	@ 0x64
 8000e86:	2203      	movs	r2, #3
 8000e88:	490b      	ldr	r1, [pc, #44]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <Write_Data_Buffer+0x74>)
 8000e8c:	f005 fc2c 	bl	80066e8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000e90:	88ba      	ldrh	r2, [r7, #4]
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	6839      	ldr	r1, [r7, #0]
 8000e98:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <Write_Data_Buffer+0x74>)
 8000e9a:	f005 fc25 	bl	80066e8 <HAL_SPI_Transmit>
	csHIGH();
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <Write_Data_Buffer+0x70>)
 8000ea4:	f002 fc96 	bl	80037d4 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ea8:	2064      	movs	r0, #100	@ 0x64
 8000eaa:	f000 f8d9 	bl	8001060 <delay_ns>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24000090 	.word	0x24000090
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	240011a0 	.word	0x240011a0

08000ec4 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000ece:	f7ff ff0b 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ee8:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ef0:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <Write_Data_Flash+0x60>)
 8000ef8:	f002 fc6c 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000efc:	2364      	movs	r3, #100	@ 0x64
 8000efe:	2204      	movs	r2, #4
 8000f00:	4907      	ldr	r1, [pc, #28]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <Write_Data_Flash+0x64>)
 8000f04:	f005 fbf0 	bl	80066e8 <HAL_SPI_Transmit>
	csHIGH();
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <Write_Data_Flash+0x60>)
 8000f0e:	f002 fc61 	bl	80037d4 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f12:	f000 f8f5 	bl	8001100 <W25N_WaitForReady>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000090 	.word	0x24000090
 8000f24:	58020000 	.word	0x58020000
 8000f28:	240011a0 	.word	0x240011a0

08000f2c <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f38:	2213      	movs	r2, #19
 8000f3a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f4c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f54:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <Select_Page_Read+0x5c>)
 8000f5c:	f002 fc3a 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	2204      	movs	r2, #4
 8000f64:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <Select_Page_Read+0x60>)
 8000f68:	f005 fbbe 	bl	80066e8 <HAL_SPI_Transmit>
	csHIGH();
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <Select_Page_Read+0x5c>)
 8000f72:	f002 fc2f 	bl	80037d4 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f76:	f000 f8c3 	bl	8001100 <W25N_WaitForReady>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000090 	.word	0x24000090
 8000f88:	58020000 	.word	0x58020000
 8000f8c:	240011a0 	.word	0x240011a0

08000f90 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <Read_Data_Buffer+0x60>)
 8000fba:	f002 fc0b 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000fbe:	2364      	movs	r3, #100	@ 0x64
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	490a      	ldr	r1, [pc, #40]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <Read_Data_Buffer+0x64>)
 8000fc6:	f005 fb8f 	bl	80066e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <Read_Data_Buffer+0x64>)
 8000fd4:	f005 fd76 	bl	8006ac4 <HAL_SPI_Receive>
	csHIGH();
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <Read_Data_Buffer+0x60>)
 8000fde:	f002 fbf9 	bl	80037d4 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000090 	.word	0x24000090
 8000ff0:	58020000 	.word	0x58020000
 8000ff4:	240011a0 	.word	0x240011a0

08000ff8 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8001002:	f7ff fe71 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <Block_Erase+0x5c>)
 8001008:	22d8      	movs	r2, #216	@ 0xd8
 800100a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <Block_Erase+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b29b      	uxth	r3, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <Block_Erase+0x5c>)
 800101c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <Block_Erase+0x5c>)
 8001024:	70da      	strb	r2, [r3, #3]
	csLOW();
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	480b      	ldr	r0, [pc, #44]	@ (8001058 <Block_Erase+0x60>)
 800102c:	f002 fbd2 	bl	80037d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	2204      	movs	r2, #4
 8001034:	4907      	ldr	r1, [pc, #28]	@ (8001054 <Block_Erase+0x5c>)
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <Block_Erase+0x64>)
 8001038:	f005 fb56 	bl	80066e8 <HAL_SPI_Transmit>
	csHIGH();
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <Block_Erase+0x60>)
 8001042:	f002 fbc7 	bl	80037d4 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8001046:	f000 f85b 	bl	8001100 <W25N_WaitForReady>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000090 	.word	0x24000090
 8001058:	58020000 	.word	0x58020000
 800105c:	240011a0 	.word	0x240011a0

08001060 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <delay_ns+0x48>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0a5b      	lsrs	r3, r3, #9
 800106e:	4a0f      	ldr	r2, [pc, #60]	@ (80010ac <delay_ns+0x4c>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	09db      	lsrs	r3, r3, #7
 8001076:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <delay_ns+0x50>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	fb02 f303 	mul.w	r3, r2, r3
 8001086:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8001088:	bf00      	nop
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <delay_ns+0x50>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f8      	bhi.n	800108a <delay_ns+0x2a>
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	24000000 	.word	0x24000000
 80010ac:	00044b83 	.word	0x00044b83
 80010b0:	e0001000 	.word	0xe0001000

080010b4 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 80010b4:	b40f      	push	{r0, r1, r2, r3}
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b0a2      	sub	sp, #136	@ 0x88
 80010ba:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80010bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010c0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010c2:	f107 0008 	add.w	r0, r7, #8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	f007 fab5 	bl	800863c <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f902 	bl	80002e0 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f107 0108 	add.w	r1, r7, #8
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <USART3_Printf+0x48>)
 80010ea:	f006 f896 	bl	800721a <HAL_UART_Transmit>
}
 80010ee:	bf00      	nop
 80010f0:	3788      	adds	r7, #136	@ 0x88
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f8:	b004      	add	sp, #16
 80010fa:	4770      	bx	lr
 80010fc:	24001228 	.word	0x24001228

08001100 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8001104:	2064      	movs	r0, #100	@ 0x64
 8001106:	f7ff ffab 	bl	8001060 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 800110a:	e002      	b.n	8001112 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 800110c:	2064      	movs	r0, #100	@ 0x64
 800110e:	f7ff ffa7 	bl	8001060 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <W25N_WaitForReady+0x2c>)
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe06 	bl	8000d28 <Read_Status_Register>
 800111c:	4603      	mov	r3, r0
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f2      	bne.n	800110c <W25N_WaitForReady+0xc>
    }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2400009c 	.word	0x2400009c

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f000 fe98 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f85a 	bl	80011f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 800113c:	f000 fad0 	bl	80016e0 <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f9fe 	bl	8001540 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001144:	f000 f95a 	bl	80013fc <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8001148:	f000 f8ce 	bl	80012e8 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 800114c:	f000 f9ac 	bl	80014a8 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff fae7 	bl	8000724 <Flash_Init>
  Flash.ID=Read_ID();
 8001156:	f7ff fe45 	bl	8000de4 <Read_ID>
 800115a:	4603      	mov	r3, r0
 800115c:	4a1f      	ldr	r2, [pc, #124]	@ (80011dc <main+0xac>)
 800115e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001162:	60d3      	str	r3, [r2, #12]
  while (1)
  {
	  Read_Register(SR);
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <main+0xb0>)
 8001166:	e893 0003 	ldmia.w	r3, {r0, r1}
 800116a:	f7ff fbbb 	bl	80008e4 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 800116e:	2364      	movs	r3, #100	@ 0x64
 8001170:	2201      	movs	r2, #1
 8001172:	491c      	ldr	r1, [pc, #112]	@ (80011e4 <main+0xb4>)
 8001174:	481c      	ldr	r0, [pc, #112]	@ (80011e8 <main+0xb8>)
 8001176:	f006 f8de 	bl	8007336 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <main+0xb4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b31      	cmp	r3, #49	@ 0x31
 8001180:	d105      	bne.n	800118e <main+0x5e>
		  Read_Data_Cont(16);
 8001182:	2010      	movs	r0, #16
 8001184:	f7ff fd1e 	bl	8000bc4 <Read_Data_Cont>
		  command = 0;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <main+0xb4>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <main+0xb4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b32      	cmp	r3, #50	@ 0x32
 8001194:	d109      	bne.n	80011aa <main+0x7a>
		  Start_Flight_Recording=1;
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <main+0xbc>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 800119c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011a0:	f7ff fa8c 	bl	80006bc <CAN_SendMessage>
		  command=0;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <main+0xb4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <main+0xb4>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b33      	cmp	r3, #51	@ 0x33
 80011b0:	d109      	bne.n	80011c6 <main+0x96>
		  Start_Flight_Recording=0;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <main+0xbc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 80011b8:	f240 1001 	movw	r0, #257	@ 0x101
 80011bc:	f7ff fa7e 	bl	80006bc <CAN_SendMessage>
		  command=0;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <main+0xb4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
	  }

	  //Erase
	  if(command==0x34){
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <main+0xb4>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b34      	cmp	r3, #52	@ 0x34
 80011cc:	d1ca      	bne.n	8001164 <main+0x34>
		  Chip_Erase();
 80011ce:	f7ff fc8f 	bl	8000af0 <Chip_Erase>
		  command=0;
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <main+0xb4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 80011d8:	e7c4      	b.n	8001164 <main+0x34>
 80011da:	bf00      	nop
 80011dc:	240000a4 	.word	0x240000a4
 80011e0:	2400009c 	.word	0x2400009c
 80011e4:	2400007d 	.word	0x2400007d
 80011e8:	24001228 	.word	0x24001228
 80011ec:	2400007c 	.word	0x2400007c

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09c      	sub	sp, #112	@ 0x70
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fa:	224c      	movs	r2, #76	@ 0x4c
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f007 fa2a 	bl	8008658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2220      	movs	r2, #32
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fa24 	bl	8008658 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001210:	2002      	movs	r0, #2
 8001212:	f002 faf9 	bl	8003808 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <SystemClock_Config+0xf0>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a30      	ldr	r2, [pc, #192]	@ (80012e0 <SystemClock_Config+0xf0>)
 8001220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <SystemClock_Config+0xf0>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <SystemClock_Config+0xf4>)
 8001232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001234:	4a2b      	ldr	r2, [pc, #172]	@ (80012e4 <SystemClock_Config+0xf4>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <SystemClock_Config+0xf4>)
 800123e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001248:	bf00      	nop
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <SystemClock_Config+0xf0>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001256:	d1f8      	bne.n	800124a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800125c:	2301      	movs	r3, #1
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2340      	movs	r3, #64	@ 0x40
 8001262:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800126c:	2304      	movs	r3, #4
 800126e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001270:	233c      	movs	r3, #60	@ 0x3c
 8001272:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001278:	230a      	movs	r3, #10
 800127a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001280:	230c      	movs	r3, #12
 8001282:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001284:	2300      	movs	r3, #0
 8001286:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001290:	4618      	mov	r0, r3
 8001292:	f002 faf3 	bl	800387c <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800129c:	f000 fa80 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	233f      	movs	r3, #63	@ 0x3f
 80012a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2303      	movs	r3, #3
 80012a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012ac:	2308      	movs	r3, #8
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012be:	2340      	movs	r3, #64	@ 0x40
 80012c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2104      	movs	r1, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 ff32 	bl	8004130 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80012d2:	f000 fa65 	bl	80017a0 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3770      	adds	r7, #112	@ 0x70
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58024800 	.word	0x58024800
 80012e4:	58000400 	.word	0x58000400

080012e8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80012ee:	4b40      	ldr	r3, [pc, #256]	@ (80013f0 <MX_FDCAN1_Init+0x108>)
 80012f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012f4:	4a3e      	ldr	r2, [pc, #248]	@ (80013f0 <MX_FDCAN1_Init+0x108>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fa:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80012fe:	4b3c      	ldr	r3, [pc, #240]	@ (80013f0 <MX_FDCAN1_Init+0x108>)
 8001300:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800130c:	4b39      	ldr	r3, [pc, #228]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800130e:	4a3a      	ldr	r2, [pc, #232]	@ (80013f8 <MX_FDCAN1_Init+0x110>)
 8001310:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001318:	4b36      	ldr	r3, [pc, #216]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800131e:	4b35      	ldr	r3, [pc, #212]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001320:	2200      	movs	r2, #0
 8001322:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001324:	4b33      	ldr	r3, [pc, #204]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001326:	2200      	movs	r2, #0
 8001328:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800132a:	4b32      	ldr	r3, [pc, #200]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800132c:	2200      	movs	r2, #0
 800132e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001330:	4b30      	ldr	r3, [pc, #192]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001332:	2201      	movs	r2, #1
 8001334:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001338:	2202      	movs	r2, #2
 800133a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800133e:	2205      	movs	r2, #5
 8001340:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001342:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001344:	2202      	movs	r2, #2
 8001346:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800134a:	2201      	movs	r2, #1
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001350:	2203      	movs	r2, #3
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001356:	2204      	movs	r2, #4
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800135c:	2203      	movs	r2, #3
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001362:	2200      	movs	r2, #0
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001368:	2200      	movs	r2, #0
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800136c:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001374:	2240      	movs	r2, #64	@ 0x40
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800137a:	2204      	movs	r2, #4
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001380:	2200      	movs	r2, #0
 8001382:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001386:	2204      	movs	r2, #4
 8001388:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800138c:	2200      	movs	r2, #0
 800138e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001392:	2204      	movs	r2, #4
 8001394:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001396:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 8001398:	2200      	movs	r2, #0
 800139a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 80013b0:	2204      	movs	r2, #4
 80013b2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013b4:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 80013b6:	f000 ff05 	bl	80021c4 <HAL_FDCAN_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80013c0:	f000 f9ee 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80013c4:	480b      	ldr	r0, [pc, #44]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 80013c6:	f001 f8db 	bl	8002580 <HAL_FDCAN_Start>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80013d0:	f000 f9e6 	bl	80017a0 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80013d4:	2200      	movs	r2, #0
 80013d6:	2101      	movs	r1, #1
 80013d8:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <MX_FDCAN1_Init+0x10c>)
 80013da:	f001 fac3 	bl	8002964 <HAL_FDCAN_ActivateNotification>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80013e4:	f000 f9dc 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58024400 	.word	0x58024400
 80013f4:	24001100 	.word	0x24001100
 80013f8:	4000a000 	.word	0x4000a000

080013fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001402:	4a28      	ldr	r2, [pc, #160]	@ (80014a4 <MX_SPI1_Init+0xa8>)
 8001404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001408:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800140c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001416:	2207      	movs	r2, #7
 8001418:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001426:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001428:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800142c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001434:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001450:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001458:	2200      	movs	r2, #0
 800145a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800145c:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 800145e:	2200      	movs	r2, #0
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_SPI1_Init+0xa4>)
 800148e:	f005 f807 	bl	80064a0 <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001498:	f000 f982 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	240011a0 	.word	0x240011a0
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <MX_USART3_UART_Init+0x94>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ea:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f0:	4811      	ldr	r0, [pc, #68]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 80014f2:	f005 fe42 	bl	800717a <HAL_UART_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014fc:	f000 f950 	bl	80017a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	480d      	ldr	r0, [pc, #52]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 8001504:	f006 ffa1 	bl	800844a <HAL_UARTEx_SetTxFifoThreshold>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800150e:	f000 f947 	bl	80017a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001512:	2100      	movs	r1, #0
 8001514:	4808      	ldr	r0, [pc, #32]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 8001516:	f006 ffd6 	bl	80084c6 <HAL_UARTEx_SetRxFifoThreshold>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001520:	f000 f93e 	bl	80017a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	@ (8001538 <MX_USART3_UART_Init+0x90>)
 8001526:	f006 ff57 	bl	80083d8 <HAL_UARTEx_DisableFifoMode>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001530:	f000 f936 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	24001228 	.word	0x24001228
 800153c:	40004800 	.word	0x40004800

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	@ 0x30
 8001544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <MX_GPIO_Init+0x18c>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4a5b      	ldr	r2, [pc, #364]	@ (80016cc <MX_GPIO_Init+0x18c>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4b59      	ldr	r3, [pc, #356]	@ (80016cc <MX_GPIO_Init+0x18c>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001574:	4b55      	ldr	r3, [pc, #340]	@ (80016cc <MX_GPIO_Init+0x18c>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	4a54      	ldr	r2, [pc, #336]	@ (80016cc <MX_GPIO_Init+0x18c>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001584:	4b51      	ldr	r3, [pc, #324]	@ (80016cc <MX_GPIO_Init+0x18c>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b4e      	ldr	r3, [pc, #312]	@ (80016cc <MX_GPIO_Init+0x18c>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	4a4c      	ldr	r2, [pc, #304]	@ (80016cc <MX_GPIO_Init+0x18c>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a2:	4b4a      	ldr	r3, [pc, #296]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b46      	ldr	r3, [pc, #280]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b6:	4a45      	ldr	r2, [pc, #276]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c0:	4b42      	ldr	r3, [pc, #264]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ce:	4b3f      	ldr	r3, [pc, #252]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d4:	4a3d      	ldr	r2, [pc, #244]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015de:	4b3b      	ldr	r3, [pc, #236]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	4b37      	ldr	r3, [pc, #220]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f2:	4a36      	ldr	r2, [pc, #216]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015fc:	4b33      	ldr	r3, [pc, #204]	@ (80016cc <MX_GPIO_Init+0x18c>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160a:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <MX_GPIO_Init+0x18c>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001610:	4a2e      	ldr	r2, [pc, #184]	@ (80016cc <MX_GPIO_Init+0x18c>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161a:	4b2c      	ldr	r3, [pc, #176]	@ (80016cc <MX_GPIO_Init+0x18c>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2110      	movs	r1, #16
 800162c:	4828      	ldr	r0, [pc, #160]	@ (80016d0 <MX_GPIO_Init+0x190>)
 800162e:	f002 f8d1 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001638:	4826      	ldr	r0, [pc, #152]	@ (80016d4 <MX_GPIO_Init+0x194>)
 800163a:	f002 f8cb 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2101      	movs	r1, #1
 8001642:	4825      	ldr	r0, [pc, #148]	@ (80016d8 <MX_GPIO_Init+0x198>)
 8001644:	f002 f8c6 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2E1_GPIO_Port, LD2E1_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2102      	movs	r1, #2
 800164c:	4823      	ldr	r0, [pc, #140]	@ (80016dc <MX_GPIO_Init+0x19c>)
 800164e:	f002 f8c1 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001652:	2310      	movs	r3, #16
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4819      	ldr	r0, [pc, #100]	@ (80016d0 <MX_GPIO_Init+0x190>)
 800166a:	f001 ff03 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800166e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4813      	ldr	r0, [pc, #76]	@ (80016d4 <MX_GPIO_Init+0x194>)
 8001688:	f001 fef4 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <MX_GPIO_Init+0x198>)
 80016a4:	f001 fee6 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2E1_Pin */
  GPIO_InitStruct.Pin = LD2E1_Pin;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2E1_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4807      	ldr	r0, [pc, #28]	@ (80016dc <MX_GPIO_Init+0x19c>)
 80016c0:	f001 fed8 	bl	8003474 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016c4:	bf00      	nop
 80016c6:	3730      	adds	r7, #48	@ 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58020000 	.word	0x58020000
 80016d4:	58020400 	.word	0x58020400
 80016d8:	58021800 	.word	0x58021800
 80016dc:	58021000 	.word	0x58021000

080016e0 <init>:

/* USER CODE BEGIN 4 */

static void init(void){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 80016e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <init+0xb0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 80016ec:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <init+0xb0>)
 80016ee:	22a0      	movs	r2, #160	@ 0xa0
 80016f0:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 80016f2:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <init+0xb0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 80016f8:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <init+0xb0>)
 80016fa:	22b0      	movs	r2, #176	@ 0xb0
 80016fc:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 80016fe:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <init+0xb0>)
 8001700:	2200      	movs	r2, #0
 8001702:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <init+0xb0>)
 8001706:	22c0      	movs	r2, #192	@ 0xc0
 8001708:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <init+0xb4>)
 800170c:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001714:	21ff      	movs	r1, #255	@ 0xff
 8001716:	4618      	mov	r0, r3
 8001718:	f006 ff9e 	bl	8008658 <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001722:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001726:	21ff      	movs	r1, #255	@ 0xff
 8001728:	4618      	mov	r0, r3
 800172a:	f006 ff95 	bl	8008658 <memset>
	Flash.Buffer_Index = 0;
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <init+0xb4>)
 8001730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
	Flash.Buffer_flip = 0;
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <init+0xb4>)
 800173a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173e:	2200      	movs	r2, #0
 8001740:	709a      	strb	r2, [r3, #2]
	Flash.Block_Mem = 0;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <init+0xb4>)
 8001744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001748:	2200      	movs	r2, #0
 800174a:	811a      	strh	r2, [r3, #8]
	Flash.Page_Index = 0;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <init+0xb4>)
 800174e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001752:	2200      	movs	r2, #0
 8001754:	815a      	strh	r2, [r3, #10]
	Flash.ID = 0;
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <init+0xb4>)
 8001758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175c:	461a      	mov	r2, r3
 800175e:	2300      	movs	r3, #0
 8001760:	60d3      	str	r3, [r2, #12]
	Flash.Buffer_p = Flash.Buffer_0;
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <init+0xb4>)
 8001764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001768:	461a      	mov	r2, r3
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <init+0xb4>)
 800176c:	6053      	str	r3, [r2, #4]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <init+0xb8>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <init+0xb8>)
 8001774:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001778:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <init+0xbc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a07      	ldr	r2, [pc, #28]	@ (800179c <init+0xbc>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2400009c 	.word	0x2400009c
 8001794:	240000a4 	.word	0x240000a4
 8001798:	e000edf0 	.word	0xe000edf0
 800179c:	e0001000 	.word	0xe0001000

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <Error_Handler+0x10>)
 80017a6:	f000 feeb 	bl	8002580 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24001100 	.word	0x24001100

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_MspInit+0x30>)
 80017bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017c0:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <HAL_MspInit+0x30>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_MspInit+0x30>)
 80017cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	58024400 	.word	0x58024400

080017e8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0ba      	sub	sp, #232	@ 0xe8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	22c0      	movs	r2, #192	@ 0xc0
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f006 ff25 	bl	8008658 <memset>
  if(hfdcan->Instance==FDCAN1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a33      	ldr	r2, [pc, #204]	@ (80018e0 <HAL_FDCAN_MspInit+0xf8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d15e      	bne.n	80018d6 <HAL_FDCAN_MspInit+0xee>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001818:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001828:	230a      	movs	r3, #10
 800182a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001830:	2314      	movs	r3, #20
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001838:	23c0      	movs	r3, #192	@ 0xc0
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800183c:	2320      	movs	r3, #32
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001844:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fff9 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800185c:	f7ff ffa0 	bl	80017a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001860:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <HAL_FDCAN_MspInit+0xfc>)
 8001862:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001866:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <HAL_FDCAN_MspInit+0xfc>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <HAL_FDCAN_MspInit+0xfc>)
 8001872:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_FDCAN_MspInit+0xfc>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_FDCAN_MspInit+0xfc>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_FDCAN_MspInit+0xfc>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800189c:	2303      	movs	r3, #3
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018b4:	2309      	movs	r3, #9
 80018b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018be:	4619      	mov	r1, r3
 80018c0:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <HAL_FDCAN_MspInit+0x100>)
 80018c2:	f001 fdd7 	bl	8003474 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2013      	movs	r0, #19
 80018cc:	f000 fc45 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80018d0:	2013      	movs	r0, #19
 80018d2:	f000 fc5c 	bl	800218e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80018d6:	bf00      	nop
 80018d8:	37e8      	adds	r7, #232	@ 0xe8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	4000a000 	.word	0x4000a000
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58020c00 	.word	0x58020c00

080018ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0bc      	sub	sp, #240	@ 0xf0
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	22c0      	movs	r2, #192	@ 0xc0
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f006 fea3 	bl	8008658 <memset>
  if(hspi->Instance==SPI1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a38      	ldr	r2, [pc, #224]	@ (80019f8 <HAL_SPI_MspInit+0x10c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d168      	bne.n	80019ee <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800191c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001928:	2300      	movs	r3, #0
 800192a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192c:	f107 0318 	add.w	r3, r7, #24
 8001930:	4618      	mov	r0, r3
 8001932:	f002 ff89 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800193c:	f7ff ff30 	bl	80017a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001940:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 8001942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001946:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800194c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 8001952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001964:	4a25      	ldr	r2, [pc, #148]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001982:	4a1e      	ldr	r2, [pc, #120]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198c:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <HAL_SPI_MspInit+0x110>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800199a:	2360      	movs	r3, #96	@ 0x60
 800199c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b2:	2305      	movs	r3, #5
 80019b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019bc:	4619      	mov	r1, r3
 80019be:	4810      	ldr	r0, [pc, #64]	@ (8001a00 <HAL_SPI_MspInit+0x114>)
 80019c0:	f001 fd58 	bl	8003474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019c4:	2320      	movs	r3, #32
 80019c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019dc:	2305      	movs	r3, #5
 80019de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019e6:	4619      	mov	r1, r3
 80019e8:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <HAL_SPI_MspInit+0x118>)
 80019ea:	f001 fd43 	bl	8003474 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019ee:	bf00      	nop
 80019f0:	37f0      	adds	r7, #240	@ 0xf0
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40013000 	.word	0x40013000
 80019fc:	58024400 	.word	0x58024400
 8001a00:	58020000 	.word	0x58020000
 8001a04:	58020400 	.word	0x58020400

08001a08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	22c0      	movs	r2, #192	@ 0xc0
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 fe15 	bl	8008658 <memset>
  if(huart->Instance==USART3)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a27      	ldr	r2, [pc, #156]	@ (8001ad0 <HAL_UART_MspInit+0xc8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d146      	bne.n	8001ac6 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a38:	f04f 0202 	mov.w	r2, #2
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fefa 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a5a:	f7ff fea1 	bl	80017a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_UART_MspInit+0xcc>)
 8001a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a64:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <HAL_UART_MspInit+0xcc>)
 8001a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_UART_MspInit+0xcc>)
 8001a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_UART_MspInit+0xcc>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a82:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <HAL_UART_MspInit+0xcc>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_UART_MspInit+0xcc>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <HAL_UART_MspInit+0xd0>)
 8001ac2:	f001 fcd7 	bl	8003474 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ac6:	bf00      	nop
 8001ac8:	37e8      	adds	r7, #232	@ 0xe8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40004800 	.word	0x40004800
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	58020c00 	.word	0x58020c00

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <MemManage_Handler+0x4>

08001af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 fa0a 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <SysTick_Handler+0x28>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <SysTick_Handler+0x1c>
	  CLK_SIM++;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <SysTick_Handler+0x2c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SysTick_Handler+0x2c>)
 8001b48:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4a:	e002      	b.n	8001b52 <SysTick_Handler+0x22>
	  CLK_SIM=0;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <SysTick_Handler+0x2c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2400007c 	.word	0x2400007c
 8001b5c:	240012bc 	.word	0x240012bc

08001b60 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <FDCAN1_IT0_IRQHandler+0x10>)
 8001b66:	f000 ff77 	bl	8002a58 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	24001100 	.word	0x24001100

08001b74 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8001b7e:	e03f      	b.n	8001c00 <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 8001b80:	23f0      	movs	r3, #240	@ 0xf0
 8001b82:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 8001b92:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b94:	7a1b      	ldrb	r3, [r3, #8]
 8001b96:	72fb      	strb	r3, [r7, #11]
		Temp[4]=CAN.Rx_Buffer[1];
 8001b98:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b9a:	7a5b      	ldrb	r3, [r3, #9]
 8001b9c:	733b      	strb	r3, [r7, #12]
		Temp[5]=CAN.Rx_Buffer[2];
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001ba0:	7a9b      	ldrb	r3, [r3, #10]
 8001ba2:	737b      	strb	r3, [r7, #13]
		Temp[6]=CAN.Rx_Buffer[3];
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001ba6:	7adb      	ldrb	r3, [r3, #11]
 8001ba8:	73bb      	strb	r3, [r7, #14]
		Temp[7]=CAN.Rx_Buffer[4];
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001bac:	7b1b      	ldrb	r3, [r3, #12]
 8001bae:	73fb      	strb	r3, [r7, #15]
		Temp[8]=CAN.Rx_Buffer[5];
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001bb2:	7b5b      	ldrb	r3, [r3, #13]
 8001bb4:	743b      	strb	r3, [r7, #16]
		Temp[9]=CAN.Rx_Buffer[6];
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001bb8:	7b9b      	ldrb	r3, [r3, #14]
 8001bba:	747b      	strb	r3, [r7, #17]
		Temp[10]=CAN.Rx_Buffer[7];
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001bbe:	7bdb      	ldrb	r3, [r3, #15]
 8001bc0:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001bca:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001bde:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e1b      	lsrs	r3, r3, #24
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 8001be8:	230f      	movs	r3, #15
 8001bea:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fe98 	bl	8000930 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001c02:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001c04:	2140      	movs	r1, #64	@ 0x40
 8001c06:	480a      	ldr	r0, [pc, #40]	@ (8001c30 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c08:	f000 fd40 	bl	800268c <HAL_FDCAN_GetRxMessage>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0b6      	beq.n	8001b80 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	240010b4 	.word	0x240010b4
 8001c20:	24000080 	.word	0x24000080
 8001c24:	240012bc 	.word	0x240012bc
 8001c28:	2400007c 	.word	0x2400007c
 8001c2c:	24000088 	.word	0x24000088
 8001c30:	24001100 	.word	0x24001100

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f006 fd00 	bl	8008668 <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	24080000 	.word	0x24080000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	240012c0 	.word	0x240012c0
 8001c9c:	24001410 	.word	0x24001410

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <SystemInit+0x114>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001caa:	4a42      	ldr	r2, [pc, #264]	@ (8001db4 <SystemInit+0x114>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb4:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <SystemInit+0x118>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	2b06      	cmp	r3, #6
 8001cbe:	d807      	bhi.n	8001cd0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8001db8 <SystemInit+0x118>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 030f 	bic.w	r3, r3, #15
 8001cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8001db8 <SystemInit+0x118>)
 8001cca:	f043 0307 	orr.w	r3, r3, #7
 8001cce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <SystemInit+0x11c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a39      	ldr	r2, [pc, #228]	@ (8001dbc <SystemInit+0x11c>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cdc:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <SystemInit+0x11c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ce2:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <SystemInit+0x11c>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4935      	ldr	r1, [pc, #212]	@ (8001dbc <SystemInit+0x11c>)
 8001ce8:	4b35      	ldr	r3, [pc, #212]	@ (8001dc0 <SystemInit+0x120>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cee:	4b32      	ldr	r3, [pc, #200]	@ (8001db8 <SystemInit+0x118>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <SystemInit+0x118>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 030f 	bic.w	r3, r3, #15
 8001d02:	4a2d      	ldr	r2, [pc, #180]	@ (8001db8 <SystemInit+0x118>)
 8001d04:	f043 0307 	orr.w	r3, r3, #7
 8001d08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <SystemInit+0x11c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <SystemInit+0x11c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d16:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <SystemInit+0x11c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <SystemInit+0x11c>)
 8001d1e:	4a29      	ldr	r2, [pc, #164]	@ (8001dc4 <SystemInit+0x124>)
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <SystemInit+0x11c>)
 8001d24:	4a28      	ldr	r2, [pc, #160]	@ (8001dc8 <SystemInit+0x128>)
 8001d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <SystemInit+0x11c>)
 8001d2a:	4a28      	ldr	r2, [pc, #160]	@ (8001dcc <SystemInit+0x12c>)
 8001d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d2e:	4b23      	ldr	r3, [pc, #140]	@ (8001dbc <SystemInit+0x11c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <SystemInit+0x11c>)
 8001d36:	4a25      	ldr	r2, [pc, #148]	@ (8001dcc <SystemInit+0x12c>)
 8001d38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <SystemInit+0x11c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <SystemInit+0x11c>)
 8001d42:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <SystemInit+0x12c>)
 8001d44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <SystemInit+0x11c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <SystemInit+0x11c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	@ (8001dbc <SystemInit+0x11c>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d58:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <SystemInit+0x11c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <SystemInit+0x130>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <SystemInit+0x134>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d6a:	d202      	bcs.n	8001d72 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <SystemInit+0x138>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <SystemInit+0x11c>)
 8001d74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d113      	bne.n	8001da8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d80:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <SystemInit+0x11c>)
 8001d82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d86:	4a0d      	ldr	r2, [pc, #52]	@ (8001dbc <SystemInit+0x11c>)
 8001d88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d8c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <SystemInit+0x13c>)
 8001d92:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d96:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <SystemInit+0x11c>)
 8001d9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d9e:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <SystemInit+0x11c>)
 8001da0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001da4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00
 8001db8:	52002000 	.word	0x52002000
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dc4:	02020200 	.word	0x02020200
 8001dc8:	01ff0000 	.word	0x01ff0000
 8001dcc:	01010280 	.word	0x01010280
 8001dd0:	5c001000 	.word	0x5c001000
 8001dd4:	ffff0000 	.word	0xffff0000
 8001dd8:	51008108 	.word	0x51008108
 8001ddc:	52004000 	.word	0x52004000

08001de0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <ExitRun0Mode+0x2c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <ExitRun0Mode+0x2c>)
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001df0:	bf00      	nop
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <ExitRun0Mode+0x2c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f9      	beq.n	8001df2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	58024800 	.word	0x58024800

08001e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e10:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e4c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e14:	f7ff ffe4 	bl	8001de0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e18:	f7ff ff42 	bl	8001ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	@ (8001e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	@ (8001e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e42:	f006 fc17 	bl	8008674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff f973 	bl	8001130 <main>
  bx  lr
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e54:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001e58:	080090e8 	.word	0x080090e8
  ldr r2, =_sbss
 8001e5c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001e60:	24001410 	.word	0x24001410

08001e64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC3_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f000 f968 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e74:	f002 fb12 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_Init+0x68>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	4913      	ldr	r1, [pc, #76]	@ (8001ed4 <HAL_Init+0x6c>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_Init+0x68>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <HAL_Init+0x6c>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <HAL_Init+0x70>)
 8001eaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001eac:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <HAL_Init+0x74>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f000 f814 	bl	8001ee0 <HAL_InitTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e002      	b.n	8001ec8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec2:	f7ff fc77 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	0800905c 	.word	0x0800905c
 8001ed8:	24000004 	.word	0x24000004
 8001edc:	24000000 	.word	0x24000000

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_InitTick+0x60>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e021      	b.n	8001f38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <HAL_InitTick+0x64>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_InitTick+0x60>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f94d 	bl	80021aa <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f000 f917 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <HAL_InitTick+0x68>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2400000c 	.word	0x2400000c
 8001f44:	24000000 	.word	0x24000000
 8001f48:	24000008 	.word	0x24000008

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	2400000c 	.word	0x2400000c
 8001f70:	240012c4 	.word	0x240012c4

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	240012c4 	.word	0x240012c4

08001f8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_GetREVID+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0c1b      	lsrs	r3, r3, #16
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	5c001000 	.word	0x5c001000

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	05fa0000 	.word	0x05fa0000

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	@ (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	@ (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff40 	bl	8001fec <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff90 	bl	8002098 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5f 	bl	8002044 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff33 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa4 	bl	8002100 <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b098      	sub	sp, #96	@ 0x60
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80021cc:	4a84      	ldr	r2, [pc, #528]	@ (80023e0 <HAL_FDCAN_Init+0x21c>)
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	4611      	mov	r1, r2
 80021d4:	224c      	movs	r2, #76	@ 0x4c
 80021d6:	4618      	mov	r0, r3
 80021d8:	f006 fa72 	bl	80086c0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1c6      	b.n	8002574 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a7e      	ldr	r2, [pc, #504]	@ (80023e4 <HAL_FDCAN_Init+0x220>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d106      	bne.n	80021fe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fae8 	bl	80017e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0210 	bic.w	r2, r2, #16
 8002226:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002228:	f7ff fea4 	bl	8001f74 <HAL_GetTick>
 800222c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800222e:	e014      	b.n	800225a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002230:	f7ff fea0 	bl	8001f74 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d90d      	bls.n	800225a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e18c      	b.n	8002574 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b08      	cmp	r3, #8
 8002266:	d0e3      	beq.n	8002230 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002278:	f7ff fe7c 	bl	8001f74 <HAL_GetTick>
 800227c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800227e:	e014      	b.n	80022aa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002280:	f7ff fe78 	bl	8001f74 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b0a      	cmp	r3, #10
 800228c:	d90d      	bls.n	80022aa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e164      	b.n	8002574 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0e3      	beq.n	8002280 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0202 	orr.w	r2, r2, #2
 80022c6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7c1b      	ldrb	r3, [r3, #16]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d108      	bne.n	80022e2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022de:	619a      	str	r2, [r3, #24]
 80022e0:	e007      	b.n	80022f2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c5b      	ldrb	r3, [r3, #17]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002308:	619a      	str	r2, [r3, #24]
 800230a:	e007      	b.n	800231c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800231a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7c9b      	ldrb	r3, [r3, #18]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d108      	bne.n	8002336 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002332:	619a      	str	r2, [r3, #24]
 8002334:	e007      	b.n	8002346 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002344:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800236a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0210 	bic.w	r2, r2, #16
 800237a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d108      	bne.n	8002396 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0204 	orr.w	r2, r2, #4
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	e030      	b.n	80023f8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d02c      	beq.n	80023f8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d020      	beq.n	80023e8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023b4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0210 	orr.w	r2, r2, #16
 80023c4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d114      	bne.n	80023f8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0220 	orr.w	r2, r2, #32
 80023dc:	619a      	str	r2, [r3, #24]
 80023de:	e00b      	b.n	80023f8 <HAL_FDCAN_Init+0x234>
 80023e0:	08009010 	.word	0x08009010
 80023e4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	3b01      	subs	r3, #1
 8002406:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002408:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002410:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	3b01      	subs	r3, #1
 800241a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002420:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002422:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800242c:	d115      	bne.n	800245a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	3b01      	subs	r3, #1
 800243a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800243c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	3b01      	subs	r3, #1
 8002444:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002446:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	3b01      	subs	r3, #1
 8002450:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002456:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002458:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002480:	4413      	add	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d011      	beq.n	80024aa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800248e:	f023 0107 	bic.w	r1, r3, #7
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	3360      	adds	r3, #96	@ 0x60
 800249a:	443b      	add	r3, r7
 800249c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d011      	beq.n	80024d6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80024ba:	f023 0107 	bic.w	r1, r3, #7
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	3360      	adds	r3, #96	@ 0x60
 80024c6:	443b      	add	r3, r7
 80024c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d012      	beq.n	8002504 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80024e6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	3360      	adds	r3, #96	@ 0x60
 80024f2:	443b      	add	r3, r7
 80024f4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80024f8:	011a      	lsls	r2, r3, #4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002508:	2b00      	cmp	r3, #0
 800250a:	d012      	beq.n	8002532 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002514:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	3360      	adds	r3, #96	@ 0x60
 8002520:	443b      	add	r3, r7
 8002522:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a11      	ldr	r2, [pc, #68]	@ (800257c <HAL_FDCAN_Init+0x3b8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d107      	bne.n	800254c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f022 0203 	bic.w	r2, r2, #3
 800254a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fd81 	bl	800306c <FDCAN_CalcultateRamBlockAddresses>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002570:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8002574:	4618      	mov	r0, r3
 8002576:	3760      	adds	r7, #96	@ 0x60
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	4000a000 	.word	0x4000a000

08002580 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d111      	bne.n	80025b8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e008      	b.n	80025ca <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d141      	bne.n	8002672 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025f6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e038      	b.n	8002684 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800261a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002628:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e026      	b.n	8002684 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fe93 	bl	8003378 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2101      	movs	r1, #1
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002662:	2201      	movs	r2, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e008      	b.n	8002684 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002678:	f043 0208 	orr.w	r2, r3, #8
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800268c:	b480      	push	{r7}
 800268e:	b08b      	sub	sp, #44	@ 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80026a4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80026a6:	7efb      	ldrb	r3, [r7, #27]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	f040 8149 	bne.w	8002940 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b40      	cmp	r3, #64	@ 0x40
 80026b2:	d14c      	bne.n	800274e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80026bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e13c      	b.n	8002952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e12a      	b.n	8002952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800270c:	d10a      	bne.n	8002724 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002716:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800271a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800271e:	d101      	bne.n	8002724 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002740:	69f9      	ldr	r1, [r7, #28]
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
 800274c:	e068      	b.n	8002820 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b41      	cmp	r3, #65	@ 0x41
 8002752:	d14c      	bne.n	80027ee <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800275c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0ec      	b.n	8002952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800278e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0da      	b.n	8002952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ac:	d10a      	bne.n	80027c4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027be:	d101      	bne.n	80027c4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e0:	69f9      	ldr	r1, [r7, #28]
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ec:	e018      	b.n	8002820 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d309      	bcc.n	800280c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0a2      	b.n	8002952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e005      	b.n	8002850 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	3304      	adds	r3, #4
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	f003 020f 	and.w	r2, r3, #15
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0e1b      	lsrs	r3, r3, #24
 80028a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0fda      	lsrs	r2, r3, #31
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	3304      	adds	r3, #4
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	e00a      	b.n	80028dc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	441a      	add	r2, r3
 80028cc:	6839      	ldr	r1, [r7, #0]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	440b      	add	r3, r1
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	3301      	adds	r3, #1
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002960 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	461a      	mov	r2, r3
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d3ec      	bcc.n	80028c6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b40      	cmp	r3, #64	@ 0x40
 80028f0:	d105      	bne.n	80028fe <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80028fc:	e01e      	b.n	800293c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b41      	cmp	r3, #65	@ 0x41
 8002902:	d105      	bne.n	8002910 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800290e:	e015      	b.n	800293c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b1f      	cmp	r3, #31
 8002914:	d808      	bhi.n	8002928 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002926:	e009      	b.n	800293c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e008      	b.n	8002952 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	372c      	adds	r7, #44	@ 0x2c
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	0800906c 	.word	0x0800906c

08002964 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002976:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <HAL_FDCAN_ActivateNotification+0x20>
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d155      	bne.n	8002a30 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029a2:	e014      	b.n	80029ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d108      	bne.n	80029c6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0202 	orr.w	r2, r2, #2
 80029c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029c4:	e003      	b.n	80029ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2203      	movs	r2, #3
 80029cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <HAL_FDCAN_ActivateNotification+0xec>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0f9b      	lsrs	r3, r3, #30
 8002a26:	490b      	ldr	r1, [pc, #44]	@ (8002a54 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e008      	b.n	8002a42 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	3fcfffff 	.word	0x3fcfffff
 8002a54:	4000a800 	.word	0x4000a800

08002a58 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b096      	sub	sp, #88	@ 0x58
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002a60:	4b9a      	ldr	r3, [pc, #616]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	079b      	lsls	r3, r3, #30
 8002a66:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002a68:	4b98      	ldr	r3, [pc, #608]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	079b      	lsls	r3, r3, #30
 8002a6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a70:	4013      	ands	r3, r2
 8002a72:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a88:	4013      	ands	r3, r2
 8002a8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ab8:	4013      	ands	r3, r2
 8002aba:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8002ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ada:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8002ade:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ae8:	4013      	ands	r3, r2
 8002aea:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fa54 	bl	8002fd2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2c:	0a9b      	lsrs	r3, r3, #10
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01d      	beq.n	8002b72 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	0a9b      	lsrs	r3, r3, #10
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d017      	beq.n	8002b72 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b4a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b56:	4013      	ands	r3, r2
 8002b58:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b62:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b64:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002b6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fa07 	bl	8002f80 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b7e:	4b54      	ldr	r3, [pc, #336]	@ (8002cd0 <HAL_FDCAN_IRQHandler+0x278>)
 8002b80:	400b      	ands	r3, r1
 8002b82:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b84:	4a51      	ldr	r2, [pc, #324]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b88:	0f9b      	lsrs	r3, r3, #30
 8002b8a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002b8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9c0 	bl	8002f14 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd0 <HAL_FDCAN_IRQHandler+0x278>)
 8002ba2:	400b      	ands	r3, r1
 8002ba4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ba6:	4a49      	ldr	r2, [pc, #292]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002baa:	0f9b      	lsrs	r3, r3, #30
 8002bac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002bae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f9ba 	bl	8002f2a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002bc2:	4b43      	ldr	r3, [pc, #268]	@ (8002cd0 <HAL_FDCAN_IRQHandler+0x278>)
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bc8:	4a40      	ldr	r2, [pc, #256]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bcc:	0f9b      	lsrs	r3, r3, #30
 8002bce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002bd0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe ffce 	bl	8001b74 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002be4:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd0 <HAL_FDCAN_IRQHandler+0x278>)
 8002be6:	400b      	ands	r3, r1
 8002be8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bea:	4a38      	ldr	r2, [pc, #224]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bee:	0f9b      	lsrs	r3, r3, #30
 8002bf0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002bf2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f9a3 	bl	8002f40 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfc:	0adb      	lsrs	r3, r3, #11
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c08:	0adb      	lsrs	r3, r3, #11
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f997 	bl	8002f56 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2a:	0a5b      	lsrs	r3, r3, #9
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01d      	beq.n	8002c70 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c48:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c54:	4013      	ands	r3, r2
 8002c56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c60:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002c68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f97d 	bl	8002f6a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c72:	0cdb      	lsrs	r3, r3, #19
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7e:	0cdb      	lsrs	r3, r3, #19
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002c90:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f97c 	bl	8002f96 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d010      	beq.n	8002cd8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cc0:	4b02      	ldr	r3, [pc, #8]	@ (8002ccc <HAL_FDCAN_IRQHandler+0x274>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	e004      	b.n	8002cd4 <HAL_FDCAN_IRQHandler+0x27c>
 8002cca:	bf00      	nop
 8002ccc:	4000a800 	.word	0x4000a800
 8002cd0:	3fcfffff 	.word	0x3fcfffff
 8002cd4:	f000 f969 	bl	8002faa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d010      	beq.n	8002d06 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce6:	0c9b      	lsrs	r3, r3, #18
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002cf8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002cfa:	4b83      	ldr	r3, [pc, #524]	@ (8002f08 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f95c 	bl	8002fbe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d08:	0c5b      	lsrs	r3, r3, #17
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d015      	beq.n	8002d3e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d14:	0c5b      	lsrs	r3, r3, #17
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00f      	beq.n	8002d3e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d26:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d28:	4b77      	ldr	r3, [pc, #476]	@ (8002f08 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d4a:	4b70      	ldr	r3, [pc, #448]	@ (8002f0c <HAL_FDCAN_IRQHandler+0x4b4>)
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d50:	4a6d      	ldr	r2, [pc, #436]	@ (8002f08 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d54:	0f9b      	lsrs	r3, r3, #30
 8002d56:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f94d 	bl	8002ffa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d011      	beq.n	8002d8a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002d6c:	4b67      	ldr	r3, [pc, #412]	@ (8002f0c <HAL_FDCAN_IRQHandler+0x4b4>)
 8002d6e:	400b      	ands	r3, r1
 8002d70:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d72:	4a65      	ldr	r2, [pc, #404]	@ (8002f08 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d76:	0f9b      	lsrs	r3, r3, #30
 8002d78:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a60      	ldr	r2, [pc, #384]	@ (8002f10 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	f040 80ac 	bne.w	8002eee <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a4 	beq.w	8002eee <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dba:	4013      	ands	r3, r2
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dea:	4013      	ands	r3, r2
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8002df8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	4013      	ands	r3, r2
 8002e04:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8002e10:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e3a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002e3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8e6 	bl	8003010 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f8e6 	bl	8003026 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01a      	beq.n	8002e9c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e88:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2240      	movs	r2, #64	@ 0x40
 8002e90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	6939      	ldr	r1, [r7, #16]
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8d0 	bl	800303c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002eaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f8d1 	bl	8003054 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f874 	bl	8002fe6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002efe:	bf00      	nop
 8002f00:	3758      	adds	r7, #88	@ 0x58
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	4000a800 	.word	0x4000a800
 8002f0c:	3fcfffff 	.word	0x3fcfffff
 8002f10:	4000a000 	.word	0x4000a000

08002f14 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003078:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003082:	4ba7      	ldr	r3, [pc, #668]	@ (8003320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003084:	4013      	ands	r3, r2
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	0091      	lsls	r1, r2, #2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	430b      	orrs	r3, r1
 8003090:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800309c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	041a      	lsls	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80030c2:	4b97      	ldr	r3, [pc, #604]	@ (8003320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	0091      	lsls	r1, r2, #2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	430b      	orrs	r3, r1
 80030d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	041a      	lsls	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4413      	add	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003104:	4b86      	ldr	r3, [pc, #536]	@ (8003320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	0091      	lsls	r1, r2, #2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800311e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	041a      	lsls	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800314c:	4b74      	ldr	r3, [pc, #464]	@ (8003320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800314e:	4013      	ands	r3, r2
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	0091      	lsls	r1, r2, #2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	430b      	orrs	r3, r1
 800315a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003166:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316e:	041a      	lsls	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003194:	4b62      	ldr	r3, [pc, #392]	@ (8003320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	0091      	lsls	r1, r2, #2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80031c0:	4b57      	ldr	r3, [pc, #348]	@ (8003320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	0091      	lsls	r1, r2, #2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031da:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	041a      	lsls	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	4413      	add	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003202:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003204:	4013      	ands	r3, r2
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	0091      	lsls	r1, r2, #2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	430b      	orrs	r3, r1
 8003210:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800321c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003238:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	061a      	lsls	r2, r3, #24
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003250:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003252:	4413      	add	r3, r2
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	441a      	add	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a04      	ldr	r2, [pc, #16]	@ (8003328 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d915      	bls.n	8003348 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800331c:	e006      	b.n	800332c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800331e:	bf00      	nop
 8003320:	ffff0003 	.word	0xffff0003
 8003324:	10002b00 	.word	0x10002b00
 8003328:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2203      	movs	r2, #3
 8003340:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e010      	b.n	800336a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e005      	b.n	800335c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3304      	adds	r3, #4
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d3f3      	bcc.n	8003350 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	@ 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003396:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800339e:	4313      	orrs	r3, r2
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e00a      	b.n	80033ba <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80033ac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80033b2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033b8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80033c4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80033ca:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80033d0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	3304      	adds	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	3304      	adds	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e020      	b.n	8003452 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3303      	adds	r3, #3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3302      	adds	r3, #2
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	440b      	add	r3, r1
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003428:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3301      	adds	r3, #1
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	440b      	add	r3, r1
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003436:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	440a      	add	r2, r1
 800343e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003440:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	3304      	adds	r3, #4
 800344a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3304      	adds	r3, #4
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a06      	ldr	r2, [pc, #24]	@ (8003470 <FDCAN_CopyMessageToRAM+0xf8>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	461a      	mov	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4293      	cmp	r3, r2
 8003460:	d3d6      	bcc.n	8003410 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3724      	adds	r7, #36	@ 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	0800906c 	.word	0x0800906c

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003482:	4b89      	ldr	r3, [pc, #548]	@ (80036a8 <HAL_GPIO_Init+0x234>)
 8003484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003486:	e194      	b.n	80037b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8186 	beq.w	80037ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d005      	beq.n	80034b8 <HAL_GPIO_Init+0x44>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d130      	bne.n	800351a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ee:	2201      	movs	r2, #1
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0201 	and.w	r2, r3, #1
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d017      	beq.n	8003556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d123      	bne.n	80035aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	08da      	lsrs	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3208      	adds	r2, #8
 800356a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80e0 	beq.w	80037ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ec:	4b2f      	ldr	r3, [pc, #188]	@ (80036ac <HAL_GPIO_Init+0x238>)
 80035ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035f2:	4a2e      	ldr	r2, [pc, #184]	@ (80036ac <HAL_GPIO_Init+0x238>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80035fc:	4b2b      	ldr	r3, [pc, #172]	@ (80036ac <HAL_GPIO_Init+0x238>)
 80035fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360a:	4a29      	ldr	r2, [pc, #164]	@ (80036b0 <HAL_GPIO_Init+0x23c>)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	220f      	movs	r2, #15
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a20      	ldr	r2, [pc, #128]	@ (80036b4 <HAL_GPIO_Init+0x240>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d052      	beq.n	80036dc <HAL_GPIO_Init+0x268>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1f      	ldr	r2, [pc, #124]	@ (80036b8 <HAL_GPIO_Init+0x244>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_GPIO_Init+0x22e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1e      	ldr	r2, [pc, #120]	@ (80036bc <HAL_GPIO_Init+0x248>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02b      	beq.n	800369e <HAL_GPIO_Init+0x22a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <HAL_GPIO_Init+0x24c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d025      	beq.n	800369a <HAL_GPIO_Init+0x226>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1c      	ldr	r2, [pc, #112]	@ (80036c4 <HAL_GPIO_Init+0x250>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01f      	beq.n	8003696 <HAL_GPIO_Init+0x222>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a1b      	ldr	r2, [pc, #108]	@ (80036c8 <HAL_GPIO_Init+0x254>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d019      	beq.n	8003692 <HAL_GPIO_Init+0x21e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1a      	ldr	r2, [pc, #104]	@ (80036cc <HAL_GPIO_Init+0x258>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_GPIO_Init+0x21a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_GPIO_Init+0x25c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00d      	beq.n	800368a <HAL_GPIO_Init+0x216>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a18      	ldr	r2, [pc, #96]	@ (80036d4 <HAL_GPIO_Init+0x260>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <HAL_GPIO_Init+0x212>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a17      	ldr	r2, [pc, #92]	@ (80036d8 <HAL_GPIO_Init+0x264>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_GPIO_Init+0x20e>
 800367e:	2309      	movs	r3, #9
 8003680:	e02d      	b.n	80036de <HAL_GPIO_Init+0x26a>
 8003682:	230a      	movs	r3, #10
 8003684:	e02b      	b.n	80036de <HAL_GPIO_Init+0x26a>
 8003686:	2308      	movs	r3, #8
 8003688:	e029      	b.n	80036de <HAL_GPIO_Init+0x26a>
 800368a:	2307      	movs	r3, #7
 800368c:	e027      	b.n	80036de <HAL_GPIO_Init+0x26a>
 800368e:	2306      	movs	r3, #6
 8003690:	e025      	b.n	80036de <HAL_GPIO_Init+0x26a>
 8003692:	2305      	movs	r3, #5
 8003694:	e023      	b.n	80036de <HAL_GPIO_Init+0x26a>
 8003696:	2304      	movs	r3, #4
 8003698:	e021      	b.n	80036de <HAL_GPIO_Init+0x26a>
 800369a:	2303      	movs	r3, #3
 800369c:	e01f      	b.n	80036de <HAL_GPIO_Init+0x26a>
 800369e:	2302      	movs	r3, #2
 80036a0:	e01d      	b.n	80036de <HAL_GPIO_Init+0x26a>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e01b      	b.n	80036de <HAL_GPIO_Init+0x26a>
 80036a6:	bf00      	nop
 80036a8:	58000080 	.word	0x58000080
 80036ac:	58024400 	.word	0x58024400
 80036b0:	58000400 	.word	0x58000400
 80036b4:	58020000 	.word	0x58020000
 80036b8:	58020400 	.word	0x58020400
 80036bc:	58020800 	.word	0x58020800
 80036c0:	58020c00 	.word	0x58020c00
 80036c4:	58021000 	.word	0x58021000
 80036c8:	58021400 	.word	0x58021400
 80036cc:	58021800 	.word	0x58021800
 80036d0:	58021c00 	.word	0x58021c00
 80036d4:	58022000 	.word	0x58022000
 80036d8:	58022400 	.word	0x58022400
 80036dc:	2300      	movs	r3, #0
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	f002 0203 	and.w	r2, r2, #3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4093      	lsls	r3, r2
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ee:	4938      	ldr	r1, [pc, #224]	@ (80037d0 <HAL_GPIO_Init+0x35c>)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003722:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3301      	adds	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f ae63 	bne.w	8003488 <HAL_GPIO_Init+0x14>
  }
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	3724      	adds	r7, #36	@ 0x24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	58000400 	.word	0x58000400

080037d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80037f0:	e003      	b.n	80037fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003810:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <HAL_PWREx_ConfigSupply+0x70>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b04      	cmp	r3, #4
 800381a:	d00a      	beq.n	8003832 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800381c:	4b16      	ldr	r3, [pc, #88]	@ (8003878 <HAL_PWREx_ConfigSupply+0x70>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d001      	beq.n	800382e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e01f      	b.n	800386e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e01d      	b.n	800386e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003832:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <HAL_PWREx_ConfigSupply+0x70>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f023 0207 	bic.w	r2, r3, #7
 800383a:	490f      	ldr	r1, [pc, #60]	@ (8003878 <HAL_PWREx_ConfigSupply+0x70>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4313      	orrs	r3, r2
 8003840:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003842:	f7fe fb97 	bl	8001f74 <HAL_GetTick>
 8003846:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003848:	e009      	b.n	800385e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800384a:	f7fe fb93 	bl	8001f74 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003858:	d901      	bls.n	800385e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e007      	b.n	800386e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_PWREx_ConfigSupply+0x70>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386a:	d1ee      	bne.n	800384a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	58024800 	.word	0x58024800

0800387c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	@ 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f000 bc48 	b.w	8004120 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8088 	beq.w	80039ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389e:	4b99      	ldr	r3, [pc, #612]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038a8:	4b96      	ldr	r3, [pc, #600]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d007      	beq.n	80038c4 <HAL_RCC_OscConfig+0x48>
 80038b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b6:	2b18      	cmp	r3, #24
 80038b8:	d111      	bne.n	80038de <HAL_RCC_OscConfig+0x62>
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d10c      	bne.n	80038de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d06d      	beq.n	80039ac <HAL_RCC_OscConfig+0x130>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d169      	bne.n	80039ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f000 bc21 	b.w	8004120 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e6:	d106      	bne.n	80038f6 <HAL_RCC_OscConfig+0x7a>
 80038e8:	4b86      	ldr	r3, [pc, #536]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a85      	ldr	r2, [pc, #532]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e02e      	b.n	8003954 <HAL_RCC_OscConfig+0xd8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x9c>
 80038fe:	4b81      	ldr	r3, [pc, #516]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a80      	ldr	r2, [pc, #512]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b7e      	ldr	r3, [pc, #504]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003910:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e01d      	b.n	8003954 <HAL_RCC_OscConfig+0xd8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0xc0>
 8003922:	4b78      	ldr	r3, [pc, #480]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a77      	ldr	r2, [pc, #476]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b75      	ldr	r3, [pc, #468]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a74      	ldr	r2, [pc, #464]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xd8>
 800393c:	4b71      	ldr	r3, [pc, #452]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a70      	ldr	r2, [pc, #448]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b6e      	ldr	r3, [pc, #440]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6d      	ldr	r2, [pc, #436]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fe fb0a 	bl	8001f74 <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003964:	f7fe fb06 	bl	8001f74 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	@ 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e3d4      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003976:	4b63      	ldr	r3, [pc, #396]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xe8>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fe faf6 	bl	8001f74 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe faf2 	bl	8001f74 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	@ 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e3c0      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800399e:	4b59      	ldr	r3, [pc, #356]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x110>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80ca 	beq.w	8003b50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039bc:	4b51      	ldr	r3, [pc, #324]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_RCC_OscConfig+0x166>
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	2b18      	cmp	r3, #24
 80039d6:	d156      	bne.n	8003a86 <HAL_RCC_OscConfig+0x20a>
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d151      	bne.n	8003a86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e2:	4b48      	ldr	r3, [pc, #288]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x17e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e392      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039fa:	4b42      	ldr	r3, [pc, #264]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 0219 	bic.w	r2, r3, #25
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	493f      	ldr	r1, [pc, #252]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fab2 	bl	8001f74 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a14:	f7fe faae 	bl	8001f74 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e37c      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a26:	4b37      	ldr	r3, [pc, #220]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	f7fe faab 	bl	8001f8c <HAL_GetREVID>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d817      	bhi.n	8003a70 <HAL_RCC_OscConfig+0x1f4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b40      	cmp	r3, #64	@ 0x40
 8003a46:	d108      	bne.n	8003a5a <HAL_RCC_OscConfig+0x1de>
 8003a48:	4b2e      	ldr	r3, [pc, #184]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a50:	4a2c      	ldr	r2, [pc, #176]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a58:	e07a      	b.n	8003b50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	031b      	lsls	r3, r3, #12
 8003a68:	4926      	ldr	r1, [pc, #152]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6e:	e06f      	b.n	8003b50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	4b24      	ldr	r3, [pc, #144]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	4921      	ldr	r1, [pc, #132]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a84:	e064      	b.n	8003b50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d047      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 0219 	bic.w	r2, r3, #25
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	491a      	ldr	r1, [pc, #104]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fa68 	bl	8001f74 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fe fa64 	bl	8001f74 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e332      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	f7fe fa61 	bl	8001f8c <HAL_GetREVID>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d819      	bhi.n	8003b08 <HAL_RCC_OscConfig+0x28c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b40      	cmp	r3, #64	@ 0x40
 8003ada:	d108      	bne.n	8003aee <HAL_RCC_OscConfig+0x272>
 8003adc:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ae4:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aea:	6053      	str	r3, [r2, #4]
 8003aec:	e030      	b.n	8003b50 <HAL_RCC_OscConfig+0x2d4>
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	031b      	lsls	r3, r3, #12
 8003afc:	4901      	ldr	r1, [pc, #4]	@ (8003b04 <HAL_RCC_OscConfig+0x288>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	604b      	str	r3, [r1, #4]
 8003b02:	e025      	b.n	8003b50 <HAL_RCC_OscConfig+0x2d4>
 8003b04:	58024400 	.word	0x58024400
 8003b08:	4b9a      	ldr	r3, [pc, #616]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	4997      	ldr	r1, [pc, #604]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
 8003b1c:	e018      	b.n	8003b50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b95      	ldr	r3, [pc, #596]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a94      	ldr	r2, [pc, #592]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fa23 	bl	8001f74 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fe fa1f 	bl	8001f74 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e2ed      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b44:	4b8b      	ldr	r3, [pc, #556]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f0      	bne.n	8003b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a9 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5e:	4b85      	ldr	r3, [pc, #532]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b68:	4b82      	ldr	r3, [pc, #520]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d007      	beq.n	8003b84 <HAL_RCC_OscConfig+0x308>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b18      	cmp	r3, #24
 8003b78:	d13a      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x374>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d135      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b84:	4b7b      	ldr	r3, [pc, #492]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_OscConfig+0x320>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b80      	cmp	r3, #128	@ 0x80
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e2c1      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b9c:	f7fe f9f6 	bl	8001f8c <HAL_GetREVID>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d817      	bhi.n	8003bda <HAL_RCC_OscConfig+0x35e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d108      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x348>
 8003bb2:	4b70      	ldr	r3, [pc, #448]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003bba:	4a6e      	ldr	r2, [pc, #440]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc2:	e075      	b.n	8003cb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	069b      	lsls	r3, r3, #26
 8003bd2:	4968      	ldr	r1, [pc, #416]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bd8:	e06a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bda:	4b66      	ldr	r3, [pc, #408]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	061b      	lsls	r3, r3, #24
 8003be8:	4962      	ldr	r1, [pc, #392]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bee:	e05f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d042      	beq.n	8003c7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe f9b6 	bl	8001f74 <HAL_GetTick>
 8003c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c0c:	f7fe f9b2 	bl	8001f74 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e280      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c1e:	4b55      	ldr	r3, [pc, #340]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c2a:	f7fe f9af 	bl	8001f8c <HAL_GetREVID>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d817      	bhi.n	8003c68 <HAL_RCC_OscConfig+0x3ec>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d108      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3d6>
 8003c40:	4b4c      	ldr	r3, [pc, #304]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c48:	4a4a      	ldr	r2, [pc, #296]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c4e:	6053      	str	r3, [r2, #4]
 8003c50:	e02e      	b.n	8003cb0 <HAL_RCC_OscConfig+0x434>
 8003c52:	4b48      	ldr	r3, [pc, #288]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	069b      	lsls	r3, r3, #26
 8003c60:	4944      	ldr	r1, [pc, #272]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
 8003c66:	e023      	b.n	8003cb0 <HAL_RCC_OscConfig+0x434>
 8003c68:	4b42      	ldr	r3, [pc, #264]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	493f      	ldr	r1, [pc, #252]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60cb      	str	r3, [r1, #12]
 8003c7c:	e018      	b.n	8003cb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3c      	ldr	r2, [pc, #240]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fe f973 	bl	8001f74 <HAL_GetTick>
 8003c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c92:	f7fe f96f 	bl	8001f74 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e23d      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca4:	4b33      	ldr	r3, [pc, #204]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d036      	beq.n	8003d2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d019      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fe f950 	bl	8001f74 <HAL_GetTick>
 8003cd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fe f94c 	bl	8001f74 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e21a      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cea:	4b22      	ldr	r3, [pc, #136]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x45c>
 8003cf6:	e018      	b.n	8003d2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fe f936 	bl	8001f74 <HAL_GetTick>
 8003d08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe f932 	bl	8001f74 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e200      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d1e:	4b15      	ldr	r3, [pc, #84]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d039      	beq.n	8003daa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01c      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe f913 	bl	8001f74 <HAL_GetTick>
 8003d4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d52:	f7fe f90f 	bl	8001f74 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1dd      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d64:	4b03      	ldr	r3, [pc, #12]	@ (8003d74 <HAL_RCC_OscConfig+0x4f8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x4d6>
 8003d70:	e01b      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d78:	4b9b      	ldr	r3, [pc, #620]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a9a      	ldr	r2, [pc, #616]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003d7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d84:	f7fe f8f6 	bl	8001f74 <HAL_GetTick>
 8003d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8c:	f7fe f8f2 	bl	8001f74 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1c0      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d9e:	4b92      	ldr	r3, [pc, #584]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8081 	beq.w	8003eba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003db8:	4b8c      	ldr	r3, [pc, #560]	@ (8003fec <HAL_RCC_OscConfig+0x770>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a8b      	ldr	r2, [pc, #556]	@ (8003fec <HAL_RCC_OscConfig+0x770>)
 8003dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc4:	f7fe f8d6 	bl	8001f74 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fe f8d2 	bl	8001f74 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e1a0      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dde:	4b83      	ldr	r3, [pc, #524]	@ (8003fec <HAL_RCC_OscConfig+0x770>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x584>
 8003df2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfe:	e02d      	b.n	8003e5c <HAL_RCC_OscConfig+0x5e0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10c      	bne.n	8003e22 <HAL_RCC_OscConfig+0x5a6>
 8003e08:	4b77      	ldr	r3, [pc, #476]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	4a76      	ldr	r2, [pc, #472]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e14:	4b74      	ldr	r3, [pc, #464]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a73      	ldr	r2, [pc, #460]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	f023 0304 	bic.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	e01c      	b.n	8003e5c <HAL_RCC_OscConfig+0x5e0>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c8>
 8003e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e36:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0x5e0>
 8003e44:	4b68      	ldr	r3, [pc, #416]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	4a67      	ldr	r2, [pc, #412]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e50:	4b65      	ldr	r3, [pc, #404]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	4a64      	ldr	r2, [pc, #400]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d015      	beq.n	8003e90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe f886 	bl	8001f74 <HAL_GetTick>
 8003e68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe f882 	bl	8001f74 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e14e      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e82:	4b59      	ldr	r3, [pc, #356]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ee      	beq.n	8003e6c <HAL_RCC_OscConfig+0x5f0>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fe f870 	bl	8001f74 <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fe f86c 	bl	8001f74 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e138      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eae:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 812d 	beq.w	800411e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ec4:	4b48      	ldr	r3, [pc, #288]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ecc:	2b18      	cmp	r3, #24
 8003ece:	f000 80bd 	beq.w	800404c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	f040 809e 	bne.w	8004018 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003edc:	4b42      	ldr	r3, [pc, #264]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a41      	ldr	r2, [pc, #260]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe f844 	bl	8001f74 <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fe f840 	bl	8001f74 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e10e      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f02:	4b39      	ldr	r3, [pc, #228]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0e:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f12:	4b37      	ldr	r3, [pc, #220]	@ (8003ff0 <HAL_RCC_OscConfig+0x774>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f1e:	0112      	lsls	r2, r2, #4
 8003f20:	430a      	orrs	r2, r1
 8003f22:	4931      	ldr	r1, [pc, #196]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f36:	3b01      	subs	r3, #1
 8003f38:	025b      	lsls	r3, r3, #9
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f42:	3b01      	subs	r3, #1
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	3b01      	subs	r3, #1
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f58:	4923      	ldr	r1, [pc, #140]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f5e:	4b22      	ldr	r3, [pc, #136]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f76:	00d2      	lsls	r2, r2, #3
 8003f78:	491b      	ldr	r1, [pc, #108]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	f023 020c 	bic.w	r2, r3, #12
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4917      	ldr	r1, [pc, #92]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f90:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	f023 0202 	bic.w	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9c:	4912      	ldr	r1, [pc, #72]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fa2:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa6:	4a10      	ldr	r2, [pc, #64]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fae:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fc6:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd2:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a04      	ldr	r2, [pc, #16]	@ (8003fe8 <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd ffc9 	bl	8001f74 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe4:	e011      	b.n	800400a <HAL_RCC_OscConfig+0x78e>
 8003fe6:	bf00      	nop
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	58024800 	.word	0x58024800
 8003ff0:	fffffc0c 	.word	0xfffffc0c
 8003ff4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd ffbc 	bl	8001f74 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e08a      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800400a:	4b47      	ldr	r3, [pc, #284]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x77c>
 8004016:	e082      	b.n	800411e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	4b43      	ldr	r3, [pc, #268]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a42      	ldr	r2, [pc, #264]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd ffa6 	bl	8001f74 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd ffa2 	bl	8001f74 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e070      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800403e:	4b3a      	ldr	r3, [pc, #232]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x7b0>
 800404a:	e068      	b.n	800411e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800404c:	4b36      	ldr	r3, [pc, #216]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004052:	4b35      	ldr	r3, [pc, #212]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	2b01      	cmp	r3, #1
 800405e:	d031      	beq.n	80040c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0203 	and.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d12a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d122      	bne.n	80040c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004088:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d11a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	0a5b      	lsrs	r3, r3, #9
 8004092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d111      	bne.n	80040c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d108      	bne.n	80040c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0e1b      	lsrs	r3, r3, #24
 80040b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e02b      	b.n	8004120 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040c8:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 80040ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d01f      	beq.n	800411e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	4a11      	ldr	r2, [pc, #68]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ea:	f7fd ff43 	bl	8001f74 <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040f0:	bf00      	nop
 80040f2:	f7fd ff3f 	bl	8001f74 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d0f9      	beq.n	80040f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 8004100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004102:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <HAL_RCC_OscConfig+0x8b0>)
 8004104:	4013      	ands	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800410a:	00d2      	lsls	r2, r2, #3
 800410c:	4906      	ldr	r1, [pc, #24]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 800410e:	4313      	orrs	r3, r2
 8004110:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004112:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	4a04      	ldr	r2, [pc, #16]	@ (8004128 <HAL_RCC_OscConfig+0x8ac>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3730      	adds	r7, #48	@ 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	58024400 	.word	0x58024400
 800412c:	ffff0007 	.word	0xffff0007

08004130 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e19c      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b8a      	ldr	r3, [pc, #552]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d910      	bls.n	8004174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b87      	ldr	r3, [pc, #540]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 020f 	bic.w	r2, r3, #15
 800415a:	4985      	ldr	r1, [pc, #532]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b83      	ldr	r3, [pc, #524]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e184      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	4b7b      	ldr	r3, [pc, #492]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800418c:	429a      	cmp	r2, r3
 800418e:	d908      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004190:	4b78      	ldr	r3, [pc, #480]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4975      	ldr	r1, [pc, #468]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	4b70      	ldr	r3, [pc, #448]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d908      	bls.n	80041d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041be:	4b6d      	ldr	r3, [pc, #436]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	496a      	ldr	r1, [pc, #424]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	4b64      	ldr	r3, [pc, #400]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d908      	bls.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041ec:	4b61      	ldr	r3, [pc, #388]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	495e      	ldr	r1, [pc, #376]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	4b59      	ldr	r3, [pc, #356]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004216:	429a      	cmp	r2, r3
 8004218:	d908      	bls.n	800422c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800421a:	4b56      	ldr	r3, [pc, #344]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4953      	ldr	r1, [pc, #332]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004228:	4313      	orrs	r3, r2
 800422a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	4b4d      	ldr	r3, [pc, #308]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	429a      	cmp	r2, r3
 8004246:	d908      	bls.n	800425a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f023 020f 	bic.w	r2, r3, #15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4947      	ldr	r1, [pc, #284]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004256:	4313      	orrs	r3, r2
 8004258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d055      	beq.n	8004312 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004266:	4b43      	ldr	r3, [pc, #268]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4940      	ldr	r1, [pc, #256]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004274:	4313      	orrs	r3, r2
 8004276:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004280:	4b3c      	ldr	r3, [pc, #240]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d121      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0f6      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004298:	4b36      	ldr	r3, [pc, #216]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d115      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0ea      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042b0:	4b30      	ldr	r3, [pc, #192]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0de      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0d6      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d0:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f023 0207 	bic.w	r2, r3, #7
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4925      	ldr	r1, [pc, #148]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e2:	f7fd fe47 	bl	8001f74 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ea:	f7fd fe43 	bl	8001f74 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0be      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004300:	4b1c      	ldr	r3, [pc, #112]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	429a      	cmp	r2, r3
 8004310:	d1eb      	bne.n	80042ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	429a      	cmp	r2, r3
 800432c:	d208      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432e:	4b11      	ldr	r3, [pc, #68]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f023 020f 	bic.w	r2, r3, #15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	490e      	ldr	r1, [pc, #56]	@ (8004374 <HAL_RCC_ClockConfig+0x244>)
 800433c:	4313      	orrs	r3, r2
 800433e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d214      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4906      	ldr	r1, [pc, #24]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e086      	b.n	800447e <HAL_RCC_ClockConfig+0x34e>
 8004370:	52002000 	.word	0x52002000
 8004374:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004390:	429a      	cmp	r2, r3
 8004392:	d208      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004394:	4b3c      	ldr	r3, [pc, #240]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	4939      	ldr	r1, [pc, #228]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043be:	429a      	cmp	r2, r3
 80043c0:	d208      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043c2:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	492e      	ldr	r1, [pc, #184]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d010      	beq.n	8004402 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d208      	bcs.n	8004402 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4922      	ldr	r1, [pc, #136]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800441a:	429a      	cmp	r2, r3
 800441c:	d208      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800441e:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4917      	ldr	r1, [pc, #92]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 800442c:	4313      	orrs	r3, r2
 800442e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004430:	f000 f834 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4912      	ldr	r1, [pc, #72]	@ (800448c <HAL_RCC_ClockConfig+0x35c>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <HAL_RCC_ClockConfig+0x358>)
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	4a0d      	ldr	r2, [pc, #52]	@ (800448c <HAL_RCC_ClockConfig+0x35c>)
 8004458:	5cd3      	ldrb	r3, [r2, r3]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <HAL_RCC_ClockConfig+0x360>)
 8004466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004468:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <HAL_RCC_ClockConfig+0x364>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800446e:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <HAL_RCC_ClockConfig+0x368>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd fd34 	bl	8001ee0 <HAL_InitTick>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	58024400 	.word	0x58024400
 800448c:	0800905c 	.word	0x0800905c
 8004490:	24000004 	.word	0x24000004
 8004494:	24000000 	.word	0x24000000
 8004498:	24000008 	.word	0x24000008

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a2:	4bb3      	ldr	r3, [pc, #716]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044aa:	2b18      	cmp	r3, #24
 80044ac:	f200 8155 	bhi.w	800475a <HAL_RCC_GetSysClockFreq+0x2be>
 80044b0:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	0800475b 	.word	0x0800475b
 80044c0:	0800475b 	.word	0x0800475b
 80044c4:	0800475b 	.word	0x0800475b
 80044c8:	0800475b 	.word	0x0800475b
 80044cc:	0800475b 	.word	0x0800475b
 80044d0:	0800475b 	.word	0x0800475b
 80044d4:	0800475b 	.word	0x0800475b
 80044d8:	08004543 	.word	0x08004543
 80044dc:	0800475b 	.word	0x0800475b
 80044e0:	0800475b 	.word	0x0800475b
 80044e4:	0800475b 	.word	0x0800475b
 80044e8:	0800475b 	.word	0x0800475b
 80044ec:	0800475b 	.word	0x0800475b
 80044f0:	0800475b 	.word	0x0800475b
 80044f4:	0800475b 	.word	0x0800475b
 80044f8:	08004549 	.word	0x08004549
 80044fc:	0800475b 	.word	0x0800475b
 8004500:	0800475b 	.word	0x0800475b
 8004504:	0800475b 	.word	0x0800475b
 8004508:	0800475b 	.word	0x0800475b
 800450c:	0800475b 	.word	0x0800475b
 8004510:	0800475b 	.word	0x0800475b
 8004514:	0800475b 	.word	0x0800475b
 8004518:	0800454f 	.word	0x0800454f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451c:	4b94      	ldr	r3, [pc, #592]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004528:	4b91      	ldr	r3, [pc, #580]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	4a90      	ldr	r2, [pc, #576]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800453a:	e111      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800453c:	4b8d      	ldr	r3, [pc, #564]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800453e:	61bb      	str	r3, [r7, #24]
      break;
 8004540:	e10e      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004542:	4b8d      	ldr	r3, [pc, #564]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004544:	61bb      	str	r3, [r7, #24]
      break;
 8004546:	e10b      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004548:	4b8c      	ldr	r3, [pc, #560]	@ (800477c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800454a:	61bb      	str	r3, [r7, #24]
      break;
 800454c:	e108      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800454e:	4b88      	ldr	r3, [pc, #544]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004558:	4b85      	ldr	r3, [pc, #532]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004562:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004564:	4b82      	ldr	r3, [pc, #520]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800456e:	4b80      	ldr	r3, [pc, #512]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80e1 	beq.w	8004754 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCC_GetSysClockFreq+0x204>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCC_GetSysClockFreq+0x248>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x114>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d056      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ae:	e099      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02d      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b62      	ldr	r3, [pc, #392]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004616:	e087      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004784 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b51      	ldr	r3, [pc, #324]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a02 	vldr	s12, [r7, #8]
 800463e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800465a:	e065      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004788 <HAL_RCC_GetSysClockFreq+0x2ec>
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b40      	ldr	r3, [pc, #256]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004682:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800469e:	e043      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800478c <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046e2:	e021      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004788 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a02 	vldr	s12, [r7, #8]
 800470a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004726:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004728:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004732:	3301      	adds	r3, #1
 8004734:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004740:	edd7 6a07 	vldr	s13, [r7, #28]
 8004744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474c:	ee17 3a90 	vmov	r3, s15
 8004750:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004752:	e005      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
      break;
 8004758:	e002      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800475c:	61bb      	str	r3, [r7, #24]
      break;
 800475e:	bf00      	nop
  }

  return sysclockfreq;
 8004760:	69bb      	ldr	r3, [r7, #24]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	@ 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400
 8004774:	03d09000 	.word	0x03d09000
 8004778:	003d0900 	.word	0x003d0900
 800477c:	007a1200 	.word	0x007a1200
 8004780:	46000000 	.word	0x46000000
 8004784:	4c742400 	.word	0x4c742400
 8004788:	4a742400 	.word	0x4a742400
 800478c:	4af42400 	.word	0x4af42400

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004796:	f7ff fe81 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490f      	ldr	r1, [pc, #60]	@ (80047e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047b4:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	4a09      	ldr	r2, [pc, #36]	@ (80047e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a07      	ldr	r2, [pc, #28]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047ce:	4a07      	ldr	r2, [pc, #28]	@ (80047ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	58024400 	.word	0x58024400
 80047e4:	0800905c 	.word	0x0800905c
 80047e8:	24000004 	.word	0x24000004
 80047ec:	24000000 	.word	0x24000000

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047f4:	f7ff ffcc 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4904      	ldr	r1, [pc, #16]	@ (8004818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	58024400 	.word	0x58024400
 8004818:	0800905c 	.word	0x0800905c

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004820:	f7ff ffb6 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	@ (8004844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58024400 	.word	0x58024400
 8004844:	0800905c 	.word	0x0800905c

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800484c:	b0ca      	sub	sp, #296	@ 0x128
 800484e:	af00      	add	r7, sp, #0
 8004850:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800486c:	2500      	movs	r5, #0
 800486e:	ea54 0305 	orrs.w	r3, r4, r5
 8004872:	d049      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800487a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800487e:	d02f      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004880:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004884:	d828      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800488a:	d01a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800488c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004890:	d822      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489a:	d007      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800489c:	e01c      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489e:	4bb8      	ldr	r3, [pc, #736]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	4ab7      	ldr	r2, [pc, #732]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048aa:	e01a      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b0:	3308      	adds	r3, #8
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 fc8f 	bl	80061d8 <RCCEx_PLL2_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048c0:	e00f      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c6:	3328      	adds	r3, #40	@ 0x28
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fd36 	bl	800633c <RCCEx_PLL3_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048d6:	e004      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048ea:	4ba5      	ldr	r3, [pc, #660]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048f8:	4aa1      	ldr	r2, [pc, #644]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048fa:	430b      	orrs	r3, r1
 80048fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004914:	f04f 0900 	mov.w	r9, #0
 8004918:	ea58 0309 	orrs.w	r3, r8, r9
 800491c:	d047      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	2b04      	cmp	r3, #4
 8004926:	d82a      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004928:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004945 	.word	0x08004945
 8004934:	08004953 	.word	0x08004953
 8004938:	08004969 	.word	0x08004969
 800493c:	08004987 	.word	0x08004987
 8004940:	08004987 	.word	0x08004987
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4b8e      	ldr	r3, [pc, #568]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4a8d      	ldr	r2, [pc, #564]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004950:	e01a      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	3308      	adds	r3, #8
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fc3c 	bl	80061d8 <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004966:	e00f      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	3328      	adds	r3, #40	@ 0x28
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fce3 	bl	800633c <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800497c:	e004      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004990:	4b7b      	ldr	r3, [pc, #492]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	f023 0107 	bic.w	r1, r3, #7
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	4a78      	ldr	r2, [pc, #480]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049ba:	f04f 0b00 	mov.w	fp, #0
 80049be:	ea5a 030b 	orrs.w	r3, sl, fp
 80049c2:	d04c      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80049c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ce:	d030      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d4:	d829      	bhi.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d8:	d02d      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049da:	2bc0      	cmp	r3, #192	@ 0xc0
 80049dc:	d825      	bhi.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049de:	2b80      	cmp	r3, #128	@ 0x80
 80049e0:	d018      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d821      	bhi.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d007      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80049ee:	e01c      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f0:	4b63      	ldr	r3, [pc, #396]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	4a62      	ldr	r2, [pc, #392]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80049fc:	e01c      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	3308      	adds	r3, #8
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 fbe6 	bl	80061d8 <RCCEx_PLL2_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a12:	e011      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a18:	3328      	adds	r3, #40	@ 0x28
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 fc8d 	bl	800633c <RCCEx_PLL3_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a28:	e006      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a30:	e002      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a32:	bf00      	nop
 8004a34:	e000      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a40:	4b4f      	ldr	r3, [pc, #316]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004a74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d053      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a8a:	d035      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a90:	d82e      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a96:	d031      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a9c:	d828      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa2:	d01a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa8:	d822      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004aae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ab2:	d007      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ab4:	e01c      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab6:	4b32      	ldr	r3, [pc, #200]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aba:	4a31      	ldr	r2, [pc, #196]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ac2:	e01c      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	3308      	adds	r3, #8
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 fb83 	bl	80061d8 <RCCEx_PLL2_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ad8:	e011      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ade:	3328      	adds	r3, #40	@ 0x28
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 fc2a 	bl	800633c <RCCEx_PLL3_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004aee:	e006      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004af6:	e002      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b06:	4b1e      	ldr	r3, [pc, #120]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b16:	4a1a      	ldr	r2, [pc, #104]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b1c:	e003      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b40:	460b      	mov	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	d056      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b52:	d038      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b58:	d831      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b5e:	d034      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b64:	d82b      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b70:	d825      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d006      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b7c:	e01f      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b7e:	bf00      	nop
 8004b80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b84:	4ba2      	ldr	r3, [pc, #648]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	4aa1      	ldr	r2, [pc, #644]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b90:	e01c      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	3308      	adds	r3, #8
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 fb1c 	bl	80061d8 <RCCEx_PLL2_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ba6:	e011      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	3328      	adds	r3, #40	@ 0x28
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fbc3 	bl	800633c <RCCEx_PLL3_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e006      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bd4:	4b8e      	ldr	r3, [pc, #568]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004be4:	4a8a      	ldr	r2, [pc, #552]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bea:	e003      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c04:	2300      	movs	r3, #0
 8004c06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d03a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1a:	2b30      	cmp	r3, #48	@ 0x30
 8004c1c:	d01f      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c1e:	2b30      	cmp	r3, #48	@ 0x30
 8004c20:	d819      	bhi.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d00c      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d815      	bhi.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d019      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d111      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c32:	4b77      	ldr	r3, [pc, #476]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c36:	4a76      	ldr	r2, [pc, #472]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c3e:	e011      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	3308      	adds	r3, #8
 8004c46:	2102      	movs	r1, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 fac5 	bl	80061d8 <RCCEx_PLL2_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c6c:	4b68      	ldr	r3, [pc, #416]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7a:	4a65      	ldr	r2, [pc, #404]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c80:	e003      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ca0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	d051      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cb4:	d035      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cba:	d82e      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cc0:	d031      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004cc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cc6:	d828      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ccc:	d01a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd2:	d822      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cdc:	d007      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004cde:	e01c      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cec:	e01c      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 fa6e 	bl	80061d8 <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d02:	e011      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d08:	3328      	adds	r3, #40	@ 0x28
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fb15 	bl	800633c <RCCEx_PLL3_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d20:	e002      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d22:	bf00      	nop
 8004d24:	e000      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d30:	4b37      	ldr	r3, [pc, #220]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3e:	4a34      	ldr	r2, [pc, #208]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d056      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d78:	d033      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d7e:	d82c      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d84:	d02f      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d8a:	d826      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d90:	d02b      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004d92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d96:	d820      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d9c:	d012      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004da2:	d81a      	bhi.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d022      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dac:	d115      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db2:	3308      	adds	r3, #8
 8004db4:	2101      	movs	r1, #1
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 fa0e 	bl	80061d8 <RCCEx_PLL2_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dc2:	e015      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc8:	3328      	adds	r3, #40	@ 0x28
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 fab5 	bl	800633c <RCCEx_PLL3_Config>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004de0:	e006      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004de2:	bf00      	nop
 8004de4:	e004      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004de6:	bf00      	nop
 8004de8:	e002      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e06:	4a02      	ldr	r2, [pc, #8]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e0e:	bf00      	nop
 8004e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d055      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e48:	d033      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e4e:	d82c      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d02f      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5a:	d826      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e60:	d02b      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e66:	d820      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e6c:	d012      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e72:	d81a      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d022      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e7c:	d115      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	3308      	adds	r3, #8
 8004e84:	2101      	movs	r1, #1
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 f9a6 	bl	80061d8 <RCCEx_PLL2_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e92:	e015      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e98:	3328      	adds	r3, #40	@ 0x28
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fa4d 	bl	800633c <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eb0:	e006      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ec8:	4ba3      	ldr	r3, [pc, #652]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ed8:	4a9f      	ldr	r2, [pc, #636]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eda:	430b      	orrs	r3, r1
 8004edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ede:	e003      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d037      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f12:	d00e      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f18:	d816      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d018      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f22:	d111      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f24:	4b8c      	ldr	r3, [pc, #560]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	4a8b      	ldr	r2, [pc, #556]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f30:	e00f      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f36:	3308      	adds	r3, #8
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 f94c 	bl	80061d8 <RCCEx_PLL2_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f46:	e004      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f68:	4a7b      	ldr	r2, [pc, #492]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4313      	orrs	r3, r2
 8004f96:	d039      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d81c      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fe5 	.word	0x08004fe5
 8004fac:	08004fb9 	.word	0x08004fb9
 8004fb0:	08004fc7 	.word	0x08004fc7
 8004fb4:	08004fe5 	.word	0x08004fe5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb8:	4b67      	ldr	r3, [pc, #412]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	4a66      	ldr	r2, [pc, #408]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fc4:	e00f      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fca:	3308      	adds	r3, #8
 8004fcc:	2102      	movs	r1, #2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f902 	bl	80061d8 <RCCEx_PLL2_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fee:	4b5a      	ldr	r3, [pc, #360]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff2:	f023 0103 	bic.w	r1, r3, #3
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffc:	4a56      	ldr	r2, [pc, #344]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ffe:	430b      	orrs	r3, r1
 8005000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005002:	e003      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005018:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005022:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	f000 809f 	beq.w	800516c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800502e:	4b4b      	ldr	r3, [pc, #300]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4a      	ldr	r2, [pc, #296]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503a:	f7fc ff9b 	bl	8001f74 <HAL_GetTick>
 800503e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005042:	e00b      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fc ff96 	bl	8001f74 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b64      	cmp	r3, #100	@ 0x64
 8005052:	d903      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800505a:	e005      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505c:	4b3f      	ldr	r3, [pc, #252]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ed      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800506c:	2b00      	cmp	r3, #0
 800506e:	d179      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005070:	4b39      	ldr	r3, [pc, #228]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005072:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800507c:	4053      	eors	r3, r2
 800507e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d015      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005086:	4b34      	ldr	r3, [pc, #208]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	4a30      	ldr	r2, [pc, #192]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800509e:	4b2e      	ldr	r3, [pc, #184]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050be:	d118      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fc ff58 	bl	8001f74 <HAL_GetTick>
 80050c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050c8:	e00d      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fc ff53 	bl	8001f74 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80050d4:	1ad2      	subs	r2, r2, r3
 80050d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80050da:	429a      	cmp	r2, r3
 80050dc:	d903      	bls.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80050e4:	e005      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0eb      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80050f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d129      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800510a:	d10e      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800510c:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005118:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800511c:	091a      	lsrs	r2, r3, #4
 800511e:	4b10      	ldr	r3, [pc, #64]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005120:	4013      	ands	r3, r2
 8005122:	4a0d      	ldr	r2, [pc, #52]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005124:	430b      	orrs	r3, r1
 8005126:	6113      	str	r3, [r2, #16]
 8005128:	e005      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800512a:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005130:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005134:	6113      	str	r3, [r2, #16]
 8005136:	4b08      	ldr	r3, [pc, #32]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005138:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005148:	430b      	orrs	r3, r1
 800514a:	6713      	str	r3, [r2, #112]	@ 0x70
 800514c:	e00e      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800514e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005156:	e009      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005158:	58024400 	.word	0x58024400
 800515c:	58024800 	.word	0x58024800
 8005160:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f002 0301 	and.w	r3, r2, #1
 8005178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800517c:	2300      	movs	r3, #0
 800517e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005182:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	f000 8089 	beq.w	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005194:	2b28      	cmp	r3, #40	@ 0x28
 8005196:	d86b      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005198:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	08005279 	.word	0x08005279
 80051a4:	08005271 	.word	0x08005271
 80051a8:	08005271 	.word	0x08005271
 80051ac:	08005271 	.word	0x08005271
 80051b0:	08005271 	.word	0x08005271
 80051b4:	08005271 	.word	0x08005271
 80051b8:	08005271 	.word	0x08005271
 80051bc:	08005271 	.word	0x08005271
 80051c0:	08005245 	.word	0x08005245
 80051c4:	08005271 	.word	0x08005271
 80051c8:	08005271 	.word	0x08005271
 80051cc:	08005271 	.word	0x08005271
 80051d0:	08005271 	.word	0x08005271
 80051d4:	08005271 	.word	0x08005271
 80051d8:	08005271 	.word	0x08005271
 80051dc:	08005271 	.word	0x08005271
 80051e0:	0800525b 	.word	0x0800525b
 80051e4:	08005271 	.word	0x08005271
 80051e8:	08005271 	.word	0x08005271
 80051ec:	08005271 	.word	0x08005271
 80051f0:	08005271 	.word	0x08005271
 80051f4:	08005271 	.word	0x08005271
 80051f8:	08005271 	.word	0x08005271
 80051fc:	08005271 	.word	0x08005271
 8005200:	08005279 	.word	0x08005279
 8005204:	08005271 	.word	0x08005271
 8005208:	08005271 	.word	0x08005271
 800520c:	08005271 	.word	0x08005271
 8005210:	08005271 	.word	0x08005271
 8005214:	08005271 	.word	0x08005271
 8005218:	08005271 	.word	0x08005271
 800521c:	08005271 	.word	0x08005271
 8005220:	08005279 	.word	0x08005279
 8005224:	08005271 	.word	0x08005271
 8005228:	08005271 	.word	0x08005271
 800522c:	08005271 	.word	0x08005271
 8005230:	08005271 	.word	0x08005271
 8005234:	08005271 	.word	0x08005271
 8005238:	08005271 	.word	0x08005271
 800523c:	08005271 	.word	0x08005271
 8005240:	08005279 	.word	0x08005279
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005248:	3308      	adds	r3, #8
 800524a:	2101      	movs	r1, #1
 800524c:	4618      	mov	r0, r3
 800524e:	f000 ffc3 	bl	80061d8 <RCCEx_PLL2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005258:	e00f      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	3328      	adds	r3, #40	@ 0x28
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f001 f86a 	bl	800633c <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800526e:	e004      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005276:	e000      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005282:	4bbf      	ldr	r3, [pc, #764]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005290:	4abb      	ldr	r2, [pc, #748]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005292:	430b      	orrs	r3, r1
 8005294:	6553      	str	r3, [r2, #84]	@ 0x54
 8005296:	e003      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800529c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f002 0302 	and.w	r3, r2, #2
 80052ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052b0:	2300      	movs	r3, #0
 80052b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80052b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80052ba:	460b      	mov	r3, r1
 80052bc:	4313      	orrs	r3, r2
 80052be:	d041      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d824      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80052ca:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	0800531d 	.word	0x0800531d
 80052d4:	080052e9 	.word	0x080052e9
 80052d8:	080052ff 	.word	0x080052ff
 80052dc:	0800531d 	.word	0x0800531d
 80052e0:	0800531d 	.word	0x0800531d
 80052e4:	0800531d 	.word	0x0800531d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ec:	3308      	adds	r3, #8
 80052ee:	2101      	movs	r1, #1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 ff71 	bl	80061d8 <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052fc:	e00f      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005302:	3328      	adds	r3, #40	@ 0x28
 8005304:	2101      	movs	r1, #1
 8005306:	4618      	mov	r0, r3
 8005308:	f001 f818 	bl	800633c <RCCEx_PLL3_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005312:	e004      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800531a:	e000      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800531c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005326:	4b96      	ldr	r3, [pc, #600]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532a:	f023 0107 	bic.w	r1, r3, #7
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005334:	4a92      	ldr	r2, [pc, #584]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005336:	430b      	orrs	r3, r1
 8005338:	6553      	str	r3, [r2, #84]	@ 0x54
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 0304 	and.w	r3, r2, #4
 8005350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800535a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d044      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800536c:	2b05      	cmp	r3, #5
 800536e:	d825      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005370:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	080053c5 	.word	0x080053c5
 800537c:	08005391 	.word	0x08005391
 8005380:	080053a7 	.word	0x080053a7
 8005384:	080053c5 	.word	0x080053c5
 8005388:	080053c5 	.word	0x080053c5
 800538c:	080053c5 	.word	0x080053c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005394:	3308      	adds	r3, #8
 8005396:	2101      	movs	r1, #1
 8005398:	4618      	mov	r0, r3
 800539a:	f000 ff1d 	bl	80061d8 <RCCEx_PLL2_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053a4:	e00f      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053aa:	3328      	adds	r3, #40	@ 0x28
 80053ac:	2101      	movs	r1, #1
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 ffc4 	bl	800633c <RCCEx_PLL3_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053ba:	e004      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80053c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d2:	f023 0107 	bic.w	r1, r3, #7
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053de:	4a68      	ldr	r2, [pc, #416]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e4:	e003      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f002 0320 	and.w	r3, r2, #32
 80053fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005408:	460b      	mov	r3, r1
 800540a:	4313      	orrs	r3, r2
 800540c:	d055      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800541a:	d033      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800541c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005420:	d82c      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d02f      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d826      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800542e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005432:	d02b      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005434:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005438:	d820      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800543a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800543e:	d012      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005444:	d81a      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d022      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800544a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800544e:	d115      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	3308      	adds	r3, #8
 8005456:	2100      	movs	r1, #0
 8005458:	4618      	mov	r0, r3
 800545a:	f000 febd 	bl	80061d8 <RCCEx_PLL2_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005464:	e015      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546a:	3328      	adds	r3, #40	@ 0x28
 800546c:	2102      	movs	r1, #2
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ff64 	bl	800633c <RCCEx_PLL3_Config>
 8005474:	4603      	mov	r3, r0
 8005476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800547a:	e00a      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005482:	e006      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005484:	bf00      	nop
 8005486:	e004      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005488:	bf00      	nop
 800548a:	e002      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800548c:	bf00      	nop
 800548e:	e000      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800549a:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800549c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a35      	ldr	r2, [pc, #212]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80054b0:	e003      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d058      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054e6:	d033      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80054e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054ec:	d82c      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f2:	d02f      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f8:	d826      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80054fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054fe:	d02b      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005500:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005504:	d820      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800550a:	d012      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800550c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005510:	d81a      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d022      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551a:	d115      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800551c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005520:	3308      	adds	r3, #8
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fe57 	bl	80061d8 <RCCEx_PLL2_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005530:	e015      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005536:	3328      	adds	r3, #40	@ 0x28
 8005538:	2102      	movs	r1, #2
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fefe 	bl	800633c <RCCEx_PLL3_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005546:	e00a      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800554e:	e006      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005550:	bf00      	nop
 8005552:	e004      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005554:	bf00      	nop
 8005556:	e002      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800555c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10e      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005566:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005576:	4a02      	ldr	r2, [pc, #8]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005578:	430b      	orrs	r3, r1
 800557a:	6593      	str	r3, [r2, #88]	@ 0x58
 800557c:	e006      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800557e:	bf00      	nop
 8005580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d055      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055b8:	d033      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80055ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055be:	d82c      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c4:	d02f      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ca:	d826      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055d0:	d02b      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80055d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055d6:	d820      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055dc:	d012      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80055de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e2:	d81a      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d022      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ec:	d115      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	3308      	adds	r3, #8
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fdee 	bl	80061d8 <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005602:	e015      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005608:	3328      	adds	r3, #40	@ 0x28
 800560a:	2102      	movs	r1, #2
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fe95 	bl	800633c <RCCEx_PLL3_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005618:	e00a      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005620:	e006      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005622:	bf00      	nop
 8005624:	e004      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005626:	bf00      	nop
 8005628:	e002      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800562e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005638:	4ba1      	ldr	r3, [pc, #644]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800563a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005644:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005648:	4a9d      	ldr	r2, [pc, #628]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800564a:	430b      	orrs	r3, r1
 800564c:	6593      	str	r3, [r2, #88]	@ 0x58
 800564e:	e003      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f002 0308 	and.w	r3, r2, #8
 8005664:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005668:	2300      	movs	r3, #0
 800566a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800566e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005672:	460b      	mov	r3, r1
 8005674:	4313      	orrs	r3, r2
 8005676:	d01e      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005684:	d10c      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568a:	3328      	adds	r3, #40	@ 0x28
 800568c:	2102      	movs	r1, #2
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fe54 	bl	800633c <RCCEx_PLL3_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056a0:	4b87      	ldr	r3, [pc, #540]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056b0:	4a83      	ldr	r2, [pc, #524]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b2:	430b      	orrs	r3, r1
 80056b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f002 0310 	and.w	r3, r2, #16
 80056c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d01e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e2:	d10c      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e8:	3328      	adds	r3, #40	@ 0x28
 80056ea:	2102      	movs	r1, #2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fe25 	bl	800633c <RCCEx_PLL3_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056fe:	4b70      	ldr	r3, [pc, #448]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800570e:	4a6c      	ldr	r2, [pc, #432]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005710:	430b      	orrs	r3, r1
 8005712:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800572a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d03e      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800573c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005740:	d022      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005746:	d81b      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005750:	d00b      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005752:	e015      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005758:	3308      	adds	r3, #8
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fd3b 	bl	80061d8 <RCCEx_PLL2_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005768:	e00f      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	3328      	adds	r3, #40	@ 0x28
 8005770:	2102      	movs	r1, #2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fde2 	bl	800633c <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800577e:	e004      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800578a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005792:	4b4b      	ldr	r3, [pc, #300]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005796:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057a2:	4a47      	ldr	r2, [pc, #284]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80057a8:	e003      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057c0:	2300      	movs	r3, #0
 80057c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d03b      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057da:	d01f      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80057dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057e0:	d818      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80057e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e6:	d003      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80057e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ec:	d007      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80057ee:	e011      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b33      	ldr	r3, [pc, #204]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	4a32      	ldr	r2, [pc, #200]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80057fc:	e00f      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005802:	3328      	adds	r3, #40	@ 0x28
 8005804:	2101      	movs	r1, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fd98 	bl	800633c <RCCEx_PLL3_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005812:	e004      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800581c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005826:	4b26      	ldr	r3, [pc, #152]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005836:	4a22      	ldr	r2, [pc, #136]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005838:	430b      	orrs	r3, r1
 800583a:	6553      	str	r3, [r2, #84]	@ 0x54
 800583c:	e003      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005852:	673b      	str	r3, [r7, #112]	@ 0x70
 8005854:	2300      	movs	r3, #0
 8005856:	677b      	str	r3, [r7, #116]	@ 0x74
 8005858:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d034      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005870:	d007      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005872:	e011      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005874:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800587a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800587e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005880:	e00e      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005886:	3308      	adds	r3, #8
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fca4 	bl	80061d8 <RCCEx_PLL2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800589e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10d      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b6:	4a02      	ldr	r2, [pc, #8]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058b8:	430b      	orrs	r3, r1
 80058ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058bc:	e006      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80058be:	bf00      	nop
 80058c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80058d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058da:	2300      	movs	r3, #0
 80058dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d00c      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ec:	3328      	adds	r3, #40	@ 0x28
 80058ee:	2102      	movs	r1, #2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fd23 	bl	800633c <RCCEx_PLL3_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800590e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005910:	2300      	movs	r3, #0
 8005912:	667b      	str	r3, [r7, #100]	@ 0x64
 8005914:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005918:	460b      	mov	r3, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	d038      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800592a:	d018      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800592c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005930:	d811      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005936:	d014      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800593c:	d80b      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d011      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005946:	d106      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005948:	4bc3      	ldr	r3, [pc, #780]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	4ac2      	ldr	r2, [pc, #776]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800594e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005954:	e008      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800595c:	e004      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800595e:	bf00      	nop
 8005960:	e002      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005970:	4bb9      	ldr	r3, [pc, #740]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005974:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005980:	4ab5      	ldr	r2, [pc, #724]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005982:	430b      	orrs	r3, r1
 8005984:	6553      	str	r3, [r2, #84]	@ 0x54
 8005986:	e003      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800599c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800599e:	2300      	movs	r3, #0
 80059a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d009      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059ac:	4baa      	ldr	r3, [pc, #680]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ba:	4aa7      	ldr	r2, [pc, #668]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059bc:	430b      	orrs	r3, r1
 80059be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80059cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ce:	2300      	movs	r3, #0
 80059d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80059d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059dc:	4b9e      	ldr	r3, [pc, #632]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059ec:	4a9a      	ldr	r2, [pc, #616]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ee:	430b      	orrs	r3, r1
 80059f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80059fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a00:	2300      	movs	r3, #0
 8005a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a0e:	4b92      	ldr	r3, [pc, #584]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a12:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a1c:	4a8e      	ldr	r2, [pc, #568]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a30:	2300      	movs	r3, #0
 8005a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a3e:	4b86      	ldr	r3, [pc, #536]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	4a85      	ldr	r2, [pc, #532]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a48:	6113      	str	r3, [r2, #16]
 8005a4a:	4b83      	ldr	r3, [pc, #524]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a4c:	6919      	ldr	r1, [r3, #16]
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a56:	4a80      	ldr	r2, [pc, #512]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a78:	4b77      	ldr	r3, [pc, #476]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a7c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a86:	4a74      	ldr	r2, [pc, #464]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ab8:	4a67      	ldr	r2, [pc, #412]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	d011      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	3308      	adds	r3, #8
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fb78 	bl	80061d8 <RCCEx_PLL2_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	2100      	movs	r1, #0
 8005b08:	6239      	str	r1, [r7, #32]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b14:	460b      	mov	r3, r1
 8005b16:	4313      	orrs	r3, r2
 8005b18:	d011      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	3308      	adds	r3, #8
 8005b20:	2101      	movs	r1, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fb58 	bl	80061d8 <RCCEx_PLL2_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	2100      	movs	r1, #0
 8005b48:	61b9      	str	r1, [r7, #24]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d011      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	3308      	adds	r3, #8
 8005b60:	2102      	movs	r1, #2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fb38 	bl	80061d8 <RCCEx_PLL2_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	2100      	movs	r1, #0
 8005b88:	6139      	str	r1, [r7, #16]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b94:	460b      	mov	r3, r1
 8005b96:	4313      	orrs	r3, r2
 8005b98:	d011      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9e:	3328      	adds	r3, #40	@ 0x28
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fbca 	bl	800633c <RCCEx_PLL3_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	d011      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	3328      	adds	r3, #40	@ 0x28
 8005be0:	2101      	movs	r1, #1
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fbaa 	bl	800633c <RCCEx_PLL3_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	2100      	movs	r1, #0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c14:	460b      	mov	r3, r1
 8005c16:	4313      	orrs	r3, r2
 8005c18:	d011      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	3328      	adds	r3, #40	@ 0x28
 8005c20:	2102      	movs	r1, #2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fb8a 	bl	800633c <RCCEx_PLL3_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005c3e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005c52:	46bd      	mov	sp, r7
 8005c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c58:	58024400 	.word	0x58024400

08005c5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c60:	f7fe fd96 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4904      	ldr	r1, [pc, #16]	@ (8005c84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58024400 	.word	0x58024400
 8005c84:	0800905c 	.word	0x0800905c

08005c88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b089      	sub	sp, #36	@ 0x24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c90:	4ba1      	ldr	r3, [pc, #644]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	0b1b      	lsrs	r3, r3, #12
 8005ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ca4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cb2:	4b99      	ldr	r3, [pc, #612]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8111 	beq.w	8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	f000 8083 	beq.w	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	f200 80a1 	bhi.w	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d056      	beq.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cf2:	e099      	b.n	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf4:	4b88      	ldr	r3, [pc, #544]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d02d      	beq.n	8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d00:	4b85      	ldr	r3, [pc, #532]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	08db      	lsrs	r3, r3, #3
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	4a84      	ldr	r2, [pc, #528]	@ (8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d5a:	e087      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d9e:	e065      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b59      	ldr	r3, [pc, #356]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de2:	e043      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b48      	ldr	r3, [pc, #288]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e26:	e021      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	0a5b      	lsrs	r3, r3, #9
 8005e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e92:	ee17 2a90 	vmov	r2, s15
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	0c1b      	lsrs	r3, r3, #16
 8005ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec0:	ee17 2a90 	vmov	r2, s15
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ec8:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	0e1b      	lsrs	r3, r3, #24
 8005ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eee:	ee17 2a90 	vmov	r2, s15
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ef6:	e008      	b.n	8005f0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
}
 8005f0a:	bf00      	nop
 8005f0c:	3724      	adds	r7, #36	@ 0x24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	03d09000 	.word	0x03d09000
 8005f20:	46000000 	.word	0x46000000
 8005f24:	4c742400 	.word	0x4c742400
 8005f28:	4a742400 	.word	0x4a742400
 8005f2c:	4af42400 	.word	0x4af42400

08005f30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	@ 0x24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f38:	4ba1      	ldr	r3, [pc, #644]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f42:	4b9f      	ldr	r3, [pc, #636]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	0d1b      	lsrs	r3, r3, #20
 8005f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f4e:	4b9c      	ldr	r3, [pc, #624]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f5a:	4b99      	ldr	r3, [pc, #612]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	08db      	lsrs	r3, r3, #3
 8005f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8111 	beq.w	80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	f000 8083 	beq.w	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	f200 80a1 	bhi.w	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d056      	beq.n	8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f9a:	e099      	b.n	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9c:	4b88      	ldr	r3, [pc, #544]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02d      	beq.n	8006004 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fa8:	4b85      	ldr	r3, [pc, #532]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	08db      	lsrs	r3, r3, #3
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	4a84      	ldr	r2, [pc, #528]	@ (80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006002:	e087      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b6a      	ldr	r3, [pc, #424]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a03 	vldr	s12, [r7, #12]
 800602a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	e065      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b59      	ldr	r3, [pc, #356]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a03 	vldr	s12, [r7, #12]
 800606e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608a:	e043      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b48      	ldr	r3, [pc, #288]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ce:	e021      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e2:	4b37      	ldr	r3, [pc, #220]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006112:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006114:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	0a5b      	lsrs	r3, r3, #9
 800611a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800612a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800612e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800613a:	ee17 2a90 	vmov	r2, s15
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006142:	4b1f      	ldr	r3, [pc, #124]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	0c1b      	lsrs	r3, r3, #16
 8006148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800614c:	ee07 3a90 	vmov	s15, r3
 8006150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006154:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800615c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006168:	ee17 2a90 	vmov	r2, s15
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006170:	4b13      	ldr	r3, [pc, #76]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	0e1b      	lsrs	r3, r3, #24
 8006176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800618a:	edd7 6a07 	vldr	s13, [r7, #28]
 800618e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006196:	ee17 2a90 	vmov	r2, s15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	609a      	str	r2, [r3, #8]
}
 80061b2:	bf00      	nop
 80061b4:	3724      	adds	r7, #36	@ 0x24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
 80061c4:	03d09000 	.word	0x03d09000
 80061c8:	46000000 	.word	0x46000000
 80061cc:	4c742400 	.word	0x4c742400
 80061d0:	4a742400 	.word	0x4a742400
 80061d4:	4af42400 	.word	0x4af42400

080061d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061e6:	4b53      	ldr	r3, [pc, #332]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d101      	bne.n	80061f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e099      	b.n	800632a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a4e      	ldr	r2, [pc, #312]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006202:	f7fb feb7 	bl	8001f74 <HAL_GetTick>
 8006206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006208:	e008      	b.n	800621c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800620a:	f7fb feb3 	bl	8001f74 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e086      	b.n	800632a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800621c:	4b45      	ldr	r3, [pc, #276]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f0      	bne.n	800620a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006228:	4b42      	ldr	r3, [pc, #264]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	031b      	lsls	r3, r3, #12
 8006236:	493f      	ldr	r1, [pc, #252]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 8006238:	4313      	orrs	r3, r2
 800623a:	628b      	str	r3, [r1, #40]	@ 0x28
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	3b01      	subs	r3, #1
 8006242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	3b01      	subs	r3, #1
 800624c:	025b      	lsls	r3, r3, #9
 800624e:	b29b      	uxth	r3, r3
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	3b01      	subs	r3, #1
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	3b01      	subs	r3, #1
 8006266:	061b      	lsls	r3, r3, #24
 8006268:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800626c:	4931      	ldr	r1, [pc, #196]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 800626e:	4313      	orrs	r3, r2
 8006270:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006272:	4b30      	ldr	r3, [pc, #192]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	492d      	ldr	r1, [pc, #180]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 8006280:	4313      	orrs	r3, r2
 8006282:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006284:	4b2b      	ldr	r3, [pc, #172]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	f023 0220 	bic.w	r2, r3, #32
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	4928      	ldr	r1, [pc, #160]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006296:	4b27      	ldr	r3, [pc, #156]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	4a26      	ldr	r2, [pc, #152]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 800629c:	f023 0310 	bic.w	r3, r3, #16
 80062a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062a6:	4b24      	ldr	r3, [pc, #144]	@ (8006338 <RCCEx_PLL2_Config+0x160>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	69d2      	ldr	r2, [r2, #28]
 80062ae:	00d2      	lsls	r2, r2, #3
 80062b0:	4920      	ldr	r1, [pc, #128]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	f043 0310 	orr.w	r3, r3, #16
 80062c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	4a19      	ldr	r2, [pc, #100]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062d4:	e00f      	b.n	80062f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d106      	bne.n	80062ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062dc:	4b15      	ldr	r3, [pc, #84]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	4a14      	ldr	r2, [pc, #80]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062e8:	e005      	b.n	80062f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062ea:	4b12      	ldr	r3, [pc, #72]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	4a11      	ldr	r2, [pc, #68]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 80062fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006302:	f7fb fe37 	bl	8001f74 <HAL_GetTick>
 8006306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006308:	e008      	b.n	800631c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800630a:	f7fb fe33 	bl	8001f74 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e006      	b.n	800632a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800631c:	4b05      	ldr	r3, [pc, #20]	@ (8006334 <RCCEx_PLL2_Config+0x15c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0f0      	beq.n	800630a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	58024400 	.word	0x58024400
 8006338:	ffff0007 	.word	0xffff0007

0800633c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800634a:	4b53      	ldr	r3, [pc, #332]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	2b03      	cmp	r3, #3
 8006354:	d101      	bne.n	800635a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e099      	b.n	800648e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800635a:	4b4f      	ldr	r3, [pc, #316]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a4e      	ldr	r2, [pc, #312]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006366:	f7fb fe05 	bl	8001f74 <HAL_GetTick>
 800636a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800636c:	e008      	b.n	8006380 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800636e:	f7fb fe01 	bl	8001f74 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e086      	b.n	800648e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006380:	4b45      	ldr	r3, [pc, #276]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f0      	bne.n	800636e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800638c:	4b42      	ldr	r3, [pc, #264]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 800638e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006390:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	051b      	lsls	r3, r3, #20
 800639a:	493f      	ldr	r1, [pc, #252]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 800639c:	4313      	orrs	r3, r2
 800639e:	628b      	str	r3, [r1, #40]	@ 0x28
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	061b      	lsls	r3, r3, #24
 80063cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063d0:	4931      	ldr	r1, [pc, #196]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063d6:	4b30      	ldr	r3, [pc, #192]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	492d      	ldr	r1, [pc, #180]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	4928      	ldr	r1, [pc, #160]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063fa:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	4a26      	ldr	r2, [pc, #152]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006404:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006406:	4b24      	ldr	r3, [pc, #144]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800640a:	4b24      	ldr	r3, [pc, #144]	@ (800649c <RCCEx_PLL3_Config+0x160>)
 800640c:	4013      	ands	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	69d2      	ldr	r2, [r2, #28]
 8006412:	00d2      	lsls	r2, r2, #3
 8006414:	4920      	ldr	r1, [pc, #128]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006416:	4313      	orrs	r3, r2
 8006418:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800641a:	4b1f      	ldr	r3, [pc, #124]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	4a1e      	ldr	r2, [pc, #120]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800642c:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006432:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006436:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006438:	e00f      	b.n	800645a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d106      	bne.n	800644e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006440:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	4a14      	ldr	r2, [pc, #80]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006446:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800644a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800644c:	e005      	b.n	800645a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800644e:	4b12      	ldr	r3, [pc, #72]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	4a11      	ldr	r2, [pc, #68]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006458:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800645a:	4b0f      	ldr	r3, [pc, #60]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a0e      	ldr	r2, [pc, #56]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006466:	f7fb fd85 	bl	8001f74 <HAL_GetTick>
 800646a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800646c:	e008      	b.n	8006480 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800646e:	f7fb fd81 	bl	8001f74 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d901      	bls.n	8006480 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e006      	b.n	800648e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006480:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <RCCEx_PLL3_Config+0x15c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f0      	beq.n	800646e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	58024400 	.word	0x58024400
 800649c:	ffff0007 	.word	0xffff0007

080064a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e10f      	b.n	80066d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a87      	ldr	r2, [pc, #540]	@ (80066dc <HAL_SPI_Init+0x23c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00f      	beq.n	80064e2 <HAL_SPI_Init+0x42>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a86      	ldr	r2, [pc, #536]	@ (80066e0 <HAL_SPI_Init+0x240>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00a      	beq.n	80064e2 <HAL_SPI_Init+0x42>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a84      	ldr	r2, [pc, #528]	@ (80066e4 <HAL_SPI_Init+0x244>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d005      	beq.n	80064e2 <HAL_SPI_Init+0x42>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	2b0f      	cmp	r3, #15
 80064dc:	d901      	bls.n	80064e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e0f7      	b.n	80066d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fe2e 	bl	8007144 <SPI_GetPacketSize>
 80064e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a7b      	ldr	r2, [pc, #492]	@ (80066dc <HAL_SPI_Init+0x23c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00c      	beq.n	800650e <HAL_SPI_Init+0x6e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a79      	ldr	r2, [pc, #484]	@ (80066e0 <HAL_SPI_Init+0x240>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <HAL_SPI_Init+0x6e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a78      	ldr	r2, [pc, #480]	@ (80066e4 <HAL_SPI_Init+0x244>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d002      	beq.n	800650e <HAL_SPI_Init+0x6e>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b08      	cmp	r3, #8
 800650c:	d811      	bhi.n	8006532 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006512:	4a72      	ldr	r2, [pc, #456]	@ (80066dc <HAL_SPI_Init+0x23c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d009      	beq.n	800652c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a70      	ldr	r2, [pc, #448]	@ (80066e0 <HAL_SPI_Init+0x240>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <HAL_SPI_Init+0x8c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a6f      	ldr	r2, [pc, #444]	@ (80066e4 <HAL_SPI_Init+0x244>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d104      	bne.n	8006536 <HAL_SPI_Init+0x96>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b10      	cmp	r3, #16
 8006530:	d901      	bls.n	8006536 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0cd      	b.n	80066d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fb f9ce 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006572:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800657c:	d119      	bne.n	80065b2 <HAL_SPI_Init+0x112>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006586:	d103      	bne.n	8006590 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10c      	bne.n	80065b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800659c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065a0:	d107      	bne.n	80065b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00f      	beq.n	80065de <HAL_SPI_Init+0x13e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b06      	cmp	r3, #6
 80065c4:	d90b      	bls.n	80065de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e007      	b.n	80065ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69da      	ldr	r2, [r3, #28]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006600:	ea42 0103 	orr.w	r1, r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664e:	ea42 0103 	orr.w	r1, r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d113      	bne.n	800668e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006678:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800668c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40013000 	.word	0x40013000
 80066e0:	40003800 	.word	0x40003800
 80066e4:	40003c00 	.word	0x40003c00

080066e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3320      	adds	r3, #32
 80066fe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006700:	f7fb fc38 	bl	8001f74 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b01      	cmp	r3, #1
 8006710:	d001      	beq.n	8006716 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006712:	2302      	movs	r3, #2
 8006714:	e1d1      	b.n	8006aba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_Transmit+0x3a>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e1c9      	b.n	8006aba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_SPI_Transmit+0x4c>
 8006730:	2302      	movs	r3, #2
 8006732:	e1c2      	b.n	8006aba <HAL_SPI_Transmit+0x3d2>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2203      	movs	r2, #3
 8006740:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800678c:	d108      	bne.n	80067a0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	e009      	b.n	80067b4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80067b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	4b96      	ldr	r3, [pc, #600]	@ (8006a14 <HAL_SPI_Transmit+0x32c>)
 80067bc:	4013      	ands	r3, r2
 80067be:	88f9      	ldrh	r1, [r7, #6]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067e0:	d107      	bne.n	80067f2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d947      	bls.n	800688a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80067fa:	e03f      	b.n	800687c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d114      	bne.n	8006834 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006832:	e023      	b.n	800687c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006834:	f7fb fb9e 	bl	8001f74 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d803      	bhi.n	800684c <HAL_SPI_Transmit+0x164>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d102      	bne.n	8006852 <HAL_SPI_Transmit+0x16a>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d114      	bne.n	800687c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fba8 	bl	8006fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800685e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e11e      	b.n	8006aba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1b9      	bne.n	80067fc <HAL_SPI_Transmit+0x114>
 8006888:	e0f1      	b.n	8006a6e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b07      	cmp	r3, #7
 8006890:	f240 80e6 	bls.w	8006a60 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006894:	e05d      	b.n	8006952 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d132      	bne.n	800690a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d918      	bls.n	80068e2 <HAL_SPI_Transmit+0x1fa>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d014      	beq.n	80068e2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b02      	subs	r3, #2
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068e0:	e037      	b.n	8006952 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e6:	881a      	ldrh	r2, [r3, #0]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f0:	1c9a      	adds	r2, r3, #2
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006908:	e023      	b.n	8006952 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800690a:	f7fb fb33 	bl	8001f74 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d803      	bhi.n	8006922 <HAL_SPI_Transmit+0x23a>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d102      	bne.n	8006928 <HAL_SPI_Transmit+0x240>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d114      	bne.n	8006952 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fb3d 	bl	8006fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006934:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e0b3      	b.n	8006aba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d19b      	bne.n	8006896 <HAL_SPI_Transmit+0x1ae>
 800695e:	e086      	b.n	8006a6e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d154      	bne.n	8006a18 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d918      	bls.n	80069ac <HAL_SPI_Transmit+0x2c4>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697e:	2b40      	cmp	r3, #64	@ 0x40
 8006980:	d914      	bls.n	80069ac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006992:	1d1a      	adds	r2, r3, #4
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b04      	subs	r3, #4
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069aa:	e059      	b.n	8006a60 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d917      	bls.n	80069e8 <HAL_SPI_Transmit+0x300>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c4:	881a      	ldrh	r2, [r3, #0]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ce:	1c9a      	adds	r2, r3, #2
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b02      	subs	r3, #2
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069e6:	e03b      	b.n	8006a60 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3320      	adds	r3, #32
 80069f2:	7812      	ldrb	r2, [r2, #0]
 80069f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006a12:	e025      	b.n	8006a60 <HAL_SPI_Transmit+0x378>
 8006a14:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a18:	f7fb faac 	bl	8001f74 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d803      	bhi.n	8006a30 <HAL_SPI_Transmit+0x348>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d102      	bne.n	8006a36 <HAL_SPI_Transmit+0x34e>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d114      	bne.n	8006a60 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fab6 	bl	8006fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e02c      	b.n	8006aba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f47f af79 	bne.w	8006960 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2200      	movs	r2, #0
 8006a76:	2108      	movs	r1, #8
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fb35 	bl	80070e8 <SPI_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8a:	f043 0220 	orr.w	r2, r3, #32
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fa87 	bl	8006fa8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
  }
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop

08006ac4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3301      	adds	r3, #1
 8006ade:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3330      	adds	r3, #48	@ 0x30
 8006ae6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ae8:	f7fb fa44 	bl	8001f74 <HAL_GetTick>
 8006aec:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d001      	beq.n	8006afe <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
 8006afc:	e250      	b.n	8006fa0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <HAL_SPI_Receive+0x46>
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e248      	b.n	8006fa0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_SPI_Receive+0x58>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e241      	b.n	8006fa0 <HAL_SPI_Receive+0x4dc>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2204      	movs	r2, #4
 8006b28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	88fa      	ldrh	r2, [r7, #6]
 8006b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	88fa      	ldrh	r2, [r7, #6]
 8006b46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006b74:	d108      	bne.n	8006b88 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e009      	b.n	8006b9c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b9a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4b95      	ldr	r3, [pc, #596]	@ (8006df8 <HAL_SPI_Receive+0x334>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	88f9      	ldrh	r1, [r7, #6]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bc8:	d107      	bne.n	8006bda <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bd8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d96c      	bls.n	8006cbc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006be2:	e064      	b.n	8006cae <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d114      	bne.n	8006c24 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c04:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0a:	1d1a      	adds	r2, r3, #4
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c22:	e044      	b.n	8006cae <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8bfa      	ldrh	r2, [r7, #30]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d919      	bls.n	8006c66 <HAL_SPI_Receive+0x1a2>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d014      	beq.n	8006c66 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c46:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c4c:	1d1a      	adds	r2, r3, #4
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c64:	e023      	b.n	8006cae <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c66:	f7fb f985 	bl	8001f74 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d803      	bhi.n	8006c7e <HAL_SPI_Receive+0x1ba>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d102      	bne.n	8006c84 <HAL_SPI_Receive+0x1c0>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d114      	bne.n	8006cae <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f98f 	bl	8006fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e178      	b.n	8006fa0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d194      	bne.n	8006be4 <HAL_SPI_Receive+0x120>
 8006cba:	e15e      	b.n	8006f7a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2b07      	cmp	r3, #7
 8006cc2:	f240 8153 	bls.w	8006f6c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006cc6:	e08f      	b.n	8006de8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d114      	bne.n	8006d08 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	8812      	ldrh	r2, [r2, #0]
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cee:	1c9a      	adds	r2, r3, #2
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d06:	e06f      	b.n	8006de8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8bfa      	ldrh	r2, [r7, #30]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d924      	bls.n	8006d60 <HAL_SPI_Receive+0x29c>
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01f      	beq.n	8006d60 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	8812      	ldrh	r2, [r2, #0]
 8006d28:	b292      	uxth	r2, r2
 8006d2a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d30:	1c9a      	adds	r2, r3, #2
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	8812      	ldrh	r2, [r2, #0]
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d46:	1c9a      	adds	r2, r3, #2
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b02      	subs	r3, #2
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d5e:	e043      	b.n	8006de8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d119      	bne.n	8006da0 <HAL_SPI_Receive+0x2dc>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d014      	beq.n	8006da0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	8812      	ldrh	r2, [r2, #0]
 8006d7e:	b292      	uxth	r2, r2
 8006d80:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d86:	1c9a      	adds	r2, r3, #2
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d9e:	e023      	b.n	8006de8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da0:	f7fb f8e8 	bl	8001f74 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d803      	bhi.n	8006db8 <HAL_SPI_Receive+0x2f4>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d102      	bne.n	8006dbe <HAL_SPI_Receive+0x2fa>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d114      	bne.n	8006de8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f8f2 	bl	8006fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e0db      	b.n	8006fa0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f47f af69 	bne.w	8006cc8 <HAL_SPI_Receive+0x204>
 8006df6:	e0c0      	b.n	8006f7a <HAL_SPI_Receive+0x4b6>
 8006df8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d117      	bne.n	8006e42 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e1e:	7812      	ldrb	r2, [r2, #0]
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006e40:	e094      	b.n	8006f6c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8bfa      	ldrh	r2, [r7, #30]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d946      	bls.n	8006ede <HAL_SPI_Receive+0x41a>
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d041      	beq.n	8006ede <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e66:	7812      	ldrb	r2, [r2, #0]
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eba:	7812      	ldrb	r2, [r2, #0]
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b04      	subs	r3, #4
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006edc:	e046      	b.n	8006f6c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d81c      	bhi.n	8006f24 <HAL_SPI_Receive+0x460>
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d017      	beq.n	8006f24 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f00:	7812      	ldrb	r2, [r2, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f22:	e023      	b.n	8006f6c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f24:	f7fb f826 	bl	8001f74 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d803      	bhi.n	8006f3c <HAL_SPI_Receive+0x478>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d102      	bne.n	8006f42 <HAL_SPI_Receive+0x47e>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d114      	bne.n	8006f6c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f830 	bl	8006fa8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e019      	b.n	8006fa0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f af41 	bne.w	8006dfc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f814 	bl	8006fa8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3720      	adds	r7, #32
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0208 	orr.w	r2, r2, #8
 8006fc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0210 	orr.w	r2, r2, #16
 8006fd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6919      	ldr	r1, [r3, #16]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80070e4 <SPI_CloseTransfer+0x13c>)
 8006ff4:	400b      	ands	r3, r1
 8006ff6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007006:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b04      	cmp	r3, #4
 8007012:	d014      	beq.n	800703e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00f      	beq.n	800703e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007024:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0220 	orr.w	r2, r2, #32
 800703c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d014      	beq.n	8007074 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00f      	beq.n	8007074 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800705a:	f043 0204 	orr.w	r2, r3, #4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007072:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00f      	beq.n	800709e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007084:	f043 0201 	orr.w	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800709c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00f      	beq.n	80070c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ae:	f043 0208 	orr.w	r2, r3, #8
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	fffffc90 	.word	0xfffffc90

080070e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80070f8:	e010      	b.n	800711c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070fa:	f7fa ff3b 	bl	8001f74 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d803      	bhi.n	8007112 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d102      	bne.n	8007118 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e00f      	b.n	800713c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4013      	ands	r3, r2
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	429a      	cmp	r2, r3
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	429a      	cmp	r2, r3
 8007138:	d0df      	beq.n	80070fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	3301      	adds	r3, #1
 800715c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	3307      	adds	r3, #7
 8007162:	08db      	lsrs	r3, r3, #3
 8007164:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	fb02 f303 	mul.w	r3, r2, r3
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e042      	b.n	8007212 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fa fc32 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	@ 0x24
 80071a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fee7 	bl	8007f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f97c 	bl	80074c8 <UART_SetConfig>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e01b      	b.n	8007212 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 ff66 	bl	80080dc <UART_CheckIdleState>
 8007210:	4603      	mov	r3, r0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b08a      	sub	sp, #40	@ 0x28
 800721e:	af02      	add	r7, sp, #8
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	4613      	mov	r3, r2
 8007228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007230:	2b20      	cmp	r3, #32
 8007232:	d17b      	bne.n	800732c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_UART_Transmit+0x26>
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e074      	b.n	800732e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2221      	movs	r2, #33	@ 0x21
 8007250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007254:	f7fa fe8e 	bl	8001f74 <HAL_GetTick>
 8007258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007272:	d108      	bne.n	8007286 <HAL_UART_Transmit+0x6c>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e003      	b.n	800728e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800728e:	e030      	b.n	80072f2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	2180      	movs	r1, #128	@ 0x80
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 ffc8 	bl	8008230 <UART_WaitOnFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e03d      	b.n	800732e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10b      	bne.n	80072d0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	3302      	adds	r3, #2
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e007      	b.n	80072e0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	3301      	adds	r3, #1
 80072de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1c8      	bne.n	8007290 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2200      	movs	r2, #0
 8007306:	2140      	movs	r1, #64	@ 0x40
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 ff91 	bl	8008230 <UART_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e006      	b.n	800732e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	e000      	b.n	800732e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800732c:	2302      	movs	r3, #2
  }
}
 800732e:	4618      	mov	r0, r3
 8007330:	3720      	adds	r7, #32
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b08a      	sub	sp, #40	@ 0x28
 800733a:	af02      	add	r7, sp, #8
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	4613      	mov	r3, r2
 8007344:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800734c:	2b20      	cmp	r3, #32
 800734e:	f040 80b5 	bne.w	80074bc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <HAL_UART_Receive+0x28>
 8007358:	88fb      	ldrh	r3, [r7, #6]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e0ad      	b.n	80074be <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2222      	movs	r2, #34	@ 0x22
 800736e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007378:	f7fa fdfc 	bl	8001f74 <HAL_GetTick>
 800737c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007396:	d10e      	bne.n	80073b6 <HAL_UART_Receive+0x80>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d105      	bne.n	80073ac <HAL_UART_Receive+0x76>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073aa:	e02d      	b.n	8007408 <HAL_UART_Receive+0xd2>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	22ff      	movs	r2, #255	@ 0xff
 80073b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073b4:	e028      	b.n	8007408 <HAL_UART_Receive+0xd2>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10d      	bne.n	80073da <HAL_UART_Receive+0xa4>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <HAL_UART_Receive+0x9a>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	22ff      	movs	r2, #255	@ 0xff
 80073ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073ce:	e01b      	b.n	8007408 <HAL_UART_Receive+0xd2>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	227f      	movs	r2, #127	@ 0x7f
 80073d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073d8:	e016      	b.n	8007408 <HAL_UART_Receive+0xd2>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e2:	d10d      	bne.n	8007400 <HAL_UART_Receive+0xca>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <HAL_UART_Receive+0xc0>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	227f      	movs	r2, #127	@ 0x7f
 80073f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073f4:	e008      	b.n	8007408 <HAL_UART_Receive+0xd2>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	223f      	movs	r2, #63	@ 0x3f
 80073fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80073fe:	e003      	b.n	8007408 <HAL_UART_Receive+0xd2>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800740e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007418:	d108      	bne.n	800742c <HAL_UART_Receive+0xf6>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	e003      	b.n	8007434 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007430:	2300      	movs	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007434:	e036      	b.n	80074a4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2200      	movs	r2, #0
 800743e:	2120      	movs	r1, #32
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fef5 	bl	8008230 <UART_WaitOnFlagUntilTimeout>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e032      	b.n	80074be <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10c      	bne.n	8007478 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	b29a      	uxth	r2, r3
 8007466:	8a7b      	ldrh	r3, [r7, #18]
 8007468:	4013      	ands	r3, r2
 800746a:	b29a      	uxth	r2, r3
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	3302      	adds	r3, #2
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	e00c      	b.n	8007492 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747e:	b2da      	uxtb	r2, r3
 8007480:	8a7b      	ldrh	r3, [r7, #18]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4013      	ands	r3, r2
 8007486:	b2da      	uxtb	r2, r3
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007498:	b29b      	uxth	r3, r3
 800749a:	3b01      	subs	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1c2      	bne.n	8007436 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074cc:	b092      	sub	sp, #72	@ 0x48
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4bbe      	ldr	r3, [pc, #760]	@ (80077f0 <UART_SetConfig+0x328>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007500:	430b      	orrs	r3, r1
 8007502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4ab3      	ldr	r2, [pc, #716]	@ (80077f4 <UART_SetConfig+0x32c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007530:	4313      	orrs	r3, r2
 8007532:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	4baf      	ldr	r3, [pc, #700]	@ (80077f8 <UART_SetConfig+0x330>)
 800753c:	4013      	ands	r3, r2
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007544:	430b      	orrs	r3, r1
 8007546:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	f023 010f 	bic.w	r1, r3, #15
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4aa6      	ldr	r2, [pc, #664]	@ (80077fc <UART_SetConfig+0x334>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d177      	bne.n	8007658 <UART_SetConfig+0x190>
 8007568:	4ba5      	ldr	r3, [pc, #660]	@ (8007800 <UART_SetConfig+0x338>)
 800756a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800756c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007570:	2b28      	cmp	r3, #40	@ 0x28
 8007572:	d86d      	bhi.n	8007650 <UART_SetConfig+0x188>
 8007574:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <UART_SetConfig+0xb4>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	08007621 	.word	0x08007621
 8007580:	08007651 	.word	0x08007651
 8007584:	08007651 	.word	0x08007651
 8007588:	08007651 	.word	0x08007651
 800758c:	08007651 	.word	0x08007651
 8007590:	08007651 	.word	0x08007651
 8007594:	08007651 	.word	0x08007651
 8007598:	08007651 	.word	0x08007651
 800759c:	08007629 	.word	0x08007629
 80075a0:	08007651 	.word	0x08007651
 80075a4:	08007651 	.word	0x08007651
 80075a8:	08007651 	.word	0x08007651
 80075ac:	08007651 	.word	0x08007651
 80075b0:	08007651 	.word	0x08007651
 80075b4:	08007651 	.word	0x08007651
 80075b8:	08007651 	.word	0x08007651
 80075bc:	08007631 	.word	0x08007631
 80075c0:	08007651 	.word	0x08007651
 80075c4:	08007651 	.word	0x08007651
 80075c8:	08007651 	.word	0x08007651
 80075cc:	08007651 	.word	0x08007651
 80075d0:	08007651 	.word	0x08007651
 80075d4:	08007651 	.word	0x08007651
 80075d8:	08007651 	.word	0x08007651
 80075dc:	08007639 	.word	0x08007639
 80075e0:	08007651 	.word	0x08007651
 80075e4:	08007651 	.word	0x08007651
 80075e8:	08007651 	.word	0x08007651
 80075ec:	08007651 	.word	0x08007651
 80075f0:	08007651 	.word	0x08007651
 80075f4:	08007651 	.word	0x08007651
 80075f8:	08007651 	.word	0x08007651
 80075fc:	08007641 	.word	0x08007641
 8007600:	08007651 	.word	0x08007651
 8007604:	08007651 	.word	0x08007651
 8007608:	08007651 	.word	0x08007651
 800760c:	08007651 	.word	0x08007651
 8007610:	08007651 	.word	0x08007651
 8007614:	08007651 	.word	0x08007651
 8007618:	08007651 	.word	0x08007651
 800761c:	08007649 	.word	0x08007649
 8007620:	2301      	movs	r3, #1
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007626:	e222      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007628:	2304      	movs	r3, #4
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762e:	e21e      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007630:	2308      	movs	r3, #8
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007636:	e21a      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007638:	2310      	movs	r3, #16
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763e:	e216      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007640:	2320      	movs	r3, #32
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e212      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007648:	2340      	movs	r3, #64	@ 0x40
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e20e      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007650:	2380      	movs	r3, #128	@ 0x80
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007656:	e20a      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a69      	ldr	r2, [pc, #420]	@ (8007804 <UART_SetConfig+0x33c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d130      	bne.n	80076c4 <UART_SetConfig+0x1fc>
 8007662:	4b67      	ldr	r3, [pc, #412]	@ (8007800 <UART_SetConfig+0x338>)
 8007664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	2b05      	cmp	r3, #5
 800766c:	d826      	bhi.n	80076bc <UART_SetConfig+0x1f4>
 800766e:	a201      	add	r2, pc, #4	@ (adr r2, 8007674 <UART_SetConfig+0x1ac>)
 8007670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007674:	0800768d 	.word	0x0800768d
 8007678:	08007695 	.word	0x08007695
 800767c:	0800769d 	.word	0x0800769d
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076ad 	.word	0x080076ad
 8007688:	080076b5 	.word	0x080076b5
 800768c:	2300      	movs	r3, #0
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007692:	e1ec      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007694:	2304      	movs	r3, #4
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e1e8      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800769c:	2308      	movs	r3, #8
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e1e4      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80076a4:	2310      	movs	r3, #16
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e1e0      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80076ac:	2320      	movs	r3, #32
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e1dc      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80076b4:	2340      	movs	r3, #64	@ 0x40
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e1d8      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80076bc:	2380      	movs	r3, #128	@ 0x80
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e1d4      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a4f      	ldr	r2, [pc, #316]	@ (8007808 <UART_SetConfig+0x340>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d130      	bne.n	8007730 <UART_SetConfig+0x268>
 80076ce:	4b4c      	ldr	r3, [pc, #304]	@ (8007800 <UART_SetConfig+0x338>)
 80076d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	2b05      	cmp	r3, #5
 80076d8:	d826      	bhi.n	8007728 <UART_SetConfig+0x260>
 80076da:	a201      	add	r2, pc, #4	@ (adr r2, 80076e0 <UART_SetConfig+0x218>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	080076f9 	.word	0x080076f9
 80076e4:	08007701 	.word	0x08007701
 80076e8:	08007709 	.word	0x08007709
 80076ec:	08007711 	.word	0x08007711
 80076f0:	08007719 	.word	0x08007719
 80076f4:	08007721 	.word	0x08007721
 80076f8:	2300      	movs	r3, #0
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e1b6      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007700:	2304      	movs	r3, #4
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e1b2      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007708:	2308      	movs	r3, #8
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e1ae      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007710:	2310      	movs	r3, #16
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e1aa      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007718:	2320      	movs	r3, #32
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e1a6      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007720:	2340      	movs	r3, #64	@ 0x40
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e1a2      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007728:	2380      	movs	r3, #128	@ 0x80
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e19e      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a35      	ldr	r2, [pc, #212]	@ (800780c <UART_SetConfig+0x344>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d130      	bne.n	800779c <UART_SetConfig+0x2d4>
 800773a:	4b31      	ldr	r3, [pc, #196]	@ (8007800 <UART_SetConfig+0x338>)
 800773c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	2b05      	cmp	r3, #5
 8007744:	d826      	bhi.n	8007794 <UART_SetConfig+0x2cc>
 8007746:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <UART_SetConfig+0x284>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	08007765 	.word	0x08007765
 8007750:	0800776d 	.word	0x0800776d
 8007754:	08007775 	.word	0x08007775
 8007758:	0800777d 	.word	0x0800777d
 800775c:	08007785 	.word	0x08007785
 8007760:	0800778d 	.word	0x0800778d
 8007764:	2300      	movs	r3, #0
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776a:	e180      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800776c:	2304      	movs	r3, #4
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e17c      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007774:	2308      	movs	r3, #8
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e178      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800777c:	2310      	movs	r3, #16
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e174      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007784:	2320      	movs	r3, #32
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e170      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800778c:	2340      	movs	r3, #64	@ 0x40
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e16c      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007794:	2380      	movs	r3, #128	@ 0x80
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e168      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007810 <UART_SetConfig+0x348>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d142      	bne.n	800782c <UART_SetConfig+0x364>
 80077a6:	4b16      	ldr	r3, [pc, #88]	@ (8007800 <UART_SetConfig+0x338>)
 80077a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d838      	bhi.n	8007824 <UART_SetConfig+0x35c>
 80077b2:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <UART_SetConfig+0x2f0>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077d1 	.word	0x080077d1
 80077bc:	080077d9 	.word	0x080077d9
 80077c0:	080077e1 	.word	0x080077e1
 80077c4:	080077e9 	.word	0x080077e9
 80077c8:	08007815 	.word	0x08007815
 80077cc:	0800781d 	.word	0x0800781d
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e14a      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80077d8:	2304      	movs	r3, #4
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e146      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80077e0:	2308      	movs	r3, #8
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e142      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80077e8:	2310      	movs	r3, #16
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e13e      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80077f0:	cfff69f3 	.word	0xcfff69f3
 80077f4:	58000c00 	.word	0x58000c00
 80077f8:	11fff4ff 	.word	0x11fff4ff
 80077fc:	40011000 	.word	0x40011000
 8007800:	58024400 	.word	0x58024400
 8007804:	40004400 	.word	0x40004400
 8007808:	40004800 	.word	0x40004800
 800780c:	40004c00 	.word	0x40004c00
 8007810:	40005000 	.word	0x40005000
 8007814:	2320      	movs	r3, #32
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e128      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800781c:	2340      	movs	r3, #64	@ 0x40
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007822:	e124      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007824:	2380      	movs	r3, #128	@ 0x80
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e120      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4acb      	ldr	r2, [pc, #812]	@ (8007b60 <UART_SetConfig+0x698>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d176      	bne.n	8007924 <UART_SetConfig+0x45c>
 8007836:	4bcb      	ldr	r3, [pc, #812]	@ (8007b64 <UART_SetConfig+0x69c>)
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800783e:	2b28      	cmp	r3, #40	@ 0x28
 8007840:	d86c      	bhi.n	800791c <UART_SetConfig+0x454>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <UART_SetConfig+0x380>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	080078ed 	.word	0x080078ed
 800784c:	0800791d 	.word	0x0800791d
 8007850:	0800791d 	.word	0x0800791d
 8007854:	0800791d 	.word	0x0800791d
 8007858:	0800791d 	.word	0x0800791d
 800785c:	0800791d 	.word	0x0800791d
 8007860:	0800791d 	.word	0x0800791d
 8007864:	0800791d 	.word	0x0800791d
 8007868:	080078f5 	.word	0x080078f5
 800786c:	0800791d 	.word	0x0800791d
 8007870:	0800791d 	.word	0x0800791d
 8007874:	0800791d 	.word	0x0800791d
 8007878:	0800791d 	.word	0x0800791d
 800787c:	0800791d 	.word	0x0800791d
 8007880:	0800791d 	.word	0x0800791d
 8007884:	0800791d 	.word	0x0800791d
 8007888:	080078fd 	.word	0x080078fd
 800788c:	0800791d 	.word	0x0800791d
 8007890:	0800791d 	.word	0x0800791d
 8007894:	0800791d 	.word	0x0800791d
 8007898:	0800791d 	.word	0x0800791d
 800789c:	0800791d 	.word	0x0800791d
 80078a0:	0800791d 	.word	0x0800791d
 80078a4:	0800791d 	.word	0x0800791d
 80078a8:	08007905 	.word	0x08007905
 80078ac:	0800791d 	.word	0x0800791d
 80078b0:	0800791d 	.word	0x0800791d
 80078b4:	0800791d 	.word	0x0800791d
 80078b8:	0800791d 	.word	0x0800791d
 80078bc:	0800791d 	.word	0x0800791d
 80078c0:	0800791d 	.word	0x0800791d
 80078c4:	0800791d 	.word	0x0800791d
 80078c8:	0800790d 	.word	0x0800790d
 80078cc:	0800791d 	.word	0x0800791d
 80078d0:	0800791d 	.word	0x0800791d
 80078d4:	0800791d 	.word	0x0800791d
 80078d8:	0800791d 	.word	0x0800791d
 80078dc:	0800791d 	.word	0x0800791d
 80078e0:	0800791d 	.word	0x0800791d
 80078e4:	0800791d 	.word	0x0800791d
 80078e8:	08007915 	.word	0x08007915
 80078ec:	2301      	movs	r3, #1
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e0bc      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80078f4:	2304      	movs	r3, #4
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e0b8      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80078fc:	2308      	movs	r3, #8
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e0b4      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007904:	2310      	movs	r3, #16
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e0b0      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800790c:	2320      	movs	r3, #32
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e0ac      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007914:	2340      	movs	r3, #64	@ 0x40
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e0a8      	b.n	8007a6e <UART_SetConfig+0x5a6>
 800791c:	2380      	movs	r3, #128	@ 0x80
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e0a4      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a8f      	ldr	r2, [pc, #572]	@ (8007b68 <UART_SetConfig+0x6a0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d130      	bne.n	8007990 <UART_SetConfig+0x4c8>
 800792e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b64 <UART_SetConfig+0x69c>)
 8007930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	2b05      	cmp	r3, #5
 8007938:	d826      	bhi.n	8007988 <UART_SetConfig+0x4c0>
 800793a:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <UART_SetConfig+0x478>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007959 	.word	0x08007959
 8007944:	08007961 	.word	0x08007961
 8007948:	08007969 	.word	0x08007969
 800794c:	08007971 	.word	0x08007971
 8007950:	08007979 	.word	0x08007979
 8007954:	08007981 	.word	0x08007981
 8007958:	2300      	movs	r3, #0
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e086      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007960:	2304      	movs	r3, #4
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e082      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007968:	2308      	movs	r3, #8
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e07e      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007970:	2310      	movs	r3, #16
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e07a      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007978:	2320      	movs	r3, #32
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e076      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007980:	2340      	movs	r3, #64	@ 0x40
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e072      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007988:	2380      	movs	r3, #128	@ 0x80
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798e:	e06e      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a75      	ldr	r2, [pc, #468]	@ (8007b6c <UART_SetConfig+0x6a4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d130      	bne.n	80079fc <UART_SetConfig+0x534>
 800799a:	4b72      	ldr	r3, [pc, #456]	@ (8007b64 <UART_SetConfig+0x69c>)
 800799c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d826      	bhi.n	80079f4 <UART_SetConfig+0x52c>
 80079a6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <UART_SetConfig+0x4e4>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079c5 	.word	0x080079c5
 80079b0:	080079cd 	.word	0x080079cd
 80079b4:	080079d5 	.word	0x080079d5
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079e5 	.word	0x080079e5
 80079c0:	080079ed 	.word	0x080079ed
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e050      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80079cc:	2304      	movs	r3, #4
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e04c      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80079d4:	2308      	movs	r3, #8
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e048      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80079dc:	2310      	movs	r3, #16
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e044      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80079e4:	2320      	movs	r3, #32
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ea:	e040      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80079ec:	2340      	movs	r3, #64	@ 0x40
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f2:	e03c      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80079f4:	2380      	movs	r3, #128	@ 0x80
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fa:	e038      	b.n	8007a6e <UART_SetConfig+0x5a6>
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a5b      	ldr	r2, [pc, #364]	@ (8007b70 <UART_SetConfig+0x6a8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d130      	bne.n	8007a68 <UART_SetConfig+0x5a0>
 8007a06:	4b57      	ldr	r3, [pc, #348]	@ (8007b64 <UART_SetConfig+0x69c>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d826      	bhi.n	8007a60 <UART_SetConfig+0x598>
 8007a12:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <UART_SetConfig+0x550>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a31 	.word	0x08007a31
 8007a1c:	08007a39 	.word	0x08007a39
 8007a20:	08007a41 	.word	0x08007a41
 8007a24:	08007a49 	.word	0x08007a49
 8007a28:	08007a51 	.word	0x08007a51
 8007a2c:	08007a59 	.word	0x08007a59
 8007a30:	2302      	movs	r3, #2
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e01a      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007a38:	2304      	movs	r3, #4
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e016      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007a40:	2308      	movs	r3, #8
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e012      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007a48:	2310      	movs	r3, #16
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e00e      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007a50:	2320      	movs	r3, #32
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e00a      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007a58:	2340      	movs	r3, #64	@ 0x40
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5e:	e006      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007a60:	2380      	movs	r3, #128	@ 0x80
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a66:	e002      	b.n	8007a6e <UART_SetConfig+0x5a6>
 8007a68:	2380      	movs	r3, #128	@ 0x80
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a3f      	ldr	r2, [pc, #252]	@ (8007b70 <UART_SetConfig+0x6a8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	f040 80f8 	bne.w	8007c6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	dc46      	bgt.n	8007b10 <UART_SetConfig+0x648>
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	f2c0 8082 	blt.w	8007b8c <UART_SetConfig+0x6c4>
 8007a88:	3b02      	subs	r3, #2
 8007a8a:	2b1e      	cmp	r3, #30
 8007a8c:	d87e      	bhi.n	8007b8c <UART_SetConfig+0x6c4>
 8007a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <UART_SetConfig+0x5cc>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007b17 	.word	0x08007b17
 8007a98:	08007b8d 	.word	0x08007b8d
 8007a9c:	08007b1f 	.word	0x08007b1f
 8007aa0:	08007b8d 	.word	0x08007b8d
 8007aa4:	08007b8d 	.word	0x08007b8d
 8007aa8:	08007b8d 	.word	0x08007b8d
 8007aac:	08007b2f 	.word	0x08007b2f
 8007ab0:	08007b8d 	.word	0x08007b8d
 8007ab4:	08007b8d 	.word	0x08007b8d
 8007ab8:	08007b8d 	.word	0x08007b8d
 8007abc:	08007b8d 	.word	0x08007b8d
 8007ac0:	08007b8d 	.word	0x08007b8d
 8007ac4:	08007b8d 	.word	0x08007b8d
 8007ac8:	08007b8d 	.word	0x08007b8d
 8007acc:	08007b3f 	.word	0x08007b3f
 8007ad0:	08007b8d 	.word	0x08007b8d
 8007ad4:	08007b8d 	.word	0x08007b8d
 8007ad8:	08007b8d 	.word	0x08007b8d
 8007adc:	08007b8d 	.word	0x08007b8d
 8007ae0:	08007b8d 	.word	0x08007b8d
 8007ae4:	08007b8d 	.word	0x08007b8d
 8007ae8:	08007b8d 	.word	0x08007b8d
 8007aec:	08007b8d 	.word	0x08007b8d
 8007af0:	08007b8d 	.word	0x08007b8d
 8007af4:	08007b8d 	.word	0x08007b8d
 8007af8:	08007b8d 	.word	0x08007b8d
 8007afc:	08007b8d 	.word	0x08007b8d
 8007b00:	08007b8d 	.word	0x08007b8d
 8007b04:	08007b8d 	.word	0x08007b8d
 8007b08:	08007b8d 	.word	0x08007b8d
 8007b0c:	08007b7f 	.word	0x08007b7f
 8007b10:	2b40      	cmp	r3, #64	@ 0x40
 8007b12:	d037      	beq.n	8007b84 <UART_SetConfig+0x6bc>
 8007b14:	e03a      	b.n	8007b8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b16:	f7fe f8a1 	bl	8005c5c <HAL_RCCEx_GetD3PCLK1Freq>
 8007b1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b1c:	e03c      	b.n	8007b98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe f8b0 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b2c:	e034      	b.n	8007b98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2e:	f107 0318 	add.w	r3, r7, #24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe f9fc 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b3c:	e02c      	b.n	8007b98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b3e:	4b09      	ldr	r3, [pc, #36]	@ (8007b64 <UART_SetConfig+0x69c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b4a:	4b06      	ldr	r3, [pc, #24]	@ (8007b64 <UART_SetConfig+0x69c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	08db      	lsrs	r3, r3, #3
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	4a07      	ldr	r2, [pc, #28]	@ (8007b74 <UART_SetConfig+0x6ac>)
 8007b56:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b5c:	e01c      	b.n	8007b98 <UART_SetConfig+0x6d0>
 8007b5e:	bf00      	nop
 8007b60:	40011400 	.word	0x40011400
 8007b64:	58024400 	.word	0x58024400
 8007b68:	40007800 	.word	0x40007800
 8007b6c:	40007c00 	.word	0x40007c00
 8007b70:	58000c00 	.word	0x58000c00
 8007b74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b78:	4b9d      	ldr	r3, [pc, #628]	@ (8007df0 <UART_SetConfig+0x928>)
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b7c:	e00c      	b.n	8007b98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b7e:	4b9d      	ldr	r3, [pc, #628]	@ (8007df4 <UART_SetConfig+0x92c>)
 8007b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b82:	e009      	b.n	8007b98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8a:	e005      	b.n	8007b98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 81de 	beq.w	8007f5c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba4:	4a94      	ldr	r2, [pc, #592]	@ (8007df8 <UART_SetConfig+0x930>)
 8007ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	4413      	add	r3, r2
 8007bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d305      	bcc.n	8007bd0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d903      	bls.n	8007bd8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bd6:	e1c1      	b.n	8007f5c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bda:	2200      	movs	r2, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
 8007bde:	60fa      	str	r2, [r7, #12]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	4a84      	ldr	r2, [pc, #528]	@ (8007df8 <UART_SetConfig+0x930>)
 8007be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2200      	movs	r2, #0
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bfa:	f7f8 fbc9 	bl	8000390 <__aeabi_uldivmod>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4610      	mov	r0, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	f04f 0300 	mov.w	r3, #0
 8007c0e:	020b      	lsls	r3, r1, #8
 8007c10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c14:	0202      	lsls	r2, r0, #8
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	6849      	ldr	r1, [r1, #4]
 8007c1a:	0849      	lsrs	r1, r1, #1
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	4605      	mov	r5, r0
 8007c22:	eb12 0804 	adds.w	r8, r2, r4
 8007c26:	eb43 0905 	adc.w	r9, r3, r5
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	469a      	mov	sl, r3
 8007c32:	4693      	mov	fp, r2
 8007c34:	4652      	mov	r2, sl
 8007c36:	465b      	mov	r3, fp
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 fba8 	bl	8000390 <__aeabi_uldivmod>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4613      	mov	r3, r2
 8007c46:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c4e:	d308      	bcc.n	8007c62 <UART_SetConfig+0x79a>
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c56:	d204      	bcs.n	8007c62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c5e:	60da      	str	r2, [r3, #12]
 8007c60:	e17c      	b.n	8007f5c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c68:	e178      	b.n	8007f5c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c72:	f040 80c5 	bne.w	8007e00 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	dc48      	bgt.n	8007d10 <UART_SetConfig+0x848>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	db7b      	blt.n	8007d7a <UART_SetConfig+0x8b2>
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d879      	bhi.n	8007d7a <UART_SetConfig+0x8b2>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <UART_SetConfig+0x7c4>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007d17 	.word	0x08007d17
 8007c90:	08007d1f 	.word	0x08007d1f
 8007c94:	08007d7b 	.word	0x08007d7b
 8007c98:	08007d7b 	.word	0x08007d7b
 8007c9c:	08007d27 	.word	0x08007d27
 8007ca0:	08007d7b 	.word	0x08007d7b
 8007ca4:	08007d7b 	.word	0x08007d7b
 8007ca8:	08007d7b 	.word	0x08007d7b
 8007cac:	08007d37 	.word	0x08007d37
 8007cb0:	08007d7b 	.word	0x08007d7b
 8007cb4:	08007d7b 	.word	0x08007d7b
 8007cb8:	08007d7b 	.word	0x08007d7b
 8007cbc:	08007d7b 	.word	0x08007d7b
 8007cc0:	08007d7b 	.word	0x08007d7b
 8007cc4:	08007d7b 	.word	0x08007d7b
 8007cc8:	08007d7b 	.word	0x08007d7b
 8007ccc:	08007d47 	.word	0x08007d47
 8007cd0:	08007d7b 	.word	0x08007d7b
 8007cd4:	08007d7b 	.word	0x08007d7b
 8007cd8:	08007d7b 	.word	0x08007d7b
 8007cdc:	08007d7b 	.word	0x08007d7b
 8007ce0:	08007d7b 	.word	0x08007d7b
 8007ce4:	08007d7b 	.word	0x08007d7b
 8007ce8:	08007d7b 	.word	0x08007d7b
 8007cec:	08007d7b 	.word	0x08007d7b
 8007cf0:	08007d7b 	.word	0x08007d7b
 8007cf4:	08007d7b 	.word	0x08007d7b
 8007cf8:	08007d7b 	.word	0x08007d7b
 8007cfc:	08007d7b 	.word	0x08007d7b
 8007d00:	08007d7b 	.word	0x08007d7b
 8007d04:	08007d7b 	.word	0x08007d7b
 8007d08:	08007d7b 	.word	0x08007d7b
 8007d0c:	08007d6d 	.word	0x08007d6d
 8007d10:	2b40      	cmp	r3, #64	@ 0x40
 8007d12:	d02e      	beq.n	8007d72 <UART_SetConfig+0x8aa>
 8007d14:	e031      	b.n	8007d7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d16:	f7fc fd6b 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8007d1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d1c:	e033      	b.n	8007d86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d1e:	f7fc fd7d 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8007d22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d24:	e02f      	b.n	8007d86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fd ffac 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d34:	e027      	b.n	8007d86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d36:	f107 0318 	add.w	r3, r7, #24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe f8f8 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d44:	e01f      	b.n	8007d86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d46:	4b2d      	ldr	r3, [pc, #180]	@ (8007dfc <UART_SetConfig+0x934>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d009      	beq.n	8007d66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d52:	4b2a      	ldr	r3, [pc, #168]	@ (8007dfc <UART_SetConfig+0x934>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	08db      	lsrs	r3, r3, #3
 8007d58:	f003 0303 	and.w	r3, r3, #3
 8007d5c:	4a24      	ldr	r2, [pc, #144]	@ (8007df0 <UART_SetConfig+0x928>)
 8007d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d64:	e00f      	b.n	8007d86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d66:	4b22      	ldr	r3, [pc, #136]	@ (8007df0 <UART_SetConfig+0x928>)
 8007d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d6a:	e00c      	b.n	8007d86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d6c:	4b21      	ldr	r3, [pc, #132]	@ (8007df4 <UART_SetConfig+0x92c>)
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d70:	e009      	b.n	8007d86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d78:	e005      	b.n	8007d86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80e7 	beq.w	8007f5c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d92:	4a19      	ldr	r2, [pc, #100]	@ (8007df8 <UART_SetConfig+0x930>)
 8007d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007da0:	005a      	lsls	r2, r3, #1
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	441a      	add	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db6:	2b0f      	cmp	r3, #15
 8007db8:	d916      	bls.n	8007de8 <UART_SetConfig+0x920>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc0:	d212      	bcs.n	8007de8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f023 030f 	bic.w	r3, r3, #15
 8007dca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	e0b9      	b.n	8007f5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007dee:	e0b5      	b.n	8007f5c <UART_SetConfig+0xa94>
 8007df0:	03d09000 	.word	0x03d09000
 8007df4:	003d0900 	.word	0x003d0900
 8007df8:	0800907c 	.word	0x0800907c
 8007dfc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	dc49      	bgt.n	8007e9c <UART_SetConfig+0x9d4>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	db7c      	blt.n	8007f06 <UART_SetConfig+0xa3e>
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d87a      	bhi.n	8007f06 <UART_SetConfig+0xa3e>
 8007e10:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <UART_SetConfig+0x950>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007ea3 	.word	0x08007ea3
 8007e1c:	08007eab 	.word	0x08007eab
 8007e20:	08007f07 	.word	0x08007f07
 8007e24:	08007f07 	.word	0x08007f07
 8007e28:	08007eb3 	.word	0x08007eb3
 8007e2c:	08007f07 	.word	0x08007f07
 8007e30:	08007f07 	.word	0x08007f07
 8007e34:	08007f07 	.word	0x08007f07
 8007e38:	08007ec3 	.word	0x08007ec3
 8007e3c:	08007f07 	.word	0x08007f07
 8007e40:	08007f07 	.word	0x08007f07
 8007e44:	08007f07 	.word	0x08007f07
 8007e48:	08007f07 	.word	0x08007f07
 8007e4c:	08007f07 	.word	0x08007f07
 8007e50:	08007f07 	.word	0x08007f07
 8007e54:	08007f07 	.word	0x08007f07
 8007e58:	08007ed3 	.word	0x08007ed3
 8007e5c:	08007f07 	.word	0x08007f07
 8007e60:	08007f07 	.word	0x08007f07
 8007e64:	08007f07 	.word	0x08007f07
 8007e68:	08007f07 	.word	0x08007f07
 8007e6c:	08007f07 	.word	0x08007f07
 8007e70:	08007f07 	.word	0x08007f07
 8007e74:	08007f07 	.word	0x08007f07
 8007e78:	08007f07 	.word	0x08007f07
 8007e7c:	08007f07 	.word	0x08007f07
 8007e80:	08007f07 	.word	0x08007f07
 8007e84:	08007f07 	.word	0x08007f07
 8007e88:	08007f07 	.word	0x08007f07
 8007e8c:	08007f07 	.word	0x08007f07
 8007e90:	08007f07 	.word	0x08007f07
 8007e94:	08007f07 	.word	0x08007f07
 8007e98:	08007ef9 	.word	0x08007ef9
 8007e9c:	2b40      	cmp	r3, #64	@ 0x40
 8007e9e:	d02e      	beq.n	8007efe <UART_SetConfig+0xa36>
 8007ea0:	e031      	b.n	8007f06 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea2:	f7fc fca5 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8007ea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e033      	b.n	8007f12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eaa:	f7fc fcb7 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8007eae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007eb0:	e02f      	b.n	8007f12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd fee6 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec0:	e027      	b.n	8007f12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec2:	f107 0318 	add.w	r3, r7, #24
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe f832 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed0:	e01f      	b.n	8007f12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8007f88 <UART_SetConfig+0xac0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ede:	4b2a      	ldr	r3, [pc, #168]	@ (8007f88 <UART_SetConfig+0xac0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	08db      	lsrs	r3, r3, #3
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	4a28      	ldr	r2, [pc, #160]	@ (8007f8c <UART_SetConfig+0xac4>)
 8007eea:	fa22 f303 	lsr.w	r3, r2, r3
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ef0:	e00f      	b.n	8007f12 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ef2:	4b26      	ldr	r3, [pc, #152]	@ (8007f8c <UART_SetConfig+0xac4>)
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef6:	e00c      	b.n	8007f12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ef8:	4b25      	ldr	r3, [pc, #148]	@ (8007f90 <UART_SetConfig+0xac8>)
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efc:	e009      	b.n	8007f12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f04:	e005      	b.n	8007f12 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f10:	bf00      	nop
    }

    if (pclk != 0U)
 8007f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d021      	beq.n	8007f5c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f94 <UART_SetConfig+0xacc>)
 8007f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f22:	461a      	mov	r2, r3
 8007f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f26:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	441a      	add	r2, r3
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	d909      	bls.n	8007f56 <UART_SetConfig+0xa8e>
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f48:	d205      	bcs.n	8007f56 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	e002      	b.n	8007f5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f78:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3748      	adds	r7, #72	@ 0x48
 8007f80:	46bd      	mov	sp, r7
 8007f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f86:	bf00      	nop
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	03d09000 	.word	0x03d09000
 8007f90:	003d0900 	.word	0x003d0900
 8007f94:	0800907c 	.word	0x0800907c

08007f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01a      	beq.n	80080ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008096:	d10a      	bne.n	80080ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]
  }
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b098      	sub	sp, #96	@ 0x60
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080ec:	f7f9 ff42 	bl	8001f74 <HAL_GetTick>
 80080f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d12f      	bne.n	8008160 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008100:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008108:	2200      	movs	r2, #0
 800810a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f88e 	bl	8008230 <UART_WaitOnFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d022      	beq.n	8008160 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800812a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800812e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008138:	647b      	str	r3, [r7, #68]	@ 0x44
 800813a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800813e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e6      	bne.n	800811a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e063      	b.n	8008228 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0304 	and.w	r3, r3, #4
 800816a:	2b04      	cmp	r3, #4
 800816c:	d149      	bne.n	8008202 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800816e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008176:	2200      	movs	r2, #0
 8008178:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f857 	bl	8008230 <UART_WaitOnFlagUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d03c      	beq.n	8008202 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	623b      	str	r3, [r7, #32]
   return(result);
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800819c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e6      	bne.n	8008188 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3308      	adds	r3, #8
 80081d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081da:	61fa      	str	r2, [r7, #28]
 80081dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	69b9      	ldr	r1, [r7, #24]
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	617b      	str	r3, [r7, #20]
   return(result);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e5      	bne.n	80081ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e012      	b.n	8008228 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3758      	adds	r7, #88	@ 0x58
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	4613      	mov	r3, r2
 800823e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008240:	e04f      	b.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d04b      	beq.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824a:	f7f9 fe93 	bl	8001f74 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	429a      	cmp	r2, r3
 8008258:	d302      	bcc.n	8008260 <UART_WaitOnFlagUntilTimeout+0x30>
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e04e      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0304 	and.w	r3, r3, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	d037      	beq.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b80      	cmp	r3, #128	@ 0x80
 8008276:	d034      	beq.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b40      	cmp	r3, #64	@ 0x40
 800827c:	d031      	beq.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b08      	cmp	r3, #8
 800828a:	d110      	bne.n	80082ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2208      	movs	r2, #8
 8008292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f839 	bl	800830c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2208      	movs	r2, #8
 800829e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e029      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082bc:	d111      	bne.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f81f 	bl	800830c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e00f      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	bf0c      	ite	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	2300      	movne	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d0a0      	beq.n	8008242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800830c:	b480      	push	{r7}
 800830e:	b095      	sub	sp, #84	@ 0x54
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008332:	643b      	str	r3, [r7, #64]	@ 0x40
 8008334:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e6      	bne.n	8008314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3308      	adds	r3, #8
 800834c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	61fb      	str	r3, [r7, #28]
   return(result);
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	4b1e      	ldr	r3, [pc, #120]	@ (80083d4 <UART_EndRxTransfer+0xc8>)
 800835a:	4013      	ands	r3, r2
 800835c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008368:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800836c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e5      	bne.n	8008346 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800837e:	2b01      	cmp	r3, #1
 8008380:	d118      	bne.n	80083b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	e853 3f00 	ldrex	r3, [r3]
 800838e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f023 0310 	bic.w	r3, r3, #16
 8008396:	647b      	str	r3, [r7, #68]	@ 0x44
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	461a      	mov	r2, r3
 800839e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6979      	ldr	r1, [r7, #20]
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	613b      	str	r3, [r7, #16]
   return(result);
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e6      	bne.n	8008382 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80083c8:	bf00      	nop
 80083ca:	3754      	adds	r7, #84	@ 0x54
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	effffffe 	.word	0xeffffffe

080083d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <HAL_UARTEx_DisableFifoMode+0x16>
 80083ea:	2302      	movs	r3, #2
 80083ec:	e027      	b.n	800843e <HAL_UARTEx_DisableFifoMode+0x66>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2224      	movs	r2, #36	@ 0x24
 80083fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0201 	bic.w	r2, r2, #1
 8008414:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800841c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800845e:	2302      	movs	r3, #2
 8008460:	e02d      	b.n	80084be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2224      	movs	r2, #36	@ 0x24
 800846e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0201 	bic.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f850 	bl	8008544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084da:	2302      	movs	r3, #2
 80084dc:	e02d      	b.n	800853a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2224      	movs	r2, #36	@ 0x24
 80084ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f812 	bl	8008544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008550:	2b00      	cmp	r3, #0
 8008552:	d108      	bne.n	8008566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008564:	e031      	b.n	80085ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008566:	2310      	movs	r3, #16
 8008568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800856a:	2310      	movs	r3, #16
 800856c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	0e5b      	lsrs	r3, r3, #25
 8008576:	b2db      	uxtb	r3, r3
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	0f5b      	lsrs	r3, r3, #29
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	7b3a      	ldrb	r2, [r7, #12]
 8008592:	4911      	ldr	r1, [pc, #68]	@ (80085d8 <UARTEx_SetNbDataToProcess+0x94>)
 8008594:	5c8a      	ldrb	r2, [r1, r2]
 8008596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800859a:	7b3a      	ldrb	r2, [r7, #12]
 800859c:	490f      	ldr	r1, [pc, #60]	@ (80085dc <UARTEx_SetNbDataToProcess+0x98>)
 800859e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	7b7a      	ldrb	r2, [r7, #13]
 80085b0:	4909      	ldr	r1, [pc, #36]	@ (80085d8 <UARTEx_SetNbDataToProcess+0x94>)
 80085b2:	5c8a      	ldrb	r2, [r1, r2]
 80085b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085b8:	7b7a      	ldrb	r2, [r7, #13]
 80085ba:	4908      	ldr	r1, [pc, #32]	@ (80085dc <UARTEx_SetNbDataToProcess+0x98>)
 80085bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085be:	fb93 f3f2 	sdiv	r3, r3, r2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	08009094 	.word	0x08009094
 80085dc:	0800909c 	.word	0x0800909c

080085e0 <_vsniprintf_r>:
 80085e0:	b530      	push	{r4, r5, lr}
 80085e2:	4614      	mov	r4, r2
 80085e4:	2c00      	cmp	r4, #0
 80085e6:	b09b      	sub	sp, #108	@ 0x6c
 80085e8:	4605      	mov	r5, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	da05      	bge.n	80085fa <_vsniprintf_r+0x1a>
 80085ee:	238b      	movs	r3, #139	@ 0x8b
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295
 80085f6:	b01b      	add	sp, #108	@ 0x6c
 80085f8:	bd30      	pop	{r4, r5, pc}
 80085fa:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80085fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	9319      	str	r3, [sp, #100]	@ 0x64
 8008608:	bf14      	ite	ne
 800860a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800860e:	4623      	moveq	r3, r4
 8008610:	9302      	str	r3, [sp, #8]
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008618:	9100      	str	r1, [sp, #0]
 800861a:	9104      	str	r1, [sp, #16]
 800861c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008620:	4669      	mov	r1, sp
 8008622:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008624:	f000 f9ae 	bl	8008984 <_svfiprintf_r>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	bfbc      	itt	lt
 800862c:	238b      	movlt	r3, #139	@ 0x8b
 800862e:	602b      	strlt	r3, [r5, #0]
 8008630:	2c00      	cmp	r4, #0
 8008632:	d0e0      	beq.n	80085f6 <_vsniprintf_r+0x16>
 8008634:	9b00      	ldr	r3, [sp, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e7dc      	b.n	80085f6 <_vsniprintf_r+0x16>

0800863c <vsniprintf>:
 800863c:	b507      	push	{r0, r1, r2, lr}
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4613      	mov	r3, r2
 8008642:	460a      	mov	r2, r1
 8008644:	4601      	mov	r1, r0
 8008646:	4803      	ldr	r0, [pc, #12]	@ (8008654 <vsniprintf+0x18>)
 8008648:	6800      	ldr	r0, [r0, #0]
 800864a:	f7ff ffc9 	bl	80085e0 <_vsniprintf_r>
 800864e:	b003      	add	sp, #12
 8008650:	f85d fb04 	ldr.w	pc, [sp], #4
 8008654:	24000010 	.word	0x24000010

08008658 <memset>:
 8008658:	4402      	add	r2, r0
 800865a:	4603      	mov	r3, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <__errno>:
 8008668:	4b01      	ldr	r3, [pc, #4]	@ (8008670 <__errno+0x8>)
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	24000010 	.word	0x24000010

08008674 <__libc_init_array>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4d0d      	ldr	r5, [pc, #52]	@ (80086ac <__libc_init_array+0x38>)
 8008678:	4c0d      	ldr	r4, [pc, #52]	@ (80086b0 <__libc_init_array+0x3c>)
 800867a:	1b64      	subs	r4, r4, r5
 800867c:	10a4      	asrs	r4, r4, #2
 800867e:	2600      	movs	r6, #0
 8008680:	42a6      	cmp	r6, r4
 8008682:	d109      	bne.n	8008698 <__libc_init_array+0x24>
 8008684:	4d0b      	ldr	r5, [pc, #44]	@ (80086b4 <__libc_init_array+0x40>)
 8008686:	4c0c      	ldr	r4, [pc, #48]	@ (80086b8 <__libc_init_array+0x44>)
 8008688:	f000 fc64 	bl	8008f54 <_init>
 800868c:	1b64      	subs	r4, r4, r5
 800868e:	10a4      	asrs	r4, r4, #2
 8008690:	2600      	movs	r6, #0
 8008692:	42a6      	cmp	r6, r4
 8008694:	d105      	bne.n	80086a2 <__libc_init_array+0x2e>
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	f855 3b04 	ldr.w	r3, [r5], #4
 800869c:	4798      	blx	r3
 800869e:	3601      	adds	r6, #1
 80086a0:	e7ee      	b.n	8008680 <__libc_init_array+0xc>
 80086a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a6:	4798      	blx	r3
 80086a8:	3601      	adds	r6, #1
 80086aa:	e7f2      	b.n	8008692 <__libc_init_array+0x1e>
 80086ac:	080090e0 	.word	0x080090e0
 80086b0:	080090e0 	.word	0x080090e0
 80086b4:	080090e0 	.word	0x080090e0
 80086b8:	080090e4 	.word	0x080090e4

080086bc <__retarget_lock_acquire_recursive>:
 80086bc:	4770      	bx	lr

080086be <__retarget_lock_release_recursive>:
 80086be:	4770      	bx	lr

080086c0 <memcpy>:
 80086c0:	440a      	add	r2, r1
 80086c2:	4291      	cmp	r1, r2
 80086c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086c8:	d100      	bne.n	80086cc <memcpy+0xc>
 80086ca:	4770      	bx	lr
 80086cc:	b510      	push	{r4, lr}
 80086ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086d6:	4291      	cmp	r1, r2
 80086d8:	d1f9      	bne.n	80086ce <memcpy+0xe>
 80086da:	bd10      	pop	{r4, pc}

080086dc <_free_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4605      	mov	r5, r0
 80086e0:	2900      	cmp	r1, #0
 80086e2:	d041      	beq.n	8008768 <_free_r+0x8c>
 80086e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e8:	1f0c      	subs	r4, r1, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bfb8      	it	lt
 80086ee:	18e4      	addlt	r4, r4, r3
 80086f0:	f000 f8e0 	bl	80088b4 <__malloc_lock>
 80086f4:	4a1d      	ldr	r2, [pc, #116]	@ (800876c <_free_r+0x90>)
 80086f6:	6813      	ldr	r3, [r2, #0]
 80086f8:	b933      	cbnz	r3, 8008708 <_free_r+0x2c>
 80086fa:	6063      	str	r3, [r4, #4]
 80086fc:	6014      	str	r4, [r2, #0]
 80086fe:	4628      	mov	r0, r5
 8008700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008704:	f000 b8dc 	b.w	80088c0 <__malloc_unlock>
 8008708:	42a3      	cmp	r3, r4
 800870a:	d908      	bls.n	800871e <_free_r+0x42>
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	1821      	adds	r1, r4, r0
 8008710:	428b      	cmp	r3, r1
 8008712:	bf01      	itttt	eq
 8008714:	6819      	ldreq	r1, [r3, #0]
 8008716:	685b      	ldreq	r3, [r3, #4]
 8008718:	1809      	addeq	r1, r1, r0
 800871a:	6021      	streq	r1, [r4, #0]
 800871c:	e7ed      	b.n	80086fa <_free_r+0x1e>
 800871e:	461a      	mov	r2, r3
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	b10b      	cbz	r3, 8008728 <_free_r+0x4c>
 8008724:	42a3      	cmp	r3, r4
 8008726:	d9fa      	bls.n	800871e <_free_r+0x42>
 8008728:	6811      	ldr	r1, [r2, #0]
 800872a:	1850      	adds	r0, r2, r1
 800872c:	42a0      	cmp	r0, r4
 800872e:	d10b      	bne.n	8008748 <_free_r+0x6c>
 8008730:	6820      	ldr	r0, [r4, #0]
 8008732:	4401      	add	r1, r0
 8008734:	1850      	adds	r0, r2, r1
 8008736:	4283      	cmp	r3, r0
 8008738:	6011      	str	r1, [r2, #0]
 800873a:	d1e0      	bne.n	80086fe <_free_r+0x22>
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	6053      	str	r3, [r2, #4]
 8008742:	4408      	add	r0, r1
 8008744:	6010      	str	r0, [r2, #0]
 8008746:	e7da      	b.n	80086fe <_free_r+0x22>
 8008748:	d902      	bls.n	8008750 <_free_r+0x74>
 800874a:	230c      	movs	r3, #12
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	e7d6      	b.n	80086fe <_free_r+0x22>
 8008750:	6820      	ldr	r0, [r4, #0]
 8008752:	1821      	adds	r1, r4, r0
 8008754:	428b      	cmp	r3, r1
 8008756:	bf04      	itt	eq
 8008758:	6819      	ldreq	r1, [r3, #0]
 800875a:	685b      	ldreq	r3, [r3, #4]
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	bf04      	itt	eq
 8008760:	1809      	addeq	r1, r1, r0
 8008762:	6021      	streq	r1, [r4, #0]
 8008764:	6054      	str	r4, [r2, #4]
 8008766:	e7ca      	b.n	80086fe <_free_r+0x22>
 8008768:	bd38      	pop	{r3, r4, r5, pc}
 800876a:	bf00      	nop
 800876c:	2400140c 	.word	0x2400140c

08008770 <sbrk_aligned>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4e0f      	ldr	r6, [pc, #60]	@ (80087b0 <sbrk_aligned+0x40>)
 8008774:	460c      	mov	r4, r1
 8008776:	6831      	ldr	r1, [r6, #0]
 8008778:	4605      	mov	r5, r0
 800877a:	b911      	cbnz	r1, 8008782 <sbrk_aligned+0x12>
 800877c:	f000 fba4 	bl	8008ec8 <_sbrk_r>
 8008780:	6030      	str	r0, [r6, #0]
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 fb9f 	bl	8008ec8 <_sbrk_r>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	d103      	bne.n	8008796 <sbrk_aligned+0x26>
 800878e:	f04f 34ff 	mov.w	r4, #4294967295
 8008792:	4620      	mov	r0, r4
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	1cc4      	adds	r4, r0, #3
 8008798:	f024 0403 	bic.w	r4, r4, #3
 800879c:	42a0      	cmp	r0, r4
 800879e:	d0f8      	beq.n	8008792 <sbrk_aligned+0x22>
 80087a0:	1a21      	subs	r1, r4, r0
 80087a2:	4628      	mov	r0, r5
 80087a4:	f000 fb90 	bl	8008ec8 <_sbrk_r>
 80087a8:	3001      	adds	r0, #1
 80087aa:	d1f2      	bne.n	8008792 <sbrk_aligned+0x22>
 80087ac:	e7ef      	b.n	800878e <sbrk_aligned+0x1e>
 80087ae:	bf00      	nop
 80087b0:	24001408 	.word	0x24001408

080087b4 <_malloc_r>:
 80087b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b8:	1ccd      	adds	r5, r1, #3
 80087ba:	f025 0503 	bic.w	r5, r5, #3
 80087be:	3508      	adds	r5, #8
 80087c0:	2d0c      	cmp	r5, #12
 80087c2:	bf38      	it	cc
 80087c4:	250c      	movcc	r5, #12
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	4606      	mov	r6, r0
 80087ca:	db01      	blt.n	80087d0 <_malloc_r+0x1c>
 80087cc:	42a9      	cmp	r1, r5
 80087ce:	d904      	bls.n	80087da <_malloc_r+0x26>
 80087d0:	230c      	movs	r3, #12
 80087d2:	6033      	str	r3, [r6, #0]
 80087d4:	2000      	movs	r0, #0
 80087d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088b0 <_malloc_r+0xfc>
 80087de:	f000 f869 	bl	80088b4 <__malloc_lock>
 80087e2:	f8d8 3000 	ldr.w	r3, [r8]
 80087e6:	461c      	mov	r4, r3
 80087e8:	bb44      	cbnz	r4, 800883c <_malloc_r+0x88>
 80087ea:	4629      	mov	r1, r5
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff ffbf 	bl	8008770 <sbrk_aligned>
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	4604      	mov	r4, r0
 80087f6:	d158      	bne.n	80088aa <_malloc_r+0xf6>
 80087f8:	f8d8 4000 	ldr.w	r4, [r8]
 80087fc:	4627      	mov	r7, r4
 80087fe:	2f00      	cmp	r7, #0
 8008800:	d143      	bne.n	800888a <_malloc_r+0xd6>
 8008802:	2c00      	cmp	r4, #0
 8008804:	d04b      	beq.n	800889e <_malloc_r+0xea>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	4639      	mov	r1, r7
 800880a:	4630      	mov	r0, r6
 800880c:	eb04 0903 	add.w	r9, r4, r3
 8008810:	f000 fb5a 	bl	8008ec8 <_sbrk_r>
 8008814:	4581      	cmp	r9, r0
 8008816:	d142      	bne.n	800889e <_malloc_r+0xea>
 8008818:	6821      	ldr	r1, [r4, #0]
 800881a:	1a6d      	subs	r5, r5, r1
 800881c:	4629      	mov	r1, r5
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff ffa6 	bl	8008770 <sbrk_aligned>
 8008824:	3001      	adds	r0, #1
 8008826:	d03a      	beq.n	800889e <_malloc_r+0xea>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	442b      	add	r3, r5
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	f8d8 3000 	ldr.w	r3, [r8]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	bb62      	cbnz	r2, 8008890 <_malloc_r+0xdc>
 8008836:	f8c8 7000 	str.w	r7, [r8]
 800883a:	e00f      	b.n	800885c <_malloc_r+0xa8>
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	1b52      	subs	r2, r2, r5
 8008840:	d420      	bmi.n	8008884 <_malloc_r+0xd0>
 8008842:	2a0b      	cmp	r2, #11
 8008844:	d917      	bls.n	8008876 <_malloc_r+0xc2>
 8008846:	1961      	adds	r1, r4, r5
 8008848:	42a3      	cmp	r3, r4
 800884a:	6025      	str	r5, [r4, #0]
 800884c:	bf18      	it	ne
 800884e:	6059      	strne	r1, [r3, #4]
 8008850:	6863      	ldr	r3, [r4, #4]
 8008852:	bf08      	it	eq
 8008854:	f8c8 1000 	streq.w	r1, [r8]
 8008858:	5162      	str	r2, [r4, r5]
 800885a:	604b      	str	r3, [r1, #4]
 800885c:	4630      	mov	r0, r6
 800885e:	f000 f82f 	bl	80088c0 <__malloc_unlock>
 8008862:	f104 000b 	add.w	r0, r4, #11
 8008866:	1d23      	adds	r3, r4, #4
 8008868:	f020 0007 	bic.w	r0, r0, #7
 800886c:	1ac2      	subs	r2, r0, r3
 800886e:	bf1c      	itt	ne
 8008870:	1a1b      	subne	r3, r3, r0
 8008872:	50a3      	strne	r3, [r4, r2]
 8008874:	e7af      	b.n	80087d6 <_malloc_r+0x22>
 8008876:	6862      	ldr	r2, [r4, #4]
 8008878:	42a3      	cmp	r3, r4
 800887a:	bf0c      	ite	eq
 800887c:	f8c8 2000 	streq.w	r2, [r8]
 8008880:	605a      	strne	r2, [r3, #4]
 8008882:	e7eb      	b.n	800885c <_malloc_r+0xa8>
 8008884:	4623      	mov	r3, r4
 8008886:	6864      	ldr	r4, [r4, #4]
 8008888:	e7ae      	b.n	80087e8 <_malloc_r+0x34>
 800888a:	463c      	mov	r4, r7
 800888c:	687f      	ldr	r7, [r7, #4]
 800888e:	e7b6      	b.n	80087fe <_malloc_r+0x4a>
 8008890:	461a      	mov	r2, r3
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	42a3      	cmp	r3, r4
 8008896:	d1fb      	bne.n	8008890 <_malloc_r+0xdc>
 8008898:	2300      	movs	r3, #0
 800889a:	6053      	str	r3, [r2, #4]
 800889c:	e7de      	b.n	800885c <_malloc_r+0xa8>
 800889e:	230c      	movs	r3, #12
 80088a0:	6033      	str	r3, [r6, #0]
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 f80c 	bl	80088c0 <__malloc_unlock>
 80088a8:	e794      	b.n	80087d4 <_malloc_r+0x20>
 80088aa:	6005      	str	r5, [r0, #0]
 80088ac:	e7d6      	b.n	800885c <_malloc_r+0xa8>
 80088ae:	bf00      	nop
 80088b0:	2400140c 	.word	0x2400140c

080088b4 <__malloc_lock>:
 80088b4:	4801      	ldr	r0, [pc, #4]	@ (80088bc <__malloc_lock+0x8>)
 80088b6:	f7ff bf01 	b.w	80086bc <__retarget_lock_acquire_recursive>
 80088ba:	bf00      	nop
 80088bc:	24001404 	.word	0x24001404

080088c0 <__malloc_unlock>:
 80088c0:	4801      	ldr	r0, [pc, #4]	@ (80088c8 <__malloc_unlock+0x8>)
 80088c2:	f7ff befc 	b.w	80086be <__retarget_lock_release_recursive>
 80088c6:	bf00      	nop
 80088c8:	24001404 	.word	0x24001404

080088cc <__ssputs_r>:
 80088cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	688e      	ldr	r6, [r1, #8]
 80088d2:	461f      	mov	r7, r3
 80088d4:	42be      	cmp	r6, r7
 80088d6:	680b      	ldr	r3, [r1, #0]
 80088d8:	4682      	mov	sl, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	4690      	mov	r8, r2
 80088de:	d82d      	bhi.n	800893c <__ssputs_r+0x70>
 80088e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088e8:	d026      	beq.n	8008938 <__ssputs_r+0x6c>
 80088ea:	6965      	ldr	r5, [r4, #20]
 80088ec:	6909      	ldr	r1, [r1, #16]
 80088ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088f2:	eba3 0901 	sub.w	r9, r3, r1
 80088f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088fa:	1c7b      	adds	r3, r7, #1
 80088fc:	444b      	add	r3, r9
 80088fe:	106d      	asrs	r5, r5, #1
 8008900:	429d      	cmp	r5, r3
 8008902:	bf38      	it	cc
 8008904:	461d      	movcc	r5, r3
 8008906:	0553      	lsls	r3, r2, #21
 8008908:	d527      	bpl.n	800895a <__ssputs_r+0x8e>
 800890a:	4629      	mov	r1, r5
 800890c:	f7ff ff52 	bl	80087b4 <_malloc_r>
 8008910:	4606      	mov	r6, r0
 8008912:	b360      	cbz	r0, 800896e <__ssputs_r+0xa2>
 8008914:	6921      	ldr	r1, [r4, #16]
 8008916:	464a      	mov	r2, r9
 8008918:	f7ff fed2 	bl	80086c0 <memcpy>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	6126      	str	r6, [r4, #16]
 800892a:	6165      	str	r5, [r4, #20]
 800892c:	444e      	add	r6, r9
 800892e:	eba5 0509 	sub.w	r5, r5, r9
 8008932:	6026      	str	r6, [r4, #0]
 8008934:	60a5      	str	r5, [r4, #8]
 8008936:	463e      	mov	r6, r7
 8008938:	42be      	cmp	r6, r7
 800893a:	d900      	bls.n	800893e <__ssputs_r+0x72>
 800893c:	463e      	mov	r6, r7
 800893e:	6820      	ldr	r0, [r4, #0]
 8008940:	4632      	mov	r2, r6
 8008942:	4641      	mov	r1, r8
 8008944:	f000 faa6 	bl	8008e94 <memmove>
 8008948:	68a3      	ldr	r3, [r4, #8]
 800894a:	1b9b      	subs	r3, r3, r6
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	4433      	add	r3, r6
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	2000      	movs	r0, #0
 8008956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895a:	462a      	mov	r2, r5
 800895c:	f000 fac4 	bl	8008ee8 <_realloc_r>
 8008960:	4606      	mov	r6, r0
 8008962:	2800      	cmp	r0, #0
 8008964:	d1e0      	bne.n	8008928 <__ssputs_r+0x5c>
 8008966:	6921      	ldr	r1, [r4, #16]
 8008968:	4650      	mov	r0, sl
 800896a:	f7ff feb7 	bl	80086dc <_free_r>
 800896e:	230c      	movs	r3, #12
 8008970:	f8ca 3000 	str.w	r3, [sl]
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	e7e9      	b.n	8008956 <__ssputs_r+0x8a>
	...

08008984 <_svfiprintf_r>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	4698      	mov	r8, r3
 800898a:	898b      	ldrh	r3, [r1, #12]
 800898c:	061b      	lsls	r3, r3, #24
 800898e:	b09d      	sub	sp, #116	@ 0x74
 8008990:	4607      	mov	r7, r0
 8008992:	460d      	mov	r5, r1
 8008994:	4614      	mov	r4, r2
 8008996:	d510      	bpl.n	80089ba <_svfiprintf_r+0x36>
 8008998:	690b      	ldr	r3, [r1, #16]
 800899a:	b973      	cbnz	r3, 80089ba <_svfiprintf_r+0x36>
 800899c:	2140      	movs	r1, #64	@ 0x40
 800899e:	f7ff ff09 	bl	80087b4 <_malloc_r>
 80089a2:	6028      	str	r0, [r5, #0]
 80089a4:	6128      	str	r0, [r5, #16]
 80089a6:	b930      	cbnz	r0, 80089b6 <_svfiprintf_r+0x32>
 80089a8:	230c      	movs	r3, #12
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	b01d      	add	sp, #116	@ 0x74
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	2340      	movs	r3, #64	@ 0x40
 80089b8:	616b      	str	r3, [r5, #20]
 80089ba:	2300      	movs	r3, #0
 80089bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089be:	2320      	movs	r3, #32
 80089c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089c8:	2330      	movs	r3, #48	@ 0x30
 80089ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b68 <_svfiprintf_r+0x1e4>
 80089ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089d2:	f04f 0901 	mov.w	r9, #1
 80089d6:	4623      	mov	r3, r4
 80089d8:	469a      	mov	sl, r3
 80089da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089de:	b10a      	cbz	r2, 80089e4 <_svfiprintf_r+0x60>
 80089e0:	2a25      	cmp	r2, #37	@ 0x25
 80089e2:	d1f9      	bne.n	80089d8 <_svfiprintf_r+0x54>
 80089e4:	ebba 0b04 	subs.w	fp, sl, r4
 80089e8:	d00b      	beq.n	8008a02 <_svfiprintf_r+0x7e>
 80089ea:	465b      	mov	r3, fp
 80089ec:	4622      	mov	r2, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	4638      	mov	r0, r7
 80089f2:	f7ff ff6b 	bl	80088cc <__ssputs_r>
 80089f6:	3001      	adds	r0, #1
 80089f8:	f000 80a7 	beq.w	8008b4a <_svfiprintf_r+0x1c6>
 80089fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089fe:	445a      	add	r2, fp
 8008a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a02:	f89a 3000 	ldrb.w	r3, [sl]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 809f 	beq.w	8008b4a <_svfiprintf_r+0x1c6>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a16:	f10a 0a01 	add.w	sl, sl, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	9307      	str	r3, [sp, #28]
 8008a1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a22:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a24:	4654      	mov	r4, sl
 8008a26:	2205      	movs	r2, #5
 8008a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2c:	484e      	ldr	r0, [pc, #312]	@ (8008b68 <_svfiprintf_r+0x1e4>)
 8008a2e:	f7f7 fc5f 	bl	80002f0 <memchr>
 8008a32:	9a04      	ldr	r2, [sp, #16]
 8008a34:	b9d8      	cbnz	r0, 8008a6e <_svfiprintf_r+0xea>
 8008a36:	06d0      	lsls	r0, r2, #27
 8008a38:	bf44      	itt	mi
 8008a3a:	2320      	movmi	r3, #32
 8008a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a40:	0711      	lsls	r1, r2, #28
 8008a42:	bf44      	itt	mi
 8008a44:	232b      	movmi	r3, #43	@ 0x2b
 8008a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a50:	d015      	beq.n	8008a7e <_svfiprintf_r+0xfa>
 8008a52:	9a07      	ldr	r2, [sp, #28]
 8008a54:	4654      	mov	r4, sl
 8008a56:	2000      	movs	r0, #0
 8008a58:	f04f 0c0a 	mov.w	ip, #10
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a62:	3b30      	subs	r3, #48	@ 0x30
 8008a64:	2b09      	cmp	r3, #9
 8008a66:	d94b      	bls.n	8008b00 <_svfiprintf_r+0x17c>
 8008a68:	b1b0      	cbz	r0, 8008a98 <_svfiprintf_r+0x114>
 8008a6a:	9207      	str	r2, [sp, #28]
 8008a6c:	e014      	b.n	8008a98 <_svfiprintf_r+0x114>
 8008a6e:	eba0 0308 	sub.w	r3, r0, r8
 8008a72:	fa09 f303 	lsl.w	r3, r9, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	46a2      	mov	sl, r4
 8008a7c:	e7d2      	b.n	8008a24 <_svfiprintf_r+0xa0>
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	1d19      	adds	r1, r3, #4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	9103      	str	r1, [sp, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfbb      	ittet	lt
 8008a8a:	425b      	neglt	r3, r3
 8008a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a90:	9307      	strge	r3, [sp, #28]
 8008a92:	9307      	strlt	r3, [sp, #28]
 8008a94:	bfb8      	it	lt
 8008a96:	9204      	strlt	r2, [sp, #16]
 8008a98:	7823      	ldrb	r3, [r4, #0]
 8008a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a9c:	d10a      	bne.n	8008ab4 <_svfiprintf_r+0x130>
 8008a9e:	7863      	ldrb	r3, [r4, #1]
 8008aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa2:	d132      	bne.n	8008b0a <_svfiprintf_r+0x186>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	1d1a      	adds	r2, r3, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	9203      	str	r2, [sp, #12]
 8008aac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ab0:	3402      	adds	r4, #2
 8008ab2:	9305      	str	r3, [sp, #20]
 8008ab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b78 <_svfiprintf_r+0x1f4>
 8008ab8:	7821      	ldrb	r1, [r4, #0]
 8008aba:	2203      	movs	r2, #3
 8008abc:	4650      	mov	r0, sl
 8008abe:	f7f7 fc17 	bl	80002f0 <memchr>
 8008ac2:	b138      	cbz	r0, 8008ad4 <_svfiprintf_r+0x150>
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	eba0 000a 	sub.w	r0, r0, sl
 8008aca:	2240      	movs	r2, #64	@ 0x40
 8008acc:	4082      	lsls	r2, r0
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	3401      	adds	r4, #1
 8008ad2:	9304      	str	r3, [sp, #16]
 8008ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad8:	4824      	ldr	r0, [pc, #144]	@ (8008b6c <_svfiprintf_r+0x1e8>)
 8008ada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ade:	2206      	movs	r2, #6
 8008ae0:	f7f7 fc06 	bl	80002f0 <memchr>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d036      	beq.n	8008b56 <_svfiprintf_r+0x1d2>
 8008ae8:	4b21      	ldr	r3, [pc, #132]	@ (8008b70 <_svfiprintf_r+0x1ec>)
 8008aea:	bb1b      	cbnz	r3, 8008b34 <_svfiprintf_r+0x1b0>
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	3307      	adds	r3, #7
 8008af0:	f023 0307 	bic.w	r3, r3, #7
 8008af4:	3308      	adds	r3, #8
 8008af6:	9303      	str	r3, [sp, #12]
 8008af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008afa:	4433      	add	r3, r6
 8008afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008afe:	e76a      	b.n	80089d6 <_svfiprintf_r+0x52>
 8008b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b04:	460c      	mov	r4, r1
 8008b06:	2001      	movs	r0, #1
 8008b08:	e7a8      	b.n	8008a5c <_svfiprintf_r+0xd8>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	3401      	adds	r4, #1
 8008b0e:	9305      	str	r3, [sp, #20]
 8008b10:	4619      	mov	r1, r3
 8008b12:	f04f 0c0a 	mov.w	ip, #10
 8008b16:	4620      	mov	r0, r4
 8008b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b1c:	3a30      	subs	r2, #48	@ 0x30
 8008b1e:	2a09      	cmp	r2, #9
 8008b20:	d903      	bls.n	8008b2a <_svfiprintf_r+0x1a6>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0c6      	beq.n	8008ab4 <_svfiprintf_r+0x130>
 8008b26:	9105      	str	r1, [sp, #20]
 8008b28:	e7c4      	b.n	8008ab4 <_svfiprintf_r+0x130>
 8008b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b2e:	4604      	mov	r4, r0
 8008b30:	2301      	movs	r3, #1
 8008b32:	e7f0      	b.n	8008b16 <_svfiprintf_r+0x192>
 8008b34:	ab03      	add	r3, sp, #12
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	462a      	mov	r2, r5
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b74 <_svfiprintf_r+0x1f0>)
 8008b3c:	a904      	add	r1, sp, #16
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f3af 8000 	nop.w
 8008b44:	1c42      	adds	r2, r0, #1
 8008b46:	4606      	mov	r6, r0
 8008b48:	d1d6      	bne.n	8008af8 <_svfiprintf_r+0x174>
 8008b4a:	89ab      	ldrh	r3, [r5, #12]
 8008b4c:	065b      	lsls	r3, r3, #25
 8008b4e:	f53f af2d 	bmi.w	80089ac <_svfiprintf_r+0x28>
 8008b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b54:	e72c      	b.n	80089b0 <_svfiprintf_r+0x2c>
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <_svfiprintf_r+0x1f0>)
 8008b5e:	a904      	add	r1, sp, #16
 8008b60:	4638      	mov	r0, r7
 8008b62:	f000 f879 	bl	8008c58 <_printf_i>
 8008b66:	e7ed      	b.n	8008b44 <_svfiprintf_r+0x1c0>
 8008b68:	080090a4 	.word	0x080090a4
 8008b6c:	080090ae 	.word	0x080090ae
 8008b70:	00000000 	.word	0x00000000
 8008b74:	080088cd 	.word	0x080088cd
 8008b78:	080090aa 	.word	0x080090aa

08008b7c <_printf_common>:
 8008b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	4616      	mov	r6, r2
 8008b82:	4698      	mov	r8, r3
 8008b84:	688a      	ldr	r2, [r1, #8]
 8008b86:	690b      	ldr	r3, [r1, #16]
 8008b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	bfb8      	it	lt
 8008b90:	4613      	movlt	r3, r2
 8008b92:	6033      	str	r3, [r6, #0]
 8008b94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b98:	4607      	mov	r7, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	b10a      	cbz	r2, 8008ba2 <_printf_common+0x26>
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	6033      	str	r3, [r6, #0]
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	0699      	lsls	r1, r3, #26
 8008ba6:	bf42      	ittt	mi
 8008ba8:	6833      	ldrmi	r3, [r6, #0]
 8008baa:	3302      	addmi	r3, #2
 8008bac:	6033      	strmi	r3, [r6, #0]
 8008bae:	6825      	ldr	r5, [r4, #0]
 8008bb0:	f015 0506 	ands.w	r5, r5, #6
 8008bb4:	d106      	bne.n	8008bc4 <_printf_common+0x48>
 8008bb6:	f104 0a19 	add.w	sl, r4, #25
 8008bba:	68e3      	ldr	r3, [r4, #12]
 8008bbc:	6832      	ldr	r2, [r6, #0]
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	42ab      	cmp	r3, r5
 8008bc2:	dc26      	bgt.n	8008c12 <_printf_common+0x96>
 8008bc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bc8:	6822      	ldr	r2, [r4, #0]
 8008bca:	3b00      	subs	r3, #0
 8008bcc:	bf18      	it	ne
 8008bce:	2301      	movne	r3, #1
 8008bd0:	0692      	lsls	r2, r2, #26
 8008bd2:	d42b      	bmi.n	8008c2c <_printf_common+0xb0>
 8008bd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bd8:	4641      	mov	r1, r8
 8008bda:	4638      	mov	r0, r7
 8008bdc:	47c8      	blx	r9
 8008bde:	3001      	adds	r0, #1
 8008be0:	d01e      	beq.n	8008c20 <_printf_common+0xa4>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	6922      	ldr	r2, [r4, #16]
 8008be6:	f003 0306 	and.w	r3, r3, #6
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	bf02      	ittt	eq
 8008bee:	68e5      	ldreq	r5, [r4, #12]
 8008bf0:	6833      	ldreq	r3, [r6, #0]
 8008bf2:	1aed      	subeq	r5, r5, r3
 8008bf4:	68a3      	ldr	r3, [r4, #8]
 8008bf6:	bf0c      	ite	eq
 8008bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bfc:	2500      	movne	r5, #0
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	bfc4      	itt	gt
 8008c02:	1a9b      	subgt	r3, r3, r2
 8008c04:	18ed      	addgt	r5, r5, r3
 8008c06:	2600      	movs	r6, #0
 8008c08:	341a      	adds	r4, #26
 8008c0a:	42b5      	cmp	r5, r6
 8008c0c:	d11a      	bne.n	8008c44 <_printf_common+0xc8>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e008      	b.n	8008c24 <_printf_common+0xa8>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4652      	mov	r2, sl
 8008c16:	4641      	mov	r1, r8
 8008c18:	4638      	mov	r0, r7
 8008c1a:	47c8      	blx	r9
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d103      	bne.n	8008c28 <_printf_common+0xac>
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c28:	3501      	adds	r5, #1
 8008c2a:	e7c6      	b.n	8008bba <_printf_common+0x3e>
 8008c2c:	18e1      	adds	r1, r4, r3
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	2030      	movs	r0, #48	@ 0x30
 8008c32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c36:	4422      	add	r2, r4
 8008c38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c40:	3302      	adds	r3, #2
 8008c42:	e7c7      	b.n	8008bd4 <_printf_common+0x58>
 8008c44:	2301      	movs	r3, #1
 8008c46:	4622      	mov	r2, r4
 8008c48:	4641      	mov	r1, r8
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	47c8      	blx	r9
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d0e6      	beq.n	8008c20 <_printf_common+0xa4>
 8008c52:	3601      	adds	r6, #1
 8008c54:	e7d9      	b.n	8008c0a <_printf_common+0x8e>
	...

08008c58 <_printf_i>:
 8008c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5c:	7e0f      	ldrb	r7, [r1, #24]
 8008c5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c60:	2f78      	cmp	r7, #120	@ 0x78
 8008c62:	4691      	mov	r9, r2
 8008c64:	4680      	mov	r8, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	469a      	mov	sl, r3
 8008c6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c6e:	d807      	bhi.n	8008c80 <_printf_i+0x28>
 8008c70:	2f62      	cmp	r7, #98	@ 0x62
 8008c72:	d80a      	bhi.n	8008c8a <_printf_i+0x32>
 8008c74:	2f00      	cmp	r7, #0
 8008c76:	f000 80d1 	beq.w	8008e1c <_printf_i+0x1c4>
 8008c7a:	2f58      	cmp	r7, #88	@ 0x58
 8008c7c:	f000 80b8 	beq.w	8008df0 <_printf_i+0x198>
 8008c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c88:	e03a      	b.n	8008d00 <_printf_i+0xa8>
 8008c8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c8e:	2b15      	cmp	r3, #21
 8008c90:	d8f6      	bhi.n	8008c80 <_printf_i+0x28>
 8008c92:	a101      	add	r1, pc, #4	@ (adr r1, 8008c98 <_printf_i+0x40>)
 8008c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c98:	08008cf1 	.word	0x08008cf1
 8008c9c:	08008d05 	.word	0x08008d05
 8008ca0:	08008c81 	.word	0x08008c81
 8008ca4:	08008c81 	.word	0x08008c81
 8008ca8:	08008c81 	.word	0x08008c81
 8008cac:	08008c81 	.word	0x08008c81
 8008cb0:	08008d05 	.word	0x08008d05
 8008cb4:	08008c81 	.word	0x08008c81
 8008cb8:	08008c81 	.word	0x08008c81
 8008cbc:	08008c81 	.word	0x08008c81
 8008cc0:	08008c81 	.word	0x08008c81
 8008cc4:	08008e03 	.word	0x08008e03
 8008cc8:	08008d2f 	.word	0x08008d2f
 8008ccc:	08008dbd 	.word	0x08008dbd
 8008cd0:	08008c81 	.word	0x08008c81
 8008cd4:	08008c81 	.word	0x08008c81
 8008cd8:	08008e25 	.word	0x08008e25
 8008cdc:	08008c81 	.word	0x08008c81
 8008ce0:	08008d2f 	.word	0x08008d2f
 8008ce4:	08008c81 	.word	0x08008c81
 8008ce8:	08008c81 	.word	0x08008c81
 8008cec:	08008dc5 	.word	0x08008dc5
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	1d1a      	adds	r2, r3, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6032      	str	r2, [r6, #0]
 8008cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d00:	2301      	movs	r3, #1
 8008d02:	e09c      	b.n	8008e3e <_printf_i+0x1e6>
 8008d04:	6833      	ldr	r3, [r6, #0]
 8008d06:	6820      	ldr	r0, [r4, #0]
 8008d08:	1d19      	adds	r1, r3, #4
 8008d0a:	6031      	str	r1, [r6, #0]
 8008d0c:	0606      	lsls	r6, r0, #24
 8008d0e:	d501      	bpl.n	8008d14 <_printf_i+0xbc>
 8008d10:	681d      	ldr	r5, [r3, #0]
 8008d12:	e003      	b.n	8008d1c <_printf_i+0xc4>
 8008d14:	0645      	lsls	r5, r0, #25
 8008d16:	d5fb      	bpl.n	8008d10 <_printf_i+0xb8>
 8008d18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	da03      	bge.n	8008d28 <_printf_i+0xd0>
 8008d20:	232d      	movs	r3, #45	@ 0x2d
 8008d22:	426d      	negs	r5, r5
 8008d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d28:	4858      	ldr	r0, [pc, #352]	@ (8008e8c <_printf_i+0x234>)
 8008d2a:	230a      	movs	r3, #10
 8008d2c:	e011      	b.n	8008d52 <_printf_i+0xfa>
 8008d2e:	6821      	ldr	r1, [r4, #0]
 8008d30:	6833      	ldr	r3, [r6, #0]
 8008d32:	0608      	lsls	r0, r1, #24
 8008d34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d38:	d402      	bmi.n	8008d40 <_printf_i+0xe8>
 8008d3a:	0649      	lsls	r1, r1, #25
 8008d3c:	bf48      	it	mi
 8008d3e:	b2ad      	uxthmi	r5, r5
 8008d40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d42:	4852      	ldr	r0, [pc, #328]	@ (8008e8c <_printf_i+0x234>)
 8008d44:	6033      	str	r3, [r6, #0]
 8008d46:	bf14      	ite	ne
 8008d48:	230a      	movne	r3, #10
 8008d4a:	2308      	moveq	r3, #8
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d52:	6866      	ldr	r6, [r4, #4]
 8008d54:	60a6      	str	r6, [r4, #8]
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	db05      	blt.n	8008d66 <_printf_i+0x10e>
 8008d5a:	6821      	ldr	r1, [r4, #0]
 8008d5c:	432e      	orrs	r6, r5
 8008d5e:	f021 0104 	bic.w	r1, r1, #4
 8008d62:	6021      	str	r1, [r4, #0]
 8008d64:	d04b      	beq.n	8008dfe <_printf_i+0x1a6>
 8008d66:	4616      	mov	r6, r2
 8008d68:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d6c:	fb03 5711 	mls	r7, r3, r1, r5
 8008d70:	5dc7      	ldrb	r7, [r0, r7]
 8008d72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d76:	462f      	mov	r7, r5
 8008d78:	42bb      	cmp	r3, r7
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	d9f4      	bls.n	8008d68 <_printf_i+0x110>
 8008d7e:	2b08      	cmp	r3, #8
 8008d80:	d10b      	bne.n	8008d9a <_printf_i+0x142>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	07df      	lsls	r7, r3, #31
 8008d86:	d508      	bpl.n	8008d9a <_printf_i+0x142>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	6861      	ldr	r1, [r4, #4]
 8008d8c:	4299      	cmp	r1, r3
 8008d8e:	bfde      	ittt	le
 8008d90:	2330      	movle	r3, #48	@ 0x30
 8008d92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d9a:	1b92      	subs	r2, r2, r6
 8008d9c:	6122      	str	r2, [r4, #16]
 8008d9e:	f8cd a000 	str.w	sl, [sp]
 8008da2:	464b      	mov	r3, r9
 8008da4:	aa03      	add	r2, sp, #12
 8008da6:	4621      	mov	r1, r4
 8008da8:	4640      	mov	r0, r8
 8008daa:	f7ff fee7 	bl	8008b7c <_printf_common>
 8008dae:	3001      	adds	r0, #1
 8008db0:	d14a      	bne.n	8008e48 <_printf_i+0x1f0>
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295
 8008db6:	b004      	add	sp, #16
 8008db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	f043 0320 	orr.w	r3, r3, #32
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	4832      	ldr	r0, [pc, #200]	@ (8008e90 <_printf_i+0x238>)
 8008dc6:	2778      	movs	r7, #120	@ 0x78
 8008dc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	6831      	ldr	r1, [r6, #0]
 8008dd0:	061f      	lsls	r7, r3, #24
 8008dd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dd6:	d402      	bmi.n	8008dde <_printf_i+0x186>
 8008dd8:	065f      	lsls	r7, r3, #25
 8008dda:	bf48      	it	mi
 8008ddc:	b2ad      	uxthmi	r5, r5
 8008dde:	6031      	str	r1, [r6, #0]
 8008de0:	07d9      	lsls	r1, r3, #31
 8008de2:	bf44      	itt	mi
 8008de4:	f043 0320 	orrmi.w	r3, r3, #32
 8008de8:	6023      	strmi	r3, [r4, #0]
 8008dea:	b11d      	cbz	r5, 8008df4 <_printf_i+0x19c>
 8008dec:	2310      	movs	r3, #16
 8008dee:	e7ad      	b.n	8008d4c <_printf_i+0xf4>
 8008df0:	4826      	ldr	r0, [pc, #152]	@ (8008e8c <_printf_i+0x234>)
 8008df2:	e7e9      	b.n	8008dc8 <_printf_i+0x170>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	f023 0320 	bic.w	r3, r3, #32
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	e7f6      	b.n	8008dec <_printf_i+0x194>
 8008dfe:	4616      	mov	r6, r2
 8008e00:	e7bd      	b.n	8008d7e <_printf_i+0x126>
 8008e02:	6833      	ldr	r3, [r6, #0]
 8008e04:	6825      	ldr	r5, [r4, #0]
 8008e06:	6961      	ldr	r1, [r4, #20]
 8008e08:	1d18      	adds	r0, r3, #4
 8008e0a:	6030      	str	r0, [r6, #0]
 8008e0c:	062e      	lsls	r6, r5, #24
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	d501      	bpl.n	8008e16 <_printf_i+0x1be>
 8008e12:	6019      	str	r1, [r3, #0]
 8008e14:	e002      	b.n	8008e1c <_printf_i+0x1c4>
 8008e16:	0668      	lsls	r0, r5, #25
 8008e18:	d5fb      	bpl.n	8008e12 <_printf_i+0x1ba>
 8008e1a:	8019      	strh	r1, [r3, #0]
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	4616      	mov	r6, r2
 8008e22:	e7bc      	b.n	8008d9e <_printf_i+0x146>
 8008e24:	6833      	ldr	r3, [r6, #0]
 8008e26:	1d1a      	adds	r2, r3, #4
 8008e28:	6032      	str	r2, [r6, #0]
 8008e2a:	681e      	ldr	r6, [r3, #0]
 8008e2c:	6862      	ldr	r2, [r4, #4]
 8008e2e:	2100      	movs	r1, #0
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7f7 fa5d 	bl	80002f0 <memchr>
 8008e36:	b108      	cbz	r0, 8008e3c <_printf_i+0x1e4>
 8008e38:	1b80      	subs	r0, r0, r6
 8008e3a:	6060      	str	r0, [r4, #4]
 8008e3c:	6863      	ldr	r3, [r4, #4]
 8008e3e:	6123      	str	r3, [r4, #16]
 8008e40:	2300      	movs	r3, #0
 8008e42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e46:	e7aa      	b.n	8008d9e <_printf_i+0x146>
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	4632      	mov	r2, r6
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	4640      	mov	r0, r8
 8008e50:	47d0      	blx	sl
 8008e52:	3001      	adds	r0, #1
 8008e54:	d0ad      	beq.n	8008db2 <_printf_i+0x15a>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	079b      	lsls	r3, r3, #30
 8008e5a:	d413      	bmi.n	8008e84 <_printf_i+0x22c>
 8008e5c:	68e0      	ldr	r0, [r4, #12]
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	4298      	cmp	r0, r3
 8008e62:	bfb8      	it	lt
 8008e64:	4618      	movlt	r0, r3
 8008e66:	e7a6      	b.n	8008db6 <_printf_i+0x15e>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4632      	mov	r2, r6
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	4640      	mov	r0, r8
 8008e70:	47d0      	blx	sl
 8008e72:	3001      	adds	r0, #1
 8008e74:	d09d      	beq.n	8008db2 <_printf_i+0x15a>
 8008e76:	3501      	adds	r5, #1
 8008e78:	68e3      	ldr	r3, [r4, #12]
 8008e7a:	9903      	ldr	r1, [sp, #12]
 8008e7c:	1a5b      	subs	r3, r3, r1
 8008e7e:	42ab      	cmp	r3, r5
 8008e80:	dcf2      	bgt.n	8008e68 <_printf_i+0x210>
 8008e82:	e7eb      	b.n	8008e5c <_printf_i+0x204>
 8008e84:	2500      	movs	r5, #0
 8008e86:	f104 0619 	add.w	r6, r4, #25
 8008e8a:	e7f5      	b.n	8008e78 <_printf_i+0x220>
 8008e8c:	080090b5 	.word	0x080090b5
 8008e90:	080090c6 	.word	0x080090c6

08008e94 <memmove>:
 8008e94:	4288      	cmp	r0, r1
 8008e96:	b510      	push	{r4, lr}
 8008e98:	eb01 0402 	add.w	r4, r1, r2
 8008e9c:	d902      	bls.n	8008ea4 <memmove+0x10>
 8008e9e:	4284      	cmp	r4, r0
 8008ea0:	4623      	mov	r3, r4
 8008ea2:	d807      	bhi.n	8008eb4 <memmove+0x20>
 8008ea4:	1e43      	subs	r3, r0, #1
 8008ea6:	42a1      	cmp	r1, r4
 8008ea8:	d008      	beq.n	8008ebc <memmove+0x28>
 8008eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eb2:	e7f8      	b.n	8008ea6 <memmove+0x12>
 8008eb4:	4402      	add	r2, r0
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	428a      	cmp	r2, r1
 8008eba:	d100      	bne.n	8008ebe <memmove+0x2a>
 8008ebc:	bd10      	pop	{r4, pc}
 8008ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ec6:	e7f7      	b.n	8008eb8 <memmove+0x24>

08008ec8 <_sbrk_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_sbrk_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f8 feae 	bl	8001c34 <_sbrk>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_sbrk_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_sbrk_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	24001400 	.word	0x24001400

08008ee8 <_realloc_r>:
 8008ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eec:	4607      	mov	r7, r0
 8008eee:	4614      	mov	r4, r2
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	b921      	cbnz	r1, 8008efe <_realloc_r+0x16>
 8008ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	4611      	mov	r1, r2
 8008efa:	f7ff bc5b 	b.w	80087b4 <_malloc_r>
 8008efe:	b92a      	cbnz	r2, 8008f0c <_realloc_r+0x24>
 8008f00:	f7ff fbec 	bl	80086dc <_free_r>
 8008f04:	4625      	mov	r5, r4
 8008f06:	4628      	mov	r0, r5
 8008f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f0c:	f000 f81a 	bl	8008f44 <_malloc_usable_size_r>
 8008f10:	4284      	cmp	r4, r0
 8008f12:	4606      	mov	r6, r0
 8008f14:	d802      	bhi.n	8008f1c <_realloc_r+0x34>
 8008f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f1a:	d8f4      	bhi.n	8008f06 <_realloc_r+0x1e>
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f7ff fc48 	bl	80087b4 <_malloc_r>
 8008f24:	4680      	mov	r8, r0
 8008f26:	b908      	cbnz	r0, 8008f2c <_realloc_r+0x44>
 8008f28:	4645      	mov	r5, r8
 8008f2a:	e7ec      	b.n	8008f06 <_realloc_r+0x1e>
 8008f2c:	42b4      	cmp	r4, r6
 8008f2e:	4622      	mov	r2, r4
 8008f30:	4629      	mov	r1, r5
 8008f32:	bf28      	it	cs
 8008f34:	4632      	movcs	r2, r6
 8008f36:	f7ff fbc3 	bl	80086c0 <memcpy>
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f7ff fbcd 	bl	80086dc <_free_r>
 8008f42:	e7f1      	b.n	8008f28 <_realloc_r+0x40>

08008f44 <_malloc_usable_size_r>:
 8008f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f48:	1f18      	subs	r0, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bfbc      	itt	lt
 8008f4e:	580b      	ldrlt	r3, [r1, r0]
 8008f50:	18c0      	addlt	r0, r0, r3
 8008f52:	4770      	bx	lr

08008f54 <_init>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	bf00      	nop
 8008f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5a:	bc08      	pop	{r3}
 8008f5c:	469e      	mov	lr, r3
 8008f5e:	4770      	bx	lr

08008f60 <_fini>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr
