
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5b0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800a850  0800a850  0000b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a9bc  0800a9bc  0000b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a9c4  0800a9c4  0000b9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a9c8  0800a9c8  0000b9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a9cc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001600  24000060  0800aa2c  0000c060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001660  0800aa2c  0000c660  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019c39  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002eb4  00000000  00000000  00025cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001140  00000000  00000000  00028b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d55  00000000  00000000  00029cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038f9a  00000000  00000000  0002aa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001868d  00000000  00000000  000639af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a4cd  00000000  00000000  0007c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e6509  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e1c  00000000  00000000  001e654c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001eb368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a838 	.word	0x0800a838

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800a838 	.word	0x0800a838

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, CAN.Tx_Buffer) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f002 ff8a 	bl	800361a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f001 f96c 	bl	80019e8 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010dc 	.word	0x240010dc
 800071c:	24000080 	.word	0x24000080
 8000720:	24001100 	.word	0x24001100

08000724 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800072e:	f000 fce7 	bl	8001100 <W25N_WaitForReady>
	//HAL_Delay(1000);
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d012      	beq.n	800075e <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 8000738:	4b67      	ldr	r3, [pc, #412]	@ (80008d8 <Flash_Init+0x1b4>)
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 faf3 	bl	8000d28 <Read_Status_Register>
 8000742:	4603      	mov	r3, r0
 8000744:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000746:	7ebb      	ldrb	r3, [r7, #26]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR.SR_2_Addr, data);
 800074e:	4b62      	ldr	r3, [pc, #392]	@ (80008d8 <Flash_Init+0x1b4>)
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	7eba      	ldrb	r2, [r7, #26]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fb16 	bl	8000d88 <Write_Status_Register>
 800075c:	e011      	b.n	8000782 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR.SR_2_Addr);
 800075e:	4b5e      	ldr	r3, [pc, #376]	@ (80008d8 <Flash_Init+0x1b4>)
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fae0 	bl	8000d28 <Read_Status_Register>
 8000768:	4603      	mov	r3, r0
 800076a:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	f023 0308 	bic.w	r3, r3, #8
 8000772:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR.SR_2_Addr, data);
 8000774:	4b58      	ldr	r3, [pc, #352]	@ (80008d8 <Flash_Init+0x1b4>)
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	7efa      	ldrb	r2, [r7, #27]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fb03 	bl	8000d88 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR.SR_1_Addr);
 8000782:	4b55      	ldr	r3, [pc, #340]	@ (80008d8 <Flash_Init+0x1b4>)
 8000784:	78db      	ldrb	r3, [r3, #3]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 face 	bl	8000d28 <Read_Status_Register>
 800078c:	4603      	mov	r3, r0
 800078e:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000790:	7e7b      	ldrb	r3, [r7, #25]
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 8000798:	7e7b      	ldrb	r3, [r7, #25]
 800079a:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 800079e:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR.SR_1_Addr, data);
 80007a0:	4b4d      	ldr	r3, [pc, #308]	@ (80008d8 <Flash_Init+0x1b4>)
 80007a2:	78db      	ldrb	r3, [r3, #3]
 80007a4:	7e7a      	ldrb	r2, [r7, #25]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 faed 	bl	8000d88 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007bc:	2300      	movs	r3, #0
 80007be:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes on a page = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007c4:	e031      	b.n	800082a <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80007c6:	2300      	movs	r3, #0
 80007c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007ca:	f107 0108 	add.w	r1, r7, #8
 80007ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007d0:	2210      	movs	r2, #16
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f950 	bl	8000a78 <Read_Data>

		for(int i = 0; i < 16; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e013      	b.n	8000806 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d109      	bne.n	8000800 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 80007ec:	2201      	movs	r2, #1
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3301      	adds	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	dde8      	ble.n	80007de <Flash_Init+0xba>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 800080c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d003      	beq.n	800081e <Flash_Init+0xfa>
			Temp_Page += 64;
 8000816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000818:	3340      	adds	r3, #64	@ 0x40
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800081c:	e005      	b.n	800082a <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 800081e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <Flash_Init+0x112>
				break;
			}
			else{
				Temp_Page -= 64;
 8000824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000826:	3b40      	subs	r3, #64	@ 0x40
 8000828:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 800082a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800082c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000830:	4293      	cmp	r3, r2
 8000832:	d1c8      	bne.n	80007c6 <Flash_Init+0xa2>
 8000834:	e000      	b.n	8000838 <Flash_Init+0x114>
				break;
 8000836:	bf00      	nop
			}
		}
	}
	Page_Bit=0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 800083c:	e02a      	b.n	8000894 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 800083e:	2300      	movs	r3, #0
 8000840:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000842:	f107 0108 	add.w	r1, r7, #8
 8000846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000848:	2210      	movs	r2, #16
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f914 	bl	8000a78 <Read_Data>

		for(int i = 0; i < 16; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e013      	b.n	800087e <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 8000856:	f107 0208 	add.w	r2, r7, #8
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2bff      	cmp	r3, #255	@ 0xff
 8000862:	d109      	bne.n	8000878 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	b21a      	sxth	r2, r3
 800086e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000872:	4313      	orrs	r3, r2
 8000874:	b21b      	sxth	r3, r3
 8000876:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	3301      	adds	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	dde8      	ble.n	8000856 <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088a:	4293      	cmp	r3, r2
 800088c:	d002      	beq.n	8000894 <Flash_Init+0x170>
			Temp_Page++;
 800088e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000890:	3301      	adds	r3, #1
 8000892:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000894:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089a:	4293      	cmp	r3, r2
 800089c:	d1cf      	bne.n	800083e <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Flash.Page_Index=Temp_Page;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <Flash_Init+0x1b8>)
 80008a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008a4:	461a      	mov	r2, r3
 80008a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008a8:	8153      	strh	r3, [r2, #10]
	Flash.Block_Mem=(Flash.Page_Index/64);
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <Flash_Init+0x1b8>)
 80008ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008b0:	895b      	ldrh	r3, [r3, #10]
 80008b2:	099b      	lsrs	r3, r3, #6
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <Flash_Init+0x1b8>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008bc:	811a      	strh	r2, [r3, #8]
	USART3_Printf("Current page is: %u\r\n", Flash.Page_Index);
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <Flash_Init+0x1b8>)
 80008c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008c4:	895b      	ldrh	r3, [r3, #10]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <Flash_Init+0x1bc>)
 80008ca:	f000 fbf3 	bl	80010b4 <USART3_Printf>
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2400009c 	.word	0x2400009c
 80008dc:	240000a4 	.word	0x240000a4
 80008e0:	0800a850 	.word	0x0800a850

080008e4 <Read_Register>:

//Read all status registers
void Read_Register(SR_Data SR){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	463b      	mov	r3, r7
 80008ec:	e883 0003 	stmia.w	r3, {r0, r1}
	SR.SR_1 = Read_Status_Register(SR.SR_1_Addr);
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fa18 	bl	8000d28 <Read_Status_Register>
 80008f8:	4603      	mov	r3, r0
 80008fa:	703b      	strb	r3, [r7, #0]
	delay_ns(DELAY_NS);
 80008fc:	2064      	movs	r0, #100	@ 0x64
 80008fe:	f000 fbaf 	bl	8001060 <delay_ns>
	SR.SR_2 = Read_Status_Register(SR.SR_2_Addr);
 8000902:	793b      	ldrb	r3, [r7, #4]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fa0f 	bl	8000d28 <Read_Status_Register>
 800090a:	4603      	mov	r3, r0
 800090c:	707b      	strb	r3, [r7, #1]
	delay_ns(DELAY_NS);
 800090e:	2064      	movs	r0, #100	@ 0x64
 8000910:	f000 fba6 	bl	8001060 <delay_ns>
	SR.SR_3 = Read_Status_Register(SR.SR_3_Addr);
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fa06 	bl	8000d28 <Read_Status_Register>
 800091c:	4603      	mov	r3, r0
 800091e:	70bb      	strb	r3, [r7, #2]
	delay_ns(DELAY_NS);
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f000 fb9d 	bl	8001060 <delay_ns>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
	if((Flash.Page_Index==0)&&(Flash.Buffer_Index==0)){
 800093c:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <Write_Data+0x94>)
 800093e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000942:	895b      	ldrh	r3, [r3, #10]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d108      	bne.n	800095a <Write_Data+0x2a>
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <Write_Data+0x94>)
 800094a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <Write_Data+0x2a>
		Block_Erase(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb4f 	bl	8000ff8 <Block_Erase>
	}
	uint16_t count=0;
 800095a:	2300      	movs	r3, #0
 800095c:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 800095e:	e028      	b.n	80009b2 <Write_Data+0x82>
		*Flash.Buffer_p=*data;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <Write_Data+0x94>)
 8000962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	701a      	strb	r2, [r3, #0]
		Flash.Buffer_p++;
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <Write_Data+0x94>)
 8000970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	3301      	adds	r3, #1
 8000978:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <Write_Data+0x94>)
 800097a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800097e:	6053      	str	r3, [r2, #4]
		data++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
		Flash.Buffer_Index++;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <Write_Data+0x94>)
 8000988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <Write_Data+0x94>)
 8000994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000998:	801a      	strh	r2, [r3, #0]
		count++;
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	3301      	adds	r3, #1
 800099e:	81fb      	strh	r3, [r7, #14]
		if(Flash.Buffer_Index>=2048){
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <Write_Data+0x94>)
 80009a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009ac:	d301      	bcc.n	80009b2 <Write_Data+0x82>
			Write_to_page();
 80009ae:	f000 f80b 	bl	80009c8 <Write_to_page>
	while(count<lenght){
 80009b2:	89fa      	ldrh	r2, [r7, #14]
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d2      	bcc.n	8000960 <Write_Data+0x30>
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	240000a4 	.word	0x240000a4

080009c8 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	if(Flash.Buffer_flip==0){
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <Write_to_page+0xa8>)
 80009ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d116      	bne.n	8000a06 <Write_to_page+0x3e>
		Flash.Buffer_flip=1;
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <Write_to_page+0xa8>)
 80009da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009de:	2201      	movs	r2, #1
 80009e0:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_1;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <Write_to_page+0xa8>)
 80009e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <Write_to_page+0xac>)
 80009ec:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <Write_to_page+0xa8>)
 80009f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80009f4:	2200      	movs	r2, #0
 80009f6:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_0, sizeof(Flash.Buffer_0));
 80009f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009fc:	491c      	ldr	r1, [pc, #112]	@ (8000a70 <Write_to_page+0xa8>)
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fa24 	bl	8000e4c <Write_Data_Buffer>
 8000a04:	e015      	b.n	8000a32 <Write_to_page+0x6a>
	}
	else{
		Flash.Buffer_flip=0;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <Write_to_page+0xa8>)
 8000a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <Write_to_page+0xa8>)
 8000a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <Write_to_page+0xa8>)
 8000a1a:	6053      	str	r3, [r2, #4]
		Flash.Buffer_Index=0;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <Write_to_page+0xa8>)
 8000a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, Flash.Buffer_1, sizeof(Flash.Buffer_1));
 8000a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a2a:	4912      	ldr	r1, [pc, #72]	@ (8000a74 <Write_to_page+0xac>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fa0d 	bl	8000e4c <Write_Data_Buffer>
	}
	Write_Data_Flash(Flash.Page_Index);
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <Write_to_page+0xa8>)
 8000a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a38:	895b      	ldrh	r3, [r3, #10]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fa42 	bl	8000ec4 <Write_Data_Flash>
	Flash.Page_Index++;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <Write_to_page+0xa8>)
 8000a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a46:	895b      	ldrh	r3, [r3, #10]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <Write_to_page+0xa8>)
 8000a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a52:	815a      	strh	r2, [r3, #10]
	Flash.Buffer_Index=0;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <Write_to_page+0xa8>)
 8000a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Flash.Page_Index);
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <Write_to_page+0xa8>)
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	895b      	ldrh	r3, [r3, #10]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f81c 	bl	8000aa4 <Automatic_Block_Managment>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	240000a4 	.word	0x240000a4
 8000a74:	240008a4 	.word	0x240008a4

08000a78 <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fa4e 	bl	8000f2c <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	4619      	mov	r1, r3
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f000 fa7b 	bl	8000f90 <Read_Data_Buffer>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	099b      	lsrs	r3, r3, #6
 8000ab2:	81fb      	strh	r3, [r7, #14]
	if(!(Flash.Block_Mem==Block)){
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aba:	891b      	ldrh	r3, [r3, #8]
 8000abc:	89fa      	ldrh	r2, [r7, #14]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d00a      	beq.n	8000ad8 <Automatic_Block_Managment+0x34>
		Block_Erase(Page_Index);
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa97 	bl	8000ff8 <Block_Erase>
		Flash.Block_Mem=Block;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	89fb      	ldrh	r3, [r7, #14]
 8000ad4:	8113      	strh	r3, [r2, #8]
	}
	else{
		Flash.Block_Mem=Block;
	}
}
 8000ad6:	e005      	b.n	8000ae4 <Automatic_Block_Managment+0x40>
		Flash.Block_Mem=Block;
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <Automatic_Block_Managment+0x48>)
 8000ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ade:	461a      	mov	r2, r3
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	8113      	strh	r3, [r2, #8]
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	240000a4 	.word	0x240000a4

08000af0 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000af6:	482c      	ldr	r0, [pc, #176]	@ (8000ba8 <Chip_Erase+0xb8>)
 8000af8:	f000 fadc 	bl	80010b4 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	2201      	movs	r2, #1
 8000b02:	492a      	ldr	r1, [pc, #168]	@ (8000bac <Chip_Erase+0xbc>)
 8000b04:	482a      	ldr	r0, [pc, #168]	@ (8000bb0 <Chip_Erase+0xc0>)
 8000b06:	f007 fc38 	bl	800837a <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <Chip_Erase+0xbc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b59      	cmp	r3, #89	@ 0x59
 8000b10:	d143      	bne.n	8000b9a <Chip_Erase+0xaa>
		USART3_Printf("Sletter minne ...\r\n");
 8000b12:	4828      	ldr	r0, [pc, #160]	@ (8000bb4 <Chip_Erase+0xc4>)
 8000b14:	f000 face 	bl	80010b4 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	e009      	b.n	8000b32 <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	019b      	lsls	r3, r3, #6
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fa66 	bl	8000ff8 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b38:	ddf1      	ble.n	8000b1e <Chip_Erase+0x2e>
		}
		Flash.Buffer_Index=0;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b40:	2200      	movs	r2, #0
 8000b42:	801a      	strh	r2, [r3, #0]
		Flash.Page_Index=0;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	815a      	strh	r2, [r3, #10]
		Flash.Block_Mem=0;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b54:	2200      	movs	r2, #0
 8000b56:	811a      	strh	r2, [r3, #8]
		Flash.Buffer_flip=0;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b5e:	2200      	movs	r2, #0
 8000b60:	709a      	strb	r2, [r3, #2]
		Flash.Buffer_p=Flash.Buffer_0;
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b6c:	6053      	str	r3, [r2, #4]

		Flash_Data* pointer = &Flash;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <Chip_Erase+0xc8>)
 8000b70:	603b      	str	r3, [r7, #0]
		memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b78:	21ff      	movs	r1, #255	@ 0xff
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f009 f9de 	bl	8009f3c <memset>
		memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b8a:	21ff      	movs	r1, #255	@ 0xff
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f009 f9d5 	bl	8009f3c <memset>
		USART3_Printf("Ferdig\r\n");
 8000b92:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <Chip_Erase+0xcc>)
 8000b94:	f000 fa8e 	bl	80010b4 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b98:	e002      	b.n	8000ba0 <Chip_Erase+0xb0>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b9a:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <Chip_Erase+0xd0>)
 8000b9c:	f000 fa8a 	bl	80010b4 <USART3_Printf>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	0800a868 	.word	0x0800a868
 8000bac:	2400007d 	.word	0x2400007d
 8000bb0:	24001478 	.word	0x24001478
 8000bb4:	0800a89c 	.word	0x0800a89c
 8000bb8:	240000a4 	.word	0x240000a4
 8000bbc:	0800a8b0 	.word	0x0800a8b0
 8000bc0:	0800a8bc 	.word	0x0800a8bc

08000bc4 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	b089      	sub	sp, #36	@ 0x24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80fb      	strh	r3, [r7, #6]
 8000bd0:	466b      	mov	r3, sp
 8000bd2:	461e      	mov	r6, r3
	Select_Page_Read(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f9a9 	bl	8000f2c <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000bda:	88f9      	ldrh	r1, [r7, #6]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	3b01      	subs	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	b28b      	uxth	r3, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	4698      	mov	r8, r3
 8000be8:	4691      	mov	r9, r2
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bfe:	b28b      	uxth	r3, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	461c      	mov	r4, r3
 8000c04:	4615      	mov	r5, r2
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	00eb      	lsls	r3, r5, #3
 8000c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c14:	00e2      	lsls	r2, r4, #3
 8000c16:	460b      	mov	r3, r1
 8000c18:	3307      	adds	r3, #7
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c22:	466b      	mov	r3, sp
 8000c24:	3300      	adds	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000c34:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000c40:	2200      	movs	r2, #0
 8000c42:	2110      	movs	r1, #16
 8000c44:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <Read_Data_Cont+0x118>)
 8000c46:	f003 fde7 	bl	8004818 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000c4a:	2364      	movs	r3, #100	@ 0x64
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4922      	ldr	r1, [pc, #136]	@ (8000cd8 <Read_Data_Cont+0x114>)
 8000c50:	4823      	ldr	r0, [pc, #140]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c52:	f006 fd6b 	bl	800772c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	4820      	ldr	r0, [pc, #128]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c60:	f006 ff52 	bl	8007b08 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3303      	adds	r3, #3
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	330b      	adds	r3, #11
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c7c:	e018      	b.n	8000cb0 <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c7e:	8bf9      	ldrh	r1, [r7, #30]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4817      	ldr	r0, [pc, #92]	@ (8000ce4 <Read_Data_Cont+0x120>)
 8000c86:	f000 fa15 	bl	80010b4 <USART3_Printf>
		HAL_SPI_Receive(&hspi1, Data_Buffer, len, HAL_MAX_DELAY);
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	4813      	ldr	r0, [pc, #76]	@ (8000ce0 <Read_Data_Cont+0x11c>)
 8000c94:	f006 ff38 	bl	8007b08 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	330b      	adds	r3, #11
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cb6:	d103      	bne.n	8000cc0 <Read_Data_Cont+0xfc>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	7bdb      	ldrb	r3, [r3, #15]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d0de      	beq.n	8000c7e <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <Read_Data_Cont+0x118>)
 8000cc6:	f003 fda7 	bl	8004818 <HAL_GPIO_WritePin>
 8000cca:	46b5      	mov	sp, r6
}
 8000ccc:	bf00      	nop
 8000cce:	3724      	adds	r7, #36	@ 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000090 	.word	0x24000090
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240011a0 	.word	0x240011a0
 8000ce4:	0800a8d4 	.word	0x0800a8d4

08000ce8 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <Write_Enable+0x34>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <Write_Enable+0x38>)
 8000cf8:	f003 fd8e 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 1, 100);
 8000cfc:	2364      	movs	r3, #100	@ 0x64
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4906      	ldr	r1, [pc, #24]	@ (8000d1c <Write_Enable+0x34>)
 8000d02:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <Write_Enable+0x3c>)
 8000d04:	f006 fd12 	bl	800772c <HAL_SPI_Transmit>
	csHIGH();
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <Write_Enable+0x38>)
 8000d0e:	f003 fd83 	bl	8004818 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d12:	2064      	movs	r0, #100	@ 0x64
 8000d14:	f000 f9a4 	bl	8001060 <delay_ns>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000090 	.word	0x24000090
 8000d20:	58020000 	.word	0x58020000
 8000d24:	240011a0 	.word	0x240011a0

08000d28 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d34:	220f      	movs	r2, #15
 8000d36:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <Read_Status_Register+0x54>)
 8000d44:	f003 fd68 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000d48:	2364      	movs	r3, #100	@ 0x64
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	490a      	ldr	r1, [pc, #40]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <Read_Status_Register+0x58>)
 8000d50:	f006 fcec 	bl	800772c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, SPI.Rx_Buffer, 1, 100);
 8000d54:	2364      	movs	r3, #100	@ 0x64
 8000d56:	2201      	movs	r2, #1
 8000d58:	490a      	ldr	r1, [pc, #40]	@ (8000d84 <Read_Status_Register+0x5c>)
 8000d5a:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <Read_Status_Register+0x58>)
 8000d5c:	f006 fed4 	bl	8007b08 <HAL_SPI_Receive>
	csHIGH();
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <Read_Status_Register+0x54>)
 8000d66:	f003 fd57 	bl	8004818 <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d6a:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <Read_Status_Register+0x50>)
 8000d6c:	795b      	ldrb	r3, [r3, #5]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000090 	.word	0x24000090
 8000d7c:	58020000 	.word	0x58020000
 8000d80:	240011a0 	.word	0x240011a0
 8000d84:	24000095 	.word	0x24000095

08000d88 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460a      	mov	r2, r1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000daa:	2200      	movs	r2, #0
 8000dac:	2110      	movs	r1, #16
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <Write_Status_Register+0x54>)
 8000db0:	f003 fd32 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000db4:	2364      	movs	r3, #100	@ 0x64
 8000db6:	2203      	movs	r2, #3
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <Write_Status_Register+0x50>)
 8000dba:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <Write_Status_Register+0x58>)
 8000dbc:	f006 fcb6 	bl	800772c <HAL_SPI_Transmit>
	csHIGH();
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <Write_Status_Register+0x54>)
 8000dc6:	f003 fd27 	bl	8004818 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dca:	2064      	movs	r0, #100	@ 0x64
 8000dcc:	f000 f948 	bl	8001060 <delay_ns>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000090 	.word	0x24000090
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	240011a0 	.word	0x240011a0

08000de4 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <Read_ID+0x5c>)
 8000dec:	229f      	movs	r2, #159	@ 0x9f
 8000dee:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <Read_ID+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000df6:	2200      	movs	r2, #0
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <Read_ID+0x60>)
 8000dfc:	f003 fd0c 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 2, 100);
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	2202      	movs	r2, #2
 8000e04:	490e      	ldr	r1, [pc, #56]	@ (8000e40 <Read_ID+0x5c>)
 8000e06:	4810      	ldr	r0, [pc, #64]	@ (8000e48 <Read_ID+0x64>)
 8000e08:	f006 fc90 	bl	800772c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &Buffer[0], 4, 100);
 8000e0c:	1d39      	adds	r1, r7, #4
 8000e0e:	2364      	movs	r3, #100	@ 0x64
 8000e10:	2204      	movs	r2, #4
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <Read_ID+0x64>)
 8000e14:	f006 fe78 	bl	8007b08 <HAL_SPI_Receive>
	csHIGH();
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <Read_ID+0x60>)
 8000e1e:	f003 fcfb 	bl	8004818 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e22:	2064      	movs	r0, #100	@ 0x64
 8000e24:	f000 f91c 	bl	8001060 <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	041a      	lsls	r2, r3, #16
 8000e2c:	797b      	ldrb	r3, [r7, #5]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	79b9      	ldrb	r1, [r7, #6]
 8000e32:	430b      	orrs	r3, r1
 8000e34:	4313      	orrs	r3, r2
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000090 	.word	0x24000090
 8000e44:	58020000 	.word	0x58020000
 8000e48:	240011a0 	.word	0x240011a0

08000e4c <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e5c:	f7ff ff44 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e70:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e78:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	480f      	ldr	r0, [pc, #60]	@ (8000ebc <Write_Data_Buffer+0x70>)
 8000e80:	f003 fcca 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 3, 100);
 8000e84:	2364      	movs	r3, #100	@ 0x64
 8000e86:	2203      	movs	r2, #3
 8000e88:	490b      	ldr	r1, [pc, #44]	@ (8000eb8 <Write_Data_Buffer+0x6c>)
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <Write_Data_Buffer+0x74>)
 8000e8c:	f006 fc4e 	bl	800772c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, len, HAL_MAX_DELAY);
 8000e90:	88ba      	ldrh	r2, [r7, #4]
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	6839      	ldr	r1, [r7, #0]
 8000e98:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <Write_Data_Buffer+0x74>)
 8000e9a:	f006 fc47 	bl	800772c <HAL_SPI_Transmit>
	csHIGH();
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <Write_Data_Buffer+0x70>)
 8000ea4:	f003 fcb8 	bl	8004818 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000ea8:	2064      	movs	r0, #100	@ 0x64
 8000eaa:	f000 f8d9 	bl	8001060 <delay_ns>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24000090 	.word	0x24000090
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	240011a0 	.word	0x240011a0

08000ec4 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000ece:	f7ff ff0b 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ee8:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000ef0:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <Write_Data_Flash+0x60>)
 8000ef8:	f003 fc8e 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8000efc:	2364      	movs	r3, #100	@ 0x64
 8000efe:	2204      	movs	r2, #4
 8000f00:	4907      	ldr	r1, [pc, #28]	@ (8000f20 <Write_Data_Flash+0x5c>)
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <Write_Data_Flash+0x64>)
 8000f04:	f006 fc12 	bl	800772c <HAL_SPI_Transmit>
	csHIGH();
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <Write_Data_Flash+0x60>)
 8000f0e:	f003 fc83 	bl	8004818 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f12:	f000 f8f5 	bl	8001100 <W25N_WaitForReady>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000090 	.word	0x24000090
 8000f24:	58020000 	.word	0x58020000
 8000f28:	240011a0 	.word	0x240011a0

08000f2c <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f38:	2213      	movs	r2, #19
 8000f3a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f4c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f54:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <Select_Page_Read+0x5c>)
 8000f5c:	f003 fc5c 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	2204      	movs	r2, #4
 8000f64:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <Select_Page_Read+0x58>)
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <Select_Page_Read+0x60>)
 8000f68:	f006 fbe0 	bl	800772c <HAL_SPI_Transmit>
	csHIGH();
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <Select_Page_Read+0x5c>)
 8000f72:	f003 fc51 	bl	8004818 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f76:	f000 f8c3 	bl	8001100 <W25N_WaitForReady>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000090 	.word	0x24000090
 8000f88:	58020000 	.word	0x58020000
 8000f8c:	240011a0 	.word	0x240011a0

08000f90 <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <Read_Data_Buffer+0x60>)
 8000fba:	f003 fc2d 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer,4,100);
 8000fbe:	2364      	movs	r3, #100	@ 0x64
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	490a      	ldr	r1, [pc, #40]	@ (8000fec <Read_Data_Buffer+0x5c>)
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <Read_Data_Buffer+0x64>)
 8000fc6:	f006 fbb1 	bl	800772c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, Data, len, HAL_MAX_DELAY);
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <Read_Data_Buffer+0x64>)
 8000fd4:	f006 fd98 	bl	8007b08 <HAL_SPI_Receive>
	csHIGH();
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <Read_Data_Buffer+0x60>)
 8000fde:	f003 fc1b 	bl	8004818 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000090 	.word	0x24000090
 8000ff0:	58020000 	.word	0x58020000
 8000ff4:	240011a0 	.word	0x240011a0

08000ff8 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8001002:	f7ff fe71 	bl	8000ce8 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <Block_Erase+0x5c>)
 8001008:	22d8      	movs	r2, #216	@ 0xd8
 800100a:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <Block_Erase+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b29b      	uxth	r3, r3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <Block_Erase+0x5c>)
 800101c:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <Block_Erase+0x5c>)
 8001024:	70da      	strb	r2, [r3, #3]
	csLOW();
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	480b      	ldr	r0, [pc, #44]	@ (8001058 <Block_Erase+0x60>)
 800102c:	f003 fbf4 	bl	8004818 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, SPI.Tx_Buffer, 4, 100);
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	2204      	movs	r2, #4
 8001034:	4907      	ldr	r1, [pc, #28]	@ (8001054 <Block_Erase+0x5c>)
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <Block_Erase+0x64>)
 8001038:	f006 fb78 	bl	800772c <HAL_SPI_Transmit>
	csHIGH();
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <Block_Erase+0x60>)
 8001042:	f003 fbe9 	bl	8004818 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8001046:	f000 f85b 	bl	8001100 <W25N_WaitForReady>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000090 	.word	0x24000090
 8001058:	58020000 	.word	0x58020000
 800105c:	240011a0 	.word	0x240011a0

08001060 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <delay_ns+0x48>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0a5b      	lsrs	r3, r3, #9
 800106e:	4a0f      	ldr	r2, [pc, #60]	@ (80010ac <delay_ns+0x4c>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	09db      	lsrs	r3, r3, #7
 8001076:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <delay_ns+0x50>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	fb02 f303 	mul.w	r3, r2, r3
 8001086:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8001088:	bf00      	nop
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <delay_ns+0x50>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f8      	bhi.n	800108a <delay_ns+0x2a>
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	24000000 	.word	0x24000000
 80010ac:	00044b83 	.word	0x00044b83
 80010b0:	e0001000 	.word	0xe0001000

080010b4 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 80010b4:	b40f      	push	{r0, r1, r2, r3}
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b0a2      	sub	sp, #136	@ 0x88
 80010ba:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80010bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010c0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010c2:	f107 0008 	add.w	r0, r7, #8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	f008 ff27 	bl	8009f20 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f902 	bl	80002e0 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f107 0108 	add.w	r1, r7, #8
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <USART3_Printf+0x48>)
 80010ea:	f007 f8b8 	bl	800825e <HAL_UART_Transmit>
}
 80010ee:	bf00      	nop
 80010f0:	3788      	adds	r7, #136	@ 0x88
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f8:	b004      	add	sp, #16
 80010fa:	4770      	bx	lr
 80010fc:	24001478 	.word	0x24001478

08001100 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8001104:	2064      	movs	r0, #100	@ 0x64
 8001106:	f7ff ffab 	bl	8001060 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 800110a:	e002      	b.n	8001112 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 800110c:	2064      	movs	r0, #100	@ 0x64
 800110e:	f7ff ffa7 	bl	8001060 <delay_ns>
    while (Read_Status_Register(SR.SR_3_Addr) & 0x01) {
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <W25N_WaitForReady+0x2c>)
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe06 	bl	8000d28 <Read_Status_Register>
 800111c:	4603      	mov	r3, r0
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f2      	bne.n	800110c <W25N_WaitForReady+0xc>
    }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2400009c 	.word	0x2400009c

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f001 f956 	bl	80023e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f862 	bl	8001200 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init();
 800113c:	f000 fbf4 	bl	8001928 <init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 fb36 	bl	80017b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001144:	f000 f962 	bl	800140c <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8001148:	f000 f8d6 	bl	80012f8 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 800114c:	f000 fae4 	bl	8001718 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001150:	f000 f9b2 	bl	80014b8 <MX_UART5_Init>
  MX_UART7_Init();
 8001154:	f000 f9fc 	bl	8001550 <MX_UART7_Init>
  MX_UART8_Init();
 8001158:	f000 fa46 	bl	80015e8 <MX_UART8_Init>
  MX_USART2_UART_Init();
 800115c:	f000 fa90 	bl	8001680 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Flash_Init(0);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fadf 	bl	8000724 <Flash_Init>
  Flash.ID=Read_ID();
 8001166:	f7ff fe3d 	bl	8000de4 <Read_ID>
 800116a:	4603      	mov	r3, r0
 800116c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ec <main+0xbc>)
 800116e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001172:	60d3      	str	r3, [r2, #12]
  while (1)
  {
	  Read_Register(SR);
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <main+0xc0>)
 8001176:	e893 0003 	ldmia.w	r3, {r0, r1}
 800117a:	f7ff fbb3 	bl	80008e4 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 800117e:	2364      	movs	r3, #100	@ 0x64
 8001180:	2201      	movs	r2, #1
 8001182:	491c      	ldr	r1, [pc, #112]	@ (80011f4 <main+0xc4>)
 8001184:	481c      	ldr	r0, [pc, #112]	@ (80011f8 <main+0xc8>)
 8001186:	f007 f8f8 	bl	800837a <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <main+0xc4>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b31      	cmp	r3, #49	@ 0x31
 8001190:	d105      	bne.n	800119e <main+0x6e>
		  Read_Data_Cont(16);
 8001192:	2010      	movs	r0, #16
 8001194:	f7ff fd16 	bl	8000bc4 <Read_Data_Cont>
		  command = 0;
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <main+0xc4>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <main+0xc4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b32      	cmp	r3, #50	@ 0x32
 80011a4:	d109      	bne.n	80011ba <main+0x8a>
		  Start_Flight_Recording=1;
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <main+0xcc>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 80011ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80011b0:	f7ff fa84 	bl	80006bc <CAN_SendMessage>
		  command=0;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <main+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <main+0xc4>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b33      	cmp	r3, #51	@ 0x33
 80011c0:	d109      	bne.n	80011d6 <main+0xa6>
		  Start_Flight_Recording=0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <main+0xcc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 80011c8:	f240 1001 	movw	r0, #257	@ 0x101
 80011cc:	f7ff fa76 	bl	80006bc <CAN_SendMessage>
		  command=0;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <main+0xc4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
	  }

	  //Erase
	  if(command==0x34){
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <main+0xc4>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b34      	cmp	r3, #52	@ 0x34
 80011dc:	d1ca      	bne.n	8001174 <main+0x44>
		  Chip_Erase();
 80011de:	f7ff fc87 	bl	8000af0 <Chip_Erase>
		  command=0;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <main+0xc4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
	  Read_Register(SR);
 80011e8:	e7c4      	b.n	8001174 <main+0x44>
 80011ea:	bf00      	nop
 80011ec:	240000a4 	.word	0x240000a4
 80011f0:	2400009c 	.word	0x2400009c
 80011f4:	2400007d 	.word	0x2400007d
 80011f8:	24001478 	.word	0x24001478
 80011fc:	2400007c 	.word	0x2400007c

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b09c      	sub	sp, #112	@ 0x70
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120a:	224c      	movs	r2, #76	@ 0x4c
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f008 fe94 	bl	8009f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f008 fe8e 	bl	8009f3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001220:	2002      	movs	r0, #2
 8001222:	f003 fb13 	bl	800484c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b31      	ldr	r3, [pc, #196]	@ (80012f0 <SystemClock_Config+0xf0>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a30      	ldr	r2, [pc, #192]	@ (80012f0 <SystemClock_Config+0xf0>)
 8001230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <SystemClock_Config+0xf0>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <SystemClock_Config+0xf4>)
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	4a2b      	ldr	r2, [pc, #172]	@ (80012f4 <SystemClock_Config+0xf4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800124c:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <SystemClock_Config+0xf4>)
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001258:	bf00      	nop
 800125a:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <SystemClock_Config+0xf0>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001266:	d1f8      	bne.n	800125a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001268:	2302      	movs	r3, #2
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800126c:	2301      	movs	r3, #1
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001270:	2340      	movs	r3, #64	@ 0x40
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001274:	2302      	movs	r3, #2
 8001276:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001278:	2300      	movs	r3, #0
 800127a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800127c:	2304      	movs	r3, #4
 800127e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001280:	233c      	movs	r3, #60	@ 0x3c
 8001282:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001288:	230a      	movs	r3, #10
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800128c:	2302      	movs	r3, #2
 800128e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001290:	230c      	movs	r3, #12
 8001292:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001294:	2300      	movs	r3, #0
 8001296:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fb0d 	bl	80048c0 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012ac:	f000 fb9c 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	233f      	movs	r3, #63	@ 0x3f
 80012b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2303      	movs	r3, #3
 80012b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012bc:	2308      	movs	r3, #8
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012c0:	2340      	movs	r3, #64	@ 0x40
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012c4:	2340      	movs	r3, #64	@ 0x40
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012ce:	2340      	movs	r3, #64	@ 0x40
 80012d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2104      	movs	r1, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 ff4c 	bl	8005174 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80012e2:	f000 fb81 	bl	80019e8 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3770      	adds	r7, #112	@ 0x70
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	58024800 	.word	0x58024800
 80012f4:	58000400 	.word	0x58000400

080012f8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80012fe:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <MX_FDCAN1_Init+0x108>)
 8001300:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001304:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <MX_FDCAN1_Init+0x108>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800130a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800130e:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <MX_FDCAN1_Init+0x108>)
 8001310:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800131c:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800131e:	4a3a      	ldr	r2, [pc, #232]	@ (8001408 <MX_FDCAN1_Init+0x110>)
 8001320:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001322:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001328:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001330:	2200      	movs	r2, #0
 8001332:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001334:	4b33      	ldr	r3, [pc, #204]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001336:	2200      	movs	r2, #0
 8001338:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800133a:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800133c:	2200      	movs	r2, #0
 800133e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001340:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001342:	2201      	movs	r2, #1
 8001344:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8001346:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001348:	2202      	movs	r2, #2
 800134a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 800134c:	4b2d      	ldr	r3, [pc, #180]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800134e:	2205      	movs	r2, #5
 8001350:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001352:	4b2c      	ldr	r3, [pc, #176]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001354:	2202      	movs	r2, #2
 8001356:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001358:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800135a:	2201      	movs	r2, #1
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800135e:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001360:	2203      	movs	r2, #3
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001366:	2204      	movs	r2, #4
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800136c:	2203      	movs	r2, #3
 800136e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001370:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001372:	2200      	movs	r2, #0
 8001374:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001376:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001378:	2200      	movs	r2, #0
 800137a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800137c:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800137e:	2200      	movs	r2, #0
 8001380:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8001382:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001384:	2240      	movs	r2, #64	@ 0x40
 8001386:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001388:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800138a:	2204      	movs	r2, #4
 800138c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800138e:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001390:	2200      	movs	r2, #0
 8001392:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 8001396:	2204      	movs	r2, #4
 8001398:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 800139c:	2200      	movs	r2, #0
 800139e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80013a0:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013a2:	2204      	movs	r2, #4
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80013a6:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013c4:	480f      	ldr	r0, [pc, #60]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013c6:	f001 ff1f 	bl	8003208 <HAL_FDCAN_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80013d0:	f000 fb0a 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80013d4:	480b      	ldr	r0, [pc, #44]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013d6:	f002 f8f5 	bl	80035c4 <HAL_FDCAN_Start>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80013e0:	f000 fb02 	bl	80019e8 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80013e4:	2200      	movs	r2, #0
 80013e6:	2101      	movs	r1, #1
 80013e8:	4806      	ldr	r0, [pc, #24]	@ (8001404 <MX_FDCAN1_Init+0x10c>)
 80013ea:	f002 fadd 	bl	80039a8 <HAL_FDCAN_ActivateNotification>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80013f4:	f000 faf8 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58024400 	.word	0x58024400
 8001404:	24001100 	.word	0x24001100
 8001408:	4000a000 	.word	0x4000a000

0800140c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001412:	4a28      	ldr	r2, [pc, #160]	@ (80014b4 <MX_SPI1_Init+0xa8>)
 8001414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001418:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800141c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001426:	2207      	movs	r2, #7
 8001428:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142a:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001430:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001438:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800143c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800143e:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001444:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001460:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800149e:	f006 f821 	bl	80074e4 <HAL_SPI_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014a8:	f000 fa9e 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	240011a0 	.word	0x240011a0
 80014b4:	40013000 	.word	0x40013000

080014b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014bc:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <MX_UART5_Init+0x90>)
 80014be:	4a23      	ldr	r2, [pc, #140]	@ (800154c <MX_UART5_Init+0x94>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <MX_UART5_Init+0x90>)
 80014c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <MX_UART5_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <MX_UART5_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <MX_UART5_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_UART5_Init+0x90>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <MX_UART5_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <MX_UART5_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <MX_UART5_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <MX_UART5_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fa:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <MX_UART5_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001500:	4811      	ldr	r0, [pc, #68]	@ (8001548 <MX_UART5_Init+0x90>)
 8001502:	f006 fe5c 	bl	80081be <HAL_UART_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800150c:	f000 fa6c 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001510:	2100      	movs	r1, #0
 8001512:	480d      	ldr	r0, [pc, #52]	@ (8001548 <MX_UART5_Init+0x90>)
 8001514:	f008 fc0c 	bl	8009d30 <HAL_UARTEx_SetTxFifoThreshold>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800151e:	f000 fa63 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001522:	2100      	movs	r1, #0
 8001524:	4808      	ldr	r0, [pc, #32]	@ (8001548 <MX_UART5_Init+0x90>)
 8001526:	f008 fc41 	bl	8009dac <HAL_UARTEx_SetRxFifoThreshold>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001530:	f000 fa5a 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	@ (8001548 <MX_UART5_Init+0x90>)
 8001536:	f008 fbc2 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001540:	f000 fa52 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	24001228 	.word	0x24001228
 800154c:	40005000 	.word	0x40005000

08001550 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_UART7_Init+0x90>)
 8001556:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <MX_UART7_Init+0x94>)
 8001558:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <MX_UART7_Init+0x90>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_UART7_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_UART7_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_UART7_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_UART7_Init+0x90>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_UART7_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_UART7_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_UART7_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_UART7_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <MX_UART7_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001598:	4811      	ldr	r0, [pc, #68]	@ (80015e0 <MX_UART7_Init+0x90>)
 800159a:	f006 fe10 	bl	80081be <HAL_UART_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80015a4:	f000 fa20 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a8:	2100      	movs	r1, #0
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_UART7_Init+0x90>)
 80015ac:	f008 fbc0 	bl	8009d30 <HAL_UARTEx_SetTxFifoThreshold>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80015b6:	f000 fa17 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <MX_UART7_Init+0x90>)
 80015be:	f008 fbf5 	bl	8009dac <HAL_UARTEx_SetRxFifoThreshold>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80015c8:	f000 fa0e 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_UART7_Init+0x90>)
 80015ce:	f008 fb76 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80015d8:	f000 fa06 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	240012bc 	.word	0x240012bc
 80015e4:	40007800 	.word	0x40007800

080015e8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <MX_UART8_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	@ (800167c <MX_UART8_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_UART8_Init+0x90>)
 80015f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015f8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_UART8_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_UART8_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_UART8_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_UART8_Init+0x90>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_UART8_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_UART8_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_UART8_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_UART8_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_UART8_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001630:	4811      	ldr	r0, [pc, #68]	@ (8001678 <MX_UART8_Init+0x90>)
 8001632:	f006 fdc4 	bl	80081be <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 f9d4 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_UART8_Init+0x90>)
 8001644:	f008 fb74 	bl	8009d30 <HAL_UARTEx_SetTxFifoThreshold>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800164e:	f000 f9cb 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4808      	ldr	r0, [pc, #32]	@ (8001678 <MX_UART8_Init+0x90>)
 8001656:	f008 fba9 	bl	8009dac <HAL_UARTEx_SetRxFifoThreshold>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001660:	f000 f9c2 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	@ (8001678 <MX_UART8_Init+0x90>)
 8001666:	f008 fb2a 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001670:	f000 f9ba 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24001350 	.word	0x24001350
 800167c:	40007c00 	.word	0x40007c00

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 8001686:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <MX_USART2_UART_Init+0x94>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 800168c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c8:	4811      	ldr	r0, [pc, #68]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016ca:	f006 fd78 	bl	80081be <HAL_UART_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016d4:	f000 f988 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d8:	2100      	movs	r1, #0
 80016da:	480d      	ldr	r0, [pc, #52]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016dc:	f008 fb28 	bl	8009d30 <HAL_UARTEx_SetTxFifoThreshold>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016e6:	f000 f97f 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4808      	ldr	r0, [pc, #32]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016ee:	f008 fb5d 	bl	8009dac <HAL_UARTEx_SetRxFifoThreshold>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016f8:	f000 f976 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <MX_USART2_UART_Init+0x90>)
 80016fe:	f008 fade 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001708:	f000 f96e 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	240013e4 	.word	0x240013e4
 8001714:	40004400 	.word	0x40004400

08001718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800171c:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 800171e:	4a23      	ldr	r2, [pc, #140]	@ (80017ac <MX_USART3_UART_Init+0x94>)
 8001720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001762:	f006 fd2c 	bl	80081be <HAL_UART_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 f93c 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001774:	f008 fadc 	bl	8009d30 <HAL_UARTEx_SetTxFifoThreshold>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800177e:	f000 f933 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001782:	2100      	movs	r1, #0
 8001784:	4808      	ldr	r0, [pc, #32]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001786:	f008 fb11 	bl	8009dac <HAL_UARTEx_SetRxFifoThreshold>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001790:	f000 f92a 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MX_USART3_UART_Init+0x90>)
 8001796:	f008 fa92 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 f922 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	24001478 	.word	0x24001478
 80017ac:	40004800 	.word	0x40004800

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b54      	ldr	r3, [pc, #336]	@ (8001918 <MX_GPIO_Init+0x168>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	4a52      	ldr	r2, [pc, #328]	@ (8001918 <MX_GPIO_Init+0x168>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d6:	4b50      	ldr	r3, [pc, #320]	@ (8001918 <MX_GPIO_Init+0x168>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001918 <MX_GPIO_Init+0x168>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	4a4b      	ldr	r2, [pc, #300]	@ (8001918 <MX_GPIO_Init+0x168>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f4:	4b48      	ldr	r3, [pc, #288]	@ (8001918 <MX_GPIO_Init+0x168>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b45      	ldr	r3, [pc, #276]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001808:	4a43      	ldr	r2, [pc, #268]	@ (8001918 <MX_GPIO_Init+0x168>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001812:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	4a3c      	ldr	r2, [pc, #240]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001830:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800183e:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001844:	4a34      	ldr	r2, [pc, #208]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184e:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <MX_GPIO_Init+0x168>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001862:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186c:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <MX_GPIO_Init+0x168>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <MX_GPIO_Init+0x168>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	4a25      	ldr	r2, [pc, #148]	@ (8001918 <MX_GPIO_Init+0x168>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <MX_GPIO_Init+0x168>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2110      	movs	r1, #16
 800189c:	481f      	ldr	r0, [pc, #124]	@ (800191c <MX_GPIO_Init+0x16c>)
 800189e:	f002 ffbb 	bl	8004818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80018a8:	481d      	ldr	r0, [pc, #116]	@ (8001920 <MX_GPIO_Init+0x170>)
 80018aa:	f002 ffb5 	bl	8004818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	481c      	ldr	r0, [pc, #112]	@ (8001924 <MX_GPIO_Init+0x174>)
 80018b4:	f002 ffb0 	bl	8004818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80018b8:	2310      	movs	r3, #16
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4813      	ldr	r0, [pc, #76]	@ (800191c <MX_GPIO_Init+0x16c>)
 80018d0:	f002 fdf2 	bl	80044b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018d4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <MX_GPIO_Init+0x170>)
 80018ee:	f002 fde3 	bl	80044b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_GPIO_Init+0x174>)
 800190a:	f002 fdd5 	bl	80044b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	@ 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	58024400 	.word	0x58024400
 800191c:	58020000 	.word	0x58020000
 8001920:	58020400 	.word	0x58020400
 8001924:	58021800 	.word	0x58021800

08001928 <init>:

/* USER CODE BEGIN 4 */

static void init(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

	//Assigning status register addresses
	SR.SR_1 = 0;
 800192e:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <init+0xb0>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
	SR.SR_1_Addr = 0xA0;
 8001934:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <init+0xb0>)
 8001936:	22a0      	movs	r2, #160	@ 0xa0
 8001938:	70da      	strb	r2, [r3, #3]
	SR.SR_2 = 0;
 800193a:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <init+0xb0>)
 800193c:	2200      	movs	r2, #0
 800193e:	705a      	strb	r2, [r3, #1]
	SR.SR_2_Addr = 0xB0;
 8001940:	4b25      	ldr	r3, [pc, #148]	@ (80019d8 <init+0xb0>)
 8001942:	22b0      	movs	r2, #176	@ 0xb0
 8001944:	711a      	strb	r2, [r3, #4]
	SR.SR_3 = 0;
 8001946:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <init+0xb0>)
 8001948:	2200      	movs	r2, #0
 800194a:	709a      	strb	r2, [r3, #2]
	SR.SR_3_Addr = 0xC0;
 800194c:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <init+0xb0>)
 800194e:	22c0      	movs	r2, #192	@ 0xc0
 8001950:	715a      	strb	r2, [r3, #5]

	Flash_Data* pointer = &Flash;
 8001952:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <init+0xb4>)
 8001954:	607b      	str	r3, [r7, #4]

	memset(pointer->Buffer_0, 0xFF, sizeof(pointer->Buffer_0));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800195c:	21ff      	movs	r1, #255	@ 0xff
 800195e:	4618      	mov	r0, r3
 8001960:	f008 faec 	bl	8009f3c <memset>
	memset(pointer->Buffer_1, 0xFF, sizeof(pointer->Buffer_1));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800196e:	21ff      	movs	r1, #255	@ 0xff
 8001970:	4618      	mov	r0, r3
 8001972:	f008 fae3 	bl	8009f3c <memset>
	Flash.Buffer_Index = 0;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <init+0xb4>)
 8001978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
	Flash.Buffer_flip = 0;
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <init+0xb4>)
 8001982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001986:	2200      	movs	r2, #0
 8001988:	709a      	strb	r2, [r3, #2]
	Flash.Block_Mem = 0;
 800198a:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <init+0xb4>)
 800198c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001990:	2200      	movs	r2, #0
 8001992:	811a      	strh	r2, [r3, #8]
	Flash.Page_Index = 0;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <init+0xb4>)
 8001996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199a:	2200      	movs	r2, #0
 800199c:	815a      	strh	r2, [r3, #10]
	Flash.ID = 0;
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <init+0xb4>)
 80019a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a4:	461a      	mov	r2, r3
 80019a6:	2300      	movs	r3, #0
 80019a8:	60d3      	str	r3, [r2, #12]
	Flash.Buffer_p = Flash.Buffer_0;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <init+0xb4>)
 80019ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <init+0xb4>)
 80019b4:	6053      	str	r3, [r2, #4]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <init+0xb8>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <init+0xb8>)
 80019bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c0:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <init+0xbc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a07      	ldr	r2, [pc, #28]	@ (80019e4 <init+0xbc>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6013      	str	r3, [r2, #0]
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2400009c 	.word	0x2400009c
 80019dc:	240000a4 	.word	0x240000a4
 80019e0:	e000edf0 	.word	0xe000edf0
 80019e4:	e0001000 	.word	0xe0001000

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <Error_Handler+0x10>)
 80019ee:	f001 fde9 	bl	80035c4 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	24001100 	.word	0x24001100

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_MspInit+0x30>)
 8001a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a08:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_MspInit+0x30>)
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_MspInit+0x30>)
 8001a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	58024400 	.word	0x58024400

08001a30 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0ba      	sub	sp, #232	@ 0xe8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	22c0      	movs	r2, #192	@ 0xc0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f008 fa73 	bl	8009f3c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a33      	ldr	r2, [pc, #204]	@ (8001b28 <HAL_FDCAN_MspInit+0xf8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d15e      	bne.n	8001b1e <HAL_FDCAN_MspInit+0xee>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001a70:	230a      	movs	r3, #10
 8001a72:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001a78:	2314      	movs	r3, #20
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001a80:	23c0      	movs	r3, #192	@ 0xc0
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001a84:	2320      	movs	r3, #32
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001a8c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fef7 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001aa4:	f7ff ffa0 	bl	80019e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <HAL_FDCAN_MspInit+0xfc>)
 8001aaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001aae:	4a1f      	ldr	r2, [pc, #124]	@ (8001b2c <HAL_FDCAN_MspInit+0xfc>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <HAL_FDCAN_MspInit+0xfc>)
 8001aba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_FDCAN_MspInit+0xfc>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001acc:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <HAL_FDCAN_MspInit+0xfc>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_FDCAN_MspInit+0xfc>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001afc:	2309      	movs	r3, #9
 8001afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4809      	ldr	r0, [pc, #36]	@ (8001b30 <HAL_FDCAN_MspInit+0x100>)
 8001b0a:	f002 fcd5 	bl	80044b8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2013      	movs	r0, #19
 8001b14:	f000 fddf 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001b18:	2013      	movs	r0, #19
 8001b1a:	f000 fdf6 	bl	800270a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001b1e:	bf00      	nop
 8001b20:	37e8      	adds	r7, #232	@ 0xe8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	4000a000 	.word	0x4000a000
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	58020c00 	.word	0x58020c00

08001b34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0bc      	sub	sp, #240	@ 0xf0
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	22c0      	movs	r2, #192	@ 0xc0
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f008 f9f1 	bl	8009f3c <memset>
  if(hspi->Instance==SPI1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a38      	ldr	r2, [pc, #224]	@ (8001c40 <HAL_SPI_MspInit+0x10c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d168      	bne.n	8001c36 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001b64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fe87 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001b84:	f7ff ff30 	bl	80019e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b88:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001b90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bac:	4a25      	ldr	r2, [pc, #148]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bca:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_SPI_MspInit+0x110>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001be2:	2360      	movs	r3, #96	@ 0x60
 8001be4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c04:	4619      	mov	r1, r3
 8001c06:	4810      	ldr	r0, [pc, #64]	@ (8001c48 <HAL_SPI_MspInit+0x114>)
 8001c08:	f002 fc56 	bl	80044b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c24:	2305      	movs	r3, #5
 8001c26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <HAL_SPI_MspInit+0x118>)
 8001c32:	f002 fc41 	bl	80044b8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c36:	bf00      	nop
 8001c38:	37f0      	adds	r7, #240	@ 0xf0
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40013000 	.word	0x40013000
 8001c44:	58024400 	.word	0x58024400
 8001c48:	58020000 	.word	0x58020000
 8001c4c:	58020400 	.word	0x58020400

08001c50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0c2      	sub	sp, #264	@ 0x108
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c5e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c74:	22c0      	movs	r2, #192	@ 0xc0
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f008 f95f 	bl	8009f3c <memset>
  if(huart->Instance==UART5)
 8001c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4aaa      	ldr	r2, [pc, #680]	@ (8001f34 <HAL_UART_MspInit+0x2e4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d14f      	bne.n	8001d30 <HAL_UART_MspInit+0xe0>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001c90:	f04f 0202 	mov.w	r2, #2
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fdf0 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8001cb2:	f7ff fe99 	bl	80019e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001cb6:	4ba0      	ldr	r3, [pc, #640]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbc:	4a9e      	ldr	r2, [pc, #632]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b98      	ldr	r3, [pc, #608]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	4a97      	ldr	r2, [pc, #604]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce4:	4b94      	ldr	r3, [pc, #592]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cf2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001cf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001d0c:	230e      	movs	r3, #14
 8001d0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4888      	ldr	r0, [pc, #544]	@ (8001f3c <HAL_UART_MspInit+0x2ec>)
 8001d1a:	f002 fbcd 	bl	80044b8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2035      	movs	r0, #53	@ 0x35
 8001d24:	f000 fcd7 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d28:	2035      	movs	r0, #53	@ 0x35
 8001d2a:	f000 fcee 	bl	800270a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d2e:	e169      	b.n	8002004 <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==UART7)
 8001d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a80      	ldr	r2, [pc, #512]	@ (8001f40 <HAL_UART_MspInit+0x2f0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d147      	bne.n	8001dd2 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001d42:	f04f 0202 	mov.w	r2, #2
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fd97 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8001d64:	f7ff fe40 	bl	80019e8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001d68:	4b73      	ldr	r3, [pc, #460]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6e:	4a72      	ldr	r2, [pc, #456]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d78:	4b6f      	ldr	r3, [pc, #444]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d86:	4b6c      	ldr	r3, [pc, #432]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001d8e:	f043 0310 	orr.w	r3, r3, #16
 8001d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d96:	4b68      	ldr	r3, [pc, #416]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	623b      	str	r3, [r7, #32]
 8001da2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001da4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001da8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	485e      	ldr	r0, [pc, #376]	@ (8001f44 <HAL_UART_MspInit+0x2f4>)
 8001dcc:	f002 fb74 	bl	80044b8 <HAL_GPIO_Init>
}
 8001dd0:	e118      	b.n	8002004 <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==UART8)
 8001dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a5a      	ldr	r2, [pc, #360]	@ (8001f48 <HAL_UART_MspInit+0x2f8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d14e      	bne.n	8001e82 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001de4:	f04f 0202 	mov.w	r2, #2
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fd46 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8001e06:	f7ff fdef 	bl	80019e8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e10:	4a49      	ldr	r2, [pc, #292]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001e12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e1a:	4b47      	ldr	r3, [pc, #284]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e28:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2e:	4a42      	ldr	r2, [pc, #264]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001e30:	f043 0310 	orr.w	r3, r3, #16
 8001e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e38:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e46:	2303      	movs	r3, #3
 8001e48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001e5e:	2308      	movs	r3, #8
 8001e60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e64:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4836      	ldr	r0, [pc, #216]	@ (8001f44 <HAL_UART_MspInit+0x2f4>)
 8001e6c:	f002 fb24 	bl	80044b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	2053      	movs	r0, #83	@ 0x53
 8001e76:	f000 fc2e 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001e7a:	2053      	movs	r0, #83	@ 0x53
 8001e7c:	f000 fc45 	bl	800270a <HAL_NVIC_EnableIRQ>
}
 8001e80:	e0c0      	b.n	8002004 <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==USART2)
 8001e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f4c <HAL_UART_MspInit+0x2fc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d15f      	bne.n	8001f54 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e94:	f04f 0202 	mov.w	r2, #2
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fcee 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8001eb6:	f7ff fd97 	bl	80019e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eba:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eca:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <HAL_UART_MspInit+0x2e8>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0e:	2307      	movs	r3, #7
 8001f10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <HAL_UART_MspInit+0x300>)
 8001f1c:	f002 facc 	bl	80044b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	2026      	movs	r0, #38	@ 0x26
 8001f26:	f000 fbd6 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f2a:	2026      	movs	r0, #38	@ 0x26
 8001f2c:	f000 fbed 	bl	800270a <HAL_NVIC_EnableIRQ>
}
 8001f30:	e068      	b.n	8002004 <HAL_UART_MspInit+0x3b4>
 8001f32:	bf00      	nop
 8001f34:	40005000 	.word	0x40005000
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	58020400 	.word	0x58020400
 8001f40:	40007800 	.word	0x40007800
 8001f44:	58021000 	.word	0x58021000
 8001f48:	40007c00 	.word	0x40007c00
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	58020000 	.word	0x58020000
  else if(huart->Instance==USART3)
 8001f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	@ (8002010 <HAL_UART_MspInit+0x3c0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d14e      	bne.n	8002004 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f66:	f04f 0202 	mov.w	r2, #2
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fc85 	bl	800588c <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8001f88:	f7ff fd2e 	bl	80019e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f8c:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <HAL_UART_MspInit+0x3c4>)
 8001f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f92:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_UART_MspInit+0x3c4>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_UART_MspInit+0x3c4>)
 8001f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001faa:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <HAL_UART_MspInit+0x3c4>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb0:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <HAL_UART_MspInit+0x3c4>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_UART_MspInit+0x3c4>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	f003 0208 	and.w	r2, r3, #8
 8001fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fd2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fd6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	@ (8002018 <HAL_UART_MspInit+0x3c8>)
 8002000:	f002 fa5a 	bl	80044b8 <HAL_GPIO_Init>
}
 8002004:	bf00      	nop
 8002006:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40004800 	.word	0x40004800
 8002014:	58024400 	.word	0x58024400
 8002018:	58020c00 	.word	0x58020c00

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002074:	f000 fa28 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8002078:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <SysTick_Handler+0x28>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <SysTick_Handler+0x1c>
	  CLK_SIM++;
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <SysTick_Handler+0x2c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <SysTick_Handler+0x2c>)
 8002088:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800208a:	e002      	b.n	8002092 <SysTick_Handler+0x22>
	  CLK_SIM=0;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <SysTick_Handler+0x2c>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2400007c 	.word	0x2400007c
 800209c:	2400150c 	.word	0x2400150c

080020a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80020a6:	f001 fcf9 	bl	8003a9c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	24001100 	.word	0x24001100

080020b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <USART2_IRQHandler+0x10>)
 80020ba:	f006 fa27 	bl	800850c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	240013e4 	.word	0x240013e4

080020c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <UART5_IRQHandler+0x10>)
 80020ce:	f006 fa1d 	bl	800850c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	24001228 	.word	0x24001228

080020dc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <UART8_IRQHandler+0x10>)
 80020e2:	f006 fa13 	bl	800850c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	24001350 	.word	0x24001350

080020f0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 80020fa:	e03f      	b.n	800217c <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 80020fc:	23f0      	movs	r3, #240	@ 0xf0
 80020fe:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	3301      	adds	r3, #1
 800210a:	b292      	uxth	r2, r2
 800210c:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=CAN.Rx_Buffer[0];
 800210e:	4b23      	ldr	r3, [pc, #140]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	72fb      	strb	r3, [r7, #11]
		Temp[4]=CAN.Rx_Buffer[1];
 8002114:	4b21      	ldr	r3, [pc, #132]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8002116:	7a5b      	ldrb	r3, [r3, #9]
 8002118:	733b      	strb	r3, [r7, #12]
		Temp[5]=CAN.Rx_Buffer[2];
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 800211c:	7a9b      	ldrb	r3, [r3, #10]
 800211e:	737b      	strb	r3, [r7, #13]
		Temp[6]=CAN.Rx_Buffer[3];
 8002120:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8002122:	7adb      	ldrb	r3, [r3, #11]
 8002124:	73bb      	strb	r3, [r7, #14]
		Temp[7]=CAN.Rx_Buffer[4];
 8002126:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8002128:	7b1b      	ldrb	r3, [r3, #12]
 800212a:	73fb      	strb	r3, [r7, #15]
		Temp[8]=CAN.Rx_Buffer[5];
 800212c:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 800212e:	7b5b      	ldrb	r3, [r3, #13]
 8002130:	743b      	strb	r3, [r7, #16]
		Temp[9]=CAN.Rx_Buffer[6];
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8002134:	7b9b      	ldrb	r3, [r3, #14]
 8002136:	747b      	strb	r3, [r7, #17]
		Temp[10]=CAN.Rx_Buffer[7];
 8002138:	4b18      	ldr	r3, [pc, #96]	@ (800219c <HAL_FDCAN_RxFifo0Callback+0xac>)
 800213a:	7bdb      	ldrb	r3, [r3, #15]
 800213c:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 800213e:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8002146:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b2db      	uxtb	r3, r3
 800214e:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	b2db      	uxtb	r3, r3
 8002158:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 800215a:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0e1b      	lsrs	r3, r3, #24
 8002160:	b2db      	uxtb	r3, r3
 8002162:	75bb      	strb	r3, [r7, #22]

		//Stop byte
		Temp[15]=0x0F;
 8002164:	230f      	movs	r3, #15
 8002166:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8002168:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	2110      	movs	r1, #16
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fbda 	bl	8000930 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, CAN.Rx_Buffer) == HAL_OK){
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800217e:	4a06      	ldr	r2, [pc, #24]	@ (8002198 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8002180:	2140      	movs	r1, #64	@ 0x40
 8002182:	480a      	ldr	r0, [pc, #40]	@ (80021ac <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8002184:	f001 faa4 	bl	80036d0 <HAL_FDCAN_GetRxMessage>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0b6      	beq.n	80020fc <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	240010b4 	.word	0x240010b4
 800219c:	24000080 	.word	0x24000080
 80021a0:	2400150c 	.word	0x2400150c
 80021a4:	2400007c 	.word	0x2400007c
 80021a8:	24000088 	.word	0x24000088
 80021ac:	24001100 	.word	0x24001100

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f007 feb4 	bl	8009f4c <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	24080000 	.word	0x24080000
 8002210:	00000400 	.word	0x00000400
 8002214:	24001510 	.word	0x24001510
 8002218:	24001660 	.word	0x24001660

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002220:	4b43      	ldr	r3, [pc, #268]	@ (8002330 <SystemInit+0x114>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	4a42      	ldr	r2, [pc, #264]	@ (8002330 <SystemInit+0x114>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002230:	4b40      	ldr	r3, [pc, #256]	@ (8002334 <SystemInit+0x118>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	2b06      	cmp	r3, #6
 800223a:	d807      	bhi.n	800224c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800223c:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <SystemInit+0x118>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 030f 	bic.w	r3, r3, #15
 8002244:	4a3b      	ldr	r2, [pc, #236]	@ (8002334 <SystemInit+0x118>)
 8002246:	f043 0307 	orr.w	r3, r3, #7
 800224a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <SystemInit+0x11c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a39      	ldr	r2, [pc, #228]	@ (8002338 <SystemInit+0x11c>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002258:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <SystemInit+0x11c>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800225e:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <SystemInit+0x11c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4935      	ldr	r1, [pc, #212]	@ (8002338 <SystemInit+0x11c>)
 8002264:	4b35      	ldr	r3, [pc, #212]	@ (800233c <SystemInit+0x120>)
 8002266:	4013      	ands	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800226a:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <SystemInit+0x118>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002276:	4b2f      	ldr	r3, [pc, #188]	@ (8002334 <SystemInit+0x118>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 030f 	bic.w	r3, r3, #15
 800227e:	4a2d      	ldr	r2, [pc, #180]	@ (8002334 <SystemInit+0x118>)
 8002280:	f043 0307 	orr.w	r3, r3, #7
 8002284:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002286:	4b2c      	ldr	r3, [pc, #176]	@ (8002338 <SystemInit+0x11c>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <SystemInit+0x11c>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002292:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <SystemInit+0x11c>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002298:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <SystemInit+0x11c>)
 800229a:	4a29      	ldr	r2, [pc, #164]	@ (8002340 <SystemInit+0x124>)
 800229c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800229e:	4b26      	ldr	r3, [pc, #152]	@ (8002338 <SystemInit+0x11c>)
 80022a0:	4a28      	ldr	r2, [pc, #160]	@ (8002344 <SystemInit+0x128>)
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022a4:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <SystemInit+0x11c>)
 80022a6:	4a28      	ldr	r2, [pc, #160]	@ (8002348 <SystemInit+0x12c>)
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <SystemInit+0x11c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022b0:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <SystemInit+0x11c>)
 80022b2:	4a25      	ldr	r2, [pc, #148]	@ (8002348 <SystemInit+0x12c>)
 80022b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <SystemInit+0x11c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <SystemInit+0x11c>)
 80022be:	4a22      	ldr	r2, [pc, #136]	@ (8002348 <SystemInit+0x12c>)
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <SystemInit+0x11c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <SystemInit+0x11c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002338 <SystemInit+0x11c>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022d4:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <SystemInit+0x11c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022da:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <SystemInit+0x130>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <SystemInit+0x134>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022e6:	d202      	bcs.n	80022ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <SystemInit+0x138>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <SystemInit+0x11c>)
 80022f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d113      	bne.n	8002324 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <SystemInit+0x11c>)
 80022fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002302:	4a0d      	ldr	r2, [pc, #52]	@ (8002338 <SystemInit+0x11c>)
 8002304:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002308:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <SystemInit+0x13c>)
 800230e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002312:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <SystemInit+0x11c>)
 8002316:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800231a:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <SystemInit+0x11c>)
 800231c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002320:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00
 8002334:	52002000 	.word	0x52002000
 8002338:	58024400 	.word	0x58024400
 800233c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002340:	02020200 	.word	0x02020200
 8002344:	01ff0000 	.word	0x01ff0000
 8002348:	01010280 	.word	0x01010280
 800234c:	5c001000 	.word	0x5c001000
 8002350:	ffff0000 	.word	0xffff0000
 8002354:	51008108 	.word	0x51008108
 8002358:	52004000 	.word	0x52004000

0800235c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <ExitRun0Mode+0x2c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a08      	ldr	r2, [pc, #32]	@ (8002388 <ExitRun0Mode+0x2c>)
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800236c:	bf00      	nop
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <ExitRun0Mode+0x2c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f9      	beq.n	800236e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	58024800 	.word	0x58024800

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800238c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80023c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002390:	f7ff ffe4 	bl	800235c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002394:	f7ff ff42 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002398:	480c      	ldr	r0, [pc, #48]	@ (80023cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800239a:	490d      	ldr	r1, [pc, #52]	@ (80023d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800239c:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b0:	4c0a      	ldr	r4, [pc, #40]	@ (80023dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023be:	f007 fdcb 	bl	8009f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c2:	f7fe feb5 	bl	8001130 <main>
  bx  lr
 80023c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023d0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80023d4:	0800a9cc 	.word	0x0800a9cc
  ldr r2, =_sbss
 80023d8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80023dc:	24001660 	.word	0x24001660

080023e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC3_IRQHandler>
	...

080023e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ea:	2003      	movs	r0, #3
 80023ec:	f000 f968 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023f0:	f003 f876 	bl	80054e0 <HAL_RCC_GetSysClockFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_Init+0x68>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4913      	ldr	r1, [pc, #76]	@ (8002450 <HAL_Init+0x6c>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800240e:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_Init+0x68>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	4a0e      	ldr	r2, [pc, #56]	@ (8002450 <HAL_Init+0x6c>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	4a0b      	ldr	r2, [pc, #44]	@ (8002454 <HAL_Init+0x70>)
 8002426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <HAL_Init+0x74>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800242e:	2000      	movs	r0, #0
 8002430:	f000 f814 	bl	800245c <HAL_InitTick>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e002      	b.n	8002444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800243e:	f7ff fadd 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	58024400 	.word	0x58024400
 8002450:	0800a940 	.word	0x0800a940
 8002454:	24000004 	.word	0x24000004
 8002458:	24000000 	.word	0x24000000

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_InitTick+0x60>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e021      	b.n	80024b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_InitTick+0x64>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_InitTick+0x60>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f94d 	bl	8002726 <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f000 f917 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	@ (80024c4 <HAL_InitTick+0x68>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2400000c 	.word	0x2400000c
 80024c0:	24000000 	.word	0x24000000
 80024c4:	24000008 	.word	0x24000008

080024c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	2400000c 	.word	0x2400000c
 80024ec:	24001514 	.word	0x24001514

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	24001514 	.word	0x24001514

08002508 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_GetREVID+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0c1b      	lsrs	r3, r3, #16
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	5c001000 	.word	0x5c001000

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <__NVIC_SetPriorityGrouping+0x40>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	4313      	orrs	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <__NVIC_SetPriorityGrouping+0x40>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00
 8002564:	05fa0000 	.word	0x05fa0000

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	@ (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	@ (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026e4:	f7ff ff40 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff ff90 	bl	8002614 <NVIC_EncodePriority>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff5f 	bl	80025c0 <__NVIC_SetPriority>
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff33 	bl	8002584 <__NVIC_EnableIRQ>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffa4 	bl	800267c <SysTick_Config>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fed2 	bl	80024f0 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e2dc      	b.n	8002d12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d008      	beq.n	8002776 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e2cd      	b.n	8002d12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a76      	ldr	r2, [pc, #472]	@ (8002954 <HAL_DMA_Abort+0x214>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d04a      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a74      	ldr	r2, [pc, #464]	@ (8002958 <HAL_DMA_Abort+0x218>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d045      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a73      	ldr	r2, [pc, #460]	@ (800295c <HAL_DMA_Abort+0x21c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d040      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a71      	ldr	r2, [pc, #452]	@ (8002960 <HAL_DMA_Abort+0x220>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d03b      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a70      	ldr	r2, [pc, #448]	@ (8002964 <HAL_DMA_Abort+0x224>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d036      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002968 <HAL_DMA_Abort+0x228>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d031      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6d      	ldr	r2, [pc, #436]	@ (800296c <HAL_DMA_Abort+0x22c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d02c      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002970 <HAL_DMA_Abort+0x230>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d027      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002974 <HAL_DMA_Abort+0x234>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a68      	ldr	r2, [pc, #416]	@ (8002978 <HAL_DMA_Abort+0x238>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01d      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a67      	ldr	r2, [pc, #412]	@ (800297c <HAL_DMA_Abort+0x23c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	@ (8002980 <HAL_DMA_Abort+0x240>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a64      	ldr	r2, [pc, #400]	@ (8002984 <HAL_DMA_Abort+0x244>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a62      	ldr	r2, [pc, #392]	@ (8002988 <HAL_DMA_Abort+0x248>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a61      	ldr	r2, [pc, #388]	@ (800298c <HAL_DMA_Abort+0x24c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_DMA_Abort+0xd6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a5f      	ldr	r2, [pc, #380]	@ (8002990 <HAL_DMA_Abort+0x250>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_DMA_Abort+0xda>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_DMA_Abort+0xdc>
 800281a:	2300      	movs	r3, #0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 021e 	bic.w	r2, r2, #30
 800282e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800283e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e00a      	b.n	800285e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 020e 	bic.w	r2, r2, #14
 8002856:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3c      	ldr	r2, [pc, #240]	@ (8002954 <HAL_DMA_Abort+0x214>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d072      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a3a      	ldr	r2, [pc, #232]	@ (8002958 <HAL_DMA_Abort+0x218>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d06d      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a39      	ldr	r2, [pc, #228]	@ (800295c <HAL_DMA_Abort+0x21c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d068      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a37      	ldr	r2, [pc, #220]	@ (8002960 <HAL_DMA_Abort+0x220>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d063      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <HAL_DMA_Abort+0x224>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d05e      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a34      	ldr	r2, [pc, #208]	@ (8002968 <HAL_DMA_Abort+0x228>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d059      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a33      	ldr	r2, [pc, #204]	@ (800296c <HAL_DMA_Abort+0x22c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d054      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a31      	ldr	r2, [pc, #196]	@ (8002970 <HAL_DMA_Abort+0x230>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d04f      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a30      	ldr	r2, [pc, #192]	@ (8002974 <HAL_DMA_Abort+0x234>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d04a      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002978 <HAL_DMA_Abort+0x238>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d045      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2d      	ldr	r2, [pc, #180]	@ (800297c <HAL_DMA_Abort+0x23c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d040      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002980 <HAL_DMA_Abort+0x240>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d03b      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2a      	ldr	r2, [pc, #168]	@ (8002984 <HAL_DMA_Abort+0x244>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d036      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <HAL_DMA_Abort+0x248>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d031      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a27      	ldr	r2, [pc, #156]	@ (800298c <HAL_DMA_Abort+0x24c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d02c      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a25      	ldr	r2, [pc, #148]	@ (8002990 <HAL_DMA_Abort+0x250>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d027      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a24      	ldr	r2, [pc, #144]	@ (8002994 <HAL_DMA_Abort+0x254>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a22      	ldr	r2, [pc, #136]	@ (8002998 <HAL_DMA_Abort+0x258>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01d      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_DMA_Abort+0x25c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1f      	ldr	r2, [pc, #124]	@ (80029a0 <HAL_DMA_Abort+0x260>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1e      	ldr	r2, [pc, #120]	@ (80029a4 <HAL_DMA_Abort+0x264>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <HAL_DMA_Abort+0x268>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_DMA_Abort+0x26c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_DMA_Abort+0x20e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a19      	ldr	r2, [pc, #100]	@ (80029b0 <HAL_DMA_Abort+0x270>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d132      	bne.n	80029b4 <HAL_DMA_Abort+0x274>
 800294e:	2301      	movs	r3, #1
 8002950:	e031      	b.n	80029b6 <HAL_DMA_Abort+0x276>
 8002952:	bf00      	nop
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	58025408 	.word	0x58025408
 8002998:	5802541c 	.word	0x5802541c
 800299c:	58025430 	.word	0x58025430
 80029a0:	58025444 	.word	0x58025444
 80029a4:	58025458 	.word	0x58025458
 80029a8:	5802546c 	.word	0x5802546c
 80029ac:	58025480 	.word	0x58025480
 80029b0:	58025494 	.word	0x58025494
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002b84 <HAL_DMA_Abort+0x444>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04a      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b88 <HAL_DMA_Abort+0x448>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d045      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6a      	ldr	r2, [pc, #424]	@ (8002b8c <HAL_DMA_Abort+0x44c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d040      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a68      	ldr	r2, [pc, #416]	@ (8002b90 <HAL_DMA_Abort+0x450>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d03b      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a67      	ldr	r2, [pc, #412]	@ (8002b94 <HAL_DMA_Abort+0x454>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d036      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a65      	ldr	r2, [pc, #404]	@ (8002b98 <HAL_DMA_Abort+0x458>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a64      	ldr	r2, [pc, #400]	@ (8002b9c <HAL_DMA_Abort+0x45c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a62      	ldr	r2, [pc, #392]	@ (8002ba0 <HAL_DMA_Abort+0x460>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a61      	ldr	r2, [pc, #388]	@ (8002ba4 <HAL_DMA_Abort+0x464>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba8 <HAL_DMA_Abort+0x468>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5e      	ldr	r2, [pc, #376]	@ (8002bac <HAL_DMA_Abort+0x46c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb0 <HAL_DMA_Abort+0x470>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb4 <HAL_DMA_Abort+0x474>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a59      	ldr	r2, [pc, #356]	@ (8002bb8 <HAL_DMA_Abort+0x478>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a58      	ldr	r2, [pc, #352]	@ (8002bbc <HAL_DMA_Abort+0x47c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_Abort+0x32a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a56      	ldr	r2, [pc, #344]	@ (8002bc0 <HAL_DMA_Abort+0x480>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d108      	bne.n	8002a7c <HAL_DMA_Abort+0x33c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e007      	b.n	8002a8c <HAL_DMA_Abort+0x34c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a8c:	e013      	b.n	8002ab6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8e:	f7ff fd2f 	bl	80024f0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d90c      	bls.n	8002ab6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e12d      	b.n	8002d12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e5      	bne.n	8002a8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b84 <HAL_DMA_Abort+0x444>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d04a      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <HAL_DMA_Abort+0x448>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d045      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2c      	ldr	r2, [pc, #176]	@ (8002b8c <HAL_DMA_Abort+0x44c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d040      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b90 <HAL_DMA_Abort+0x450>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d03b      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a29      	ldr	r2, [pc, #164]	@ (8002b94 <HAL_DMA_Abort+0x454>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d036      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a27      	ldr	r2, [pc, #156]	@ (8002b98 <HAL_DMA_Abort+0x458>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a26      	ldr	r2, [pc, #152]	@ (8002b9c <HAL_DMA_Abort+0x45c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d02c      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a24      	ldr	r2, [pc, #144]	@ (8002ba0 <HAL_DMA_Abort+0x460>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a23      	ldr	r2, [pc, #140]	@ (8002ba4 <HAL_DMA_Abort+0x464>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a21      	ldr	r2, [pc, #132]	@ (8002ba8 <HAL_DMA_Abort+0x468>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a20      	ldr	r2, [pc, #128]	@ (8002bac <HAL_DMA_Abort+0x46c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb0 <HAL_DMA_Abort+0x470>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <HAL_DMA_Abort+0x474>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb8 <HAL_DMA_Abort+0x478>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <HAL_DMA_Abort+0x47c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_Abort+0x422>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	@ (8002bc0 <HAL_DMA_Abort+0x480>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Abort+0x426>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_Abort+0x428>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d02b      	beq.n	8002bc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	223f      	movs	r2, #63	@ 0x3f
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	e02a      	b.n	8002bda <HAL_DMA_Abort+0x49a>
 8002b84:	40020010 	.word	0x40020010
 8002b88:	40020028 	.word	0x40020028
 8002b8c:	40020040 	.word	0x40020040
 8002b90:	40020058 	.word	0x40020058
 8002b94:	40020070 	.word	0x40020070
 8002b98:	40020088 	.word	0x40020088
 8002b9c:	400200a0 	.word	0x400200a0
 8002ba0:	400200b8 	.word	0x400200b8
 8002ba4:	40020410 	.word	0x40020410
 8002ba8:	40020428 	.word	0x40020428
 8002bac:	40020440 	.word	0x40020440
 8002bb0:	40020458 	.word	0x40020458
 8002bb4:	40020470 	.word	0x40020470
 8002bb8:	40020488 	.word	0x40020488
 8002bbc:	400204a0 	.word	0x400204a0
 8002bc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a4f      	ldr	r2, [pc, #316]	@ (8002d1c <HAL_DMA_Abort+0x5dc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d072      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d20 <HAL_DMA_Abort+0x5e0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d06d      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8002d24 <HAL_DMA_Abort+0x5e4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d068      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d28 <HAL_DMA_Abort+0x5e8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d063      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a49      	ldr	r2, [pc, #292]	@ (8002d2c <HAL_DMA_Abort+0x5ec>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d05e      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a47      	ldr	r2, [pc, #284]	@ (8002d30 <HAL_DMA_Abort+0x5f0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d059      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a46      	ldr	r2, [pc, #280]	@ (8002d34 <HAL_DMA_Abort+0x5f4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d054      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a44      	ldr	r2, [pc, #272]	@ (8002d38 <HAL_DMA_Abort+0x5f8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04f      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a43      	ldr	r2, [pc, #268]	@ (8002d3c <HAL_DMA_Abort+0x5fc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04a      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a41      	ldr	r2, [pc, #260]	@ (8002d40 <HAL_DMA_Abort+0x600>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a40      	ldr	r2, [pc, #256]	@ (8002d44 <HAL_DMA_Abort+0x604>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d040      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d48 <HAL_DMA_Abort+0x608>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3d      	ldr	r2, [pc, #244]	@ (8002d4c <HAL_DMA_Abort+0x60c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d036      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3b      	ldr	r2, [pc, #236]	@ (8002d50 <HAL_DMA_Abort+0x610>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d54 <HAL_DMA_Abort+0x614>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d02c      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a38      	ldr	r2, [pc, #224]	@ (8002d58 <HAL_DMA_Abort+0x618>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a37      	ldr	r2, [pc, #220]	@ (8002d5c <HAL_DMA_Abort+0x61c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a35      	ldr	r2, [pc, #212]	@ (8002d60 <HAL_DMA_Abort+0x620>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a34      	ldr	r2, [pc, #208]	@ (8002d64 <HAL_DMA_Abort+0x624>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a32      	ldr	r2, [pc, #200]	@ (8002d68 <HAL_DMA_Abort+0x628>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a31      	ldr	r2, [pc, #196]	@ (8002d6c <HAL_DMA_Abort+0x62c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d70 <HAL_DMA_Abort+0x630>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2e      	ldr	r2, [pc, #184]	@ (8002d74 <HAL_DMA_Abort+0x634>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Abort+0x58a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d78 <HAL_DMA_Abort+0x638>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_DMA_Abort+0x58e>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_DMA_Abort+0x590>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cdc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40020010 	.word	0x40020010
 8002d20:	40020028 	.word	0x40020028
 8002d24:	40020040 	.word	0x40020040
 8002d28:	40020058 	.word	0x40020058
 8002d2c:	40020070 	.word	0x40020070
 8002d30:	40020088 	.word	0x40020088
 8002d34:	400200a0 	.word	0x400200a0
 8002d38:	400200b8 	.word	0x400200b8
 8002d3c:	40020410 	.word	0x40020410
 8002d40:	40020428 	.word	0x40020428
 8002d44:	40020440 	.word	0x40020440
 8002d48:	40020458 	.word	0x40020458
 8002d4c:	40020470 	.word	0x40020470
 8002d50:	40020488 	.word	0x40020488
 8002d54:	400204a0 	.word	0x400204a0
 8002d58:	400204b8 	.word	0x400204b8
 8002d5c:	58025408 	.word	0x58025408
 8002d60:	5802541c 	.word	0x5802541c
 8002d64:	58025430 	.word	0x58025430
 8002d68:	58025444 	.word	0x58025444
 8002d6c:	58025458 	.word	0x58025458
 8002d70:	5802546c 	.word	0x5802546c
 8002d74:	58025480 	.word	0x58025480
 8002d78:	58025494 	.word	0x58025494

08002d7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e237      	b.n	80031fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d004      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2280      	movs	r2, #128	@ 0x80
 8002d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e22c      	b.n	80031fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f1c <HAL_DMA_Abort_IT+0x1a0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d04a      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f20 <HAL_DMA_Abort_IT+0x1a4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d045      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a59      	ldr	r2, [pc, #356]	@ (8002f24 <HAL_DMA_Abort_IT+0x1a8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d040      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a58      	ldr	r2, [pc, #352]	@ (8002f28 <HAL_DMA_Abort_IT+0x1ac>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d03b      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a56      	ldr	r2, [pc, #344]	@ (8002f2c <HAL_DMA_Abort_IT+0x1b0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d036      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a55      	ldr	r2, [pc, #340]	@ (8002f30 <HAL_DMA_Abort_IT+0x1b4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d031      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a53      	ldr	r2, [pc, #332]	@ (8002f34 <HAL_DMA_Abort_IT+0x1b8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02c      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <HAL_DMA_Abort_IT+0x1bc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d027      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a50      	ldr	r2, [pc, #320]	@ (8002f3c <HAL_DMA_Abort_IT+0x1c0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d022      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4f      	ldr	r2, [pc, #316]	@ (8002f40 <HAL_DMA_Abort_IT+0x1c4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d01d      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f44 <HAL_DMA_Abort_IT+0x1c8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d018      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a4c      	ldr	r2, [pc, #304]	@ (8002f48 <HAL_DMA_Abort_IT+0x1cc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <HAL_DMA_Abort_IT+0x1d0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00e      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a49      	ldr	r2, [pc, #292]	@ (8002f50 <HAL_DMA_Abort_IT+0x1d4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a47      	ldr	r2, [pc, #284]	@ (8002f54 <HAL_DMA_Abort_IT+0x1d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_DMA_Abort_IT+0xc8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a46      	ldr	r2, [pc, #280]	@ (8002f58 <HAL_DMA_Abort_IT+0x1dc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_DMA_Abort_IT+0xcc>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_DMA_Abort_IT+0xce>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8086 	beq.w	8002f5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2204      	movs	r2, #4
 8002e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <HAL_DMA_Abort_IT+0x1a0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d04a      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2e      	ldr	r2, [pc, #184]	@ (8002f20 <HAL_DMA_Abort_IT+0x1a4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d045      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2c      	ldr	r2, [pc, #176]	@ (8002f24 <HAL_DMA_Abort_IT+0x1a8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d040      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <HAL_DMA_Abort_IT+0x1ac>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d03b      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a29      	ldr	r2, [pc, #164]	@ (8002f2c <HAL_DMA_Abort_IT+0x1b0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d036      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <HAL_DMA_Abort_IT+0x1b4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d031      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a26      	ldr	r2, [pc, #152]	@ (8002f34 <HAL_DMA_Abort_IT+0x1b8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02c      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <HAL_DMA_Abort_IT+0x1bc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d027      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a23      	ldr	r2, [pc, #140]	@ (8002f3c <HAL_DMA_Abort_IT+0x1c0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d022      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <HAL_DMA_Abort_IT+0x1c4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d01d      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	@ (8002f44 <HAL_DMA_Abort_IT+0x1c8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <HAL_DMA_Abort_IT+0x1cc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_DMA_Abort_IT+0x1d0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_DMA_Abort_IT+0x1d4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <HAL_DMA_Abort_IT+0x1d8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x17c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <HAL_DMA_Abort_IT+0x1dc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <HAL_DMA_Abort_IT+0x18e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e178      	b.n	80031fc <HAL_DMA_Abort_IT+0x480>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e16f      	b.n	80031fc <HAL_DMA_Abort_IT+0x480>
 8002f1c:	40020010 	.word	0x40020010
 8002f20:	40020028 	.word	0x40020028
 8002f24:	40020040 	.word	0x40020040
 8002f28:	40020058 	.word	0x40020058
 8002f2c:	40020070 	.word	0x40020070
 8002f30:	40020088 	.word	0x40020088
 8002f34:	400200a0 	.word	0x400200a0
 8002f38:	400200b8 	.word	0x400200b8
 8002f3c:	40020410 	.word	0x40020410
 8002f40:	40020428 	.word	0x40020428
 8002f44:	40020440 	.word	0x40020440
 8002f48:	40020458 	.word	0x40020458
 8002f4c:	40020470 	.word	0x40020470
 8002f50:	40020488 	.word	0x40020488
 8002f54:	400204a0 	.word	0x400204a0
 8002f58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 020e 	bic.w	r2, r2, #14
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6c      	ldr	r2, [pc, #432]	@ (8003124 <HAL_DMA_Abort_IT+0x3a8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d04a      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8003128 <HAL_DMA_Abort_IT+0x3ac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d045      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a69      	ldr	r2, [pc, #420]	@ (800312c <HAL_DMA_Abort_IT+0x3b0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d040      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a68      	ldr	r2, [pc, #416]	@ (8003130 <HAL_DMA_Abort_IT+0x3b4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d03b      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a66      	ldr	r2, [pc, #408]	@ (8003134 <HAL_DMA_Abort_IT+0x3b8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d036      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_DMA_Abort_IT+0x3bc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d031      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a63      	ldr	r2, [pc, #396]	@ (800313c <HAL_DMA_Abort_IT+0x3c0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02c      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_DMA_Abort_IT+0x3c4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d027      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a60      	ldr	r2, [pc, #384]	@ (8003144 <HAL_DMA_Abort_IT+0x3c8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d022      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5f      	ldr	r2, [pc, #380]	@ (8003148 <HAL_DMA_Abort_IT+0x3cc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d01d      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800314c <HAL_DMA_Abort_IT+0x3d0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d018      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5c      	ldr	r2, [pc, #368]	@ (8003150 <HAL_DMA_Abort_IT+0x3d4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d013      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8003154 <HAL_DMA_Abort_IT+0x3d8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00e      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a59      	ldr	r2, [pc, #356]	@ (8003158 <HAL_DMA_Abort_IT+0x3dc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a57      	ldr	r2, [pc, #348]	@ (800315c <HAL_DMA_Abort_IT+0x3e0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_DMA_Abort_IT+0x290>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a56      	ldr	r2, [pc, #344]	@ (8003160 <HAL_DMA_Abort_IT+0x3e4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <HAL_DMA_Abort_IT+0x2a2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_DMA_Abort_IT+0x2b2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3c      	ldr	r2, [pc, #240]	@ (8003124 <HAL_DMA_Abort_IT+0x3a8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d072      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3a      	ldr	r2, [pc, #232]	@ (8003128 <HAL_DMA_Abort_IT+0x3ac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d06d      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a39      	ldr	r2, [pc, #228]	@ (800312c <HAL_DMA_Abort_IT+0x3b0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d068      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a37      	ldr	r2, [pc, #220]	@ (8003130 <HAL_DMA_Abort_IT+0x3b4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d063      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a36      	ldr	r2, [pc, #216]	@ (8003134 <HAL_DMA_Abort_IT+0x3b8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d05e      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a34      	ldr	r2, [pc, #208]	@ (8003138 <HAL_DMA_Abort_IT+0x3bc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d059      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a33      	ldr	r2, [pc, #204]	@ (800313c <HAL_DMA_Abort_IT+0x3c0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d054      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a31      	ldr	r2, [pc, #196]	@ (8003140 <HAL_DMA_Abort_IT+0x3c4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d04f      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a30      	ldr	r2, [pc, #192]	@ (8003144 <HAL_DMA_Abort_IT+0x3c8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2e      	ldr	r2, [pc, #184]	@ (8003148 <HAL_DMA_Abort_IT+0x3cc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2d      	ldr	r2, [pc, #180]	@ (800314c <HAL_DMA_Abort_IT+0x3d0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003150 <HAL_DMA_Abort_IT+0x3d4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003154 <HAL_DMA_Abort_IT+0x3d8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a28      	ldr	r2, [pc, #160]	@ (8003158 <HAL_DMA_Abort_IT+0x3dc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a27      	ldr	r2, [pc, #156]	@ (800315c <HAL_DMA_Abort_IT+0x3e0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a25      	ldr	r2, [pc, #148]	@ (8003160 <HAL_DMA_Abort_IT+0x3e4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a24      	ldr	r2, [pc, #144]	@ (8003164 <HAL_DMA_Abort_IT+0x3e8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a22      	ldr	r2, [pc, #136]	@ (8003168 <HAL_DMA_Abort_IT+0x3ec>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a21      	ldr	r2, [pc, #132]	@ (800316c <HAL_DMA_Abort_IT+0x3f0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003170 <HAL_DMA_Abort_IT+0x3f4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003174 <HAL_DMA_Abort_IT+0x3f8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1c      	ldr	r2, [pc, #112]	@ (8003178 <HAL_DMA_Abort_IT+0x3fc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <HAL_DMA_Abort_IT+0x400>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_Abort_IT+0x3a2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	@ (8003180 <HAL_DMA_Abort_IT+0x404>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d132      	bne.n	8003184 <HAL_DMA_Abort_IT+0x408>
 800311e:	2301      	movs	r3, #1
 8003120:	e031      	b.n	8003186 <HAL_DMA_Abort_IT+0x40a>
 8003122:	bf00      	nop
 8003124:	40020010 	.word	0x40020010
 8003128:	40020028 	.word	0x40020028
 800312c:	40020040 	.word	0x40020040
 8003130:	40020058 	.word	0x40020058
 8003134:	40020070 	.word	0x40020070
 8003138:	40020088 	.word	0x40020088
 800313c:	400200a0 	.word	0x400200a0
 8003140:	400200b8 	.word	0x400200b8
 8003144:	40020410 	.word	0x40020410
 8003148:	40020428 	.word	0x40020428
 800314c:	40020440 	.word	0x40020440
 8003150:	40020458 	.word	0x40020458
 8003154:	40020470 	.word	0x40020470
 8003158:	40020488 	.word	0x40020488
 800315c:	400204a0 	.word	0x400204a0
 8003160:	400204b8 	.word	0x400204b8
 8003164:	58025408 	.word	0x58025408
 8003168:	5802541c 	.word	0x5802541c
 800316c:	58025430 	.word	0x58025430
 8003170:	58025444 	.word	0x58025444
 8003174:	58025458 	.word	0x58025458
 8003178:	5802546c 	.word	0x5802546c
 800317c:	58025480 	.word	0x58025480
 8003180:	58025494 	.word	0x58025494
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d028      	beq.n	80031dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003198:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2201      	movs	r2, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop

08003208 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b098      	sub	sp, #96	@ 0x60
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003210:	4a84      	ldr	r2, [pc, #528]	@ (8003424 <HAL_FDCAN_Init+0x21c>)
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4611      	mov	r1, r2
 8003218:	224c      	movs	r2, #76	@ 0x4c
 800321a:	4618      	mov	r0, r3
 800321c:	f006 fec2 	bl	8009fa4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1c6      	b.n	80035b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7e      	ldr	r2, [pc, #504]	@ (8003428 <HAL_FDCAN_Init+0x220>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d106      	bne.n	8003242 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fbea 	bl	8001a30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0210 	bic.w	r2, r2, #16
 800326a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800326c:	f7ff f940 	bl	80024f0 <HAL_GetTick>
 8003270:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003272:	e014      	b.n	800329e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003274:	f7ff f93c 	bl	80024f0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b0a      	cmp	r3, #10
 8003280:	d90d      	bls.n	800329e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2203      	movs	r2, #3
 8003296:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e18c      	b.n	80035b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d0e3      	beq.n	8003274 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032bc:	f7ff f918 	bl	80024f0 <HAL_GetTick>
 80032c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80032c2:	e014      	b.n	80032ee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032c4:	f7ff f914 	bl	80024f0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b0a      	cmp	r3, #10
 80032d0:	d90d      	bls.n	80032ee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e164      	b.n	80035b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0e3      	beq.n	80032c4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0202 	orr.w	r2, r2, #2
 800330a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7c1b      	ldrb	r3, [r3, #16]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d108      	bne.n	8003326 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003322:	619a      	str	r2, [r3, #24]
 8003324:	e007      	b.n	8003336 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003334:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7c5b      	ldrb	r3, [r3, #17]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800334c:	619a      	str	r2, [r3, #24]
 800334e:	e007      	b.n	8003360 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800335e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7c9b      	ldrb	r3, [r3, #18]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d108      	bne.n	800337a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003376:	619a      	str	r2, [r3, #24]
 8003378:	e007      	b.n	800338a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003388:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80033ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0210 	bic.w	r2, r2, #16
 80033be:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d108      	bne.n	80033da <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0204 	orr.w	r2, r2, #4
 80033d6:	619a      	str	r2, [r3, #24]
 80033d8:	e030      	b.n	800343c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d02c      	beq.n	800343c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d020      	beq.n	800342c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033f8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0210 	orr.w	r2, r2, #16
 8003408:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d114      	bne.n	800343c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0220 	orr.w	r2, r2, #32
 8003420:	619a      	str	r2, [r3, #24]
 8003422:	e00b      	b.n	800343c <HAL_FDCAN_Init+0x234>
 8003424:	0800a8f4 	.word	0x0800a8f4
 8003428:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	3b01      	subs	r3, #1
 8003442:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	3b01      	subs	r3, #1
 800344a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800344c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003454:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	3b01      	subs	r3, #1
 800345e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003464:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003466:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003470:	d115      	bne.n	800349e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	3b01      	subs	r3, #1
 800347e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003480:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	3b01      	subs	r3, #1
 8003488:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800348a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	3b01      	subs	r3, #1
 8003494:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800349a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800349c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c4:	4413      	add	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d011      	beq.n	80034ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80034d2:	f023 0107 	bic.w	r1, r3, #7
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3360      	adds	r3, #96	@ 0x60
 80034de:	443b      	add	r3, r7
 80034e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d011      	beq.n	800351a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034fe:	f023 0107 	bic.w	r1, r3, #7
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	3360      	adds	r3, #96	@ 0x60
 800350a:	443b      	add	r3, r7
 800350c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800352a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3360      	adds	r3, #96	@ 0x60
 8003536:	443b      	add	r3, r7
 8003538:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800353c:	011a      	lsls	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003558:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	3360      	adds	r3, #96	@ 0x60
 8003564:	443b      	add	r3, r7
 8003566:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800356a:	021a      	lsls	r2, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <HAL_FDCAN_Init+0x3b8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d107      	bne.n	8003590 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f022 0203 	bic.w	r2, r2, #3
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fd81 	bl	80040b0 <FDCAN_CalcultateRamBlockAddresses>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80035b4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3760      	adds	r7, #96	@ 0x60
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	4000a000 	.word	0x4000a000

080035c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d111      	bne.n	80035fc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e008      	b.n	800360e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d141      	bne.n	80036b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800363a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e038      	b.n	80036c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800365e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800366c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e026      	b.n	80036c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fe93 	bl	80043bc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2101      	movs	r1, #1
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80036a6:	2201      	movs	r2, #1
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e008      	b.n	80036c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036bc:	f043 0208 	orr.w	r2, r3, #8
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b08b      	sub	sp, #44	@ 0x2c
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80036e8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80036ea:	7efb      	ldrb	r3, [r7, #27]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	f040 8149 	bne.w	8003984 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d14c      	bne.n	8003792 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003700:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e13c      	b.n	8003996 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003732:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e12a      	b.n	8003996 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003750:	d10a      	bne.n	8003768 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800375a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800375e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003762:	d101      	bne.n	8003768 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003784:	69f9      	ldr	r1, [r7, #28]
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003790:	e068      	b.n	8003864 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b41      	cmp	r3, #65	@ 0x41
 8003796:	d14c      	bne.n	8003832 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0ec      	b.n	8003996 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0da      	b.n	8003996 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f0:	d10a      	bne.n	8003808 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003802:	d101      	bne.n	8003808 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003804:	2301      	movs	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003824:	69f9      	ldr	r1, [r7, #28]
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003830:	e018      	b.n	8003864 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d309      	bcc.n	8003850 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0a2      	b.n	8003996 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d107      	bne.n	8003888 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0c9b      	lsrs	r3, r3, #18
 800387e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e005      	b.n	8003894 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	3304      	adds	r3, #4
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0e1b      	lsrs	r3, r3, #24
 80038e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	0fda      	lsrs	r2, r3, #31
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	3304      	adds	r3, #4
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	e00a      	b.n	8003920 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	441a      	add	r2, r3
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	440b      	add	r3, r1
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	3301      	adds	r3, #1
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a1f      	ldr	r2, [pc, #124]	@ (80039a4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	461a      	mov	r2, r3
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	4293      	cmp	r3, r2
 800392e:	d3ec      	bcc.n	800390a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d105      	bne.n	8003942 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8003940:	e01e      	b.n	8003980 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b41      	cmp	r3, #65	@ 0x41
 8003946:	d105      	bne.n	8003954 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8003952:	e015      	b.n	8003980 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b1f      	cmp	r3, #31
 8003958:	d808      	bhi.n	800396c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2101      	movs	r1, #1
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800396a:	e009      	b.n	8003980 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 021f 	and.w	r2, r3, #31
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2101      	movs	r1, #1
 8003978:	fa01 f202 	lsl.w	r2, r1, r2
 800397c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e008      	b.n	8003996 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800398a:	f043 0208 	orr.w	r2, r3, #8
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	372c      	adds	r7, #44	@ 0x2c
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	0800a950 	.word	0x0800a950

080039a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80039ba:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d002      	beq.n	80039c8 <HAL_FDCAN_ActivateNotification+0x20>
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d155      	bne.n	8003a74 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039e6:	e014      	b.n	8003a12 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d108      	bne.n	8003a0a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0202 	orr.w	r2, r2, #2
 8003a06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a08:	e003      	b.n	8003a12 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <HAL_FDCAN_ActivateNotification+0xec>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a62:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	0f9b      	lsrs	r3, r3, #30
 8003a6a:	490b      	ldr	r1, [pc, #44]	@ (8003a98 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e008      	b.n	8003a86 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a7a:	f043 0202 	orr.w	r2, r3, #2
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	3fcfffff 	.word	0x3fcfffff
 8003a98:	4000a800 	.word	0x4000a800

08003a9c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b096      	sub	sp, #88	@ 0x58
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	079b      	lsls	r3, r3, #30
 8003aaa:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003aac:	4b98      	ldr	r3, [pc, #608]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	079b      	lsls	r3, r3, #30
 8003ab2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003abe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003ac2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003acc:	4013      	ands	r3, r2
 8003ace:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003afc:	4013      	ands	r3, r2
 8003afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b06:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b14:	4013      	ands	r3, r2
 8003b16:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003b22:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b60:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b62:	4b6b      	ldr	r3, [pc, #428]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa54 	bl	8004016 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b70:	0a9b      	lsrs	r3, r3, #10
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01d      	beq.n	8003bb6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7c:	0a9b      	lsrs	r3, r3, #10
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d017      	beq.n	8003bb6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003b8e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ba6:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ba8:	4b59      	ldr	r3, [pc, #356]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003bae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa07 	bl	8003fc4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc2:	4b54      	ldr	r3, [pc, #336]	@ (8003d14 <HAL_FDCAN_IRQHandler+0x278>)
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bc8:	4a51      	ldr	r2, [pc, #324]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bcc:	0f9b      	lsrs	r3, r3, #30
 8003bce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003bd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9c0 	bl	8003f58 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003be4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d14 <HAL_FDCAN_IRQHandler+0x278>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bea:	4a49      	ldr	r2, [pc, #292]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bee:	0f9b      	lsrs	r3, r3, #30
 8003bf0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003bf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9ba 	bl	8003f6e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003c06:	4b43      	ldr	r3, [pc, #268]	@ (8003d14 <HAL_FDCAN_IRQHandler+0x278>)
 8003c08:	400b      	ands	r3, r1
 8003c0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c0c:	4a40      	ldr	r2, [pc, #256]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c10:	0f9b      	lsrs	r3, r3, #30
 8003c12:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003c14:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fe fa6a 	bl	80020f0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c28:	4b3a      	ldr	r3, [pc, #232]	@ (8003d14 <HAL_FDCAN_IRQHandler+0x278>)
 8003c2a:	400b      	ands	r3, r1
 8003c2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c2e:	4a38      	ldr	r2, [pc, #224]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c32:	0f9b      	lsrs	r3, r3, #30
 8003c34:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003c36:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f9a3 	bl	8003f84 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c40:	0adb      	lsrs	r3, r3, #11
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d010      	beq.n	8003c6c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4c:	0adb      	lsrs	r3, r3, #11
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c60:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f997 	bl	8003f9a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6e:	0a5b      	lsrs	r3, r3, #9
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01d      	beq.n	8003cb4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7a:	0a5b      	lsrs	r3, r3, #9
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c98:	4013      	ands	r3, r2
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ca4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003cac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f97d 	bl	8003fae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb6:	0cdb      	lsrs	r3, r3, #19
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc2:	0cdb      	lsrs	r3, r3, #19
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f97c 	bl	8003fda <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d02:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d04:	4b02      	ldr	r3, [pc, #8]	@ (8003d10 <HAL_FDCAN_IRQHandler+0x274>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	e004      	b.n	8003d18 <HAL_FDCAN_IRQHandler+0x27c>
 8003d0e:	bf00      	nop
 8003d10:	4000a800 	.word	0x4000a800
 8003d14:	3fcfffff 	.word	0x3fcfffff
 8003d18:	f000 f969 	bl	8003fee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1e:	0c9b      	lsrs	r3, r3, #18
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d010      	beq.n	8003d4a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	0c9b      	lsrs	r3, r3, #18
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003d3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d3e:	4b83      	ldr	r3, [pc, #524]	@ (8003f4c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f95c 	bl	8004002 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4c:	0c5b      	lsrs	r3, r3, #17
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d015      	beq.n	8003d82 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	0c5b      	lsrs	r3, r3, #17
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00f      	beq.n	8003d82 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d6c:	4b77      	ldr	r3, [pc, #476]	@ (8003f4c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d8e:	4b70      	ldr	r3, [pc, #448]	@ (8003f50 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003d90:	400b      	ands	r3, r1
 8003d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d94:	4a6d      	ldr	r2, [pc, #436]	@ (8003f4c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d98:	0f9b      	lsrs	r3, r3, #30
 8003d9a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003d9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f94d 	bl	800403e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d011      	beq.n	8003dce <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003db0:	4b67      	ldr	r3, [pc, #412]	@ (8003f50 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003db2:	400b      	ands	r3, r1
 8003db4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003db6:	4a65      	ldr	r2, [pc, #404]	@ (8003f4c <HAL_FDCAN_IRQHandler+0x4b0>)
 8003db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dba:	0f9b      	lsrs	r3, r3, #30
 8003dbc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a60      	ldr	r2, [pc, #384]	@ (8003f54 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	f040 80ac 	bne.w	8003f32 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a4 	beq.w	8003f32 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfe:	4013      	ands	r3, r2
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e16:	4013      	ands	r3, r2
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e2e:	4013      	ands	r3, r2
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8003e3c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	4013      	ands	r3, r2
 8003e48:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8003e54:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e7e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003e80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8e6 	bl	8004054 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e94:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f8e6 	bl	800406a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01a      	beq.n	8003ee0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d014      	beq.n	8003ee0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ecc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2240      	movs	r2, #64	@ 0x40
 8003ed4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8d0 	bl	8004080 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003eee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8d1 	bl	8004098 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f874 	bl	800402a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003f42:	bf00      	nop
 8003f44:	3758      	adds	r7, #88	@ 0x58
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	4000a800 	.word	0x4000a800
 8003f50:	3fcfffff 	.word	0x3fcfffff
 8003f54:	4000a000 	.word	0x4000a000

08003f58 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80040c6:	4ba7      	ldr	r3, [pc, #668]	@ (8004364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	0091      	lsls	r1, r2, #2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	430b      	orrs	r3, r1
 80040d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	041a      	lsls	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	4413      	add	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004106:	4b97      	ldr	r3, [pc, #604]	@ (8004364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004108:	4013      	ands	r3, r2
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	0091      	lsls	r1, r2, #2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	430b      	orrs	r3, r1
 8004114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004120:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	041a      	lsls	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004148:	4b86      	ldr	r3, [pc, #536]	@ (8004364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800414a:	4013      	ands	r3, r2
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	0091      	lsls	r1, r2, #2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	430b      	orrs	r3, r1
 8004156:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004162:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	041a      	lsls	r2, r3, #16
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4413      	add	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004190:	4b74      	ldr	r3, [pc, #464]	@ (8004364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004192:	4013      	ands	r3, r2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	0091      	lsls	r1, r2, #2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041aa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b2:	041a      	lsls	r2, r3, #16
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	4413      	add	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80041d8:	4b62      	ldr	r3, [pc, #392]	@ (8004364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	0091      	lsls	r1, r2, #2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4413      	add	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004204:	4b57      	ldr	r3, [pc, #348]	@ (8004364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004206:	4013      	ands	r3, r2
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	0091      	lsls	r1, r2, #2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800421e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004226:	041a      	lsls	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4413      	add	r3, r2
 800423c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004246:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004248:	4013      	ands	r3, r2
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	0091      	lsls	r1, r2, #2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	430b      	orrs	r3, r1
 8004254:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004260:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	041a      	lsls	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800427c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004284:	061a      	lsls	r2, r3, #24
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004294:	4b34      	ldr	r3, [pc, #208]	@ (8004368 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004296:	4413      	add	r3, r2
 8004298:	009a      	lsls	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	441a      	add	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	441a      	add	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435a:	4a04      	ldr	r2, [pc, #16]	@ (800436c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d915      	bls.n	800438c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004360:	e006      	b.n	8004370 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004362:	bf00      	nop
 8004364:	ffff0003 	.word	0xffff0003
 8004368:	10002b00 	.word	0x10002b00
 800436c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2203      	movs	r2, #3
 8004384:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e010      	b.n	80043ae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e005      	b.n	80043a0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3304      	adds	r3, #4
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d3f3      	bcc.n	8004394 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop

080043bc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	@ 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80043da:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	e00a      	b.n	80043fe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80043f0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80043f6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80043f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043fc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004408:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800440e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004414:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800442a:	6839      	ldr	r1, [r7, #0]
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	3304      	adds	r3, #4
 8004440:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	3304      	adds	r3, #4
 800444c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e020      	b.n	8004496 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3303      	adds	r3, #3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3302      	adds	r3, #2
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	440b      	add	r3, r1
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800446c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	3301      	adds	r3, #1
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	440b      	add	r3, r1
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800447a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	440a      	add	r2, r1
 8004482:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004484:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	3304      	adds	r3, #4
 800448e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3304      	adds	r3, #4
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4a06      	ldr	r2, [pc, #24]	@ (80044b4 <FDCAN_CopyMessageToRAM+0xf8>)
 800449c:	5cd3      	ldrb	r3, [r2, r3]
 800449e:	461a      	mov	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d3d6      	bcc.n	8004454 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80044a6:	bf00      	nop
 80044a8:	bf00      	nop
 80044aa:	3724      	adds	r7, #36	@ 0x24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	0800a950 	.word	0x0800a950

080044b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	@ 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044c6:	4b89      	ldr	r3, [pc, #548]	@ (80046ec <HAL_GPIO_Init+0x234>)
 80044c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044ca:	e194      	b.n	80047f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8186 	beq.w	80047f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d005      	beq.n	80044fc <HAL_GPIO_Init+0x44>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d130      	bne.n	800455e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	2203      	movs	r2, #3
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004532:	2201      	movs	r2, #1
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0201 	and.w	r2, r3, #1
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b03      	cmp	r3, #3
 8004568:	d017      	beq.n	800459a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	2203      	movs	r2, #3
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d123      	bne.n	80045ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	08da      	lsrs	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3208      	adds	r2, #8
 80045ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	08da      	lsrs	r2, r3, #3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3208      	adds	r2, #8
 80045e8:	69b9      	ldr	r1, [r7, #24]
 80045ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2203      	movs	r2, #3
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80e0 	beq.w	80047f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004630:	4b2f      	ldr	r3, [pc, #188]	@ (80046f0 <HAL_GPIO_Init+0x238>)
 8004632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004636:	4a2e      	ldr	r2, [pc, #184]	@ (80046f0 <HAL_GPIO_Init+0x238>)
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004640:	4b2b      	ldr	r3, [pc, #172]	@ (80046f0 <HAL_GPIO_Init+0x238>)
 8004642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800464e:	4a29      	ldr	r2, [pc, #164]	@ (80046f4 <HAL_GPIO_Init+0x23c>)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	089b      	lsrs	r3, r3, #2
 8004654:	3302      	adds	r3, #2
 8004656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	220f      	movs	r2, #15
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a20      	ldr	r2, [pc, #128]	@ (80046f8 <HAL_GPIO_Init+0x240>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d052      	beq.n	8004720 <HAL_GPIO_Init+0x268>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <HAL_GPIO_Init+0x244>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d031      	beq.n	80046e6 <HAL_GPIO_Init+0x22e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1e      	ldr	r2, [pc, #120]	@ (8004700 <HAL_GPIO_Init+0x248>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d02b      	beq.n	80046e2 <HAL_GPIO_Init+0x22a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1d      	ldr	r2, [pc, #116]	@ (8004704 <HAL_GPIO_Init+0x24c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d025      	beq.n	80046de <HAL_GPIO_Init+0x226>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1c      	ldr	r2, [pc, #112]	@ (8004708 <HAL_GPIO_Init+0x250>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01f      	beq.n	80046da <HAL_GPIO_Init+0x222>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a1b      	ldr	r2, [pc, #108]	@ (800470c <HAL_GPIO_Init+0x254>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d019      	beq.n	80046d6 <HAL_GPIO_Init+0x21e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004710 <HAL_GPIO_Init+0x258>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_GPIO_Init+0x21a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a19      	ldr	r2, [pc, #100]	@ (8004714 <HAL_GPIO_Init+0x25c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00d      	beq.n	80046ce <HAL_GPIO_Init+0x216>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <HAL_GPIO_Init+0x260>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <HAL_GPIO_Init+0x212>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a17      	ldr	r2, [pc, #92]	@ (800471c <HAL_GPIO_Init+0x264>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <HAL_GPIO_Init+0x20e>
 80046c2:	2309      	movs	r3, #9
 80046c4:	e02d      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046c6:	230a      	movs	r3, #10
 80046c8:	e02b      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046ca:	2308      	movs	r3, #8
 80046cc:	e029      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046ce:	2307      	movs	r3, #7
 80046d0:	e027      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046d2:	2306      	movs	r3, #6
 80046d4:	e025      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046d6:	2305      	movs	r3, #5
 80046d8:	e023      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046da:	2304      	movs	r3, #4
 80046dc:	e021      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046de:	2303      	movs	r3, #3
 80046e0:	e01f      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e01d      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e01b      	b.n	8004722 <HAL_GPIO_Init+0x26a>
 80046ea:	bf00      	nop
 80046ec:	58000080 	.word	0x58000080
 80046f0:	58024400 	.word	0x58024400
 80046f4:	58000400 	.word	0x58000400
 80046f8:	58020000 	.word	0x58020000
 80046fc:	58020400 	.word	0x58020400
 8004700:	58020800 	.word	0x58020800
 8004704:	58020c00 	.word	0x58020c00
 8004708:	58021000 	.word	0x58021000
 800470c:	58021400 	.word	0x58021400
 8004710:	58021800 	.word	0x58021800
 8004714:	58021c00 	.word	0x58021c00
 8004718:	58022000 	.word	0x58022000
 800471c:	58022400 	.word	0x58022400
 8004720:	2300      	movs	r3, #0
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	f002 0203 	and.w	r2, r2, #3
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	4093      	lsls	r3, r2
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004732:	4938      	ldr	r1, [pc, #224]	@ (8004814 <HAL_GPIO_Init+0x35c>)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	3302      	adds	r3, #2
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004766:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	3301      	adds	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f ae63 	bne.w	80044cc <HAL_GPIO_Init+0x14>
  }
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	3724      	adds	r7, #36	@ 0x24
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	58000400 	.word	0x58000400

08004818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]
 8004824:	4613      	mov	r3, r2
 8004826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004828:	787b      	ldrb	r3, [r7, #1]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004834:	e003      	b.n	800483e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	041a      	lsls	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	619a      	str	r2, [r3, #24]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004854:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <HAL_PWREx_ConfigSupply+0x70>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d00a      	beq.n	8004876 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004860:	4b16      	ldr	r3, [pc, #88]	@ (80048bc <HAL_PWREx_ConfigSupply+0x70>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d001      	beq.n	8004872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e01f      	b.n	80048b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e01d      	b.n	80048b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004876:	4b11      	ldr	r3, [pc, #68]	@ (80048bc <HAL_PWREx_ConfigSupply+0x70>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 0207 	bic.w	r2, r3, #7
 800487e:	490f      	ldr	r1, [pc, #60]	@ (80048bc <HAL_PWREx_ConfigSupply+0x70>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4313      	orrs	r3, r2
 8004884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004886:	f7fd fe33 	bl	80024f0 <HAL_GetTick>
 800488a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800488c:	e009      	b.n	80048a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800488e:	f7fd fe2f 	bl	80024f0 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800489c:	d901      	bls.n	80048a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e007      	b.n	80048b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_PWREx_ConfigSupply+0x70>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ae:	d1ee      	bne.n	800488e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	58024800 	.word	0x58024800

080048c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f000 bc48 	b.w	8005164 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8088 	beq.w	80049f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e2:	4b99      	ldr	r3, [pc, #612]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048ec:	4b96      	ldr	r3, [pc, #600]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d007      	beq.n	8004908 <HAL_RCC_OscConfig+0x48>
 80048f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fa:	2b18      	cmp	r3, #24
 80048fc:	d111      	bne.n	8004922 <HAL_RCC_OscConfig+0x62>
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d10c      	bne.n	8004922 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004908:	4b8f      	ldr	r3, [pc, #572]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d06d      	beq.n	80049f0 <HAL_RCC_OscConfig+0x130>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d169      	bne.n	80049f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f000 bc21 	b.w	8005164 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492a:	d106      	bne.n	800493a <HAL_RCC_OscConfig+0x7a>
 800492c:	4b86      	ldr	r3, [pc, #536]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a85      	ldr	r2, [pc, #532]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	e02e      	b.n	8004998 <HAL_RCC_OscConfig+0xd8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10c      	bne.n	800495c <HAL_RCC_OscConfig+0x9c>
 8004942:	4b81      	ldr	r3, [pc, #516]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a80      	ldr	r2, [pc, #512]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4b7e      	ldr	r3, [pc, #504]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a7d      	ldr	r2, [pc, #500]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004954:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e01d      	b.n	8004998 <HAL_RCC_OscConfig+0xd8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0xc0>
 8004966:	4b78      	ldr	r3, [pc, #480]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a77      	ldr	r2, [pc, #476]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 800496c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b75      	ldr	r3, [pc, #468]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a74      	ldr	r2, [pc, #464]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e00b      	b.n	8004998 <HAL_RCC_OscConfig+0xd8>
 8004980:	4b71      	ldr	r3, [pc, #452]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a70      	ldr	r2, [pc, #448]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b6e      	ldr	r3, [pc, #440]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a6d      	ldr	r2, [pc, #436]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd fda6 	bl	80024f0 <HAL_GetTick>
 80049a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fd fda2 	bl	80024f0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	@ 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e3d4      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ba:	4b63      	ldr	r3, [pc, #396]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0xe8>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd fd92 	bl	80024f0 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fd fd8e 	bl	80024f0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	@ 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e3c0      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049e2:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x110>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80ca 	beq.w	8004b94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a00:	4b51      	ldr	r3, [pc, #324]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_RCC_OscConfig+0x166>
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2b18      	cmp	r3, #24
 8004a1a:	d156      	bne.n	8004aca <HAL_RCC_OscConfig+0x20a>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d151      	bne.n	8004aca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a26:	4b48      	ldr	r3, [pc, #288]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_RCC_OscConfig+0x17e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e392      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a3e:	4b42      	ldr	r3, [pc, #264]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 0219 	bic.w	r2, r3, #25
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	493f      	ldr	r1, [pc, #252]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fd4e 	bl	80024f0 <HAL_GetTick>
 8004a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fd fd4a 	bl	80024f0 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e37c      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a6a:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a76:	f7fd fd47 	bl	8002508 <HAL_GetREVID>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d817      	bhi.n	8004ab4 <HAL_RCC_OscConfig+0x1f4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b40      	cmp	r3, #64	@ 0x40
 8004a8a:	d108      	bne.n	8004a9e <HAL_RCC_OscConfig+0x1de>
 8004a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a94:	4a2c      	ldr	r2, [pc, #176]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a9a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a9c:	e07a      	b.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	031b      	lsls	r3, r3, #12
 8004aac:	4926      	ldr	r1, [pc, #152]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab2:	e06f      	b.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	4921      	ldr	r1, [pc, #132]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ac8:	e064      	b.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d047      	beq.n	8004b62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 0219 	bic.w	r2, r3, #25
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	491a      	ldr	r1, [pc, #104]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fd04 	bl	80024f0 <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd fd00 	bl	80024f0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e332      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004afe:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	f7fd fcfd 	bl	8002508 <HAL_GetREVID>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d819      	bhi.n	8004b4c <HAL_RCC_OscConfig+0x28c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b40      	cmp	r3, #64	@ 0x40
 8004b1e:	d108      	bne.n	8004b32 <HAL_RCC_OscConfig+0x272>
 8004b20:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b28:	4a07      	ldr	r2, [pc, #28]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2e:	6053      	str	r3, [r2, #4]
 8004b30:	e030      	b.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	031b      	lsls	r3, r3, #12
 8004b40:	4901      	ldr	r1, [pc, #4]	@ (8004b48 <HAL_RCC_OscConfig+0x288>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
 8004b46:	e025      	b.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	4b9a      	ldr	r3, [pc, #616]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	4997      	ldr	r1, [pc, #604]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	e018      	b.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b62:	4b95      	ldr	r3, [pc, #596]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a94      	ldr	r2, [pc, #592]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fcbf 	bl	80024f0 <HAL_GetTick>
 8004b72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fd fcbb 	bl	80024f0 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e2ed      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b88:	4b8b      	ldr	r3, [pc, #556]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80a9 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba2:	4b85      	ldr	r3, [pc, #532]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004baa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bac:	4b82      	ldr	r3, [pc, #520]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d007      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x308>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b18      	cmp	r3, #24
 8004bbc:	d13a      	bne.n	8004c34 <HAL_RCC_OscConfig+0x374>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d135      	bne.n	8004c34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bc8:	4b7b      	ldr	r3, [pc, #492]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_OscConfig+0x320>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	2b80      	cmp	r3, #128	@ 0x80
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e2c1      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004be0:	f7fd fc92 	bl	8002508 <HAL_GetREVID>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d817      	bhi.n	8004c1e <HAL_RCC_OscConfig+0x35e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d108      	bne.n	8004c08 <HAL_RCC_OscConfig+0x348>
 8004bf6:	4b70      	ldr	r3, [pc, #448]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004bfe:	4a6e      	ldr	r2, [pc, #440]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c06:	e075      	b.n	8004cf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c08:	4b6b      	ldr	r3, [pc, #428]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	069b      	lsls	r3, r3, #26
 8004c16:	4968      	ldr	r1, [pc, #416]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c1c:	e06a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c1e:	4b66      	ldr	r3, [pc, #408]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	4962      	ldr	r1, [pc, #392]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c32:	e05f      	b.n	8004cf4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d042      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c3c:	4b5e      	ldr	r3, [pc, #376]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a5d      	ldr	r2, [pc, #372]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fd fc52 	bl	80024f0 <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c50:	f7fd fc4e 	bl	80024f0 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e280      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c62:	4b55      	ldr	r3, [pc, #340]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c6e:	f7fd fc4b 	bl	8002508 <HAL_GetREVID>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d817      	bhi.n	8004cac <HAL_RCC_OscConfig+0x3ec>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d108      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3d6>
 8004c84:	4b4c      	ldr	r3, [pc, #304]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c92:	6053      	str	r3, [r2, #4]
 8004c94:	e02e      	b.n	8004cf4 <HAL_RCC_OscConfig+0x434>
 8004c96:	4b48      	ldr	r3, [pc, #288]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	069b      	lsls	r3, r3, #26
 8004ca4:	4944      	ldr	r1, [pc, #272]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
 8004caa:	e023      	b.n	8004cf4 <HAL_RCC_OscConfig+0x434>
 8004cac:	4b42      	ldr	r3, [pc, #264]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	061b      	lsls	r3, r3, #24
 8004cba:	493f      	ldr	r1, [pc, #252]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60cb      	str	r3, [r1, #12]
 8004cc0:	e018      	b.n	8004cf4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fd fc0f 	bl	80024f0 <HAL_GetTick>
 8004cd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cd6:	f7fd fc0b 	bl	80024f0 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e23d      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ce8:	4b33      	ldr	r3, [pc, #204]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d036      	beq.n	8004d6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d019      	beq.n	8004d3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d08:	4b2b      	ldr	r3, [pc, #172]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fd fbec 	bl	80024f0 <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fd fbe8 	bl	80024f0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e21a      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d2e:	4b22      	ldr	r3, [pc, #136]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x45c>
 8004d3a:	e018      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d40:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fd fbd2 	bl	80024f0 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d50:	f7fd fbce 	bl	80024f0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e200      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d62:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d039      	beq.n	8004dee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01c      	beq.n	8004dbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d82:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0c      	ldr	r2, [pc, #48]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004d88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d8e:	f7fd fbaf 	bl	80024f0 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d96:	f7fd fbab 	bl	80024f0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1dd      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <HAL_RCC_OscConfig+0x4f8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x4d6>
 8004db4:	e01b      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
 8004db6:	bf00      	nop
 8004db8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dbc:	4b9b      	ldr	r3, [pc, #620]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a9a      	ldr	r2, [pc, #616]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004dc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dc8:	f7fd fb92 	bl	80024f0 <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd0:	f7fd fb8e 	bl	80024f0 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e1c0      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004de2:	4b92      	ldr	r3, [pc, #584]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8081 	beq.w	8004efe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8005030 <HAL_RCC_OscConfig+0x770>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a8b      	ldr	r2, [pc, #556]	@ (8005030 <HAL_RCC_OscConfig+0x770>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e08:	f7fd fb72 	bl	80024f0 <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fd fb6e 	bl	80024f0 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	@ 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e1a0      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e22:	4b83      	ldr	r3, [pc, #524]	@ (8005030 <HAL_RCC_OscConfig+0x770>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d106      	bne.n	8004e44 <HAL_RCC_OscConfig+0x584>
 8004e36:	4b7d      	ldr	r3, [pc, #500]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e42:	e02d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x5e0>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10c      	bne.n	8004e66 <HAL_RCC_OscConfig+0x5a6>
 8004e4c:	4b77      	ldr	r3, [pc, #476]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e50:	4a76      	ldr	r2, [pc, #472]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e58:	4b74      	ldr	r3, [pc, #464]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5c:	4a73      	ldr	r2, [pc, #460]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e5e:	f023 0304 	bic.w	r3, r3, #4
 8004e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e64:	e01c      	b.n	8004ea0 <HAL_RCC_OscConfig+0x5e0>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b05      	cmp	r3, #5
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5c8>
 8004e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e72:	4a6e      	ldr	r2, [pc, #440]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e74:	f043 0304 	orr.w	r3, r3, #4
 8004e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a6b      	ldr	r2, [pc, #428]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e86:	e00b      	b.n	8004ea0 <HAL_RCC_OscConfig+0x5e0>
 8004e88:	4b68      	ldr	r3, [pc, #416]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8c:	4a67      	ldr	r2, [pc, #412]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e94:	4b65      	ldr	r3, [pc, #404]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	4a64      	ldr	r2, [pc, #400]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	f023 0304 	bic.w	r3, r3, #4
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea8:	f7fd fb22 	bl	80024f0 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fd fb1e 	bl	80024f0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e14e      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec6:	4b59      	ldr	r3, [pc, #356]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ee      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x5f0>
 8004ed2:	e014      	b.n	8004efe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fd fb0c 	bl	80024f0 <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fd fb08 	bl	80024f0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e138      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ee      	bne.n	8004edc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 812d 	beq.w	8005162 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f08:	4b48      	ldr	r3, [pc, #288]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f10:	2b18      	cmp	r3, #24
 8004f12:	f000 80bd 	beq.w	8005090 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	f040 809e 	bne.w	800505c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f20:	4b42      	ldr	r3, [pc, #264]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a41      	ldr	r2, [pc, #260]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fae0 	bl	80024f0 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fd fadc 	bl	80024f0 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e10e      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f46:	4b39      	ldr	r3, [pc, #228]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f52:	4b36      	ldr	r3, [pc, #216]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f56:	4b37      	ldr	r3, [pc, #220]	@ (8005034 <HAL_RCC_OscConfig+0x774>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f62:	0112      	lsls	r2, r2, #4
 8004f64:	430a      	orrs	r2, r1
 8004f66:	4931      	ldr	r1, [pc, #196]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	3b01      	subs	r3, #1
 8004f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	025b      	lsls	r3, r3, #9
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	3b01      	subs	r3, #1
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	3b01      	subs	r3, #1
 8004f96:	061b      	lsls	r3, r3, #24
 8004f98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f9c:	4923      	ldr	r1, [pc, #140]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004fa2:	4b22      	ldr	r3, [pc, #136]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a21      	ldr	r2, [pc, #132]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fae:	4b1f      	ldr	r3, [pc, #124]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fb2:	4b21      	ldr	r3, [pc, #132]	@ (8005038 <HAL_RCC_OscConfig+0x778>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fba:	00d2      	lsls	r2, r2, #3
 8004fbc:	491b      	ldr	r1, [pc, #108]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	f023 020c 	bic.w	r2, r3, #12
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	4917      	ldr	r1, [pc, #92]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fd4:	4b15      	ldr	r3, [pc, #84]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	f023 0202 	bic.w	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe0:	4912      	ldr	r1, [pc, #72]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fe6:	4b11      	ldr	r3, [pc, #68]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	4a10      	ldr	r2, [pc, #64]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	4a0a      	ldr	r2, [pc, #40]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8005004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800500a:	4b08      	ldr	r3, [pc, #32]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	4a07      	ldr	r2, [pc, #28]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a04      	ldr	r2, [pc, #16]	@ (800502c <HAL_RCC_OscConfig+0x76c>)
 800501c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fd fa65 	bl	80024f0 <HAL_GetTick>
 8005026:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005028:	e011      	b.n	800504e <HAL_RCC_OscConfig+0x78e>
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
 8005030:	58024800 	.word	0x58024800
 8005034:	fffffc0c 	.word	0xfffffc0c
 8005038:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503c:	f7fd fa58 	bl	80024f0 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e08a      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800504e:	4b47      	ldr	r3, [pc, #284]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x77c>
 800505a:	e082      	b.n	8005162 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505c:	4b43      	ldr	r3, [pc, #268]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a42      	ldr	r2, [pc, #264]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fd fa42 	bl	80024f0 <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd fa3e 	bl	80024f0 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e070      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005082:	4b3a      	ldr	r3, [pc, #232]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x7b0>
 800508e:	e068      	b.n	8005162 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005090:	4b36      	ldr	r3, [pc, #216]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005094:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005096:	4b35      	ldr	r3, [pc, #212]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d031      	beq.n	8005108 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f003 0203 	and.w	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d12a      	bne.n	8005108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d122      	bne.n	8005108 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d11a      	bne.n	8005108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	0a5b      	lsrs	r3, r3, #9
 80050d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d111      	bne.n	8005108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d108      	bne.n	8005108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	0e1b      	lsrs	r3, r3, #24
 80050fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e02b      	b.n	8005164 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800510c:	4b17      	ldr	r3, [pc, #92]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 800510e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005110:	08db      	lsrs	r3, r3, #3
 8005112:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005116:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	d01f      	beq.n	8005162 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005122:	4b12      	ldr	r3, [pc, #72]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	4a11      	ldr	r2, [pc, #68]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800512e:	f7fd f9df 	bl	80024f0 <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005134:	bf00      	nop
 8005136:	f7fd f9db 	bl	80024f0 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	4293      	cmp	r3, r2
 8005140:	d0f9      	beq.n	8005136 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005146:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <HAL_RCC_OscConfig+0x8b0>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800514e:	00d2      	lsls	r2, r2, #3
 8005150:	4906      	ldr	r1, [pc, #24]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005152:	4313      	orrs	r3, r2
 8005154:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005156:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	4a04      	ldr	r2, [pc, #16]	@ (800516c <HAL_RCC_OscConfig+0x8ac>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3730      	adds	r7, #48	@ 0x30
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	58024400 	.word	0x58024400
 8005170:	ffff0007 	.word	0xffff0007

08005174 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e19c      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005188:	4b8a      	ldr	r3, [pc, #552]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d910      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005196:	4b87      	ldr	r3, [pc, #540]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 020f 	bic.w	r2, r3, #15
 800519e:	4985      	ldr	r1, [pc, #532]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b83      	ldr	r3, [pc, #524]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e184      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d010      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	4b7b      	ldr	r3, [pc, #492]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d908      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051d4:	4b78      	ldr	r3, [pc, #480]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	4975      	ldr	r1, [pc, #468]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d010      	beq.n	8005214 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	4b70      	ldr	r3, [pc, #448]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051fe:	429a      	cmp	r2, r3
 8005200:	d908      	bls.n	8005214 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005202:	4b6d      	ldr	r3, [pc, #436]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	496a      	ldr	r1, [pc, #424]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005210:	4313      	orrs	r3, r2
 8005212:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d010      	beq.n	8005242 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	4b64      	ldr	r3, [pc, #400]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800522c:	429a      	cmp	r2, r3
 800522e:	d908      	bls.n	8005242 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005230:	4b61      	ldr	r3, [pc, #388]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	495e      	ldr	r1, [pc, #376]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 800523e:	4313      	orrs	r3, r2
 8005240:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d010      	beq.n	8005270 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	4b59      	ldr	r3, [pc, #356]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800525a:	429a      	cmp	r2, r3
 800525c:	d908      	bls.n	8005270 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800525e:	4b56      	ldr	r3, [pc, #344]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	4953      	ldr	r1, [pc, #332]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 800526c:	4313      	orrs	r3, r2
 800526e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d010      	beq.n	800529e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	4b4d      	ldr	r3, [pc, #308]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	429a      	cmp	r2, r3
 800528a:	d908      	bls.n	800529e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528c:	4b4a      	ldr	r3, [pc, #296]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f023 020f 	bic.w	r2, r3, #15
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4947      	ldr	r1, [pc, #284]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 800529a:	4313      	orrs	r3, r2
 800529c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d055      	beq.n	8005356 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052aa:	4b43      	ldr	r3, [pc, #268]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	4940      	ldr	r1, [pc, #256]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d107      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052c4:	4b3c      	ldr	r3, [pc, #240]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d121      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0f6      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d107      	bne.n	80052ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052dc:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d115      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0ea      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052f4:	4b30      	ldr	r3, [pc, #192]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0de      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005304:	4b2c      	ldr	r3, [pc, #176]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0d6      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005314:	4b28      	ldr	r3, [pc, #160]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f023 0207 	bic.w	r2, r3, #7
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4925      	ldr	r1, [pc, #148]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005322:	4313      	orrs	r3, r2
 8005324:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005326:	f7fd f8e3 	bl	80024f0 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532c:	e00a      	b.n	8005344 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532e:	f7fd f8df 	bl	80024f0 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0be      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005344:	4b1c      	ldr	r3, [pc, #112]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	429a      	cmp	r2, r3
 8005354:	d1eb      	bne.n	800532e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d010      	beq.n	8005384 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	429a      	cmp	r2, r3
 8005370:	d208      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005372:	4b11      	ldr	r3, [pc, #68]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f023 020f 	bic.w	r2, r3, #15
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	490e      	ldr	r1, [pc, #56]	@ (80053b8 <HAL_RCC_ClockConfig+0x244>)
 8005380:	4313      	orrs	r3, r2
 8005382:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d214      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 020f 	bic.w	r2, r3, #15
 800539a:	4906      	ldr	r1, [pc, #24]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <HAL_RCC_ClockConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e086      	b.n	80054c2 <HAL_RCC_ClockConfig+0x34e>
 80053b4:	52002000 	.word	0x52002000
 80053b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	4b3f      	ldr	r3, [pc, #252]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d208      	bcs.n	80053ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053d8:	4b3c      	ldr	r3, [pc, #240]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	4939      	ldr	r1, [pc, #228]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d010      	beq.n	8005418 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005402:	429a      	cmp	r2, r3
 8005404:	d208      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	492e      	ldr	r1, [pc, #184]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005414:	4313      	orrs	r3, r2
 8005416:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699a      	ldr	r2, [r3, #24]
 8005428:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005430:	429a      	cmp	r2, r3
 8005432:	d208      	bcs.n	8005446 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	4922      	ldr	r1, [pc, #136]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005442:	4313      	orrs	r3, r2
 8005444:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d010      	beq.n	8005474 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	4b1d      	ldr	r3, [pc, #116]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800545e:	429a      	cmp	r2, r3
 8005460:	d208      	bcs.n	8005474 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005462:	4b1a      	ldr	r3, [pc, #104]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	4917      	ldr	r1, [pc, #92]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005470:	4313      	orrs	r3, r2
 8005472:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005474:	f000 f834 	bl	80054e0 <HAL_RCC_GetSysClockFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	0a1b      	lsrs	r3, r3, #8
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	4912      	ldr	r1, [pc, #72]	@ (80054d0 <HAL_RCC_ClockConfig+0x35c>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005492:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <HAL_RCC_ClockConfig+0x358>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	4a0d      	ldr	r2, [pc, #52]	@ (80054d0 <HAL_RCC_ClockConfig+0x35c>)
 800549c:	5cd3      	ldrb	r3, [r2, r3]
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <HAL_RCC_ClockConfig+0x360>)
 80054aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054ac:	4a0a      	ldr	r2, [pc, #40]	@ (80054d8 <HAL_RCC_ClockConfig+0x364>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054b2:	4b0a      	ldr	r3, [pc, #40]	@ (80054dc <HAL_RCC_ClockConfig+0x368>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fc ffd0 	bl	800245c <HAL_InitTick>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	58024400 	.word	0x58024400
 80054d0:	0800a940 	.word	0x0800a940
 80054d4:	24000004 	.word	0x24000004
 80054d8:	24000000 	.word	0x24000000
 80054dc:	24000008 	.word	0x24000008

080054e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b089      	sub	sp, #36	@ 0x24
 80054e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e6:	4bb3      	ldr	r3, [pc, #716]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ee:	2b18      	cmp	r3, #24
 80054f0:	f200 8155 	bhi.w	800579e <HAL_RCC_GetSysClockFreq+0x2be>
 80054f4:	a201      	add	r2, pc, #4	@ (adr r2, 80054fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	08005561 	.word	0x08005561
 8005500:	0800579f 	.word	0x0800579f
 8005504:	0800579f 	.word	0x0800579f
 8005508:	0800579f 	.word	0x0800579f
 800550c:	0800579f 	.word	0x0800579f
 8005510:	0800579f 	.word	0x0800579f
 8005514:	0800579f 	.word	0x0800579f
 8005518:	0800579f 	.word	0x0800579f
 800551c:	08005587 	.word	0x08005587
 8005520:	0800579f 	.word	0x0800579f
 8005524:	0800579f 	.word	0x0800579f
 8005528:	0800579f 	.word	0x0800579f
 800552c:	0800579f 	.word	0x0800579f
 8005530:	0800579f 	.word	0x0800579f
 8005534:	0800579f 	.word	0x0800579f
 8005538:	0800579f 	.word	0x0800579f
 800553c:	0800558d 	.word	0x0800558d
 8005540:	0800579f 	.word	0x0800579f
 8005544:	0800579f 	.word	0x0800579f
 8005548:	0800579f 	.word	0x0800579f
 800554c:	0800579f 	.word	0x0800579f
 8005550:	0800579f 	.word	0x0800579f
 8005554:	0800579f 	.word	0x0800579f
 8005558:	0800579f 	.word	0x0800579f
 800555c:	08005593 	.word	0x08005593
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005560:	4b94      	ldr	r3, [pc, #592]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800556c:	4b91      	ldr	r3, [pc, #580]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	08db      	lsrs	r3, r3, #3
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	4a90      	ldr	r2, [pc, #576]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
 800557c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800557e:	e111      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005580:	4b8d      	ldr	r3, [pc, #564]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005582:	61bb      	str	r3, [r7, #24]
      break;
 8005584:	e10e      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005586:	4b8d      	ldr	r3, [pc, #564]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005588:	61bb      	str	r3, [r7, #24]
      break;
 800558a:	e10b      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800558c:	4b8c      	ldr	r3, [pc, #560]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800558e:	61bb      	str	r3, [r7, #24]
      break;
 8005590:	e108      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005592:	4b88      	ldr	r3, [pc, #544]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800559c:	4b85      	ldr	r3, [pc, #532]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055a8:	4b82      	ldr	r3, [pc, #520]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055b2:	4b80      	ldr	r3, [pc, #512]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80e1 	beq.w	8005798 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	f000 8083 	beq.w	80056e4 <HAL_RCC_GetSysClockFreq+0x204>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	f200 80a1 	bhi.w	8005728 <HAL_RCC_GetSysClockFreq+0x248>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_RCC_GetSysClockFreq+0x114>
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d056      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055f2:	e099      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f4:	4b6f      	ldr	r3, [pc, #444]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02d      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005600:	4b6c      	ldr	r3, [pc, #432]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	08db      	lsrs	r3, r3, #3
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	4a6b      	ldr	r2, [pc, #428]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b62      	ldr	r3, [pc, #392]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a02 	vldr	s12, [r7, #8]
 800563e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80057c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800565a:	e087      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80057c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b51      	ldr	r3, [pc, #324]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005682:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80057c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800569e:	e065      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80057cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b2:	4b40      	ldr	r3, [pc, #256]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80057c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056e2:	e043      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80057d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b2f      	ldr	r3, [pc, #188]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	ed97 6a02 	vldr	s12, [r7, #8]
 800570a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80057c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005726:	e021      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80057cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b1e      	ldr	r3, [pc, #120]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a02 	vldr	s12, [r7, #8]
 800574e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80057c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800576a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800576c:	4b11      	ldr	r3, [pc, #68]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	0a5b      	lsrs	r3, r3, #9
 8005772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005776:	3301      	adds	r3, #1
 8005778:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	ee07 3a90 	vmov	s15, r3
 8005780:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005784:	edd7 6a07 	vldr	s13, [r7, #28]
 8005788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005790:	ee17 3a90 	vmov	r3, s15
 8005794:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005796:	e005      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
      break;
 800579c:	e002      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800579e:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a0:	61bb      	str	r3, [r7, #24]
      break;
 80057a2:	bf00      	nop
  }

  return sysclockfreq;
 80057a4:	69bb      	ldr	r3, [r7, #24]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3724      	adds	r7, #36	@ 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	58024400 	.word	0x58024400
 80057b8:	03d09000 	.word	0x03d09000
 80057bc:	003d0900 	.word	0x003d0900
 80057c0:	007a1200 	.word	0x007a1200
 80057c4:	46000000 	.word	0x46000000
 80057c8:	4c742400 	.word	0x4c742400
 80057cc:	4a742400 	.word	0x4a742400
 80057d0:	4af42400 	.word	0x4af42400

080057d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057da:	f7ff fe81 	bl	80054e0 <HAL_RCC_GetSysClockFreq>
 80057de:	4602      	mov	r2, r0
 80057e0:	4b10      	ldr	r3, [pc, #64]	@ (8005824 <HAL_RCC_GetHCLKFreq+0x50>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	0a1b      	lsrs	r3, r3, #8
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	490f      	ldr	r1, [pc, #60]	@ (8005828 <HAL_RCC_GetHCLKFreq+0x54>)
 80057ec:	5ccb      	ldrb	r3, [r1, r3]
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	fa22 f303 	lsr.w	r3, r2, r3
 80057f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <HAL_RCC_GetHCLKFreq+0x50>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	4a09      	ldr	r2, [pc, #36]	@ (8005828 <HAL_RCC_GetHCLKFreq+0x54>)
 8005802:	5cd3      	ldrb	r3, [r2, r3]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a07      	ldr	r2, [pc, #28]	@ (800582c <HAL_RCC_GetHCLKFreq+0x58>)
 8005810:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005812:	4a07      	ldr	r2, [pc, #28]	@ (8005830 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005818:	4b04      	ldr	r3, [pc, #16]	@ (800582c <HAL_RCC_GetHCLKFreq+0x58>)
 800581a:	681b      	ldr	r3, [r3, #0]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	58024400 	.word	0x58024400
 8005828:	0800a940 	.word	0x0800a940
 800582c:	24000004 	.word	0x24000004
 8005830:	24000000 	.word	0x24000000

08005834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005838:	f7ff ffcc 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	4904      	ldr	r1, [pc, #16]	@ (800585c <HAL_RCC_GetPCLK1Freq+0x28>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005854:	4618      	mov	r0, r3
 8005856:	bd80      	pop	{r7, pc}
 8005858:	58024400 	.word	0x58024400
 800585c:	0800a940 	.word	0x0800a940

08005860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005864:	f7ff ffb6 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4904      	ldr	r1, [pc, #16]	@ (8005888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005880:	4618      	mov	r0, r3
 8005882:	bd80      	pop	{r7, pc}
 8005884:	58024400 	.word	0x58024400
 8005888:	0800a940 	.word	0x0800a940

0800588c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800588c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005890:	b0ca      	sub	sp, #296	@ 0x128
 8005892:	af00      	add	r7, sp, #0
 8005894:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005898:	2300      	movs	r3, #0
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80058b0:	2500      	movs	r5, #0
 80058b2:	ea54 0305 	orrs.w	r3, r4, r5
 80058b6:	d049      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058c2:	d02f      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058c8:	d828      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ce:	d01a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80058d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058d4:	d822      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058de:	d007      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058e0:	e01c      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e2:	4bb8      	ldr	r3, [pc, #736]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	4ab7      	ldr	r2, [pc, #732]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058ee:	e01a      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	3308      	adds	r3, #8
 80058f6:	2102      	movs	r1, #2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 fc8f 	bl	800721c <RCCEx_PLL2_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005904:	e00f      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	3328      	adds	r3, #40	@ 0x28
 800590c:	2102      	movs	r1, #2
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fd36 	bl	8007380 <RCCEx_PLL3_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800591a:	e004      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005922:	e000      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800592e:	4ba5      	ldr	r3, [pc, #660]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005932:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800593c:	4aa1      	ldr	r2, [pc, #644]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800593e:	430b      	orrs	r3, r1
 8005940:	6513      	str	r3, [r2, #80]	@ 0x50
 8005942:	e003      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005958:	f04f 0900 	mov.w	r9, #0
 800595c:	ea58 0309 	orrs.w	r3, r8, r9
 8005960:	d047      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005968:	2b04      	cmp	r3, #4
 800596a:	d82a      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005989 	.word	0x08005989
 8005978:	08005997 	.word	0x08005997
 800597c:	080059ad 	.word	0x080059ad
 8005980:	080059cb 	.word	0x080059cb
 8005984:	080059cb 	.word	0x080059cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005988:	4b8e      	ldr	r3, [pc, #568]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	4a8d      	ldr	r2, [pc, #564]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800598e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005994:	e01a      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	3308      	adds	r3, #8
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 fc3c 	bl	800721c <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059aa:	e00f      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b0:	3328      	adds	r3, #40	@ 0x28
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fce3 	bl	8007380 <RCCEx_PLL3_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80059ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059d4:	4b7b      	ldr	r3, [pc, #492]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d8:	f023 0107 	bic.w	r1, r3, #7
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	4a78      	ldr	r2, [pc, #480]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80059e8:	e003      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80059fe:	f04f 0b00 	mov.w	fp, #0
 8005a02:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a06:	d04c      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a12:	d030      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a18:	d829      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a1c:	d02d      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a20:	d825      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a22:	2b80      	cmp	r3, #128	@ 0x80
 8005a24:	d018      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a26:	2b80      	cmp	r3, #128	@ 0x80
 8005a28:	d821      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a2e:	2b40      	cmp	r3, #64	@ 0x40
 8005a30:	d007      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a32:	e01c      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a34:	4b63      	ldr	r3, [pc, #396]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a38:	4a62      	ldr	r2, [pc, #392]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a40:	e01c      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	3308      	adds	r3, #8
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fbe6 	bl	800721c <RCCEx_PLL2_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a56:	e011      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	3328      	adds	r3, #40	@ 0x28
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 fc8d 	bl	8007380 <RCCEx_PLL3_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a6c:	e006      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a84:	4b4f      	ldr	r3, [pc, #316]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a92:	4a4c      	ldr	r2, [pc, #304]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a98:	e003      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005aae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005ab8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005abc:	460b      	mov	r3, r1
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	d053      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005aca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ace:	d035      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005ad0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ad4:	d82e      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ad6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ada:	d031      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005adc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ae0:	d828      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ae6:	d01a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aec:	d822      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005af2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af6:	d007      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005af8:	e01c      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afa:	4b32      	ldr	r3, [pc, #200]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	4a31      	ldr	r2, [pc, #196]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b06:	e01c      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fb83 	bl	800721c <RCCEx_PLL2_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b1c:	e011      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b22:	3328      	adds	r3, #40	@ 0x28
 8005b24:	2100      	movs	r1, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 fc2a 	bl	8007380 <RCCEx_PLL3_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b32:	e006      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b3a:	e002      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b3c:	bf00      	nop
 8005b3e:	e000      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005b80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d056      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b96:	d038      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b9c:	d831      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ba2:	d034      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005ba4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ba8:	d82b      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bae:	d01d      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005bb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb4:	d825      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d006      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005bba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005bc0:	e01f      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bc2:	bf00      	nop
 8005bc4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc8:	4ba2      	ldr	r3, [pc, #648]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	4aa1      	ldr	r2, [pc, #644]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bd4:	e01c      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	3308      	adds	r3, #8
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fb1c 	bl	800721c <RCCEx_PLL2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bea:	e011      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf0:	3328      	adds	r3, #40	@ 0x28
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fbc3 	bl	8007380 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c00:	e006      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c08:	e002      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c18:	4b8e      	ldr	r3, [pc, #568]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c28:	4a8a      	ldr	r2, [pc, #552]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2e:	e003      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005c52:	460b      	mov	r3, r1
 8005c54:	4313      	orrs	r3, r2
 8005c56:	d03a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5e:	2b30      	cmp	r3, #48	@ 0x30
 8005c60:	d01f      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c62:	2b30      	cmp	r3, #48	@ 0x30
 8005c64:	d819      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d00c      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d815      	bhi.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d019      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	d111      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c76:	4b77      	ldr	r3, [pc, #476]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	4a76      	ldr	r2, [pc, #472]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c82:	e011      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	3308      	adds	r3, #8
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fac5 	bl	800721c <RCCEx_PLL2_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c98:	e006      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ca0:	e002      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ca2:	bf00      	nop
 8005ca4:	e000      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cb0:	4b68      	ldr	r3, [pc, #416]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cbe:	4a65      	ldr	r2, [pc, #404]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cc4:	e003      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005cda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4313      	orrs	r3, r2
 8005cec:	d051      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cf8:	d035      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005cfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cfe:	d82e      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d04:	d031      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d0a:	d828      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d10:	d01a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d16:	d822      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d20:	d007      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d22:	e01c      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d24:	4b4b      	ldr	r3, [pc, #300]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	4a4a      	ldr	r2, [pc, #296]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d30:	e01c      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	3308      	adds	r3, #8
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 fa6e 	bl	800721c <RCCEx_PLL2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d46:	e011      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4c:	3328      	adds	r3, #40	@ 0x28
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fb15 	bl	8007380 <RCCEx_PLL3_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d5c:	e006      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d74:	4b37      	ldr	r3, [pc, #220]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d82:	4a34      	ldr	r2, [pc, #208]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d88:	e003      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005da8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005dac:	460b      	mov	r3, r1
 8005dae:	4313      	orrs	r3, r2
 8005db0:	d056      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dbc:	d033      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005dbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dc2:	d82c      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dc8:	d02f      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005dca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dce:	d826      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005dd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dd4:	d02b      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005dd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dda:	d820      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de0:	d012      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de6:	d81a      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d022      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df0:	d115      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	3308      	adds	r3, #8
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fa0e 	bl	800721c <RCCEx_PLL2_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e06:	e015      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	3328      	adds	r3, #40	@ 0x28
 8005e0e:	2101      	movs	r1, #1
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fab5 	bl	8007380 <RCCEx_PLL3_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e26:	bf00      	nop
 8005e28:	e004      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e2a:	bf00      	nop
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10d      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e3c:	4b05      	ldr	r3, [pc, #20]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4a:	4a02      	ldr	r2, [pc, #8]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e50:	e006      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e52:	bf00      	nop
 8005e54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e70:	2300      	movs	r3, #0
 8005e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	d055      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e8c:	d033      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e92:	d82c      	bhi.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e98:	d02f      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9e:	d826      	bhi.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ea0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ea4:	d02b      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eaa:	d820      	bhi.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb0:	d012      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb6:	d81a      	bhi.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d022      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ec0:	d115      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	2101      	movs	r1, #1
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f9a6 	bl	800721c <RCCEx_PLL2_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ed6:	e015      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	3328      	adds	r3, #40	@ 0x28
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fa4d 	bl	8007380 <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005eec:	e00a      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ef6:	bf00      	nop
 8005ef8:	e004      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f0c:	4ba3      	ldr	r3, [pc, #652]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f10:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f1c:	4a9f      	ldr	r2, [pc, #636]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f22:	e003      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f46:	460b      	mov	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	d037      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f56:	d00e      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5c:	d816      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f66:	d111      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4b8c      	ldr	r3, [pc, #560]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	4a8b      	ldr	r2, [pc, #556]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f74:	e00f      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f94c 	bl	800721c <RCCEx_PLL2_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f8a:	e004      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f92:	e000      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fac:	4a7b      	ldr	r2, [pc, #492]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fb2:	e003      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005fd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	d039      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d81c      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08005ffd 	.word	0x08005ffd
 8005ff4:	0800600b 	.word	0x0800600b
 8005ff8:	08006029 	.word	0x08006029
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffc:	4b67      	ldr	r3, [pc, #412]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	4a66      	ldr	r2, [pc, #408]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006008:	e00f      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600e:	3308      	adds	r3, #8
 8006010:	2102      	movs	r1, #2
 8006012:	4618      	mov	r0, r3
 8006014:	f001 f902 	bl	800721c <RCCEx_PLL2_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800601e:	e004      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006026:	e000      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006032:	4b5a      	ldr	r3, [pc, #360]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006036:	f023 0103 	bic.w	r1, r3, #3
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006040:	4a56      	ldr	r2, [pc, #344]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006042:	430b      	orrs	r3, r1
 8006044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800605c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006066:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800606a:	460b      	mov	r3, r1
 800606c:	4313      	orrs	r3, r2
 800606e:	f000 809f 	beq.w	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006072:	4b4b      	ldr	r3, [pc, #300]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a4a      	ldr	r2, [pc, #296]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800607c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800607e:	f7fc fa37 	bl	80024f0 <HAL_GetTick>
 8006082:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006086:	e00b      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006088:	f7fc fa32 	bl	80024f0 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b64      	cmp	r3, #100	@ 0x64
 8006096:	d903      	bls.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800609e:	e005      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060a0:	4b3f      	ldr	r3, [pc, #252]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0ed      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80060ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d179      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060b4:	4b39      	ldr	r3, [pc, #228]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060c0:	4053      	eors	r3, r2
 80060c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d015      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ca:	4b34      	ldr	r3, [pc, #208]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060d6:	4b31      	ldr	r3, [pc, #196]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060da:	4a30      	ldr	r2, [pc, #192]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e2:	4b2e      	ldr	r3, [pc, #184]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e6:	4a2d      	ldr	r2, [pc, #180]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060ee:	4a2b      	ldr	r2, [pc, #172]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006102:	d118      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fc f9f4 	bl	80024f0 <HAL_GetTick>
 8006108:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610c:	e00d      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fc f9ef 	bl	80024f0 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006118:	1ad2      	subs	r2, r2, r3
 800611a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800611e:	429a      	cmp	r2, r3
 8006120:	d903      	bls.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006128:	e005      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800612a:	4b1c      	ldr	r3, [pc, #112]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0eb      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613a:	2b00      	cmp	r3, #0
 800613c:	d129      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800614a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800614e:	d10e      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006150:	4b12      	ldr	r3, [pc, #72]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006160:	091a      	lsrs	r2, r3, #4
 8006162:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006164:	4013      	ands	r3, r2
 8006166:	4a0d      	ldr	r2, [pc, #52]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006168:	430b      	orrs	r3, r1
 800616a:	6113      	str	r3, [r2, #16]
 800616c:	e005      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800616e:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	4a0a      	ldr	r2, [pc, #40]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006174:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006178:	6113      	str	r3, [r2, #16]
 800617a:	4b08      	ldr	r3, [pc, #32]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618a:	4a04      	ldr	r2, [pc, #16]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800618c:	430b      	orrs	r3, r1
 800618e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006190:	e00e      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800619a:	e009      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800619c:	58024400 	.word	0x58024400
 80061a0:	58024800 	.word	0x58024800
 80061a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f002 0301 	and.w	r3, r2, #1
 80061bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f000 8089 	beq.w	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061d8:	2b28      	cmp	r3, #40	@ 0x28
 80061da:	d86b      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80061dc:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	080062bd 	.word	0x080062bd
 80061e8:	080062b5 	.word	0x080062b5
 80061ec:	080062b5 	.word	0x080062b5
 80061f0:	080062b5 	.word	0x080062b5
 80061f4:	080062b5 	.word	0x080062b5
 80061f8:	080062b5 	.word	0x080062b5
 80061fc:	080062b5 	.word	0x080062b5
 8006200:	080062b5 	.word	0x080062b5
 8006204:	08006289 	.word	0x08006289
 8006208:	080062b5 	.word	0x080062b5
 800620c:	080062b5 	.word	0x080062b5
 8006210:	080062b5 	.word	0x080062b5
 8006214:	080062b5 	.word	0x080062b5
 8006218:	080062b5 	.word	0x080062b5
 800621c:	080062b5 	.word	0x080062b5
 8006220:	080062b5 	.word	0x080062b5
 8006224:	0800629f 	.word	0x0800629f
 8006228:	080062b5 	.word	0x080062b5
 800622c:	080062b5 	.word	0x080062b5
 8006230:	080062b5 	.word	0x080062b5
 8006234:	080062b5 	.word	0x080062b5
 8006238:	080062b5 	.word	0x080062b5
 800623c:	080062b5 	.word	0x080062b5
 8006240:	080062b5 	.word	0x080062b5
 8006244:	080062bd 	.word	0x080062bd
 8006248:	080062b5 	.word	0x080062b5
 800624c:	080062b5 	.word	0x080062b5
 8006250:	080062b5 	.word	0x080062b5
 8006254:	080062b5 	.word	0x080062b5
 8006258:	080062b5 	.word	0x080062b5
 800625c:	080062b5 	.word	0x080062b5
 8006260:	080062b5 	.word	0x080062b5
 8006264:	080062bd 	.word	0x080062bd
 8006268:	080062b5 	.word	0x080062b5
 800626c:	080062b5 	.word	0x080062b5
 8006270:	080062b5 	.word	0x080062b5
 8006274:	080062b5 	.word	0x080062b5
 8006278:	080062b5 	.word	0x080062b5
 800627c:	080062b5 	.word	0x080062b5
 8006280:	080062b5 	.word	0x080062b5
 8006284:	080062bd 	.word	0x080062bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	3308      	adds	r3, #8
 800628e:	2101      	movs	r1, #1
 8006290:	4618      	mov	r0, r3
 8006292:	f000 ffc3 	bl	800721c <RCCEx_PLL2_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800629c:	e00f      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	3328      	adds	r3, #40	@ 0x28
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 f86a 	bl	8007380 <RCCEx_PLL3_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062b2:	e004      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ba:	e000      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80062bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062c6:	4bbf      	ldr	r3, [pc, #764]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062d4:	4abb      	ldr	r2, [pc, #748]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062d6:	430b      	orrs	r3, r1
 80062d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80062da:	e003      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f002 0302 	and.w	r3, r2, #2
 80062f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f4:	2300      	movs	r3, #0
 80062f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80062fe:	460b      	mov	r3, r1
 8006300:	4313      	orrs	r3, r2
 8006302:	d041      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800630a:	2b05      	cmp	r3, #5
 800630c:	d824      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800630e:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006361 	.word	0x08006361
 8006318:	0800632d 	.word	0x0800632d
 800631c:	08006343 	.word	0x08006343
 8006320:	08006361 	.word	0x08006361
 8006324:	08006361 	.word	0x08006361
 8006328:	08006361 	.word	0x08006361
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800632c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006330:	3308      	adds	r3, #8
 8006332:	2101      	movs	r1, #1
 8006334:	4618      	mov	r0, r3
 8006336:	f000 ff71 	bl	800721c <RCCEx_PLL2_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006340:	e00f      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	3328      	adds	r3, #40	@ 0x28
 8006348:	2101      	movs	r1, #1
 800634a:	4618      	mov	r0, r3
 800634c:	f001 f818 	bl	8007380 <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006356:	e004      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800635e:	e000      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800636a:	4b96      	ldr	r3, [pc, #600]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800636c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636e:	f023 0107 	bic.w	r1, r3, #7
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006378:	4a92      	ldr	r2, [pc, #584]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800637a:	430b      	orrs	r3, r1
 800637c:	6553      	str	r3, [r2, #84]	@ 0x54
 800637e:	e003      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f002 0304 	and.w	r3, r2, #4
 8006394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006398:	2300      	movs	r3, #0
 800639a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800639e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d044      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b0:	2b05      	cmp	r3, #5
 80063b2:	d825      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80063b4:	a201      	add	r2, pc, #4	@ (adr r2, 80063bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	08006409 	.word	0x08006409
 80063c0:	080063d5 	.word	0x080063d5
 80063c4:	080063eb 	.word	0x080063eb
 80063c8:	08006409 	.word	0x08006409
 80063cc:	08006409 	.word	0x08006409
 80063d0:	08006409 	.word	0x08006409
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d8:	3308      	adds	r3, #8
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 ff1d 	bl	800721c <RCCEx_PLL2_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063e8:	e00f      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ee:	3328      	adds	r3, #40	@ 0x28
 80063f0:	2101      	movs	r1, #1
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 ffc4 	bl	8007380 <RCCEx_PLL3_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006412:	4b6c      	ldr	r3, [pc, #432]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006416:	f023 0107 	bic.w	r1, r3, #7
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006422:	4a68      	ldr	r2, [pc, #416]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006424:	430b      	orrs	r3, r1
 8006426:	6593      	str	r3, [r2, #88]	@ 0x58
 8006428:	e003      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f002 0320 	and.w	r3, r2, #32
 800643e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006442:	2300      	movs	r3, #0
 8006444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d055      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800645e:	d033      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006464:	d82c      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646a:	d02f      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006470:	d826      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006472:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006476:	d02b      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006478:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800647c:	d820      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800647e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006482:	d012      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006488:	d81a      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d022      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800648e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006492:	d115      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006498:	3308      	adds	r3, #8
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f000 febd 	bl	800721c <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064a8:	e015      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	3328      	adds	r3, #40	@ 0x28
 80064b0:	2102      	movs	r1, #2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 ff64 	bl	8007380 <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064be:	e00a      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064c6:	e006      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064c8:	bf00      	nop
 80064ca:	e004      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064cc:	bf00      	nop
 80064ce:	e002      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064d0:	bf00      	nop
 80064d2:	e000      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80064d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064de:	4b39      	ldr	r3, [pc, #228]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ee:	4a35      	ldr	r2, [pc, #212]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80064f4:	e003      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800650a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800650e:	2300      	movs	r3, #0
 8006510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006514:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006518:	460b      	mov	r3, r1
 800651a:	4313      	orrs	r3, r2
 800651c:	d058      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006526:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800652a:	d033      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800652c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006530:	d82c      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006536:	d02f      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653c:	d826      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800653e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006542:	d02b      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006544:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006548:	d820      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654e:	d012      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006554:	d81a      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d022      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800655a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800655e:	d115      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006564:	3308      	adds	r3, #8
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fe57 	bl	800721c <RCCEx_PLL2_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006574:	e015      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	3328      	adds	r3, #40	@ 0x28
 800657c:	2102      	movs	r1, #2
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fefe 	bl	8007380 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800658a:	e00a      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006592:	e006      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006594:	bf00      	nop
 8006596:	e004      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006598:	bf00      	nop
 800659a:	e002      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800659c:	bf00      	nop
 800659e:	e000      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10e      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065aa:	4b06      	ldr	r3, [pc, #24]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065ba:	4a02      	ldr	r2, [pc, #8]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c0:	e006      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80065c2:	bf00      	nop
 80065c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80065ea:	460b      	mov	r3, r1
 80065ec:	4313      	orrs	r3, r2
 80065ee:	d055      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065fc:	d033      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80065fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006602:	d82c      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006608:	d02f      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800660a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800660e:	d826      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006610:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006614:	d02b      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006616:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800661a:	d820      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800661c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006620:	d012      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006626:	d81a      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d022      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006630:	d115      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006636:	3308      	adds	r3, #8
 8006638:	2100      	movs	r1, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fdee 	bl	800721c <RCCEx_PLL2_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006646:	e015      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664c:	3328      	adds	r3, #40	@ 0x28
 800664e:	2102      	movs	r1, #2
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fe95 	bl	8007380 <RCCEx_PLL3_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800665c:	e00a      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006664:	e006      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006666:	bf00      	nop
 8006668:	e004      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800666a:	bf00      	nop
 800666c:	e002      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10b      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800667c:	4ba1      	ldr	r3, [pc, #644]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006680:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800668c:	4a9d      	ldr	r2, [pc, #628]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800668e:	430b      	orrs	r3, r1
 8006690:	6593      	str	r3, [r2, #88]	@ 0x58
 8006692:	e003      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f002 0308 	and.w	r3, r2, #8
 80066a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066ac:	2300      	movs	r3, #0
 80066ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066b6:	460b      	mov	r3, r1
 80066b8:	4313      	orrs	r3, r2
 80066ba:	d01e      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80066bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c8:	d10c      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	3328      	adds	r3, #40	@ 0x28
 80066d0:	2102      	movs	r1, #2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fe54 	bl	8007380 <RCCEx_PLL3_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066e4:	4b87      	ldr	r3, [pc, #540]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066f4:	4a83      	ldr	r2, [pc, #524]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066f6:	430b      	orrs	r3, r1
 80066f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f002 0310 	and.w	r3, r2, #16
 8006706:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800670a:	2300      	movs	r3, #0
 800670c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006710:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006714:	460b      	mov	r3, r1
 8006716:	4313      	orrs	r3, r2
 8006718:	d01e      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006726:	d10c      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	3328      	adds	r3, #40	@ 0x28
 800672e:	2102      	movs	r1, #2
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fe25 	bl	8007380 <RCCEx_PLL3_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006742:	4b70      	ldr	r3, [pc, #448]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006752:	4a6c      	ldr	r2, [pc, #432]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006764:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800676e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d03e      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006784:	d022      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800678a:	d81b      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006794:	d00b      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006796:	e015      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679c:	3308      	adds	r3, #8
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fd3b 	bl	800721c <RCCEx_PLL2_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067ac:	e00f      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	3328      	adds	r3, #40	@ 0x28
 80067b4:	2102      	movs	r1, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fde2 	bl	8007380 <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067c2:	e004      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80067cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067e6:	4a47      	ldr	r2, [pc, #284]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e8:	430b      	orrs	r3, r1
 80067ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80067ec:	e003      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006802:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006804:	2300      	movs	r3, #0
 8006806:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006808:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d03b      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800681e:	d01f      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006824:	d818      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800682a:	d003      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800682c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006830:	d007      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006832:	e011      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b33      	ldr	r3, [pc, #204]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006838:	4a32      	ldr	r2, [pc, #200]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006840:	e00f      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006846:	3328      	adds	r3, #40	@ 0x28
 8006848:	2101      	movs	r1, #1
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fd98 	bl	8007380 <RCCEx_PLL3_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006856:	e004      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800685e:	e000      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800686a:	4b26      	ldr	r3, [pc, #152]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800686c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687a:	4a22      	ldr	r2, [pc, #136]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800687c:	430b      	orrs	r3, r1
 800687e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006880:	e003      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006896:	673b      	str	r3, [r7, #112]	@ 0x70
 8006898:	2300      	movs	r3, #0
 800689a:	677b      	str	r3, [r7, #116]	@ 0x74
 800689c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068a0:	460b      	mov	r3, r1
 80068a2:	4313      	orrs	r3, r2
 80068a4:	d034      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b4:	d007      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80068b6:	e011      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b8:	4b12      	ldr	r3, [pc, #72]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	4a11      	ldr	r2, [pc, #68]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068c4:	e00e      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	3308      	adds	r3, #8
 80068cc:	2102      	movs	r1, #2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fca4 	bl	800721c <RCCEx_PLL2_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068da:	e003      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10d      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068ec:	4b05      	ldr	r3, [pc, #20]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fa:	4a02      	ldr	r2, [pc, #8]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068fc:	430b      	orrs	r3, r1
 80068fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006900:	e006      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006902:	bf00      	nop
 8006904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800691c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800691e:	2300      	movs	r3, #0
 8006920:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006922:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d00c      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006930:	3328      	adds	r3, #40	@ 0x28
 8006932:	2102      	movs	r1, #2
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fd23 	bl	8007380 <RCCEx_PLL3_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006952:	663b      	str	r3, [r7, #96]	@ 0x60
 8006954:	2300      	movs	r3, #0
 8006956:	667b      	str	r3, [r7, #100]	@ 0x64
 8006958:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d038      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800696e:	d018      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006974:	d811      	bhi.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697a:	d014      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800697c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006980:	d80b      	bhi.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d011      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698a:	d106      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698c:	4bc3      	ldr	r3, [pc, #780]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	4ac2      	ldr	r2, [pc, #776]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006998:	e008      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069a0:	e004      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069b4:	4bb9      	ldr	r3, [pc, #740]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c4:	4ab5      	ldr	r2, [pc, #724]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069c6:	430b      	orrs	r3, r1
 80069c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80069ca:	e003      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80069e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069e2:	2300      	movs	r3, #0
 80069e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069f0:	4baa      	ldr	r3, [pc, #680]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fe:	4aa7      	ldr	r2, [pc, #668]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a10:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a12:	2300      	movs	r3, #0
 8006a14:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d00a      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a20:	4b9e      	ldr	r3, [pc, #632]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a30:	4a9a      	ldr	r2, [pc, #616]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a32:	430b      	orrs	r3, r1
 8006a34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a44:	2300      	movs	r3, #0
 8006a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a52:	4b92      	ldr	r3, [pc, #584]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a60:	4a8e      	ldr	r2, [pc, #568]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a62:	430b      	orrs	r3, r1
 8006a64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a74:	2300      	movs	r3, #0
 8006a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	d00e      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a82:	4b86      	ldr	r3, [pc, #536]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	4a85      	ldr	r2, [pc, #532]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a8c:	6113      	str	r3, [r2, #16]
 8006a8e:	4b83      	ldr	r3, [pc, #524]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a90:	6919      	ldr	r1, [r3, #16]
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a9a:	4a80      	ldr	r2, [pc, #512]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006abc:	4b77      	ldr	r3, [pc, #476]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aca:	4a74      	ldr	r2, [pc, #464]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006acc:	430b      	orrs	r3, r1
 8006ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ade:	2300      	movs	r3, #0
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006aec:	4b6b      	ldr	r3, [pc, #428]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006afc:	4a67      	ldr	r2, [pc, #412]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006afe:	430b      	orrs	r3, r1
 8006b00:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	d011      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b22:	3308      	adds	r3, #8
 8006b24:	2100      	movs	r1, #0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fb78 	bl	800721c <RCCEx_PLL2_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	6239      	str	r1, [r7, #32]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	d011      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b62:	3308      	adds	r3, #8
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fb58 	bl	800721c <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	61b9      	str	r1, [r7, #24]
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	d011      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	2102      	movs	r1, #2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fb38 	bl	800721c <RCCEx_PLL2_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	2100      	movs	r1, #0
 8006bcc:	6139      	str	r1, [r7, #16]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	d011      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be2:	3328      	adds	r3, #40	@ 0x28
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fbca 	bl	8007380 <RCCEx_PLL3_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	d011      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	3328      	adds	r3, #40	@ 0x28
 8006c24:	2101      	movs	r1, #1
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fbaa 	bl	8007380 <RCCEx_PLL3_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	607b      	str	r3, [r7, #4]
 8006c54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d011      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	3328      	adds	r3, #40	@ 0x28
 8006c64:	2102      	movs	r1, #2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fb8a 	bl	8007380 <RCCEx_PLL3_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006c82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e000      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006c96:	46bd      	mov	sp, r7
 8006c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c9c:	58024400 	.word	0x58024400

08006ca0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ca4:	f7fe fd96 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	4904      	ldr	r1, [pc, #16]	@ (8006cc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006cb6:	5ccb      	ldrb	r3, [r1, r3]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	0800a940 	.word	0x0800a940

08006ccc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b089      	sub	sp, #36	@ 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cd4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006cde:	4b9f      	ldr	r3, [pc, #636]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce2:	0b1b      	lsrs	r3, r3, #12
 8006ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ce8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cea:	4b9c      	ldr	r3, [pc, #624]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cf6:	4b99      	ldr	r3, [pc, #612]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfa:	08db      	lsrs	r3, r3, #3
 8006cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8111 	beq.w	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	f000 8083 	beq.w	8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	f200 80a1 	bhi.w	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d056      	beq.n	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d36:	e099      	b.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d38:	4b88      	ldr	r3, [pc, #544]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d02d      	beq.n	8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d44:	4b85      	ldr	r3, [pc, #532]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	4a84      	ldr	r2, [pc, #528]	@ (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d9e:	e087      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de2:	e065      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df6:	4b59      	ldr	r3, [pc, #356]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e26:	e043      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b48      	ldr	r3, [pc, #288]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6a:	e021      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7e:	4b37      	ldr	r3, [pc, #220]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	0a5b      	lsrs	r3, r3, #9
 8006eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed6:	ee17 2a90 	vmov	r2, s15
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ede:	4b1f      	ldr	r3, [pc, #124]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f04:	ee17 2a90 	vmov	r2, s15
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f0c:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f10:	0e1b      	lsrs	r3, r3, #24
 8006f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f32:	ee17 2a90 	vmov	r2, s15
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f3a:	e008      	b.n	8006f4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	3724      	adds	r7, #36	@ 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	03d09000 	.word	0x03d09000
 8006f64:	46000000 	.word	0x46000000
 8006f68:	4c742400 	.word	0x4c742400
 8006f6c:	4a742400 	.word	0x4a742400
 8006f70:	4af42400 	.word	0x4af42400

08006f74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	@ 0x24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f7c:	4ba1      	ldr	r3, [pc, #644]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f86:	4b9f      	ldr	r3, [pc, #636]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	0d1b      	lsrs	r3, r3, #20
 8006f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f92:	4b9c      	ldr	r3, [pc, #624]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	0a1b      	lsrs	r3, r3, #8
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f9e:	4b99      	ldr	r3, [pc, #612]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	08db      	lsrs	r3, r3, #3
 8006fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8111 	beq.w	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f000 8083 	beq.w	80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	f200 80a1 	bhi.w	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d056      	beq.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fde:	e099      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe0:	4b88      	ldr	r3, [pc, #544]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02d      	beq.n	8007048 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fec:	4b85      	ldr	r3, [pc, #532]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	4a84      	ldr	r2, [pc, #528]	@ (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b7b      	ldr	r3, [pc, #492]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a03 	vldr	s12, [r7, #12]
 800702a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007046:	e087      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b6a      	ldr	r3, [pc, #424]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708a:	e065      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b59      	ldr	r3, [pc, #356]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ce:	e043      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b48      	ldr	r3, [pc, #288]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007112:	e021      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b37      	ldr	r3, [pc, #220]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a03 	vldr	s12, [r7, #12]
 800713a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007156:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007158:	4b2a      	ldr	r3, [pc, #168]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	0a5b      	lsrs	r3, r3, #9
 800715e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800716e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007172:	edd7 6a07 	vldr	s13, [r7, #28]
 8007176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717e:	ee17 2a90 	vmov	r2, s15
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007186:	4b1f      	ldr	r3, [pc, #124]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ac:	ee17 2a90 	vmov	r2, s15
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071b4:	4b13      	ldr	r3, [pc, #76]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	0e1b      	lsrs	r3, r3, #24
 80071ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071da:	ee17 2a90 	vmov	r2, s15
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071e2:	e008      	b.n	80071f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
}
 80071f6:	bf00      	nop
 80071f8:	3724      	adds	r7, #36	@ 0x24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	58024400 	.word	0x58024400
 8007208:	03d09000 	.word	0x03d09000
 800720c:	46000000 	.word	0x46000000
 8007210:	4c742400 	.word	0x4c742400
 8007214:	4a742400 	.word	0x4a742400
 8007218:	4af42400 	.word	0x4af42400

0800721c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800722a:	4b53      	ldr	r3, [pc, #332]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 800722c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d101      	bne.n	800723a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e099      	b.n	800736e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800723a:	4b4f      	ldr	r3, [pc, #316]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a4e      	ldr	r2, [pc, #312]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007240:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007246:	f7fb f953 	bl	80024f0 <HAL_GetTick>
 800724a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800724c:	e008      	b.n	8007260 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800724e:	f7fb f94f 	bl	80024f0 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e086      	b.n	800736e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007260:	4b45      	ldr	r3, [pc, #276]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f0      	bne.n	800724e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800726c:	4b42      	ldr	r3, [pc, #264]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 800726e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007270:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	031b      	lsls	r3, r3, #12
 800727a:	493f      	ldr	r1, [pc, #252]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 800727c:	4313      	orrs	r3, r2
 800727e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	3b01      	subs	r3, #1
 8007286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	3b01      	subs	r3, #1
 8007290:	025b      	lsls	r3, r3, #9
 8007292:	b29b      	uxth	r3, r3
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	3b01      	subs	r3, #1
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072b0:	4931      	ldr	r1, [pc, #196]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072b6:	4b30      	ldr	r3, [pc, #192]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	492d      	ldr	r1, [pc, #180]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	f023 0220 	bic.w	r2, r3, #32
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	4928      	ldr	r1, [pc, #160]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072da:	4b27      	ldr	r3, [pc, #156]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072de:	4a26      	ldr	r2, [pc, #152]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072e0:	f023 0310 	bic.w	r3, r3, #16
 80072e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072e6:	4b24      	ldr	r3, [pc, #144]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ea:	4b24      	ldr	r3, [pc, #144]	@ (800737c <RCCEx_PLL2_Config+0x160>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	69d2      	ldr	r2, [r2, #28]
 80072f2:	00d2      	lsls	r2, r2, #3
 80072f4:	4920      	ldr	r1, [pc, #128]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007300:	f043 0310 	orr.w	r3, r3, #16
 8007304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d106      	bne.n	800731a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800730c:	4b1a      	ldr	r3, [pc, #104]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 800730e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007310:	4a19      	ldr	r2, [pc, #100]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007316:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007318:	e00f      	b.n	800733a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d106      	bne.n	800732e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007320:	4b15      	ldr	r3, [pc, #84]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	4a14      	ldr	r2, [pc, #80]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800732a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800732c:	e005      	b.n	800733a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800732e:	4b12      	ldr	r3, [pc, #72]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007332:	4a11      	ldr	r2, [pc, #68]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007338:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800733a:	4b0f      	ldr	r3, [pc, #60]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a0e      	ldr	r2, [pc, #56]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007340:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007346:	f7fb f8d3 	bl	80024f0 <HAL_GetTick>
 800734a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800734c:	e008      	b.n	8007360 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800734e:	f7fb f8cf 	bl	80024f0 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e006      	b.n	800736e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <RCCEx_PLL2_Config+0x15c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0f0      	beq.n	800734e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	58024400 	.word	0x58024400
 800737c:	ffff0007 	.word	0xffff0007

08007380 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800738e:	4b53      	ldr	r3, [pc, #332]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d101      	bne.n	800739e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e099      	b.n	80074d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800739e:	4b4f      	ldr	r3, [pc, #316]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a4e      	ldr	r2, [pc, #312]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80073a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073aa:	f7fb f8a1 	bl	80024f0 <HAL_GetTick>
 80073ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073b0:	e008      	b.n	80073c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073b2:	f7fb f89d 	bl	80024f0 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e086      	b.n	80074d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073c4:	4b45      	ldr	r3, [pc, #276]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f0      	bne.n	80073b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073d0:	4b42      	ldr	r3, [pc, #264]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	051b      	lsls	r3, r3, #20
 80073de:	493f      	ldr	r1, [pc, #252]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	025b      	lsls	r3, r3, #9
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	041b      	lsls	r3, r3, #16
 8007402:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	3b01      	subs	r3, #1
 800740e:	061b      	lsls	r3, r3, #24
 8007410:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007414:	4931      	ldr	r1, [pc, #196]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800741a:	4b30      	ldr	r3, [pc, #192]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	492d      	ldr	r1, [pc, #180]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800742c:	4b2b      	ldr	r3, [pc, #172]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	4928      	ldr	r1, [pc, #160]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800743e:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	4a26      	ldr	r2, [pc, #152]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007448:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800744a:	4b24      	ldr	r3, [pc, #144]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 800744c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800744e:	4b24      	ldr	r3, [pc, #144]	@ (80074e0 <RCCEx_PLL3_Config+0x160>)
 8007450:	4013      	ands	r3, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	69d2      	ldr	r2, [r2, #28]
 8007456:	00d2      	lsls	r2, r2, #3
 8007458:	4920      	ldr	r1, [pc, #128]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 800745a:	4313      	orrs	r3, r2
 800745c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800745e:	4b1f      	ldr	r3, [pc, #124]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	4a1e      	ldr	r2, [pc, #120]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007468:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007470:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	4a19      	ldr	r2, [pc, #100]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007476:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800747a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800747c:	e00f      	b.n	800749e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d106      	bne.n	8007492 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007484:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	4a14      	ldr	r2, [pc, #80]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 800748a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800748e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007490:	e005      	b.n	800749e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007492:	4b12      	ldr	r3, [pc, #72]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007496:	4a11      	ldr	r2, [pc, #68]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 8007498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800749c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800749e:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a0e      	ldr	r2, [pc, #56]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80074a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074aa:	f7fb f821 	bl	80024f0 <HAL_GetTick>
 80074ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074b0:	e008      	b.n	80074c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074b2:	f7fb f81d 	bl	80024f0 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e006      	b.n	80074d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074c4:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <RCCEx_PLL3_Config+0x15c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	ffff0007 	.word	0xffff0007

080074e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e10f      	b.n	8007716 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a87      	ldr	r2, [pc, #540]	@ (8007720 <HAL_SPI_Init+0x23c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00f      	beq.n	8007526 <HAL_SPI_Init+0x42>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a86      	ldr	r2, [pc, #536]	@ (8007724 <HAL_SPI_Init+0x240>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00a      	beq.n	8007526 <HAL_SPI_Init+0x42>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a84      	ldr	r2, [pc, #528]	@ (8007728 <HAL_SPI_Init+0x244>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d005      	beq.n	8007526 <HAL_SPI_Init+0x42>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b0f      	cmp	r3, #15
 8007520:	d901      	bls.n	8007526 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e0f7      	b.n	8007716 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fe2e 	bl	8008188 <SPI_GetPacketSize>
 800752c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7b      	ldr	r2, [pc, #492]	@ (8007720 <HAL_SPI_Init+0x23c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00c      	beq.n	8007552 <HAL_SPI_Init+0x6e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a79      	ldr	r2, [pc, #484]	@ (8007724 <HAL_SPI_Init+0x240>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <HAL_SPI_Init+0x6e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a78      	ldr	r2, [pc, #480]	@ (8007728 <HAL_SPI_Init+0x244>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d002      	beq.n	8007552 <HAL_SPI_Init+0x6e>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b08      	cmp	r3, #8
 8007550:	d811      	bhi.n	8007576 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007556:	4a72      	ldr	r2, [pc, #456]	@ (8007720 <HAL_SPI_Init+0x23c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d009      	beq.n	8007570 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a70      	ldr	r2, [pc, #448]	@ (8007724 <HAL_SPI_Init+0x240>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d004      	beq.n	8007570 <HAL_SPI_Init+0x8c>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a6f      	ldr	r2, [pc, #444]	@ (8007728 <HAL_SPI_Init+0x244>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d104      	bne.n	800757a <HAL_SPI_Init+0x96>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b10      	cmp	r3, #16
 8007574:	d901      	bls.n	800757a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e0cd      	b.n	8007716 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fa fad0 	bl	8001b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0201 	bic.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80075b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075c0:	d119      	bne.n	80075f6 <HAL_SPI_Init+0x112>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075ca:	d103      	bne.n	80075d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10c      	bne.n	80075f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075e4:	d107      	bne.n	80075f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00f      	beq.n	8007622 <HAL_SPI_Init+0x13e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b06      	cmp	r3, #6
 8007608:	d90b      	bls.n	8007622 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	e007      	b.n	8007632 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007630:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69da      	ldr	r2, [r3, #28]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763a:	431a      	orrs	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007644:	ea42 0103 	orr.w	r1, r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007692:	ea42 0103 	orr.w	r1, r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d113      	bne.n	80076d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40013000 	.word	0x40013000
 8007724:	40003800 	.word	0x40003800
 8007728:	40003c00 	.word	0x40003c00

0800772c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af02      	add	r7, sp, #8
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3320      	adds	r3, #32
 8007742:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007744:	f7fa fed4 	bl	80024f0 <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	d001      	beq.n	800775a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007756:	2302      	movs	r3, #2
 8007758:	e1d1      	b.n	8007afe <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_SPI_Transmit+0x3a>
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e1c9      	b.n	8007afe <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_SPI_Transmit+0x4c>
 8007774:	2302      	movs	r3, #2
 8007776:	e1c2      	b.n	8007afe <HAL_SPI_Transmit+0x3d2>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2203      	movs	r2, #3
 8007784:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	88fa      	ldrh	r2, [r7, #6]
 800779a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80077d0:	d108      	bne.n	80077e4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e009      	b.n	80077f8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80077f6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	4b96      	ldr	r3, [pc, #600]	@ (8007a58 <HAL_SPI_Transmit+0x32c>)
 8007800:	4013      	ands	r3, r2
 8007802:	88f9      	ldrh	r1, [r7, #6]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	6812      	ldr	r2, [r2, #0]
 8007808:	430b      	orrs	r3, r1
 800780a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007824:	d107      	bne.n	8007836 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b0f      	cmp	r3, #15
 800783c:	d947      	bls.n	80078ce <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800783e:	e03f      	b.n	80078c0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b02      	cmp	r3, #2
 800784c:	d114      	bne.n	8007878 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007876:	e023      	b.n	80078c0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007878:	f7fa fe3a 	bl	80024f0 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d803      	bhi.n	8007890 <HAL_SPI_Transmit+0x164>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d102      	bne.n	8007896 <HAL_SPI_Transmit+0x16a>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d114      	bne.n	80078c0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fba8 	bl	8007fec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e11e      	b.n	8007afe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1b9      	bne.n	8007840 <HAL_SPI_Transmit+0x114>
 80078cc:	e0f1      	b.n	8007ab2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	2b07      	cmp	r3, #7
 80078d4:	f240 80e6 	bls.w	8007aa4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80078d8:	e05d      	b.n	8007996 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d132      	bne.n	800794e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d918      	bls.n	8007926 <HAL_SPI_Transmit+0x1fa>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d014      	beq.n	8007926 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b02      	subs	r3, #2
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007924:	e037      	b.n	8007996 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800792a:	881a      	ldrh	r2, [r3, #0]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007934:	1c9a      	adds	r2, r3, #2
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800794c:	e023      	b.n	8007996 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800794e:	f7fa fdcf 	bl	80024f0 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d803      	bhi.n	8007966 <HAL_SPI_Transmit+0x23a>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d102      	bne.n	800796c <HAL_SPI_Transmit+0x240>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d114      	bne.n	8007996 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fb3d 	bl	8007fec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e0b3      	b.n	8007afe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d19b      	bne.n	80078da <HAL_SPI_Transmit+0x1ae>
 80079a2:	e086      	b.n	8007ab2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d154      	bne.n	8007a5c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d918      	bls.n	80079f0 <HAL_SPI_Transmit+0x2c4>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c2:	2b40      	cmp	r3, #64	@ 0x40
 80079c4:	d914      	bls.n	80079f0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b04      	subs	r3, #4
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80079ee:	e059      	b.n	8007aa4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d917      	bls.n	8007a2c <HAL_SPI_Transmit+0x300>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d013      	beq.n	8007a2c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a08:	881a      	ldrh	r2, [r3, #0]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b02      	subs	r3, #2
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007a2a:	e03b      	b.n	8007aa4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3320      	adds	r3, #32
 8007a36:	7812      	ldrb	r2, [r2, #0]
 8007a38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007a56:	e025      	b.n	8007aa4 <HAL_SPI_Transmit+0x378>
 8007a58:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a5c:	f7fa fd48 	bl	80024f0 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d803      	bhi.n	8007a74 <HAL_SPI_Transmit+0x348>
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d102      	bne.n	8007a7a <HAL_SPI_Transmit+0x34e>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d114      	bne.n	8007aa4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fab6 	bl	8007fec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e02c      	b.n	8007afe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f47f af79 	bne.w	80079a4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2108      	movs	r1, #8
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 fb35 	bl	800812c <SPI_WaitOnFlagUntilTimeout>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ace:	f043 0220 	orr.w	r2, r3, #32
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fa87 	bl	8007fec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3301      	adds	r3, #1
 8007b22:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3330      	adds	r3, #48	@ 0x30
 8007b2a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b2c:	f7fa fce0 	bl	80024f0 <HAL_GetTick>
 8007b30:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d001      	beq.n	8007b42 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e250      	b.n	8007fe4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <HAL_SPI_Receive+0x46>
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e248      	b.n	8007fe4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_SPI_Receive+0x58>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e241      	b.n	8007fe4 <HAL_SPI_Receive+0x4dc>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	88fa      	ldrh	r2, [r7, #6]
 8007b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007bb8:	d108      	bne.n	8007bcc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	e009      	b.n	8007be0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007bde:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4b95      	ldr	r3, [pc, #596]	@ (8007e3c <HAL_SPI_Receive+0x334>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	88f9      	ldrh	r1, [r7, #6]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	6812      	ldr	r2, [r2, #0]
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c0c:	d107      	bne.n	8007c1e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	2b0f      	cmp	r3, #15
 8007c24:	d96c      	bls.n	8007d00 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007c26:	e064      	b.n	8007cf2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d114      	bne.n	8007c68 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c48:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c66:	e044      	b.n	8007cf2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8bfa      	ldrh	r2, [r7, #30]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d919      	bls.n	8007caa <HAL_SPI_Receive+0x1a2>
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d014      	beq.n	8007caa <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c8a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ca8:	e023      	b.n	8007cf2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007caa:	f7fa fc21 	bl	80024f0 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d803      	bhi.n	8007cc2 <HAL_SPI_Receive+0x1ba>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc0:	d102      	bne.n	8007cc8 <HAL_SPI_Receive+0x1c0>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d114      	bne.n	8007cf2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 f98f 	bl	8007fec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e178      	b.n	8007fe4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d194      	bne.n	8007c28 <HAL_SPI_Receive+0x120>
 8007cfe:	e15e      	b.n	8007fbe <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2b07      	cmp	r3, #7
 8007d06:	f240 8153 	bls.w	8007fb0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007d0a:	e08f      	b.n	8007e2c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d114      	bne.n	8007d4c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	8812      	ldrh	r2, [r2, #0]
 8007d2a:	b292      	uxth	r2, r2
 8007d2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d32:	1c9a      	adds	r2, r3, #2
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d4a:	e06f      	b.n	8007e2c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	8bfa      	ldrh	r2, [r7, #30]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d924      	bls.n	8007da4 <HAL_SPI_Receive+0x29c>
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01f      	beq.n	8007da4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	8812      	ldrh	r2, [r2, #0]
 8007d6c:	b292      	uxth	r2, r2
 8007d6e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d74:	1c9a      	adds	r2, r3, #2
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	8812      	ldrh	r2, [r2, #0]
 8007d82:	b292      	uxth	r2, r2
 8007d84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d8a:	1c9a      	adds	r2, r3, #2
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b02      	subs	r3, #2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007da2:	e043      	b.n	8007e2c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d119      	bne.n	8007de4 <HAL_SPI_Receive+0x2dc>
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d014      	beq.n	8007de4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	8812      	ldrh	r2, [r2, #0]
 8007dc2:	b292      	uxth	r2, r2
 8007dc4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dca:	1c9a      	adds	r2, r3, #2
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007de2:	e023      	b.n	8007e2c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007de4:	f7fa fb84 	bl	80024f0 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d803      	bhi.n	8007dfc <HAL_SPI_Receive+0x2f4>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d102      	bne.n	8007e02 <HAL_SPI_Receive+0x2fa>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d114      	bne.n	8007e2c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 f8f2 	bl	8007fec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e0db      	b.n	8007fe4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f47f af69 	bne.w	8007d0c <HAL_SPI_Receive+0x204>
 8007e3a:	e0c0      	b.n	8007fbe <HAL_SPI_Receive+0x4b6>
 8007e3c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d117      	bne.n	8007e86 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e62:	7812      	ldrb	r2, [r2, #0]
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e84:	e094      	b.n	8007fb0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	8bfa      	ldrh	r2, [r7, #30]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d946      	bls.n	8007f22 <HAL_SPI_Receive+0x41a>
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d041      	beq.n	8007f22 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eaa:	7812      	ldrb	r2, [r2, #0]
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ee2:	7812      	ldrb	r2, [r2, #0]
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	b2d2      	uxtb	r2, r2
 8007f02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b04      	subs	r3, #4
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f20:	e046      	b.n	8007fb0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d81c      	bhi.n	8007f68 <HAL_SPI_Receive+0x460>
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d017      	beq.n	8007f68 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f44:	7812      	ldrb	r2, [r2, #0]
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f66:	e023      	b.n	8007fb0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f68:	f7fa fac2 	bl	80024f0 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d803      	bhi.n	8007f80 <HAL_SPI_Receive+0x478>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d102      	bne.n	8007f86 <HAL_SPI_Receive+0x47e>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d114      	bne.n	8007fb0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f830 	bl	8007fec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e019      	b.n	8007fe4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f47f af41 	bne.w	8007e40 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f814 	bl	8007fec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
  }
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3720      	adds	r7, #32
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699a      	ldr	r2, [r3, #24]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0208 	orr.w	r2, r2, #8
 800800a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699a      	ldr	r2, [r3, #24]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0210 	orr.w	r2, r2, #16
 800801a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0201 	bic.w	r2, r2, #1
 800802a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6919      	ldr	r1, [r3, #16]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b3c      	ldr	r3, [pc, #240]	@ (8008128 <SPI_CloseTransfer+0x13c>)
 8008038:	400b      	ands	r3, r1
 800803a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800804a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b04      	cmp	r3, #4
 8008056:	d014      	beq.n	8008082 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00f      	beq.n	8008082 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008068:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699a      	ldr	r2, [r3, #24]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0220 	orr.w	r2, r2, #32
 8008080:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b03      	cmp	r3, #3
 800808c:	d014      	beq.n	80080b8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00f      	beq.n	80080b8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800809e:	f043 0204 	orr.w	r2, r3, #4
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00f      	beq.n	80080e2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080c8:	f043 0201 	orr.w	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699a      	ldr	r2, [r3, #24]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00f      	beq.n	800810c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f2:	f043 0208 	orr.w	r2, r3, #8
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699a      	ldr	r2, [r3, #24]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800810a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800811c:	bf00      	nop
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	fffffc90 	.word	0xfffffc90

0800812c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800813c:	e010      	b.n	8008160 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800813e:	f7fa f9d7 	bl	80024f0 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d803      	bhi.n	8008156 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d102      	bne.n	800815c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e00f      	b.n	8008180 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695a      	ldr	r2, [r3, #20]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	4013      	ands	r3, r2
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	429a      	cmp	r2, r3
 800816e:	bf0c      	ite	eq
 8008170:	2301      	moveq	r3, #1
 8008172:	2300      	movne	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	429a      	cmp	r2, r3
 800817c:	d0df      	beq.n	800813e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	3301      	adds	r3, #1
 8008198:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	3301      	adds	r3, #1
 80081a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	3307      	adds	r3, #7
 80081a6:	08db      	lsrs	r3, r3, #3
 80081a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e042      	b.n	8008256 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7f9 fd34 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2224      	movs	r2, #36	@ 0x24
 80081ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 fadd 	bl	80097c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fd72 	bl	8008cf8 <UART_SetConfig>
 8008214:	4603      	mov	r3, r0
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e01b      	b.n	8008256 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800822c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800823c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0201 	orr.w	r2, r2, #1
 800824c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 fb5c 	bl	800990c <UART_CheckIdleState>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b08a      	sub	sp, #40	@ 0x28
 8008262:	af02      	add	r7, sp, #8
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008274:	2b20      	cmp	r3, #32
 8008276:	d17b      	bne.n	8008370 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_UART_Transmit+0x26>
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e074      	b.n	8008372 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2221      	movs	r2, #33	@ 0x21
 8008294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008298:	f7fa f92a 	bl	80024f0 <HAL_GetTick>
 800829c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	88fa      	ldrh	r2, [r7, #6]
 80082a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	88fa      	ldrh	r2, [r7, #6]
 80082aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b6:	d108      	bne.n	80082ca <HAL_UART_Transmit+0x6c>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d104      	bne.n	80082ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	61bb      	str	r3, [r7, #24]
 80082c8:	e003      	b.n	80082d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082d2:	e030      	b.n	8008336 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2200      	movs	r2, #0
 80082dc:	2180      	movs	r1, #128	@ 0x80
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f001 fbbe 	bl	8009a60 <UART_WaitOnFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e03d      	b.n	8008372 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800830a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	3302      	adds	r3, #2
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	e007      	b.n	8008324 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	781a      	ldrb	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3301      	adds	r3, #1
 8008322:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1c8      	bne.n	80082d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2200      	movs	r2, #0
 800834a:	2140      	movs	r1, #64	@ 0x40
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f001 fb87 	bl	8009a60 <UART_WaitOnFlagUntilTimeout>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e006      	b.n	8008372 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	e000      	b.n	8008372 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008370:	2302      	movs	r3, #2
  }
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b08a      	sub	sp, #40	@ 0x28
 800837e:	af02      	add	r7, sp, #8
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	603b      	str	r3, [r7, #0]
 8008386:	4613      	mov	r3, r2
 8008388:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008390:	2b20      	cmp	r3, #32
 8008392:	f040 80b5 	bne.w	8008500 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_UART_Receive+0x28>
 800839c:	88fb      	ldrh	r3, [r7, #6]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e0ad      	b.n	8008502 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2222      	movs	r2, #34	@ 0x22
 80083b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083bc:	f7fa f898 	bl	80024f0 <HAL_GetTick>
 80083c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	88fa      	ldrh	r2, [r7, #6]
 80083c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	88fa      	ldrh	r2, [r7, #6]
 80083ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083da:	d10e      	bne.n	80083fa <HAL_UART_Receive+0x80>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <HAL_UART_Receive+0x76>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80083ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80083ee:	e02d      	b.n	800844c <HAL_UART_Receive+0xd2>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	22ff      	movs	r2, #255	@ 0xff
 80083f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80083f8:	e028      	b.n	800844c <HAL_UART_Receive+0xd2>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10d      	bne.n	800841e <HAL_UART_Receive+0xa4>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <HAL_UART_Receive+0x9a>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	22ff      	movs	r2, #255	@ 0xff
 800840e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008412:	e01b      	b.n	800844c <HAL_UART_Receive+0xd2>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	227f      	movs	r2, #127	@ 0x7f
 8008418:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800841c:	e016      	b.n	800844c <HAL_UART_Receive+0xd2>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008426:	d10d      	bne.n	8008444 <HAL_UART_Receive+0xca>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <HAL_UART_Receive+0xc0>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	227f      	movs	r2, #127	@ 0x7f
 8008434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008438:	e008      	b.n	800844c <HAL_UART_Receive+0xd2>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	223f      	movs	r2, #63	@ 0x3f
 800843e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008442:	e003      	b.n	800844c <HAL_UART_Receive+0xd2>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008452:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800845c:	d108      	bne.n	8008470 <HAL_UART_Receive+0xf6>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d104      	bne.n	8008470 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e003      	b.n	8008478 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008478:	e036      	b.n	80084e8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2200      	movs	r2, #0
 8008482:	2120      	movs	r1, #32
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f001 faeb 	bl	8009a60 <UART_WaitOnFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e032      	b.n	8008502 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10c      	bne.n	80084bc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	8a7b      	ldrh	r3, [r7, #18]
 80084ac:	4013      	ands	r3, r2
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	3302      	adds	r3, #2
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	e00c      	b.n	80084d6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	8a7b      	ldrh	r3, [r7, #18]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	4013      	ands	r3, r2
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	3301      	adds	r3, #1
 80084d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1c2      	bne.n	800847a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	e000      	b.n	8008502 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008500:	2302      	movs	r3, #2
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b0ba      	sub	sp, #232	@ 0xe8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008532:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008536:	f640 030f 	movw	r3, #2063	@ 0x80f
 800853a:	4013      	ands	r3, r2
 800853c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11b      	bne.n	8008580 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d015      	beq.n	8008580 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8393 	beq.w	8008c9c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
      }
      return;
 800857e:	e38d      	b.n	8008c9c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8123 	beq.w	80087d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800858a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800858e:	4b8d      	ldr	r3, [pc, #564]	@ (80087c4 <HAL_UART_IRQHandler+0x2b8>)
 8008590:	4013      	ands	r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800859a:	4b8b      	ldr	r3, [pc, #556]	@ (80087c8 <HAL_UART_IRQHandler+0x2bc>)
 800859c:	4013      	ands	r3, r2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8116 	beq.w	80087d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d011      	beq.n	80085d4 <HAL_UART_IRQHandler+0xc8>
 80085b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ca:	f043 0201 	orr.w	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d011      	beq.n	8008604 <HAL_UART_IRQHandler+0xf8>
 80085e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2202      	movs	r2, #2
 80085f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fa:	f043 0204 	orr.w	r2, r3, #4
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d011      	beq.n	8008634 <HAL_UART_IRQHandler+0x128>
 8008610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2204      	movs	r2, #4
 8008622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862a:	f043 0202 	orr.w	r2, r3, #2
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b00      	cmp	r3, #0
 800863e:	d017      	beq.n	8008670 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800864c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008650:	4b5c      	ldr	r3, [pc, #368]	@ (80087c4 <HAL_UART_IRQHandler+0x2b8>)
 8008652:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2208      	movs	r2, #8
 800865e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008666:	f043 0208 	orr.w	r2, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008678:	2b00      	cmp	r3, #0
 800867a:	d012      	beq.n	80086a2 <HAL_UART_IRQHandler+0x196>
 800867c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008680:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008698:	f043 0220 	orr.w	r2, r3, #32
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 82f9 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d013      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d105      	bne.n	80086d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d007      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f6:	2b40      	cmp	r3, #64	@ 0x40
 80086f8:	d005      	beq.n	8008706 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008702:	2b00      	cmp	r3, #0
 8008704:	d054      	beq.n	80087b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fa18 	bl	8009b3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008716:	2b40      	cmp	r3, #64	@ 0x40
 8008718:	d146      	bne.n	80087a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008746:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800874a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800875e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1d9      	bne.n	800871a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800876c:	2b00      	cmp	r3, #0
 800876e:	d017      	beq.n	80087a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008776:	4a15      	ldr	r2, [pc, #84]	@ (80087cc <HAL_UART_IRQHandler+0x2c0>)
 8008778:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008780:	4618      	mov	r0, r3
 8008782:	f7fa fafb 	bl	8002d7c <HAL_DMA_Abort_IT>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d019      	beq.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800879a:	4610      	mov	r0, r2
 800879c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879e:	e00f      	b.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa93 	bl	8008ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a6:	e00b      	b.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fa8f 	bl	8008ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ae:	e007      	b.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fa8b 	bl	8008ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80087be:	e26f      	b.n	8008ca0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	bf00      	nop
    return;
 80087c2:	e26d      	b.n	8008ca0 <HAL_UART_IRQHandler+0x794>
 80087c4:	10000001 	.word	0x10000001
 80087c8:	04000120 	.word	0x04000120
 80087cc:	08009c09 	.word	0x08009c09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f040 8203 	bne.w	8008be0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 81fc 	beq.w	8008be0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087ec:	f003 0310 	and.w	r3, r3, #16
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 81f5 	beq.w	8008be0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2210      	movs	r2, #16
 80087fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008808:	2b40      	cmp	r3, #64	@ 0x40
 800880a:	f040 816d 	bne.w	8008ae8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4aa4      	ldr	r2, [pc, #656]	@ (8008aa8 <HAL_UART_IRQHandler+0x59c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d068      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4aa1      	ldr	r2, [pc, #644]	@ (8008aac <HAL_UART_IRQHandler+0x5a0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d061      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a9f      	ldr	r2, [pc, #636]	@ (8008ab0 <HAL_UART_IRQHandler+0x5a4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d05a      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a9c      	ldr	r2, [pc, #624]	@ (8008ab4 <HAL_UART_IRQHandler+0x5a8>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d053      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a9a      	ldr	r2, [pc, #616]	@ (8008ab8 <HAL_UART_IRQHandler+0x5ac>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d04c      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a97      	ldr	r2, [pc, #604]	@ (8008abc <HAL_UART_IRQHandler+0x5b0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d045      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a95      	ldr	r2, [pc, #596]	@ (8008ac0 <HAL_UART_IRQHandler+0x5b4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d03e      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a92      	ldr	r2, [pc, #584]	@ (8008ac4 <HAL_UART_IRQHandler+0x5b8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d037      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a90      	ldr	r2, [pc, #576]	@ (8008ac8 <HAL_UART_IRQHandler+0x5bc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d030      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a8d      	ldr	r2, [pc, #564]	@ (8008acc <HAL_UART_IRQHandler+0x5c0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d029      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a8b      	ldr	r2, [pc, #556]	@ (8008ad0 <HAL_UART_IRQHandler+0x5c4>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d022      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a88      	ldr	r2, [pc, #544]	@ (8008ad4 <HAL_UART_IRQHandler+0x5c8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d01b      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a86      	ldr	r2, [pc, #536]	@ (8008ad8 <HAL_UART_IRQHandler+0x5cc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d014      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a83      	ldr	r2, [pc, #524]	@ (8008adc <HAL_UART_IRQHandler+0x5d0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00d      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a81      	ldr	r2, [pc, #516]	@ (8008ae0 <HAL_UART_IRQHandler+0x5d4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d006      	beq.n	80088ee <HAL_UART_IRQHandler+0x3e2>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a7e      	ldr	r2, [pc, #504]	@ (8008ae4 <HAL_UART_IRQHandler+0x5d8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d106      	bne.n	80088fc <HAL_UART_IRQHandler+0x3f0>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	e005      	b.n	8008908 <HAL_UART_IRQHandler+0x3fc>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	b29b      	uxth	r3, r3
 8008908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800890c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80ad 	beq.w	8008a70 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800891c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008920:	429a      	cmp	r2, r3
 8008922:	f080 80a5 	bcs.w	8008a70 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800892c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893c:	f000 8087 	beq.w	8008a4e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800895c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800896a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800896e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1da      	bne.n	8008940 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800899a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800899c:	f023 0301 	bic.w	r3, r3, #1
 80089a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e1      	bne.n	800898a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3308      	adds	r3, #8
 80089e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e3      	bne.n	80089c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1c:	f023 0310 	bic.w	r3, r3, #16
 8008a20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e4      	bne.n	8008a0c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7f9 fe79 	bl	8002740 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f939 	bl	8008ce0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008a6e:	e119      	b.n	8008ca4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	f040 8112 	bne.w	8008ca4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a8c:	f040 810a 	bne.w	8008ca4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f91e 	bl	8008ce0 <HAL_UARTEx_RxEventCallback>
      return;
 8008aa4:	e0fe      	b.n	8008ca4 <HAL_UART_IRQHandler+0x798>
 8008aa6:	bf00      	nop
 8008aa8:	40020010 	.word	0x40020010
 8008aac:	40020028 	.word	0x40020028
 8008ab0:	40020040 	.word	0x40020040
 8008ab4:	40020058 	.word	0x40020058
 8008ab8:	40020070 	.word	0x40020070
 8008abc:	40020088 	.word	0x40020088
 8008ac0:	400200a0 	.word	0x400200a0
 8008ac4:	400200b8 	.word	0x400200b8
 8008ac8:	40020410 	.word	0x40020410
 8008acc:	40020428 	.word	0x40020428
 8008ad0:	40020440 	.word	0x40020440
 8008ad4:	40020458 	.word	0x40020458
 8008ad8:	40020470 	.word	0x40020470
 8008adc:	40020488 	.word	0x40020488
 8008ae0:	400204a0 	.word	0x400204a0
 8008ae4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 80cf 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 80ca 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e4      	bne.n	8008b14 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	623b      	str	r3, [r7, #32]
   return(result);
 8008b5a:	6a3a      	ldr	r2, [r7, #32]
 8008b5c:	4b55      	ldr	r3, [pc, #340]	@ (8008cb4 <HAL_UART_IRQHandler+0x7a8>)
 8008b5e:	4013      	ands	r3, r2
 8008b60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3308      	adds	r3, #8
 8008b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e3      	bne.n	8008b4a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0310 	bic.w	r3, r3, #16
 8008baa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008bb8:	61fb      	str	r3, [r7, #28]
 8008bba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	69b9      	ldr	r1, [r7, #24]
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e4      	bne.n	8008b96 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f881 	bl	8008ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bde:	e063      	b.n	8008ca8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00e      	beq.n	8008c0a <HAL_UART_IRQHandler+0x6fe>
 8008bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 f83d 	bl	8009c82 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c08:	e051      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d014      	beq.n	8008c40 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d008      	beq.n	8008c40 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d03a      	beq.n	8008cac <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
    }
    return;
 8008c3e:	e035      	b.n	8008cac <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <HAL_UART_IRQHandler+0x754>
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 ffe7 	bl	8009c2c <UART_EndTransmit_IT>
    return;
 8008c5e:	e026      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <HAL_UART_IRQHandler+0x774>
 8008c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d003      	beq.n	8008c80 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 f816 	bl	8009caa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c7e:	e016      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <HAL_UART_IRQHandler+0x7a2>
 8008c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	da0c      	bge.n	8008cae <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fffe 	bl	8009c96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c9a:	e008      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
      return;
 8008c9c:	bf00      	nop
 8008c9e:	e006      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
    return;
 8008ca0:	bf00      	nop
 8008ca2:	e004      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
      return;
 8008ca4:	bf00      	nop
 8008ca6:	e002      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
      return;
 8008ca8:	bf00      	nop
 8008caa:	e000      	b.n	8008cae <HAL_UART_IRQHandler+0x7a2>
    return;
 8008cac:	bf00      	nop
  }
}
 8008cae:	37e8      	adds	r7, #232	@ 0xe8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	effffffe 	.word	0xeffffffe

08008cb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cfc:	b092      	sub	sp, #72	@ 0x48
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	431a      	orrs	r2, r3
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	4bbe      	ldr	r3, [pc, #760]	@ (8009020 <UART_SetConfig+0x328>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d30:	430b      	orrs	r3, r1
 8008d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4ab3      	ldr	r2, [pc, #716]	@ (8009024 <UART_SetConfig+0x32c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d004      	beq.n	8008d64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d60:	4313      	orrs	r3, r2
 8008d62:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	4baf      	ldr	r3, [pc, #700]	@ (8009028 <UART_SetConfig+0x330>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	6812      	ldr	r2, [r2, #0]
 8008d72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d74:	430b      	orrs	r3, r1
 8008d76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7e:	f023 010f 	bic.w	r1, r3, #15
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4aa6      	ldr	r2, [pc, #664]	@ (800902c <UART_SetConfig+0x334>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d177      	bne.n	8008e88 <UART_SetConfig+0x190>
 8008d98:	4ba5      	ldr	r3, [pc, #660]	@ (8009030 <UART_SetConfig+0x338>)
 8008d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008da0:	2b28      	cmp	r3, #40	@ 0x28
 8008da2:	d86d      	bhi.n	8008e80 <UART_SetConfig+0x188>
 8008da4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <UART_SetConfig+0xb4>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008e51 	.word	0x08008e51
 8008db0:	08008e81 	.word	0x08008e81
 8008db4:	08008e81 	.word	0x08008e81
 8008db8:	08008e81 	.word	0x08008e81
 8008dbc:	08008e81 	.word	0x08008e81
 8008dc0:	08008e81 	.word	0x08008e81
 8008dc4:	08008e81 	.word	0x08008e81
 8008dc8:	08008e81 	.word	0x08008e81
 8008dcc:	08008e59 	.word	0x08008e59
 8008dd0:	08008e81 	.word	0x08008e81
 8008dd4:	08008e81 	.word	0x08008e81
 8008dd8:	08008e81 	.word	0x08008e81
 8008ddc:	08008e81 	.word	0x08008e81
 8008de0:	08008e81 	.word	0x08008e81
 8008de4:	08008e81 	.word	0x08008e81
 8008de8:	08008e81 	.word	0x08008e81
 8008dec:	08008e61 	.word	0x08008e61
 8008df0:	08008e81 	.word	0x08008e81
 8008df4:	08008e81 	.word	0x08008e81
 8008df8:	08008e81 	.word	0x08008e81
 8008dfc:	08008e81 	.word	0x08008e81
 8008e00:	08008e81 	.word	0x08008e81
 8008e04:	08008e81 	.word	0x08008e81
 8008e08:	08008e81 	.word	0x08008e81
 8008e0c:	08008e69 	.word	0x08008e69
 8008e10:	08008e81 	.word	0x08008e81
 8008e14:	08008e81 	.word	0x08008e81
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008e81 	.word	0x08008e81
 8008e20:	08008e81 	.word	0x08008e81
 8008e24:	08008e81 	.word	0x08008e81
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	08008e71 	.word	0x08008e71
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008e81 	.word	0x08008e81
 8008e38:	08008e81 	.word	0x08008e81
 8008e3c:	08008e81 	.word	0x08008e81
 8008e40:	08008e81 	.word	0x08008e81
 8008e44:	08008e81 	.word	0x08008e81
 8008e48:	08008e81 	.word	0x08008e81
 8008e4c:	08008e79 	.word	0x08008e79
 8008e50:	2301      	movs	r3, #1
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e222      	b.n	800929e <UART_SetConfig+0x5a6>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e21e      	b.n	800929e <UART_SetConfig+0x5a6>
 8008e60:	2308      	movs	r3, #8
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e21a      	b.n	800929e <UART_SetConfig+0x5a6>
 8008e68:	2310      	movs	r3, #16
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e216      	b.n	800929e <UART_SetConfig+0x5a6>
 8008e70:	2320      	movs	r3, #32
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e212      	b.n	800929e <UART_SetConfig+0x5a6>
 8008e78:	2340      	movs	r3, #64	@ 0x40
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e20e      	b.n	800929e <UART_SetConfig+0x5a6>
 8008e80:	2380      	movs	r3, #128	@ 0x80
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e20a      	b.n	800929e <UART_SetConfig+0x5a6>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a69      	ldr	r2, [pc, #420]	@ (8009034 <UART_SetConfig+0x33c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d130      	bne.n	8008ef4 <UART_SetConfig+0x1fc>
 8008e92:	4b67      	ldr	r3, [pc, #412]	@ (8009030 <UART_SetConfig+0x338>)
 8008e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	d826      	bhi.n	8008eec <UART_SetConfig+0x1f4>
 8008e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea4 <UART_SetConfig+0x1ac>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008ebd 	.word	0x08008ebd
 8008ea8:	08008ec5 	.word	0x08008ec5
 8008eac:	08008ecd 	.word	0x08008ecd
 8008eb0:	08008ed5 	.word	0x08008ed5
 8008eb4:	08008edd 	.word	0x08008edd
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e1ec      	b.n	800929e <UART_SetConfig+0x5a6>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e1e8      	b.n	800929e <UART_SetConfig+0x5a6>
 8008ecc:	2308      	movs	r3, #8
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e1e4      	b.n	800929e <UART_SetConfig+0x5a6>
 8008ed4:	2310      	movs	r3, #16
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e1e0      	b.n	800929e <UART_SetConfig+0x5a6>
 8008edc:	2320      	movs	r3, #32
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e1dc      	b.n	800929e <UART_SetConfig+0x5a6>
 8008ee4:	2340      	movs	r3, #64	@ 0x40
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e1d8      	b.n	800929e <UART_SetConfig+0x5a6>
 8008eec:	2380      	movs	r3, #128	@ 0x80
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e1d4      	b.n	800929e <UART_SetConfig+0x5a6>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8009038 <UART_SetConfig+0x340>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d130      	bne.n	8008f60 <UART_SetConfig+0x268>
 8008efe:	4b4c      	ldr	r3, [pc, #304]	@ (8009030 <UART_SetConfig+0x338>)
 8008f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b05      	cmp	r3, #5
 8008f08:	d826      	bhi.n	8008f58 <UART_SetConfig+0x260>
 8008f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <UART_SetConfig+0x218>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f31 	.word	0x08008f31
 8008f18:	08008f39 	.word	0x08008f39
 8008f1c:	08008f41 	.word	0x08008f41
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e1b6      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f30:	2304      	movs	r3, #4
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e1b2      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f38:	2308      	movs	r3, #8
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e1ae      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f40:	2310      	movs	r3, #16
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e1aa      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f48:	2320      	movs	r3, #32
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e1a6      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f50:	2340      	movs	r3, #64	@ 0x40
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e1a2      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f58:	2380      	movs	r3, #128	@ 0x80
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e19e      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a35      	ldr	r2, [pc, #212]	@ (800903c <UART_SetConfig+0x344>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d130      	bne.n	8008fcc <UART_SetConfig+0x2d4>
 8008f6a:	4b31      	ldr	r3, [pc, #196]	@ (8009030 <UART_SetConfig+0x338>)
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	2b05      	cmp	r3, #5
 8008f74:	d826      	bhi.n	8008fc4 <UART_SetConfig+0x2cc>
 8008f76:	a201      	add	r2, pc, #4	@ (adr r2, 8008f7c <UART_SetConfig+0x284>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008f95 	.word	0x08008f95
 8008f80:	08008f9d 	.word	0x08008f9d
 8008f84:	08008fa5 	.word	0x08008fa5
 8008f88:	08008fad 	.word	0x08008fad
 8008f8c:	08008fb5 	.word	0x08008fb5
 8008f90:	08008fbd 	.word	0x08008fbd
 8008f94:	2300      	movs	r3, #0
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e180      	b.n	800929e <UART_SetConfig+0x5a6>
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e17c      	b.n	800929e <UART_SetConfig+0x5a6>
 8008fa4:	2308      	movs	r3, #8
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e178      	b.n	800929e <UART_SetConfig+0x5a6>
 8008fac:	2310      	movs	r3, #16
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e174      	b.n	800929e <UART_SetConfig+0x5a6>
 8008fb4:	2320      	movs	r3, #32
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e170      	b.n	800929e <UART_SetConfig+0x5a6>
 8008fbc:	2340      	movs	r3, #64	@ 0x40
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e16c      	b.n	800929e <UART_SetConfig+0x5a6>
 8008fc4:	2380      	movs	r3, #128	@ 0x80
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e168      	b.n	800929e <UART_SetConfig+0x5a6>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8009040 <UART_SetConfig+0x348>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d142      	bne.n	800905c <UART_SetConfig+0x364>
 8008fd6:	4b16      	ldr	r3, [pc, #88]	@ (8009030 <UART_SetConfig+0x338>)
 8008fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	2b05      	cmp	r3, #5
 8008fe0:	d838      	bhi.n	8009054 <UART_SetConfig+0x35c>
 8008fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe8 <UART_SetConfig+0x2f0>)
 8008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe8:	08009001 	.word	0x08009001
 8008fec:	08009009 	.word	0x08009009
 8008ff0:	08009011 	.word	0x08009011
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	08009045 	.word	0x08009045
 8008ffc:	0800904d 	.word	0x0800904d
 8009000:	2300      	movs	r3, #0
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e14a      	b.n	800929e <UART_SetConfig+0x5a6>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e146      	b.n	800929e <UART_SetConfig+0x5a6>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e142      	b.n	800929e <UART_SetConfig+0x5a6>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e13e      	b.n	800929e <UART_SetConfig+0x5a6>
 8009020:	cfff69f3 	.word	0xcfff69f3
 8009024:	58000c00 	.word	0x58000c00
 8009028:	11fff4ff 	.word	0x11fff4ff
 800902c:	40011000 	.word	0x40011000
 8009030:	58024400 	.word	0x58024400
 8009034:	40004400 	.word	0x40004400
 8009038:	40004800 	.word	0x40004800
 800903c:	40004c00 	.word	0x40004c00
 8009040:	40005000 	.word	0x40005000
 8009044:	2320      	movs	r3, #32
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904a:	e128      	b.n	800929e <UART_SetConfig+0x5a6>
 800904c:	2340      	movs	r3, #64	@ 0x40
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009052:	e124      	b.n	800929e <UART_SetConfig+0x5a6>
 8009054:	2380      	movs	r3, #128	@ 0x80
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e120      	b.n	800929e <UART_SetConfig+0x5a6>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4acb      	ldr	r2, [pc, #812]	@ (8009390 <UART_SetConfig+0x698>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d176      	bne.n	8009154 <UART_SetConfig+0x45c>
 8009066:	4bcb      	ldr	r3, [pc, #812]	@ (8009394 <UART_SetConfig+0x69c>)
 8009068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800906a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800906e:	2b28      	cmp	r3, #40	@ 0x28
 8009070:	d86c      	bhi.n	800914c <UART_SetConfig+0x454>
 8009072:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <UART_SetConfig+0x380>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	0800911d 	.word	0x0800911d
 800907c:	0800914d 	.word	0x0800914d
 8009080:	0800914d 	.word	0x0800914d
 8009084:	0800914d 	.word	0x0800914d
 8009088:	0800914d 	.word	0x0800914d
 800908c:	0800914d 	.word	0x0800914d
 8009090:	0800914d 	.word	0x0800914d
 8009094:	0800914d 	.word	0x0800914d
 8009098:	08009125 	.word	0x08009125
 800909c:	0800914d 	.word	0x0800914d
 80090a0:	0800914d 	.word	0x0800914d
 80090a4:	0800914d 	.word	0x0800914d
 80090a8:	0800914d 	.word	0x0800914d
 80090ac:	0800914d 	.word	0x0800914d
 80090b0:	0800914d 	.word	0x0800914d
 80090b4:	0800914d 	.word	0x0800914d
 80090b8:	0800912d 	.word	0x0800912d
 80090bc:	0800914d 	.word	0x0800914d
 80090c0:	0800914d 	.word	0x0800914d
 80090c4:	0800914d 	.word	0x0800914d
 80090c8:	0800914d 	.word	0x0800914d
 80090cc:	0800914d 	.word	0x0800914d
 80090d0:	0800914d 	.word	0x0800914d
 80090d4:	0800914d 	.word	0x0800914d
 80090d8:	08009135 	.word	0x08009135
 80090dc:	0800914d 	.word	0x0800914d
 80090e0:	0800914d 	.word	0x0800914d
 80090e4:	0800914d 	.word	0x0800914d
 80090e8:	0800914d 	.word	0x0800914d
 80090ec:	0800914d 	.word	0x0800914d
 80090f0:	0800914d 	.word	0x0800914d
 80090f4:	0800914d 	.word	0x0800914d
 80090f8:	0800913d 	.word	0x0800913d
 80090fc:	0800914d 	.word	0x0800914d
 8009100:	0800914d 	.word	0x0800914d
 8009104:	0800914d 	.word	0x0800914d
 8009108:	0800914d 	.word	0x0800914d
 800910c:	0800914d 	.word	0x0800914d
 8009110:	0800914d 	.word	0x0800914d
 8009114:	0800914d 	.word	0x0800914d
 8009118:	08009145 	.word	0x08009145
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e0bc      	b.n	800929e <UART_SetConfig+0x5a6>
 8009124:	2304      	movs	r3, #4
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e0b8      	b.n	800929e <UART_SetConfig+0x5a6>
 800912c:	2308      	movs	r3, #8
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e0b4      	b.n	800929e <UART_SetConfig+0x5a6>
 8009134:	2310      	movs	r3, #16
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e0b0      	b.n	800929e <UART_SetConfig+0x5a6>
 800913c:	2320      	movs	r3, #32
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e0ac      	b.n	800929e <UART_SetConfig+0x5a6>
 8009144:	2340      	movs	r3, #64	@ 0x40
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e0a8      	b.n	800929e <UART_SetConfig+0x5a6>
 800914c:	2380      	movs	r3, #128	@ 0x80
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e0a4      	b.n	800929e <UART_SetConfig+0x5a6>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a8f      	ldr	r2, [pc, #572]	@ (8009398 <UART_SetConfig+0x6a0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d130      	bne.n	80091c0 <UART_SetConfig+0x4c8>
 800915e:	4b8d      	ldr	r3, [pc, #564]	@ (8009394 <UART_SetConfig+0x69c>)
 8009160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	2b05      	cmp	r3, #5
 8009168:	d826      	bhi.n	80091b8 <UART_SetConfig+0x4c0>
 800916a:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <UART_SetConfig+0x478>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	08009189 	.word	0x08009189
 8009174:	08009191 	.word	0x08009191
 8009178:	08009199 	.word	0x08009199
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091a9 	.word	0x080091a9
 8009184:	080091b1 	.word	0x080091b1
 8009188:	2300      	movs	r3, #0
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918e:	e086      	b.n	800929e <UART_SetConfig+0x5a6>
 8009190:	2304      	movs	r3, #4
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009196:	e082      	b.n	800929e <UART_SetConfig+0x5a6>
 8009198:	2308      	movs	r3, #8
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e07e      	b.n	800929e <UART_SetConfig+0x5a6>
 80091a0:	2310      	movs	r3, #16
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e07a      	b.n	800929e <UART_SetConfig+0x5a6>
 80091a8:	2320      	movs	r3, #32
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e076      	b.n	800929e <UART_SetConfig+0x5a6>
 80091b0:	2340      	movs	r3, #64	@ 0x40
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e072      	b.n	800929e <UART_SetConfig+0x5a6>
 80091b8:	2380      	movs	r3, #128	@ 0x80
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e06e      	b.n	800929e <UART_SetConfig+0x5a6>
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a75      	ldr	r2, [pc, #468]	@ (800939c <UART_SetConfig+0x6a4>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d130      	bne.n	800922c <UART_SetConfig+0x534>
 80091ca:	4b72      	ldr	r3, [pc, #456]	@ (8009394 <UART_SetConfig+0x69c>)
 80091cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	d826      	bhi.n	8009224 <UART_SetConfig+0x52c>
 80091d6:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <UART_SetConfig+0x4e4>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	080091f5 	.word	0x080091f5
 80091e0:	080091fd 	.word	0x080091fd
 80091e4:	08009205 	.word	0x08009205
 80091e8:	0800920d 	.word	0x0800920d
 80091ec:	08009215 	.word	0x08009215
 80091f0:	0800921d 	.word	0x0800921d
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e050      	b.n	800929e <UART_SetConfig+0x5a6>
 80091fc:	2304      	movs	r3, #4
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e04c      	b.n	800929e <UART_SetConfig+0x5a6>
 8009204:	2308      	movs	r3, #8
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e048      	b.n	800929e <UART_SetConfig+0x5a6>
 800920c:	2310      	movs	r3, #16
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e044      	b.n	800929e <UART_SetConfig+0x5a6>
 8009214:	2320      	movs	r3, #32
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e040      	b.n	800929e <UART_SetConfig+0x5a6>
 800921c:	2340      	movs	r3, #64	@ 0x40
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e03c      	b.n	800929e <UART_SetConfig+0x5a6>
 8009224:	2380      	movs	r3, #128	@ 0x80
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e038      	b.n	800929e <UART_SetConfig+0x5a6>
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a5b      	ldr	r2, [pc, #364]	@ (80093a0 <UART_SetConfig+0x6a8>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d130      	bne.n	8009298 <UART_SetConfig+0x5a0>
 8009236:	4b57      	ldr	r3, [pc, #348]	@ (8009394 <UART_SetConfig+0x69c>)
 8009238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	2b05      	cmp	r3, #5
 8009240:	d826      	bhi.n	8009290 <UART_SetConfig+0x598>
 8009242:	a201      	add	r2, pc, #4	@ (adr r2, 8009248 <UART_SetConfig+0x550>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	08009261 	.word	0x08009261
 800924c:	08009269 	.word	0x08009269
 8009250:	08009271 	.word	0x08009271
 8009254:	08009279 	.word	0x08009279
 8009258:	08009281 	.word	0x08009281
 800925c:	08009289 	.word	0x08009289
 8009260:	2302      	movs	r3, #2
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e01a      	b.n	800929e <UART_SetConfig+0x5a6>
 8009268:	2304      	movs	r3, #4
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e016      	b.n	800929e <UART_SetConfig+0x5a6>
 8009270:	2308      	movs	r3, #8
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e012      	b.n	800929e <UART_SetConfig+0x5a6>
 8009278:	2310      	movs	r3, #16
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e00e      	b.n	800929e <UART_SetConfig+0x5a6>
 8009280:	2320      	movs	r3, #32
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e00a      	b.n	800929e <UART_SetConfig+0x5a6>
 8009288:	2340      	movs	r3, #64	@ 0x40
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e006      	b.n	800929e <UART_SetConfig+0x5a6>
 8009290:	2380      	movs	r3, #128	@ 0x80
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e002      	b.n	800929e <UART_SetConfig+0x5a6>
 8009298:	2380      	movs	r3, #128	@ 0x80
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a3f      	ldr	r2, [pc, #252]	@ (80093a0 <UART_SetConfig+0x6a8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	f040 80f8 	bne.w	800949a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	dc46      	bgt.n	8009340 <UART_SetConfig+0x648>
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	f2c0 8082 	blt.w	80093bc <UART_SetConfig+0x6c4>
 80092b8:	3b02      	subs	r3, #2
 80092ba:	2b1e      	cmp	r3, #30
 80092bc:	d87e      	bhi.n	80093bc <UART_SetConfig+0x6c4>
 80092be:	a201      	add	r2, pc, #4	@ (adr r2, 80092c4 <UART_SetConfig+0x5cc>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	08009347 	.word	0x08009347
 80092c8:	080093bd 	.word	0x080093bd
 80092cc:	0800934f 	.word	0x0800934f
 80092d0:	080093bd 	.word	0x080093bd
 80092d4:	080093bd 	.word	0x080093bd
 80092d8:	080093bd 	.word	0x080093bd
 80092dc:	0800935f 	.word	0x0800935f
 80092e0:	080093bd 	.word	0x080093bd
 80092e4:	080093bd 	.word	0x080093bd
 80092e8:	080093bd 	.word	0x080093bd
 80092ec:	080093bd 	.word	0x080093bd
 80092f0:	080093bd 	.word	0x080093bd
 80092f4:	080093bd 	.word	0x080093bd
 80092f8:	080093bd 	.word	0x080093bd
 80092fc:	0800936f 	.word	0x0800936f
 8009300:	080093bd 	.word	0x080093bd
 8009304:	080093bd 	.word	0x080093bd
 8009308:	080093bd 	.word	0x080093bd
 800930c:	080093bd 	.word	0x080093bd
 8009310:	080093bd 	.word	0x080093bd
 8009314:	080093bd 	.word	0x080093bd
 8009318:	080093bd 	.word	0x080093bd
 800931c:	080093bd 	.word	0x080093bd
 8009320:	080093bd 	.word	0x080093bd
 8009324:	080093bd 	.word	0x080093bd
 8009328:	080093bd 	.word	0x080093bd
 800932c:	080093bd 	.word	0x080093bd
 8009330:	080093bd 	.word	0x080093bd
 8009334:	080093bd 	.word	0x080093bd
 8009338:	080093bd 	.word	0x080093bd
 800933c:	080093af 	.word	0x080093af
 8009340:	2b40      	cmp	r3, #64	@ 0x40
 8009342:	d037      	beq.n	80093b4 <UART_SetConfig+0x6bc>
 8009344:	e03a      	b.n	80093bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009346:	f7fd fcab 	bl	8006ca0 <HAL_RCCEx_GetD3PCLK1Freq>
 800934a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800934c:	e03c      	b.n	80093c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800934e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009352:	4618      	mov	r0, r3
 8009354:	f7fd fcba 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800935c:	e034      	b.n	80093c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800935e:	f107 0318 	add.w	r3, r7, #24
 8009362:	4618      	mov	r0, r3
 8009364:	f7fd fe06 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936c:	e02c      	b.n	80093c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800936e:	4b09      	ldr	r3, [pc, #36]	@ (8009394 <UART_SetConfig+0x69c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0320 	and.w	r3, r3, #32
 8009376:	2b00      	cmp	r3, #0
 8009378:	d016      	beq.n	80093a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800937a:	4b06      	ldr	r3, [pc, #24]	@ (8009394 <UART_SetConfig+0x69c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	4a07      	ldr	r2, [pc, #28]	@ (80093a4 <UART_SetConfig+0x6ac>)
 8009386:	fa22 f303 	lsr.w	r3, r2, r3
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800938c:	e01c      	b.n	80093c8 <UART_SetConfig+0x6d0>
 800938e:	bf00      	nop
 8009390:	40011400 	.word	0x40011400
 8009394:	58024400 	.word	0x58024400
 8009398:	40007800 	.word	0x40007800
 800939c:	40007c00 	.word	0x40007c00
 80093a0:	58000c00 	.word	0x58000c00
 80093a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80093a8:	4b9d      	ldr	r3, [pc, #628]	@ (8009620 <UART_SetConfig+0x928>)
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ac:	e00c      	b.n	80093c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093ae:	4b9d      	ldr	r3, [pc, #628]	@ (8009624 <UART_SetConfig+0x92c>)
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b2:	e009      	b.n	80093c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ba:	e005      	b.n	80093c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 81de 	beq.w	800978c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d4:	4a94      	ldr	r2, [pc, #592]	@ (8009628 <UART_SetConfig+0x930>)
 80093d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093da:	461a      	mov	r2, r3
 80093dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093de:	fbb3 f3f2 	udiv	r3, r3, r2
 80093e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	4613      	mov	r3, r2
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	4413      	add	r3, r2
 80093ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d305      	bcc.n	8009400 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d903      	bls.n	8009408 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009406:	e1c1      	b.n	800978c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940a:	2200      	movs	r2, #0
 800940c:	60bb      	str	r3, [r7, #8]
 800940e:	60fa      	str	r2, [r7, #12]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009414:	4a84      	ldr	r2, [pc, #528]	@ (8009628 <UART_SetConfig+0x930>)
 8009416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800941a:	b29b      	uxth	r3, r3
 800941c:	2200      	movs	r2, #0
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	607a      	str	r2, [r7, #4]
 8009422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800942a:	f7f6 ffb1 	bl	8000390 <__aeabi_uldivmod>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	f04f 0200 	mov.w	r2, #0
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	020b      	lsls	r3, r1, #8
 8009440:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009444:	0202      	lsls	r2, r0, #8
 8009446:	6979      	ldr	r1, [r7, #20]
 8009448:	6849      	ldr	r1, [r1, #4]
 800944a:	0849      	lsrs	r1, r1, #1
 800944c:	2000      	movs	r0, #0
 800944e:	460c      	mov	r4, r1
 8009450:	4605      	mov	r5, r0
 8009452:	eb12 0804 	adds.w	r8, r2, r4
 8009456:	eb43 0905 	adc.w	r9, r3, r5
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	469a      	mov	sl, r3
 8009462:	4693      	mov	fp, r2
 8009464:	4652      	mov	r2, sl
 8009466:	465b      	mov	r3, fp
 8009468:	4640      	mov	r0, r8
 800946a:	4649      	mov	r1, r9
 800946c:	f7f6 ff90 	bl	8000390 <__aeabi_uldivmod>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4613      	mov	r3, r2
 8009476:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800947e:	d308      	bcc.n	8009492 <UART_SetConfig+0x79a>
 8009480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009486:	d204      	bcs.n	8009492 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800948e:	60da      	str	r2, [r3, #12]
 8009490:	e17c      	b.n	800978c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009498:	e178      	b.n	800978c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094a2:	f040 80c5 	bne.w	8009630 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80094a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094aa:	2b20      	cmp	r3, #32
 80094ac:	dc48      	bgt.n	8009540 <UART_SetConfig+0x848>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	db7b      	blt.n	80095aa <UART_SetConfig+0x8b2>
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	d879      	bhi.n	80095aa <UART_SetConfig+0x8b2>
 80094b6:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <UART_SetConfig+0x7c4>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	08009547 	.word	0x08009547
 80094c0:	0800954f 	.word	0x0800954f
 80094c4:	080095ab 	.word	0x080095ab
 80094c8:	080095ab 	.word	0x080095ab
 80094cc:	08009557 	.word	0x08009557
 80094d0:	080095ab 	.word	0x080095ab
 80094d4:	080095ab 	.word	0x080095ab
 80094d8:	080095ab 	.word	0x080095ab
 80094dc:	08009567 	.word	0x08009567
 80094e0:	080095ab 	.word	0x080095ab
 80094e4:	080095ab 	.word	0x080095ab
 80094e8:	080095ab 	.word	0x080095ab
 80094ec:	080095ab 	.word	0x080095ab
 80094f0:	080095ab 	.word	0x080095ab
 80094f4:	080095ab 	.word	0x080095ab
 80094f8:	080095ab 	.word	0x080095ab
 80094fc:	08009577 	.word	0x08009577
 8009500:	080095ab 	.word	0x080095ab
 8009504:	080095ab 	.word	0x080095ab
 8009508:	080095ab 	.word	0x080095ab
 800950c:	080095ab 	.word	0x080095ab
 8009510:	080095ab 	.word	0x080095ab
 8009514:	080095ab 	.word	0x080095ab
 8009518:	080095ab 	.word	0x080095ab
 800951c:	080095ab 	.word	0x080095ab
 8009520:	080095ab 	.word	0x080095ab
 8009524:	080095ab 	.word	0x080095ab
 8009528:	080095ab 	.word	0x080095ab
 800952c:	080095ab 	.word	0x080095ab
 8009530:	080095ab 	.word	0x080095ab
 8009534:	080095ab 	.word	0x080095ab
 8009538:	080095ab 	.word	0x080095ab
 800953c:	0800959d 	.word	0x0800959d
 8009540:	2b40      	cmp	r3, #64	@ 0x40
 8009542:	d02e      	beq.n	80095a2 <UART_SetConfig+0x8aa>
 8009544:	e031      	b.n	80095aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009546:	f7fc f975 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 800954a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800954c:	e033      	b.n	80095b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800954e:	f7fc f987 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
 8009552:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009554:	e02f      	b.n	80095b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800955a:	4618      	mov	r0, r3
 800955c:	f7fd fbb6 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009564:	e027      	b.n	80095b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009566:	f107 0318 	add.w	r3, r7, #24
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd fd02 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009574:	e01f      	b.n	80095b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009576:	4b2d      	ldr	r3, [pc, #180]	@ (800962c <UART_SetConfig+0x934>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0320 	and.w	r3, r3, #32
 800957e:	2b00      	cmp	r3, #0
 8009580:	d009      	beq.n	8009596 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009582:	4b2a      	ldr	r3, [pc, #168]	@ (800962c <UART_SetConfig+0x934>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	08db      	lsrs	r3, r3, #3
 8009588:	f003 0303 	and.w	r3, r3, #3
 800958c:	4a24      	ldr	r2, [pc, #144]	@ (8009620 <UART_SetConfig+0x928>)
 800958e:	fa22 f303 	lsr.w	r3, r2, r3
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009594:	e00f      	b.n	80095b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009596:	4b22      	ldr	r3, [pc, #136]	@ (8009620 <UART_SetConfig+0x928>)
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959a:	e00c      	b.n	80095b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800959c:	4b21      	ldr	r3, [pc, #132]	@ (8009624 <UART_SetConfig+0x92c>)
 800959e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a0:	e009      	b.n	80095b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a8:	e005      	b.n	80095b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80e7 	beq.w	800978c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c2:	4a19      	ldr	r2, [pc, #100]	@ (8009628 <UART_SetConfig+0x930>)
 80095c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c8:	461a      	mov	r2, r3
 80095ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80095d0:	005a      	lsls	r2, r3, #1
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	085b      	lsrs	r3, r3, #1
 80095d8:	441a      	add	r2, r3
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	2b0f      	cmp	r3, #15
 80095e8:	d916      	bls.n	8009618 <UART_SetConfig+0x920>
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f0:	d212      	bcs.n	8009618 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	f023 030f 	bic.w	r3, r3, #15
 80095fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	b29b      	uxth	r3, r3
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	b29a      	uxth	r2, r3
 8009608:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800960a:	4313      	orrs	r3, r2
 800960c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009614:	60da      	str	r2, [r3, #12]
 8009616:	e0b9      	b.n	800978c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800961e:	e0b5      	b.n	800978c <UART_SetConfig+0xa94>
 8009620:	03d09000 	.word	0x03d09000
 8009624:	003d0900 	.word	0x003d0900
 8009628:	0800a960 	.word	0x0800a960
 800962c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009630:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009634:	2b20      	cmp	r3, #32
 8009636:	dc49      	bgt.n	80096cc <UART_SetConfig+0x9d4>
 8009638:	2b00      	cmp	r3, #0
 800963a:	db7c      	blt.n	8009736 <UART_SetConfig+0xa3e>
 800963c:	2b20      	cmp	r3, #32
 800963e:	d87a      	bhi.n	8009736 <UART_SetConfig+0xa3e>
 8009640:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <UART_SetConfig+0x950>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	080096d3 	.word	0x080096d3
 800964c:	080096db 	.word	0x080096db
 8009650:	08009737 	.word	0x08009737
 8009654:	08009737 	.word	0x08009737
 8009658:	080096e3 	.word	0x080096e3
 800965c:	08009737 	.word	0x08009737
 8009660:	08009737 	.word	0x08009737
 8009664:	08009737 	.word	0x08009737
 8009668:	080096f3 	.word	0x080096f3
 800966c:	08009737 	.word	0x08009737
 8009670:	08009737 	.word	0x08009737
 8009674:	08009737 	.word	0x08009737
 8009678:	08009737 	.word	0x08009737
 800967c:	08009737 	.word	0x08009737
 8009680:	08009737 	.word	0x08009737
 8009684:	08009737 	.word	0x08009737
 8009688:	08009703 	.word	0x08009703
 800968c:	08009737 	.word	0x08009737
 8009690:	08009737 	.word	0x08009737
 8009694:	08009737 	.word	0x08009737
 8009698:	08009737 	.word	0x08009737
 800969c:	08009737 	.word	0x08009737
 80096a0:	08009737 	.word	0x08009737
 80096a4:	08009737 	.word	0x08009737
 80096a8:	08009737 	.word	0x08009737
 80096ac:	08009737 	.word	0x08009737
 80096b0:	08009737 	.word	0x08009737
 80096b4:	08009737 	.word	0x08009737
 80096b8:	08009737 	.word	0x08009737
 80096bc:	08009737 	.word	0x08009737
 80096c0:	08009737 	.word	0x08009737
 80096c4:	08009737 	.word	0x08009737
 80096c8:	08009729 	.word	0x08009729
 80096cc:	2b40      	cmp	r3, #64	@ 0x40
 80096ce:	d02e      	beq.n	800972e <UART_SetConfig+0xa36>
 80096d0:	e031      	b.n	8009736 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096d2:	f7fc f8af 	bl	8005834 <HAL_RCC_GetPCLK1Freq>
 80096d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096d8:	e033      	b.n	8009742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096da:	f7fc f8c1 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
 80096de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096e0:	e02f      	b.n	8009742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fd faf0 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f0:	e027      	b.n	8009742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f2:	f107 0318 	add.w	r3, r7, #24
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fd fc3c 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009700:	e01f      	b.n	8009742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009702:	4b2d      	ldr	r3, [pc, #180]	@ (80097b8 <UART_SetConfig+0xac0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	2b00      	cmp	r3, #0
 800970c:	d009      	beq.n	8009722 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800970e:	4b2a      	ldr	r3, [pc, #168]	@ (80097b8 <UART_SetConfig+0xac0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	08db      	lsrs	r3, r3, #3
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	4a28      	ldr	r2, [pc, #160]	@ (80097bc <UART_SetConfig+0xac4>)
 800971a:	fa22 f303 	lsr.w	r3, r2, r3
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009720:	e00f      	b.n	8009742 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009722:	4b26      	ldr	r3, [pc, #152]	@ (80097bc <UART_SetConfig+0xac4>)
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009726:	e00c      	b.n	8009742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009728:	4b25      	ldr	r3, [pc, #148]	@ (80097c0 <UART_SetConfig+0xac8>)
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972c:	e009      	b.n	8009742 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800972e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009734:	e005      	b.n	8009742 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009740:	bf00      	nop
    }

    if (pclk != 0U)
 8009742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009744:	2b00      	cmp	r3, #0
 8009746:	d021      	beq.n	800978c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974c:	4a1d      	ldr	r2, [pc, #116]	@ (80097c4 <UART_SetConfig+0xacc>)
 800974e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009752:	461a      	mov	r2, r3
 8009754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009756:	fbb3 f2f2 	udiv	r2, r3, r2
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	085b      	lsrs	r3, r3, #1
 8009760:	441a      	add	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	fbb2 f3f3 	udiv	r3, r2, r3
 800976a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	2b0f      	cmp	r3, #15
 8009770:	d909      	bls.n	8009786 <UART_SetConfig+0xa8e>
 8009772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009778:	d205      	bcs.n	8009786 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	b29a      	uxth	r2, r3
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60da      	str	r2, [r3, #12]
 8009784:	e002      	b.n	800978c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2201      	movs	r2, #1
 8009790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2201      	movs	r2, #1
 8009798:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2200      	movs	r2, #0
 80097a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2200      	movs	r2, #0
 80097a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3748      	adds	r7, #72	@ 0x48
 80097b0:	46bd      	mov	sp, r7
 80097b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097b6:	bf00      	nop
 80097b8:	58024400 	.word	0x58024400
 80097bc:	03d09000 	.word	0x03d09000
 80097c0:	003d0900 	.word	0x003d0900
 80097c4:	0800a960 	.word	0x0800a960

080097c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009818:	f003 0302 	and.w	r3, r3, #2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00a      	beq.n	8009836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985c:	f003 0310 	and.w	r3, r3, #16
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00a      	beq.n	800987a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01a      	beq.n	80098de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c6:	d10a      	bne.n	80098de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	605a      	str	r2, [r3, #4]
  }
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b098      	sub	sp, #96	@ 0x60
 8009910:	af02      	add	r7, sp, #8
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800991c:	f7f8 fde8 	bl	80024f0 <HAL_GetTick>
 8009920:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b08      	cmp	r3, #8
 800992e:	d12f      	bne.n	8009990 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009930:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009938:	2200      	movs	r2, #0
 800993a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f88e 	bl	8009a60 <UART_WaitOnFlagUntilTimeout>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d022      	beq.n	8009990 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800995a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800995e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009968:	647b      	str	r3, [r7, #68]	@ 0x44
 800996a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800996e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e6      	bne.n	800994a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e063      	b.n	8009a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b04      	cmp	r3, #4
 800999c:	d149      	bne.n	8009a32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800999e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a6:	2200      	movs	r2, #0
 80099a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f857 	bl	8009a60 <UART_WaitOnFlagUntilTimeout>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d03c      	beq.n	8009a32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	623b      	str	r3, [r7, #32]
   return(result);
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80099d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e6      	bne.n	80099b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f023 0301 	bic.w	r3, r3, #1
 8009a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a0a:	61fa      	str	r2, [r7, #28]
 8009a0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	69b9      	ldr	r1, [r7, #24]
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	617b      	str	r3, [r7, #20]
   return(result);
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e5      	bne.n	80099ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e012      	b.n	8009a58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3758      	adds	r7, #88	@ 0x58
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a70:	e04f      	b.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d04b      	beq.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a7a:	f7f8 fd39 	bl	80024f0 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d302      	bcc.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e04e      	b.n	8009b32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0304 	and.w	r3, r3, #4
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d037      	beq.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b80      	cmp	r3, #128	@ 0x80
 8009aa6:	d034      	beq.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2b40      	cmp	r3, #64	@ 0x40
 8009aac:	d031      	beq.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69db      	ldr	r3, [r3, #28]
 8009ab4:	f003 0308 	and.w	r3, r3, #8
 8009ab8:	2b08      	cmp	r3, #8
 8009aba:	d110      	bne.n	8009ade <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 f839 	bl	8009b3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2208      	movs	r2, #8
 8009ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e029      	b.n	8009b32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aec:	d111      	bne.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 f81f 	bl	8009b3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e00f      	b.n	8009b32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69da      	ldr	r2, [r3, #28]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	bf0c      	ite	eq
 8009b22:	2301      	moveq	r3, #1
 8009b24:	2300      	movne	r3, #0
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	461a      	mov	r2, r3
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d0a0      	beq.n	8009a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b095      	sub	sp, #84	@ 0x54
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b62:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e6      	bne.n	8009b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b86:	69fa      	ldr	r2, [r7, #28]
 8009b88:	4b1e      	ldr	r3, [pc, #120]	@ (8009c04 <UART_EndRxTransfer+0xc8>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3308      	adds	r3, #8
 8009b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e5      	bne.n	8009b76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d118      	bne.n	8009be4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	e853 3f00 	ldrex	r3, [r3]
 8009bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f023 0310 	bic.w	r3, r3, #16
 8009bc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bd0:	61bb      	str	r3, [r7, #24]
 8009bd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd4:	6979      	ldr	r1, [r7, #20]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	e841 2300 	strex	r3, r2, [r1]
 8009bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1e6      	bne.n	8009bb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009bf8:	bf00      	nop
 8009bfa:	3754      	adds	r7, #84	@ 0x54
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	effffffe 	.word	0xeffffffe

08009c08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff f854 	bl	8008ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c24:	bf00      	nop
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c48:	61fb      	str	r3, [r7, #28]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	61bb      	str	r3, [r7, #24]
 8009c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	6979      	ldr	r1, [r7, #20]
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e6      	bne.n	8009c34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff f81f 	bl	8008cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c7a:	bf00      	nop
 8009c7c:	3720      	adds	r7, #32
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b083      	sub	sp, #12
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d101      	bne.n	8009cd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e027      	b.n	8009d24 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2224      	movs	r2, #36	@ 0x24
 8009ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0201 	bic.w	r2, r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2220      	movs	r2, #32
 8009d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d101      	bne.n	8009d48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d44:	2302      	movs	r3, #2
 8009d46:	e02d      	b.n	8009da4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2224      	movs	r2, #36	@ 0x24
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0201 	bic.w	r2, r2, #1
 8009d6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f84f 	bl	8009e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e02d      	b.n	8009e20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2224      	movs	r2, #36	@ 0x24
 8009dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0201 	bic.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f811 	bl	8009e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d108      	bne.n	8009e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e48:	e031      	b.n	8009eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e4e:	2310      	movs	r3, #16
 8009e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	0e5b      	lsrs	r3, r3, #25
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	0f5b      	lsrs	r3, r3, #29
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	7b3a      	ldrb	r2, [r7, #12]
 8009e76:	4911      	ldr	r1, [pc, #68]	@ (8009ebc <UARTEx_SetNbDataToProcess+0x94>)
 8009e78:	5c8a      	ldrb	r2, [r1, r2]
 8009e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e7e:	7b3a      	ldrb	r2, [r7, #12]
 8009e80:	490f      	ldr	r1, [pc, #60]	@ (8009ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8009e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	7b7a      	ldrb	r2, [r7, #13]
 8009e94:	4909      	ldr	r1, [pc, #36]	@ (8009ebc <UARTEx_SetNbDataToProcess+0x94>)
 8009e96:	5c8a      	ldrb	r2, [r1, r2]
 8009e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e9c:	7b7a      	ldrb	r2, [r7, #13]
 8009e9e:	4908      	ldr	r1, [pc, #32]	@ (8009ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	0800a978 	.word	0x0800a978
 8009ec0:	0800a980 	.word	0x0800a980

08009ec4 <_vsniprintf_r>:
 8009ec4:	b530      	push	{r4, r5, lr}
 8009ec6:	4614      	mov	r4, r2
 8009ec8:	2c00      	cmp	r4, #0
 8009eca:	b09b      	sub	sp, #108	@ 0x6c
 8009ecc:	4605      	mov	r5, r0
 8009ece:	461a      	mov	r2, r3
 8009ed0:	da05      	bge.n	8009ede <_vsniprintf_r+0x1a>
 8009ed2:	238b      	movs	r3, #139	@ 0x8b
 8009ed4:	6003      	str	r3, [r0, #0]
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eda:	b01b      	add	sp, #108	@ 0x6c
 8009edc:	bd30      	pop	{r4, r5, pc}
 8009ede:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009ee2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009ee6:	f04f 0300 	mov.w	r3, #0
 8009eea:	9319      	str	r3, [sp, #100]	@ 0x64
 8009eec:	bf14      	ite	ne
 8009eee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009ef2:	4623      	moveq	r3, r4
 8009ef4:	9302      	str	r3, [sp, #8]
 8009ef6:	9305      	str	r3, [sp, #20]
 8009ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009efc:	9100      	str	r1, [sp, #0]
 8009efe:	9104      	str	r1, [sp, #16]
 8009f00:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009f04:	4669      	mov	r1, sp
 8009f06:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009f08:	f000 f9ae 	bl	800a268 <_svfiprintf_r>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	bfbc      	itt	lt
 8009f10:	238b      	movlt	r3, #139	@ 0x8b
 8009f12:	602b      	strlt	r3, [r5, #0]
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	d0e0      	beq.n	8009eda <_vsniprintf_r+0x16>
 8009f18:	9b00      	ldr	r3, [sp, #0]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	e7dc      	b.n	8009eda <_vsniprintf_r+0x16>

08009f20 <vsniprintf>:
 8009f20:	b507      	push	{r0, r1, r2, lr}
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	4613      	mov	r3, r2
 8009f26:	460a      	mov	r2, r1
 8009f28:	4601      	mov	r1, r0
 8009f2a:	4803      	ldr	r0, [pc, #12]	@ (8009f38 <vsniprintf+0x18>)
 8009f2c:	6800      	ldr	r0, [r0, #0]
 8009f2e:	f7ff ffc9 	bl	8009ec4 <_vsniprintf_r>
 8009f32:	b003      	add	sp, #12
 8009f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f38:	24000010 	.word	0x24000010

08009f3c <memset>:
 8009f3c:	4402      	add	r2, r0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d100      	bne.n	8009f46 <memset+0xa>
 8009f44:	4770      	bx	lr
 8009f46:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4a:	e7f9      	b.n	8009f40 <memset+0x4>

08009f4c <__errno>:
 8009f4c:	4b01      	ldr	r3, [pc, #4]	@ (8009f54 <__errno+0x8>)
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	24000010 	.word	0x24000010

08009f58 <__libc_init_array>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009f90 <__libc_init_array+0x38>)
 8009f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009f94 <__libc_init_array+0x3c>)
 8009f5e:	1b64      	subs	r4, r4, r5
 8009f60:	10a4      	asrs	r4, r4, #2
 8009f62:	2600      	movs	r6, #0
 8009f64:	42a6      	cmp	r6, r4
 8009f66:	d109      	bne.n	8009f7c <__libc_init_array+0x24>
 8009f68:	4d0b      	ldr	r5, [pc, #44]	@ (8009f98 <__libc_init_array+0x40>)
 8009f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009f9c <__libc_init_array+0x44>)
 8009f6c:	f000 fc64 	bl	800a838 <_init>
 8009f70:	1b64      	subs	r4, r4, r5
 8009f72:	10a4      	asrs	r4, r4, #2
 8009f74:	2600      	movs	r6, #0
 8009f76:	42a6      	cmp	r6, r4
 8009f78:	d105      	bne.n	8009f86 <__libc_init_array+0x2e>
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f80:	4798      	blx	r3
 8009f82:	3601      	adds	r6, #1
 8009f84:	e7ee      	b.n	8009f64 <__libc_init_array+0xc>
 8009f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8a:	4798      	blx	r3
 8009f8c:	3601      	adds	r6, #1
 8009f8e:	e7f2      	b.n	8009f76 <__libc_init_array+0x1e>
 8009f90:	0800a9c4 	.word	0x0800a9c4
 8009f94:	0800a9c4 	.word	0x0800a9c4
 8009f98:	0800a9c4 	.word	0x0800a9c4
 8009f9c:	0800a9c8 	.word	0x0800a9c8

08009fa0 <__retarget_lock_acquire_recursive>:
 8009fa0:	4770      	bx	lr

08009fa2 <__retarget_lock_release_recursive>:
 8009fa2:	4770      	bx	lr

08009fa4 <memcpy>:
 8009fa4:	440a      	add	r2, r1
 8009fa6:	4291      	cmp	r1, r2
 8009fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fac:	d100      	bne.n	8009fb0 <memcpy+0xc>
 8009fae:	4770      	bx	lr
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fba:	4291      	cmp	r1, r2
 8009fbc:	d1f9      	bne.n	8009fb2 <memcpy+0xe>
 8009fbe:	bd10      	pop	{r4, pc}

08009fc0 <_free_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	d041      	beq.n	800a04c <_free_r+0x8c>
 8009fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fcc:	1f0c      	subs	r4, r1, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfb8      	it	lt
 8009fd2:	18e4      	addlt	r4, r4, r3
 8009fd4:	f000 f8e0 	bl	800a198 <__malloc_lock>
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	@ (800a050 <_free_r+0x90>)
 8009fda:	6813      	ldr	r3, [r2, #0]
 8009fdc:	b933      	cbnz	r3, 8009fec <_free_r+0x2c>
 8009fde:	6063      	str	r3, [r4, #4]
 8009fe0:	6014      	str	r4, [r2, #0]
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe8:	f000 b8dc 	b.w	800a1a4 <__malloc_unlock>
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	d908      	bls.n	800a002 <_free_r+0x42>
 8009ff0:	6820      	ldr	r0, [r4, #0]
 8009ff2:	1821      	adds	r1, r4, r0
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	bf01      	itttt	eq
 8009ff8:	6819      	ldreq	r1, [r3, #0]
 8009ffa:	685b      	ldreq	r3, [r3, #4]
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	e7ed      	b.n	8009fde <_free_r+0x1e>
 800a002:	461a      	mov	r2, r3
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	b10b      	cbz	r3, 800a00c <_free_r+0x4c>
 800a008:	42a3      	cmp	r3, r4
 800a00a:	d9fa      	bls.n	800a002 <_free_r+0x42>
 800a00c:	6811      	ldr	r1, [r2, #0]
 800a00e:	1850      	adds	r0, r2, r1
 800a010:	42a0      	cmp	r0, r4
 800a012:	d10b      	bne.n	800a02c <_free_r+0x6c>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	4401      	add	r1, r0
 800a018:	1850      	adds	r0, r2, r1
 800a01a:	4283      	cmp	r3, r0
 800a01c:	6011      	str	r1, [r2, #0]
 800a01e:	d1e0      	bne.n	8009fe2 <_free_r+0x22>
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	6053      	str	r3, [r2, #4]
 800a026:	4408      	add	r0, r1
 800a028:	6010      	str	r0, [r2, #0]
 800a02a:	e7da      	b.n	8009fe2 <_free_r+0x22>
 800a02c:	d902      	bls.n	800a034 <_free_r+0x74>
 800a02e:	230c      	movs	r3, #12
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	e7d6      	b.n	8009fe2 <_free_r+0x22>
 800a034:	6820      	ldr	r0, [r4, #0]
 800a036:	1821      	adds	r1, r4, r0
 800a038:	428b      	cmp	r3, r1
 800a03a:	bf04      	itt	eq
 800a03c:	6819      	ldreq	r1, [r3, #0]
 800a03e:	685b      	ldreq	r3, [r3, #4]
 800a040:	6063      	str	r3, [r4, #4]
 800a042:	bf04      	itt	eq
 800a044:	1809      	addeq	r1, r1, r0
 800a046:	6021      	streq	r1, [r4, #0]
 800a048:	6054      	str	r4, [r2, #4]
 800a04a:	e7ca      	b.n	8009fe2 <_free_r+0x22>
 800a04c:	bd38      	pop	{r3, r4, r5, pc}
 800a04e:	bf00      	nop
 800a050:	2400165c 	.word	0x2400165c

0800a054 <sbrk_aligned>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	4e0f      	ldr	r6, [pc, #60]	@ (800a094 <sbrk_aligned+0x40>)
 800a058:	460c      	mov	r4, r1
 800a05a:	6831      	ldr	r1, [r6, #0]
 800a05c:	4605      	mov	r5, r0
 800a05e:	b911      	cbnz	r1, 800a066 <sbrk_aligned+0x12>
 800a060:	f000 fba4 	bl	800a7ac <_sbrk_r>
 800a064:	6030      	str	r0, [r6, #0]
 800a066:	4621      	mov	r1, r4
 800a068:	4628      	mov	r0, r5
 800a06a:	f000 fb9f 	bl	800a7ac <_sbrk_r>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	d103      	bne.n	800a07a <sbrk_aligned+0x26>
 800a072:	f04f 34ff 	mov.w	r4, #4294967295
 800a076:	4620      	mov	r0, r4
 800a078:	bd70      	pop	{r4, r5, r6, pc}
 800a07a:	1cc4      	adds	r4, r0, #3
 800a07c:	f024 0403 	bic.w	r4, r4, #3
 800a080:	42a0      	cmp	r0, r4
 800a082:	d0f8      	beq.n	800a076 <sbrk_aligned+0x22>
 800a084:	1a21      	subs	r1, r4, r0
 800a086:	4628      	mov	r0, r5
 800a088:	f000 fb90 	bl	800a7ac <_sbrk_r>
 800a08c:	3001      	adds	r0, #1
 800a08e:	d1f2      	bne.n	800a076 <sbrk_aligned+0x22>
 800a090:	e7ef      	b.n	800a072 <sbrk_aligned+0x1e>
 800a092:	bf00      	nop
 800a094:	24001658 	.word	0x24001658

0800a098 <_malloc_r>:
 800a098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a09c:	1ccd      	adds	r5, r1, #3
 800a09e:	f025 0503 	bic.w	r5, r5, #3
 800a0a2:	3508      	adds	r5, #8
 800a0a4:	2d0c      	cmp	r5, #12
 800a0a6:	bf38      	it	cc
 800a0a8:	250c      	movcc	r5, #12
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	db01      	blt.n	800a0b4 <_malloc_r+0x1c>
 800a0b0:	42a9      	cmp	r1, r5
 800a0b2:	d904      	bls.n	800a0be <_malloc_r+0x26>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	6033      	str	r3, [r6, #0]
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a194 <_malloc_r+0xfc>
 800a0c2:	f000 f869 	bl	800a198 <__malloc_lock>
 800a0c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ca:	461c      	mov	r4, r3
 800a0cc:	bb44      	cbnz	r4, 800a120 <_malloc_r+0x88>
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7ff ffbf 	bl	800a054 <sbrk_aligned>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	4604      	mov	r4, r0
 800a0da:	d158      	bne.n	800a18e <_malloc_r+0xf6>
 800a0dc:	f8d8 4000 	ldr.w	r4, [r8]
 800a0e0:	4627      	mov	r7, r4
 800a0e2:	2f00      	cmp	r7, #0
 800a0e4:	d143      	bne.n	800a16e <_malloc_r+0xd6>
 800a0e6:	2c00      	cmp	r4, #0
 800a0e8:	d04b      	beq.n	800a182 <_malloc_r+0xea>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	eb04 0903 	add.w	r9, r4, r3
 800a0f4:	f000 fb5a 	bl	800a7ac <_sbrk_r>
 800a0f8:	4581      	cmp	r9, r0
 800a0fa:	d142      	bne.n	800a182 <_malloc_r+0xea>
 800a0fc:	6821      	ldr	r1, [r4, #0]
 800a0fe:	1a6d      	subs	r5, r5, r1
 800a100:	4629      	mov	r1, r5
 800a102:	4630      	mov	r0, r6
 800a104:	f7ff ffa6 	bl	800a054 <sbrk_aligned>
 800a108:	3001      	adds	r0, #1
 800a10a:	d03a      	beq.n	800a182 <_malloc_r+0xea>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	442b      	add	r3, r5
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	f8d8 3000 	ldr.w	r3, [r8]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	bb62      	cbnz	r2, 800a174 <_malloc_r+0xdc>
 800a11a:	f8c8 7000 	str.w	r7, [r8]
 800a11e:	e00f      	b.n	800a140 <_malloc_r+0xa8>
 800a120:	6822      	ldr	r2, [r4, #0]
 800a122:	1b52      	subs	r2, r2, r5
 800a124:	d420      	bmi.n	800a168 <_malloc_r+0xd0>
 800a126:	2a0b      	cmp	r2, #11
 800a128:	d917      	bls.n	800a15a <_malloc_r+0xc2>
 800a12a:	1961      	adds	r1, r4, r5
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	6025      	str	r5, [r4, #0]
 800a130:	bf18      	it	ne
 800a132:	6059      	strne	r1, [r3, #4]
 800a134:	6863      	ldr	r3, [r4, #4]
 800a136:	bf08      	it	eq
 800a138:	f8c8 1000 	streq.w	r1, [r8]
 800a13c:	5162      	str	r2, [r4, r5]
 800a13e:	604b      	str	r3, [r1, #4]
 800a140:	4630      	mov	r0, r6
 800a142:	f000 f82f 	bl	800a1a4 <__malloc_unlock>
 800a146:	f104 000b 	add.w	r0, r4, #11
 800a14a:	1d23      	adds	r3, r4, #4
 800a14c:	f020 0007 	bic.w	r0, r0, #7
 800a150:	1ac2      	subs	r2, r0, r3
 800a152:	bf1c      	itt	ne
 800a154:	1a1b      	subne	r3, r3, r0
 800a156:	50a3      	strne	r3, [r4, r2]
 800a158:	e7af      	b.n	800a0ba <_malloc_r+0x22>
 800a15a:	6862      	ldr	r2, [r4, #4]
 800a15c:	42a3      	cmp	r3, r4
 800a15e:	bf0c      	ite	eq
 800a160:	f8c8 2000 	streq.w	r2, [r8]
 800a164:	605a      	strne	r2, [r3, #4]
 800a166:	e7eb      	b.n	800a140 <_malloc_r+0xa8>
 800a168:	4623      	mov	r3, r4
 800a16a:	6864      	ldr	r4, [r4, #4]
 800a16c:	e7ae      	b.n	800a0cc <_malloc_r+0x34>
 800a16e:	463c      	mov	r4, r7
 800a170:	687f      	ldr	r7, [r7, #4]
 800a172:	e7b6      	b.n	800a0e2 <_malloc_r+0x4a>
 800a174:	461a      	mov	r2, r3
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	42a3      	cmp	r3, r4
 800a17a:	d1fb      	bne.n	800a174 <_malloc_r+0xdc>
 800a17c:	2300      	movs	r3, #0
 800a17e:	6053      	str	r3, [r2, #4]
 800a180:	e7de      	b.n	800a140 <_malloc_r+0xa8>
 800a182:	230c      	movs	r3, #12
 800a184:	6033      	str	r3, [r6, #0]
 800a186:	4630      	mov	r0, r6
 800a188:	f000 f80c 	bl	800a1a4 <__malloc_unlock>
 800a18c:	e794      	b.n	800a0b8 <_malloc_r+0x20>
 800a18e:	6005      	str	r5, [r0, #0]
 800a190:	e7d6      	b.n	800a140 <_malloc_r+0xa8>
 800a192:	bf00      	nop
 800a194:	2400165c 	.word	0x2400165c

0800a198 <__malloc_lock>:
 800a198:	4801      	ldr	r0, [pc, #4]	@ (800a1a0 <__malloc_lock+0x8>)
 800a19a:	f7ff bf01 	b.w	8009fa0 <__retarget_lock_acquire_recursive>
 800a19e:	bf00      	nop
 800a1a0:	24001654 	.word	0x24001654

0800a1a4 <__malloc_unlock>:
 800a1a4:	4801      	ldr	r0, [pc, #4]	@ (800a1ac <__malloc_unlock+0x8>)
 800a1a6:	f7ff befc 	b.w	8009fa2 <__retarget_lock_release_recursive>
 800a1aa:	bf00      	nop
 800a1ac:	24001654 	.word	0x24001654

0800a1b0 <__ssputs_r>:
 800a1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b4:	688e      	ldr	r6, [r1, #8]
 800a1b6:	461f      	mov	r7, r3
 800a1b8:	42be      	cmp	r6, r7
 800a1ba:	680b      	ldr	r3, [r1, #0]
 800a1bc:	4682      	mov	sl, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	4690      	mov	r8, r2
 800a1c2:	d82d      	bhi.n	800a220 <__ssputs_r+0x70>
 800a1c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1cc:	d026      	beq.n	800a21c <__ssputs_r+0x6c>
 800a1ce:	6965      	ldr	r5, [r4, #20]
 800a1d0:	6909      	ldr	r1, [r1, #16]
 800a1d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1d6:	eba3 0901 	sub.w	r9, r3, r1
 800a1da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1de:	1c7b      	adds	r3, r7, #1
 800a1e0:	444b      	add	r3, r9
 800a1e2:	106d      	asrs	r5, r5, #1
 800a1e4:	429d      	cmp	r5, r3
 800a1e6:	bf38      	it	cc
 800a1e8:	461d      	movcc	r5, r3
 800a1ea:	0553      	lsls	r3, r2, #21
 800a1ec:	d527      	bpl.n	800a23e <__ssputs_r+0x8e>
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7ff ff52 	bl	800a098 <_malloc_r>
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	b360      	cbz	r0, 800a252 <__ssputs_r+0xa2>
 800a1f8:	6921      	ldr	r1, [r4, #16]
 800a1fa:	464a      	mov	r2, r9
 800a1fc:	f7ff fed2 	bl	8009fa4 <memcpy>
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	6126      	str	r6, [r4, #16]
 800a20e:	6165      	str	r5, [r4, #20]
 800a210:	444e      	add	r6, r9
 800a212:	eba5 0509 	sub.w	r5, r5, r9
 800a216:	6026      	str	r6, [r4, #0]
 800a218:	60a5      	str	r5, [r4, #8]
 800a21a:	463e      	mov	r6, r7
 800a21c:	42be      	cmp	r6, r7
 800a21e:	d900      	bls.n	800a222 <__ssputs_r+0x72>
 800a220:	463e      	mov	r6, r7
 800a222:	6820      	ldr	r0, [r4, #0]
 800a224:	4632      	mov	r2, r6
 800a226:	4641      	mov	r1, r8
 800a228:	f000 faa6 	bl	800a778 <memmove>
 800a22c:	68a3      	ldr	r3, [r4, #8]
 800a22e:	1b9b      	subs	r3, r3, r6
 800a230:	60a3      	str	r3, [r4, #8]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	4433      	add	r3, r6
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	2000      	movs	r0, #0
 800a23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a23e:	462a      	mov	r2, r5
 800a240:	f000 fac4 	bl	800a7cc <_realloc_r>
 800a244:	4606      	mov	r6, r0
 800a246:	2800      	cmp	r0, #0
 800a248:	d1e0      	bne.n	800a20c <__ssputs_r+0x5c>
 800a24a:	6921      	ldr	r1, [r4, #16]
 800a24c:	4650      	mov	r0, sl
 800a24e:	f7ff feb7 	bl	8009fc0 <_free_r>
 800a252:	230c      	movs	r3, #12
 800a254:	f8ca 3000 	str.w	r3, [sl]
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a25e:	81a3      	strh	r3, [r4, #12]
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	e7e9      	b.n	800a23a <__ssputs_r+0x8a>
	...

0800a268 <_svfiprintf_r>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	4698      	mov	r8, r3
 800a26e:	898b      	ldrh	r3, [r1, #12]
 800a270:	061b      	lsls	r3, r3, #24
 800a272:	b09d      	sub	sp, #116	@ 0x74
 800a274:	4607      	mov	r7, r0
 800a276:	460d      	mov	r5, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	d510      	bpl.n	800a29e <_svfiprintf_r+0x36>
 800a27c:	690b      	ldr	r3, [r1, #16]
 800a27e:	b973      	cbnz	r3, 800a29e <_svfiprintf_r+0x36>
 800a280:	2140      	movs	r1, #64	@ 0x40
 800a282:	f7ff ff09 	bl	800a098 <_malloc_r>
 800a286:	6028      	str	r0, [r5, #0]
 800a288:	6128      	str	r0, [r5, #16]
 800a28a:	b930      	cbnz	r0, 800a29a <_svfiprintf_r+0x32>
 800a28c:	230c      	movs	r3, #12
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	b01d      	add	sp, #116	@ 0x74
 800a296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29a:	2340      	movs	r3, #64	@ 0x40
 800a29c:	616b      	str	r3, [r5, #20]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a2:	2320      	movs	r3, #32
 800a2a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ac:	2330      	movs	r3, #48	@ 0x30
 800a2ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a44c <_svfiprintf_r+0x1e4>
 800a2b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2b6:	f04f 0901 	mov.w	r9, #1
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	469a      	mov	sl, r3
 800a2be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c2:	b10a      	cbz	r2, 800a2c8 <_svfiprintf_r+0x60>
 800a2c4:	2a25      	cmp	r2, #37	@ 0x25
 800a2c6:	d1f9      	bne.n	800a2bc <_svfiprintf_r+0x54>
 800a2c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a2cc:	d00b      	beq.n	800a2e6 <_svfiprintf_r+0x7e>
 800a2ce:	465b      	mov	r3, fp
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff ff6b 	bl	800a1b0 <__ssputs_r>
 800a2da:	3001      	adds	r0, #1
 800a2dc:	f000 80a7 	beq.w	800a42e <_svfiprintf_r+0x1c6>
 800a2e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e2:	445a      	add	r2, fp
 800a2e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 809f 	beq.w	800a42e <_svfiprintf_r+0x1c6>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fa:	f10a 0a01 	add.w	sl, sl, #1
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	9307      	str	r3, [sp, #28]
 800a302:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a306:	931a      	str	r3, [sp, #104]	@ 0x68
 800a308:	4654      	mov	r4, sl
 800a30a:	2205      	movs	r2, #5
 800a30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a310:	484e      	ldr	r0, [pc, #312]	@ (800a44c <_svfiprintf_r+0x1e4>)
 800a312:	f7f5 ffed 	bl	80002f0 <memchr>
 800a316:	9a04      	ldr	r2, [sp, #16]
 800a318:	b9d8      	cbnz	r0, 800a352 <_svfiprintf_r+0xea>
 800a31a:	06d0      	lsls	r0, r2, #27
 800a31c:	bf44      	itt	mi
 800a31e:	2320      	movmi	r3, #32
 800a320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a324:	0711      	lsls	r1, r2, #28
 800a326:	bf44      	itt	mi
 800a328:	232b      	movmi	r3, #43	@ 0x2b
 800a32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a32e:	f89a 3000 	ldrb.w	r3, [sl]
 800a332:	2b2a      	cmp	r3, #42	@ 0x2a
 800a334:	d015      	beq.n	800a362 <_svfiprintf_r+0xfa>
 800a336:	9a07      	ldr	r2, [sp, #28]
 800a338:	4654      	mov	r4, sl
 800a33a:	2000      	movs	r0, #0
 800a33c:	f04f 0c0a 	mov.w	ip, #10
 800a340:	4621      	mov	r1, r4
 800a342:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a346:	3b30      	subs	r3, #48	@ 0x30
 800a348:	2b09      	cmp	r3, #9
 800a34a:	d94b      	bls.n	800a3e4 <_svfiprintf_r+0x17c>
 800a34c:	b1b0      	cbz	r0, 800a37c <_svfiprintf_r+0x114>
 800a34e:	9207      	str	r2, [sp, #28]
 800a350:	e014      	b.n	800a37c <_svfiprintf_r+0x114>
 800a352:	eba0 0308 	sub.w	r3, r0, r8
 800a356:	fa09 f303 	lsl.w	r3, r9, r3
 800a35a:	4313      	orrs	r3, r2
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	46a2      	mov	sl, r4
 800a360:	e7d2      	b.n	800a308 <_svfiprintf_r+0xa0>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	1d19      	adds	r1, r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	9103      	str	r1, [sp, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bfbb      	ittet	lt
 800a36e:	425b      	neglt	r3, r3
 800a370:	f042 0202 	orrlt.w	r2, r2, #2
 800a374:	9307      	strge	r3, [sp, #28]
 800a376:	9307      	strlt	r3, [sp, #28]
 800a378:	bfb8      	it	lt
 800a37a:	9204      	strlt	r2, [sp, #16]
 800a37c:	7823      	ldrb	r3, [r4, #0]
 800a37e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a380:	d10a      	bne.n	800a398 <_svfiprintf_r+0x130>
 800a382:	7863      	ldrb	r3, [r4, #1]
 800a384:	2b2a      	cmp	r3, #42	@ 0x2a
 800a386:	d132      	bne.n	800a3ee <_svfiprintf_r+0x186>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	9203      	str	r2, [sp, #12]
 800a390:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a394:	3402      	adds	r4, #2
 800a396:	9305      	str	r3, [sp, #20]
 800a398:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a45c <_svfiprintf_r+0x1f4>
 800a39c:	7821      	ldrb	r1, [r4, #0]
 800a39e:	2203      	movs	r2, #3
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	f7f5 ffa5 	bl	80002f0 <memchr>
 800a3a6:	b138      	cbz	r0, 800a3b8 <_svfiprintf_r+0x150>
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	eba0 000a 	sub.w	r0, r0, sl
 800a3ae:	2240      	movs	r2, #64	@ 0x40
 800a3b0:	4082      	lsls	r2, r0
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	3401      	adds	r4, #1
 800a3b6:	9304      	str	r3, [sp, #16]
 800a3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3bc:	4824      	ldr	r0, [pc, #144]	@ (800a450 <_svfiprintf_r+0x1e8>)
 800a3be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3c2:	2206      	movs	r2, #6
 800a3c4:	f7f5 ff94 	bl	80002f0 <memchr>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d036      	beq.n	800a43a <_svfiprintf_r+0x1d2>
 800a3cc:	4b21      	ldr	r3, [pc, #132]	@ (800a454 <_svfiprintf_r+0x1ec>)
 800a3ce:	bb1b      	cbnz	r3, 800a418 <_svfiprintf_r+0x1b0>
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	3307      	adds	r3, #7
 800a3d4:	f023 0307 	bic.w	r3, r3, #7
 800a3d8:	3308      	adds	r3, #8
 800a3da:	9303      	str	r3, [sp, #12]
 800a3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3de:	4433      	add	r3, r6
 800a3e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e2:	e76a      	b.n	800a2ba <_svfiprintf_r+0x52>
 800a3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	e7a8      	b.n	800a340 <_svfiprintf_r+0xd8>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	3401      	adds	r4, #1
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f04f 0c0a 	mov.w	ip, #10
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a400:	3a30      	subs	r2, #48	@ 0x30
 800a402:	2a09      	cmp	r2, #9
 800a404:	d903      	bls.n	800a40e <_svfiprintf_r+0x1a6>
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0c6      	beq.n	800a398 <_svfiprintf_r+0x130>
 800a40a:	9105      	str	r1, [sp, #20]
 800a40c:	e7c4      	b.n	800a398 <_svfiprintf_r+0x130>
 800a40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a412:	4604      	mov	r4, r0
 800a414:	2301      	movs	r3, #1
 800a416:	e7f0      	b.n	800a3fa <_svfiprintf_r+0x192>
 800a418:	ab03      	add	r3, sp, #12
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	462a      	mov	r2, r5
 800a41e:	4b0e      	ldr	r3, [pc, #56]	@ (800a458 <_svfiprintf_r+0x1f0>)
 800a420:	a904      	add	r1, sp, #16
 800a422:	4638      	mov	r0, r7
 800a424:	f3af 8000 	nop.w
 800a428:	1c42      	adds	r2, r0, #1
 800a42a:	4606      	mov	r6, r0
 800a42c:	d1d6      	bne.n	800a3dc <_svfiprintf_r+0x174>
 800a42e:	89ab      	ldrh	r3, [r5, #12]
 800a430:	065b      	lsls	r3, r3, #25
 800a432:	f53f af2d 	bmi.w	800a290 <_svfiprintf_r+0x28>
 800a436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a438:	e72c      	b.n	800a294 <_svfiprintf_r+0x2c>
 800a43a:	ab03      	add	r3, sp, #12
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	462a      	mov	r2, r5
 800a440:	4b05      	ldr	r3, [pc, #20]	@ (800a458 <_svfiprintf_r+0x1f0>)
 800a442:	a904      	add	r1, sp, #16
 800a444:	4638      	mov	r0, r7
 800a446:	f000 f879 	bl	800a53c <_printf_i>
 800a44a:	e7ed      	b.n	800a428 <_svfiprintf_r+0x1c0>
 800a44c:	0800a988 	.word	0x0800a988
 800a450:	0800a992 	.word	0x0800a992
 800a454:	00000000 	.word	0x00000000
 800a458:	0800a1b1 	.word	0x0800a1b1
 800a45c:	0800a98e 	.word	0x0800a98e

0800a460 <_printf_common>:
 800a460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	4616      	mov	r6, r2
 800a466:	4698      	mov	r8, r3
 800a468:	688a      	ldr	r2, [r1, #8]
 800a46a:	690b      	ldr	r3, [r1, #16]
 800a46c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a470:	4293      	cmp	r3, r2
 800a472:	bfb8      	it	lt
 800a474:	4613      	movlt	r3, r2
 800a476:	6033      	str	r3, [r6, #0]
 800a478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a47c:	4607      	mov	r7, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	b10a      	cbz	r2, 800a486 <_printf_common+0x26>
 800a482:	3301      	adds	r3, #1
 800a484:	6033      	str	r3, [r6, #0]
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	0699      	lsls	r1, r3, #26
 800a48a:	bf42      	ittt	mi
 800a48c:	6833      	ldrmi	r3, [r6, #0]
 800a48e:	3302      	addmi	r3, #2
 800a490:	6033      	strmi	r3, [r6, #0]
 800a492:	6825      	ldr	r5, [r4, #0]
 800a494:	f015 0506 	ands.w	r5, r5, #6
 800a498:	d106      	bne.n	800a4a8 <_printf_common+0x48>
 800a49a:	f104 0a19 	add.w	sl, r4, #25
 800a49e:	68e3      	ldr	r3, [r4, #12]
 800a4a0:	6832      	ldr	r2, [r6, #0]
 800a4a2:	1a9b      	subs	r3, r3, r2
 800a4a4:	42ab      	cmp	r3, r5
 800a4a6:	dc26      	bgt.n	800a4f6 <_printf_common+0x96>
 800a4a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4ac:	6822      	ldr	r2, [r4, #0]
 800a4ae:	3b00      	subs	r3, #0
 800a4b0:	bf18      	it	ne
 800a4b2:	2301      	movne	r3, #1
 800a4b4:	0692      	lsls	r2, r2, #26
 800a4b6:	d42b      	bmi.n	800a510 <_printf_common+0xb0>
 800a4b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4bc:	4641      	mov	r1, r8
 800a4be:	4638      	mov	r0, r7
 800a4c0:	47c8      	blx	r9
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	d01e      	beq.n	800a504 <_printf_common+0xa4>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	6922      	ldr	r2, [r4, #16]
 800a4ca:	f003 0306 	and.w	r3, r3, #6
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	bf02      	ittt	eq
 800a4d2:	68e5      	ldreq	r5, [r4, #12]
 800a4d4:	6833      	ldreq	r3, [r6, #0]
 800a4d6:	1aed      	subeq	r5, r5, r3
 800a4d8:	68a3      	ldr	r3, [r4, #8]
 800a4da:	bf0c      	ite	eq
 800a4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4e0:	2500      	movne	r5, #0
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	bfc4      	itt	gt
 800a4e6:	1a9b      	subgt	r3, r3, r2
 800a4e8:	18ed      	addgt	r5, r5, r3
 800a4ea:	2600      	movs	r6, #0
 800a4ec:	341a      	adds	r4, #26
 800a4ee:	42b5      	cmp	r5, r6
 800a4f0:	d11a      	bne.n	800a528 <_printf_common+0xc8>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e008      	b.n	800a508 <_printf_common+0xa8>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4652      	mov	r2, sl
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	47c8      	blx	r9
 800a500:	3001      	adds	r0, #1
 800a502:	d103      	bne.n	800a50c <_printf_common+0xac>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50c:	3501      	adds	r5, #1
 800a50e:	e7c6      	b.n	800a49e <_printf_common+0x3e>
 800a510:	18e1      	adds	r1, r4, r3
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	2030      	movs	r0, #48	@ 0x30
 800a516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a51a:	4422      	add	r2, r4
 800a51c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a524:	3302      	adds	r3, #2
 800a526:	e7c7      	b.n	800a4b8 <_printf_common+0x58>
 800a528:	2301      	movs	r3, #1
 800a52a:	4622      	mov	r2, r4
 800a52c:	4641      	mov	r1, r8
 800a52e:	4638      	mov	r0, r7
 800a530:	47c8      	blx	r9
 800a532:	3001      	adds	r0, #1
 800a534:	d0e6      	beq.n	800a504 <_printf_common+0xa4>
 800a536:	3601      	adds	r6, #1
 800a538:	e7d9      	b.n	800a4ee <_printf_common+0x8e>
	...

0800a53c <_printf_i>:
 800a53c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a540:	7e0f      	ldrb	r7, [r1, #24]
 800a542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a544:	2f78      	cmp	r7, #120	@ 0x78
 800a546:	4691      	mov	r9, r2
 800a548:	4680      	mov	r8, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	469a      	mov	sl, r3
 800a54e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a552:	d807      	bhi.n	800a564 <_printf_i+0x28>
 800a554:	2f62      	cmp	r7, #98	@ 0x62
 800a556:	d80a      	bhi.n	800a56e <_printf_i+0x32>
 800a558:	2f00      	cmp	r7, #0
 800a55a:	f000 80d1 	beq.w	800a700 <_printf_i+0x1c4>
 800a55e:	2f58      	cmp	r7, #88	@ 0x58
 800a560:	f000 80b8 	beq.w	800a6d4 <_printf_i+0x198>
 800a564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a56c:	e03a      	b.n	800a5e4 <_printf_i+0xa8>
 800a56e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a572:	2b15      	cmp	r3, #21
 800a574:	d8f6      	bhi.n	800a564 <_printf_i+0x28>
 800a576:	a101      	add	r1, pc, #4	@ (adr r1, 800a57c <_printf_i+0x40>)
 800a578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a57c:	0800a5d5 	.word	0x0800a5d5
 800a580:	0800a5e9 	.word	0x0800a5e9
 800a584:	0800a565 	.word	0x0800a565
 800a588:	0800a565 	.word	0x0800a565
 800a58c:	0800a565 	.word	0x0800a565
 800a590:	0800a565 	.word	0x0800a565
 800a594:	0800a5e9 	.word	0x0800a5e9
 800a598:	0800a565 	.word	0x0800a565
 800a59c:	0800a565 	.word	0x0800a565
 800a5a0:	0800a565 	.word	0x0800a565
 800a5a4:	0800a565 	.word	0x0800a565
 800a5a8:	0800a6e7 	.word	0x0800a6e7
 800a5ac:	0800a613 	.word	0x0800a613
 800a5b0:	0800a6a1 	.word	0x0800a6a1
 800a5b4:	0800a565 	.word	0x0800a565
 800a5b8:	0800a565 	.word	0x0800a565
 800a5bc:	0800a709 	.word	0x0800a709
 800a5c0:	0800a565 	.word	0x0800a565
 800a5c4:	0800a613 	.word	0x0800a613
 800a5c8:	0800a565 	.word	0x0800a565
 800a5cc:	0800a565 	.word	0x0800a565
 800a5d0:	0800a6a9 	.word	0x0800a6a9
 800a5d4:	6833      	ldr	r3, [r6, #0]
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6032      	str	r2, [r6, #0]
 800a5dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e09c      	b.n	800a722 <_printf_i+0x1e6>
 800a5e8:	6833      	ldr	r3, [r6, #0]
 800a5ea:	6820      	ldr	r0, [r4, #0]
 800a5ec:	1d19      	adds	r1, r3, #4
 800a5ee:	6031      	str	r1, [r6, #0]
 800a5f0:	0606      	lsls	r6, r0, #24
 800a5f2:	d501      	bpl.n	800a5f8 <_printf_i+0xbc>
 800a5f4:	681d      	ldr	r5, [r3, #0]
 800a5f6:	e003      	b.n	800a600 <_printf_i+0xc4>
 800a5f8:	0645      	lsls	r5, r0, #25
 800a5fa:	d5fb      	bpl.n	800a5f4 <_printf_i+0xb8>
 800a5fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a600:	2d00      	cmp	r5, #0
 800a602:	da03      	bge.n	800a60c <_printf_i+0xd0>
 800a604:	232d      	movs	r3, #45	@ 0x2d
 800a606:	426d      	negs	r5, r5
 800a608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a60c:	4858      	ldr	r0, [pc, #352]	@ (800a770 <_printf_i+0x234>)
 800a60e:	230a      	movs	r3, #10
 800a610:	e011      	b.n	800a636 <_printf_i+0xfa>
 800a612:	6821      	ldr	r1, [r4, #0]
 800a614:	6833      	ldr	r3, [r6, #0]
 800a616:	0608      	lsls	r0, r1, #24
 800a618:	f853 5b04 	ldr.w	r5, [r3], #4
 800a61c:	d402      	bmi.n	800a624 <_printf_i+0xe8>
 800a61e:	0649      	lsls	r1, r1, #25
 800a620:	bf48      	it	mi
 800a622:	b2ad      	uxthmi	r5, r5
 800a624:	2f6f      	cmp	r7, #111	@ 0x6f
 800a626:	4852      	ldr	r0, [pc, #328]	@ (800a770 <_printf_i+0x234>)
 800a628:	6033      	str	r3, [r6, #0]
 800a62a:	bf14      	ite	ne
 800a62c:	230a      	movne	r3, #10
 800a62e:	2308      	moveq	r3, #8
 800a630:	2100      	movs	r1, #0
 800a632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a636:	6866      	ldr	r6, [r4, #4]
 800a638:	60a6      	str	r6, [r4, #8]
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	db05      	blt.n	800a64a <_printf_i+0x10e>
 800a63e:	6821      	ldr	r1, [r4, #0]
 800a640:	432e      	orrs	r6, r5
 800a642:	f021 0104 	bic.w	r1, r1, #4
 800a646:	6021      	str	r1, [r4, #0]
 800a648:	d04b      	beq.n	800a6e2 <_printf_i+0x1a6>
 800a64a:	4616      	mov	r6, r2
 800a64c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a650:	fb03 5711 	mls	r7, r3, r1, r5
 800a654:	5dc7      	ldrb	r7, [r0, r7]
 800a656:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a65a:	462f      	mov	r7, r5
 800a65c:	42bb      	cmp	r3, r7
 800a65e:	460d      	mov	r5, r1
 800a660:	d9f4      	bls.n	800a64c <_printf_i+0x110>
 800a662:	2b08      	cmp	r3, #8
 800a664:	d10b      	bne.n	800a67e <_printf_i+0x142>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	07df      	lsls	r7, r3, #31
 800a66a:	d508      	bpl.n	800a67e <_printf_i+0x142>
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	6861      	ldr	r1, [r4, #4]
 800a670:	4299      	cmp	r1, r3
 800a672:	bfde      	ittt	le
 800a674:	2330      	movle	r3, #48	@ 0x30
 800a676:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a67a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a67e:	1b92      	subs	r2, r2, r6
 800a680:	6122      	str	r2, [r4, #16]
 800a682:	f8cd a000 	str.w	sl, [sp]
 800a686:	464b      	mov	r3, r9
 800a688:	aa03      	add	r2, sp, #12
 800a68a:	4621      	mov	r1, r4
 800a68c:	4640      	mov	r0, r8
 800a68e:	f7ff fee7 	bl	800a460 <_printf_common>
 800a692:	3001      	adds	r0, #1
 800a694:	d14a      	bne.n	800a72c <_printf_i+0x1f0>
 800a696:	f04f 30ff 	mov.w	r0, #4294967295
 800a69a:	b004      	add	sp, #16
 800a69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	f043 0320 	orr.w	r3, r3, #32
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	4832      	ldr	r0, [pc, #200]	@ (800a774 <_printf_i+0x238>)
 800a6aa:	2778      	movs	r7, #120	@ 0x78
 800a6ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	6831      	ldr	r1, [r6, #0]
 800a6b4:	061f      	lsls	r7, r3, #24
 800a6b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6ba:	d402      	bmi.n	800a6c2 <_printf_i+0x186>
 800a6bc:	065f      	lsls	r7, r3, #25
 800a6be:	bf48      	it	mi
 800a6c0:	b2ad      	uxthmi	r5, r5
 800a6c2:	6031      	str	r1, [r6, #0]
 800a6c4:	07d9      	lsls	r1, r3, #31
 800a6c6:	bf44      	itt	mi
 800a6c8:	f043 0320 	orrmi.w	r3, r3, #32
 800a6cc:	6023      	strmi	r3, [r4, #0]
 800a6ce:	b11d      	cbz	r5, 800a6d8 <_printf_i+0x19c>
 800a6d0:	2310      	movs	r3, #16
 800a6d2:	e7ad      	b.n	800a630 <_printf_i+0xf4>
 800a6d4:	4826      	ldr	r0, [pc, #152]	@ (800a770 <_printf_i+0x234>)
 800a6d6:	e7e9      	b.n	800a6ac <_printf_i+0x170>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	f023 0320 	bic.w	r3, r3, #32
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	e7f6      	b.n	800a6d0 <_printf_i+0x194>
 800a6e2:	4616      	mov	r6, r2
 800a6e4:	e7bd      	b.n	800a662 <_printf_i+0x126>
 800a6e6:	6833      	ldr	r3, [r6, #0]
 800a6e8:	6825      	ldr	r5, [r4, #0]
 800a6ea:	6961      	ldr	r1, [r4, #20]
 800a6ec:	1d18      	adds	r0, r3, #4
 800a6ee:	6030      	str	r0, [r6, #0]
 800a6f0:	062e      	lsls	r6, r5, #24
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	d501      	bpl.n	800a6fa <_printf_i+0x1be>
 800a6f6:	6019      	str	r1, [r3, #0]
 800a6f8:	e002      	b.n	800a700 <_printf_i+0x1c4>
 800a6fa:	0668      	lsls	r0, r5, #25
 800a6fc:	d5fb      	bpl.n	800a6f6 <_printf_i+0x1ba>
 800a6fe:	8019      	strh	r1, [r3, #0]
 800a700:	2300      	movs	r3, #0
 800a702:	6123      	str	r3, [r4, #16]
 800a704:	4616      	mov	r6, r2
 800a706:	e7bc      	b.n	800a682 <_printf_i+0x146>
 800a708:	6833      	ldr	r3, [r6, #0]
 800a70a:	1d1a      	adds	r2, r3, #4
 800a70c:	6032      	str	r2, [r6, #0]
 800a70e:	681e      	ldr	r6, [r3, #0]
 800a710:	6862      	ldr	r2, [r4, #4]
 800a712:	2100      	movs	r1, #0
 800a714:	4630      	mov	r0, r6
 800a716:	f7f5 fdeb 	bl	80002f0 <memchr>
 800a71a:	b108      	cbz	r0, 800a720 <_printf_i+0x1e4>
 800a71c:	1b80      	subs	r0, r0, r6
 800a71e:	6060      	str	r0, [r4, #4]
 800a720:	6863      	ldr	r3, [r4, #4]
 800a722:	6123      	str	r3, [r4, #16]
 800a724:	2300      	movs	r3, #0
 800a726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a72a:	e7aa      	b.n	800a682 <_printf_i+0x146>
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	4632      	mov	r2, r6
 800a730:	4649      	mov	r1, r9
 800a732:	4640      	mov	r0, r8
 800a734:	47d0      	blx	sl
 800a736:	3001      	adds	r0, #1
 800a738:	d0ad      	beq.n	800a696 <_printf_i+0x15a>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	079b      	lsls	r3, r3, #30
 800a73e:	d413      	bmi.n	800a768 <_printf_i+0x22c>
 800a740:	68e0      	ldr	r0, [r4, #12]
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	4298      	cmp	r0, r3
 800a746:	bfb8      	it	lt
 800a748:	4618      	movlt	r0, r3
 800a74a:	e7a6      	b.n	800a69a <_printf_i+0x15e>
 800a74c:	2301      	movs	r3, #1
 800a74e:	4632      	mov	r2, r6
 800a750:	4649      	mov	r1, r9
 800a752:	4640      	mov	r0, r8
 800a754:	47d0      	blx	sl
 800a756:	3001      	adds	r0, #1
 800a758:	d09d      	beq.n	800a696 <_printf_i+0x15a>
 800a75a:	3501      	adds	r5, #1
 800a75c:	68e3      	ldr	r3, [r4, #12]
 800a75e:	9903      	ldr	r1, [sp, #12]
 800a760:	1a5b      	subs	r3, r3, r1
 800a762:	42ab      	cmp	r3, r5
 800a764:	dcf2      	bgt.n	800a74c <_printf_i+0x210>
 800a766:	e7eb      	b.n	800a740 <_printf_i+0x204>
 800a768:	2500      	movs	r5, #0
 800a76a:	f104 0619 	add.w	r6, r4, #25
 800a76e:	e7f5      	b.n	800a75c <_printf_i+0x220>
 800a770:	0800a999 	.word	0x0800a999
 800a774:	0800a9aa 	.word	0x0800a9aa

0800a778 <memmove>:
 800a778:	4288      	cmp	r0, r1
 800a77a:	b510      	push	{r4, lr}
 800a77c:	eb01 0402 	add.w	r4, r1, r2
 800a780:	d902      	bls.n	800a788 <memmove+0x10>
 800a782:	4284      	cmp	r4, r0
 800a784:	4623      	mov	r3, r4
 800a786:	d807      	bhi.n	800a798 <memmove+0x20>
 800a788:	1e43      	subs	r3, r0, #1
 800a78a:	42a1      	cmp	r1, r4
 800a78c:	d008      	beq.n	800a7a0 <memmove+0x28>
 800a78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a792:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a796:	e7f8      	b.n	800a78a <memmove+0x12>
 800a798:	4402      	add	r2, r0
 800a79a:	4601      	mov	r1, r0
 800a79c:	428a      	cmp	r2, r1
 800a79e:	d100      	bne.n	800a7a2 <memmove+0x2a>
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7aa:	e7f7      	b.n	800a79c <memmove+0x24>

0800a7ac <_sbrk_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d06      	ldr	r5, [pc, #24]	@ (800a7c8 <_sbrk_r+0x1c>)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	f7f7 fcfa 	bl	80021b0 <_sbrk>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_sbrk_r+0x1a>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_sbrk_r+0x1a>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	24001650 	.word	0x24001650

0800a7cc <_realloc_r>:
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	4614      	mov	r4, r2
 800a7d4:	460d      	mov	r5, r1
 800a7d6:	b921      	cbnz	r1, 800a7e2 <_realloc_r+0x16>
 800a7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	4611      	mov	r1, r2
 800a7de:	f7ff bc5b 	b.w	800a098 <_malloc_r>
 800a7e2:	b92a      	cbnz	r2, 800a7f0 <_realloc_r+0x24>
 800a7e4:	f7ff fbec 	bl	8009fc0 <_free_r>
 800a7e8:	4625      	mov	r5, r4
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f0:	f000 f81a 	bl	800a828 <_malloc_usable_size_r>
 800a7f4:	4284      	cmp	r4, r0
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	d802      	bhi.n	800a800 <_realloc_r+0x34>
 800a7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7fe:	d8f4      	bhi.n	800a7ea <_realloc_r+0x1e>
 800a800:	4621      	mov	r1, r4
 800a802:	4638      	mov	r0, r7
 800a804:	f7ff fc48 	bl	800a098 <_malloc_r>
 800a808:	4680      	mov	r8, r0
 800a80a:	b908      	cbnz	r0, 800a810 <_realloc_r+0x44>
 800a80c:	4645      	mov	r5, r8
 800a80e:	e7ec      	b.n	800a7ea <_realloc_r+0x1e>
 800a810:	42b4      	cmp	r4, r6
 800a812:	4622      	mov	r2, r4
 800a814:	4629      	mov	r1, r5
 800a816:	bf28      	it	cs
 800a818:	4632      	movcs	r2, r6
 800a81a:	f7ff fbc3 	bl	8009fa4 <memcpy>
 800a81e:	4629      	mov	r1, r5
 800a820:	4638      	mov	r0, r7
 800a822:	f7ff fbcd 	bl	8009fc0 <_free_r>
 800a826:	e7f1      	b.n	800a80c <_realloc_r+0x40>

0800a828 <_malloc_usable_size_r>:
 800a828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a82c:	1f18      	subs	r0, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bfbc      	itt	lt
 800a832:	580b      	ldrlt	r3, [r1, r0]
 800a834:	18c0      	addlt	r0, r0, r3
 800a836:	4770      	bx	lr

0800a838 <_init>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr

0800a844 <_fini>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	bf00      	nop
 800a848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84a:	bc08      	pop	{r3}
 800a84c:	469e      	mov	lr, r3
 800a84e:	4770      	bx	lr
