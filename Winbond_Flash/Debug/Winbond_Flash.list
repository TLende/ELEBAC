
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08008e94  08008e94  00009e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008fe4  08008fe4  00009fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008fec  08008fec  00009fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008ff0  08008ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001098  24000000  08008ff4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003b8  24001098  0800a08c  0000b098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001450  0800a08c  0000b450  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 10 .debug_info   000197b5  00000000  00000000  0000b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dbf  00000000  00000000  0002487b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c0  00000000  00000000  00027640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cde  00000000  00000000  00028700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d2d  00000000  00000000  000293de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016807  00000000  00000000  0006310b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a77d  00000000  00000000  00079912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e408f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bbc  00000000  00000000  001e40d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001e8c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001098 	.word	0x24001098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e7c 	.word	0x08008e7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400109c 	.word	0x2400109c
 80002dc:	08008e7c 	.word	0x08008e7c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART1_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f001 ffdc 	bl	80026be <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 fea0 	bl	8001450 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010fc 	.word	0x240010fc
 800071c:	24000010 	.word	0x24000010
 8000720:	24001130 	.word	0x24001130

08000724 <Flash_Init>:


//Initialize flash IC
//BUF=1-> Buffer Read
//BUF=0-> Continuous Read
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000732:	f001 fc19 	bl	8001f68 <HAL_Delay>
	if(BUF){
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d012      	beq.n	8000762 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <Flash_Init+0x98>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f9f7 	bl	8000b34 <Read_Status_Register>
 8000746:	4603      	mov	r3, r0
 8000748:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <Flash_Init+0x98>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	7bba      	ldrb	r2, [r7, #14]
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fa1c 	bl	8000b98 <Write_Status_Register>
 8000760:	e011      	b.n	8000786 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <Flash_Init+0x98>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f9e4 	bl	8000b34 <Read_Status_Register>
 800076c:	4603      	mov	r3, r0
 800076e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f023 0308 	bic.w	r3, r3, #8
 8000776:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <Flash_Init+0x98>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fa09 	bl	8000b98 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <Flash_Init+0x9c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f9d2 	bl	8000b34 <Read_Status_Register>
 8000790:	4603      	mov	r3, r0
 8000792:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 800079c:	7b7b      	ldrb	r3, [r7, #13]
 800079e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80007a2:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <Flash_Init+0x9c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	7b7a      	ldrb	r2, [r7, #13]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f9f3 	bl	8000b98 <Write_Status_Register>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	24001019 	.word	0x24001019
 80007c0:	24001018 	.word	0x24001018

080007c4 <Write_Data>:
	SR_3 = Read_Status_Register(SR_3_Addr);
	delay_ns(DELAY_NS);
}

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <Write_Data+0x74>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d106      	bne.n	80007e6 <Write_Data+0x22>
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <Write_Data+0x78>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <Write_Data+0x22>
		Block_Erase(0);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fadf 	bl	8000da4 <Block_Erase>
	}
	uint16_t count=0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 80007ea:	e01c      	b.n	8000826 <Write_Data+0x62>
		*Buffer_p=*data;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <Write_Data+0x7c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	701a      	strb	r2, [r3, #0]
		Buffer_p++;
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <Write_Data+0x7c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <Write_Data+0x7c>)
 80007fe:	6013      	str	r3, [r2, #0]
		data++;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <Write_Data+0x78>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <Write_Data+0x78>)
 8000810:	801a      	strh	r2, [r3, #0]
		count++;
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	3301      	adds	r3, #1
 8000816:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <Write_Data+0x78>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000820:	d301      	bcc.n	8000826 <Write_Data+0x62>
			Write_to_page();
 8000822:	f000 f80f 	bl	8000844 <Write_to_page>
	while(count<lenght){
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3de      	bcc.n	80007ec <Write_Data+0x28>
		}
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	240010c2 	.word	0x240010c2
 800083c:	240010cc 	.word	0x240010cc
 8000840:	24000000 	.word	0x24000000

08000844 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	if(Buffer_flip==0){
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <Write_to_page+0x74>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10f      	bne.n	8000870 <Write_to_page+0x2c>
		Buffer_flip=1;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <Write_to_page+0x74>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
		//memset(write_data_1, 0xFF, sizeof(write_data_1));
		Buffer_p=&write_data_1[0];
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <Write_to_page+0x78>)
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <Write_to_page+0x7c>)
 800085a:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <Write_to_page+0x80>)
 800085e:	2200      	movs	r2, #0
 8000860:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_0[0], sizeof(write_data_0));
 8000862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000866:	4918      	ldr	r1, [pc, #96]	@ (80008c8 <Write_to_page+0x84>)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f9f3 	bl	8000c54 <Write_Data_Buffer>
 800086e:	e00e      	b.n	800088e <Write_to_page+0x4a>
	}
	else{
		Buffer_flip=0;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <Write_to_page+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
		//memset(write_data_0, 0xFF, sizeof(write_data_0));
		Buffer_p=&write_data_0[0];
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <Write_to_page+0x78>)
 8000878:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <Write_to_page+0x84>)
 800087a:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <Write_to_page+0x80>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_1[0], sizeof(write_data_1));
 8000882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000886:	490e      	ldr	r1, [pc, #56]	@ (80008c0 <Write_to_page+0x7c>)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f9e3 	bl	8000c54 <Write_Data_Buffer>
	}
	Write_Data_Flash(Page_Index);
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <Write_to_page+0x88>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fa1c 	bl	8000cd0 <Write_Data_Flash>
	Page_Index++;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <Write_to_page+0x88>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <Write_to_page+0x88>)
 80008a2:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <Write_to_page+0x80>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Page_Index);
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <Write_to_page+0x88>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f80e 	bl	80008d0 <Automatic_Block_Managment>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	240010d0 	.word	0x240010d0
 80008bc:	24000000 	.word	0x24000000
 80008c0:	24000818 	.word	0x24000818
 80008c4:	240010cc 	.word	0x240010cc
 80008c8:	24000018 	.word	0x24000018
 80008cc:	240010c2 	.word	0x240010c2

080008d0 <Automatic_Block_Managment>:
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	099b      	lsrs	r3, r3, #6
 80008de:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <Automatic_Block_Managment+0x38>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	89fa      	ldrh	r2, [r7, #14]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d007      	beq.n	80008fa <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fa59 	bl	8000da4 <Block_Erase>
		Block_Mem=Block;
 80008f2:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <Automatic_Block_Managment+0x38>)
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 80008f8:	e002      	b.n	8000900 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 80008fa:	4a03      	ldr	r2, [pc, #12]	@ (8000908 <Automatic_Block_Managment+0x38>)
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	8013      	strh	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	240010ce 	.word	0x240010ce

0800090c <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART1_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000912:	4823      	ldr	r0, [pc, #140]	@ (80009a0 <Chip_Erase+0x94>)
 8000914:	f000 faa6 	bl	8000e64 <USART1_Printf>
	HAL_UART_Receive(&hcom_uart[COM1], &UART_buffer,1, HAL_MAX_DELAY);
 8000918:	1cf9      	adds	r1, r7, #3
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	2201      	movs	r2, #1
 8000920:	4820      	ldr	r0, [pc, #128]	@ (80009a4 <Chip_Erase+0x98>)
 8000922:	f006 fda0 	bl	8007466 <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	2b59      	cmp	r3, #89	@ 0x59
 800092a:	d132      	bne.n	8000992 <Chip_Erase+0x86>
		USART1_Printf("Sletter minne...\r\n");
 800092c:	481e      	ldr	r0, [pc, #120]	@ (80009a8 <Chip_Erase+0x9c>)
 800092e:	f000 fa99 	bl	8000e64 <USART1_Printf>
		for(int i = 0; i <= 1024; i++){
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	e009      	b.n	800094c <Chip_Erase+0x40>
			Block_Erase(i*64);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b29b      	uxth	r3, r3
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	b29b      	uxth	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fa2f 	bl	8000da4 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3301      	adds	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000952:	ddf1      	ble.n	8000938 <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <Chip_Erase+0xa0>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <Chip_Erase+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <Chip_Erase+0xa8>)
 8000962:	2200      	movs	r2, #0
 8000964:	801a      	strh	r2, [r3, #0]
		Buffer_flip=0;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <Chip_Erase+0xac>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <Chip_Erase+0xb0>)
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <Chip_Erase+0xb4>)
 8000970:	601a      	str	r2, [r3, #0]
		memset(write_data_0, 0xFF, sizeof(write_data_0));
 8000972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000976:	21ff      	movs	r1, #255	@ 0xff
 8000978:	4811      	ldr	r0, [pc, #68]	@ (80009c0 <Chip_Erase+0xb4>)
 800097a:	f007 fe01 	bl	8008580 <memset>
		memset(write_data_1, 0xFF, sizeof(write_data_1));
 800097e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000982:	21ff      	movs	r1, #255	@ 0xff
 8000984:	480f      	ldr	r0, [pc, #60]	@ (80009c4 <Chip_Erase+0xb8>)
 8000986:	f007 fdfb 	bl	8008580 <memset>
		USART1_Printf("Ferdig\r\n");
 800098a:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <Chip_Erase+0xbc>)
 800098c:	f000 fa6a 	bl	8000e64 <USART1_Printf>
	}
	else{
		USART1_Printf("Sletter IKKE minne\r\n");
	}
}
 8000990:	e002      	b.n	8000998 <Chip_Erase+0x8c>
		USART1_Printf("Sletter IKKE minne\r\n");
 8000992:	480e      	ldr	r0, [pc, #56]	@ (80009cc <Chip_Erase+0xc0>)
 8000994:	f000 fa66 	bl	8000e64 <USART1_Printf>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08008e94 	.word	0x08008e94
 80009a4:	24001270 	.word	0x24001270
 80009a8:	08008ec8 	.word	0x08008ec8
 80009ac:	240010cc 	.word	0x240010cc
 80009b0:	240010c2 	.word	0x240010c2
 80009b4:	240010ce 	.word	0x240010ce
 80009b8:	240010d0 	.word	0x240010d0
 80009bc:	24000000 	.word	0x24000000
 80009c0:	24000018 	.word	0x24000018
 80009c4:	24000818 	.word	0x24000818
 80009c8:	08008edc 	.word	0x08008edc
 80009cc:	08008ee8 	.word	0x08008ee8

080009d0 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual USART
void Read_Data_Cont(uint16_t len){
 80009d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009d4:	b089      	sub	sp, #36	@ 0x24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	80fb      	strh	r3, [r7, #6]
 80009dc:	466b      	mov	r3, sp
 80009de:	461e      	mov	r6, r3
	Select_Page_Read(0);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f9ab 	bl	8000d3c <Select_Page_Read>
	uint8_t Data_Buffer[len];
 80009e6:	88f9      	ldrh	r1, [r7, #6]
 80009e8:	460b      	mov	r3, r1
 80009ea:	3b01      	subs	r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	b28b      	uxth	r3, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	4698      	mov	r8, r3
 80009f4:	4691      	mov	r9, r2
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a0a:	b28b      	uxth	r3, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	461c      	mov	r4, r3
 8000a10:	4615      	mov	r5, r2
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	00eb      	lsls	r3, r5, #3
 8000a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a20:	00e2      	lsls	r2, r4, #3
 8000a22:	460b      	mov	r3, r1
 8000a24:	3307      	adds	r3, #7
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a2e:	466b      	mov	r3, sp
 8000a30:	3300      	adds	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <Read_Data_Cont+0x114>)
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <Read_Data_Cont+0x118>)
 8000a3a:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae8 <Read_Data_Cont+0x118>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000a42:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <Read_Data_Cont+0x118>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000a48:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <Read_Data_Cont+0x118>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2110      	movs	r1, #16
 8000a52:	4826      	ldr	r0, [pc, #152]	@ (8000aec <Read_Data_Cont+0x11c>)
 8000a54:	f002 ff32 	bl	80038bc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000a58:	2364      	movs	r3, #100	@ 0x64
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4922      	ldr	r1, [pc, #136]	@ (8000ae8 <Read_Data_Cont+0x118>)
 8000a5e:	4824      	ldr	r0, [pc, #144]	@ (8000af0 <Read_Data_Cont+0x120>)
 8000a60:	f005 fed0 	bl	8006804 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000a64:	88fa      	ldrh	r2, [r7, #6]
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	4820      	ldr	r0, [pc, #128]	@ (8000af0 <Read_Data_Cont+0x120>)
 8000a6e:	f006 f8b7 	bl	8006be0 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3303      	adds	r3, #3
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	330b      	adds	r3, #11
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000a8a:	e018      	b.n	8000abe <Read_Data_Cont+0xee>
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000a8c:	8bf9      	ldrh	r1, [r7, #30]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4818      	ldr	r0, [pc, #96]	@ (8000af4 <Read_Data_Cont+0x124>)
 8000a94:	f000 f9e6 	bl	8000e64 <USART1_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000a98:	88fa      	ldrh	r2, [r7, #6]
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	68f9      	ldr	r1, [r7, #12]
 8000aa0:	4813      	ldr	r0, [pc, #76]	@ (8000af0 <Read_Data_Cont+0x120>)
 8000aa2:	f006 f89d 	bl	8006be0 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	330b      	adds	r3, #11
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2bff      	cmp	r3, #255	@ 0xff
 8000ac4:	d103      	bne.n	8000ace <Read_Data_Cont+0xfe>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	7bdb      	ldrb	r3, [r3, #15]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0de      	beq.n	8000a8c <Read_Data_Cont+0xbc>
	}
	csHIGH();
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <Read_Data_Cont+0x11c>)
 8000ad4:	f002 fef2 	bl	80038bc <HAL_GPIO_WritePin>
 8000ad8:	46b5      	mov	sp, r6
}
 8000ada:	bf00      	nop
 8000adc:	3724      	adds	r7, #36	@ 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ae4:	2400000f 	.word	0x2400000f
 8000ae8:	240010b4 	.word	0x240010b4
 8000aec:	58020000 	.word	0x58020000
 8000af0:	240011d0 	.word	0x240011d0
 8000af4:	08008f00 	.word	0x08008f00

08000af8 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	csLOW();
 8000afc:	2200      	movs	r2, #0
 8000afe:	2110      	movs	r1, #16
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <Write_Enable+0x30>)
 8000b02:	f002 fedb 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000b06:	2364      	movs	r3, #100	@ 0x64
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <Write_Enable+0x34>)
 8000b0c:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <Write_Enable+0x38>)
 8000b0e:	f005 fe79 	bl	8006804 <HAL_SPI_Transmit>
	csHIGH();
 8000b12:	2201      	movs	r2, #1
 8000b14:	2110      	movs	r1, #16
 8000b16:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <Write_Enable+0x30>)
 8000b18:	f002 fed0 	bl	80038bc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000b1c:	2064      	movs	r0, #100	@ 0x64
 8000b1e:	f000 f977 	bl	8000e10 <delay_ns>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58020000 	.word	0x58020000
 8000b2c:	2400000a 	.word	0x2400000a
 8000b30:	240011d0 	.word	0x240011d0

08000b34 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

//Read status register.
//SR->Select register address to read
uint8_t Read_Status_Register(uint8_t SR){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <Read_Status_Register+0x50>)
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <Read_Status_Register+0x54>)
 8000b44:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <Read_Status_Register+0x54>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2110      	movs	r1, #16
 8000b50:	480e      	ldr	r0, [pc, #56]	@ (8000b8c <Read_Status_Register+0x58>)
 8000b52:	f002 feb3 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000b56:	2364      	movs	r3, #100	@ 0x64
 8000b58:	2202      	movs	r2, #2
 8000b5a:	490b      	ldr	r1, [pc, #44]	@ (8000b88 <Read_Status_Register+0x54>)
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <Read_Status_Register+0x5c>)
 8000b5e:	f005 fe51 	bl	8006804 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	2201      	movs	r2, #1
 8000b66:	490b      	ldr	r1, [pc, #44]	@ (8000b94 <Read_Status_Register+0x60>)
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <Read_Status_Register+0x5c>)
 8000b6a:	f006 f839 	bl	8006be0 <HAL_SPI_Receive>
	csHIGH();
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2110      	movs	r1, #16
 8000b72:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <Read_Status_Register+0x58>)
 8000b74:	f002 fea2 	bl	80038bc <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <Read_Status_Register+0x60>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000004 	.word	0x24000004
 8000b88:	240010b4 	.word	0x240010b4
 8000b8c:	58020000 	.word	0x58020000
 8000b90:	240011d0 	.word	0x240011d0
 8000b94:	240010bc 	.word	0x240010bc

08000b98 <Write_Status_Register>:

//Write to status register
//SR->register address to write
//REG_DATA->Register data to write to register
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <Write_Status_Register+0x4c>)
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <Write_Status_Register+0x50>)
 8000bae:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <Write_Status_Register+0x50>)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <Write_Status_Register+0x50>)
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	480a      	ldr	r0, [pc, #40]	@ (8000bec <Write_Status_Register+0x54>)
 8000bc2:	f002 fe7b 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000bc6:	2364      	movs	r3, #100	@ 0x64
 8000bc8:	2203      	movs	r2, #3
 8000bca:	4907      	ldr	r1, [pc, #28]	@ (8000be8 <Write_Status_Register+0x50>)
 8000bcc:	4808      	ldr	r0, [pc, #32]	@ (8000bf0 <Write_Status_Register+0x58>)
 8000bce:	f005 fe19 	bl	8006804 <HAL_SPI_Transmit>
	csHIGH();
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <Write_Status_Register+0x54>)
 8000bd8:	f002 fe70 	bl	80038bc <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	24000005 	.word	0x24000005
 8000be8:	240010b4 	.word	0x240010b4
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	240011d0 	.word	0x240011d0

08000bf4 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	460a      	mov	r2, r1
 8000c00:	801a      	strh	r2, [r3, #0]
 8000c02:	460a      	mov	r2, r1
 8000c04:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000c06:	2200      	movs	r2, #0
 8000c08:	2110      	movs	r1, #16
 8000c0a:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <Read_ID+0x54>)
 8000c0c:	f002 fe56 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000c10:	2364      	movs	r3, #100	@ 0x64
 8000c12:	2202      	movs	r2, #2
 8000c14:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <Read_ID+0x58>)
 8000c16:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <Read_ID+0x5c>)
 8000c18:	f005 fdf4 	bl	8006804 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000c1c:	1d39      	adds	r1, r7, #4
 8000c1e:	2364      	movs	r3, #100	@ 0x64
 8000c20:	2203      	movs	r2, #3
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <Read_ID+0x5c>)
 8000c24:	f005 ffdc 	bl	8006be0 <HAL_SPI_Receive>
	csHIGH();
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <Read_ID+0x54>)
 8000c2e:	f002 fe45 	bl	80038bc <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000c32:	793b      	ldrb	r3, [r7, #4]
 8000c34:	041a      	lsls	r2, r3, #16
 8000c36:	797b      	ldrb	r3, [r7, #5]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	79b9      	ldrb	r1, [r7, #6]
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	4313      	orrs	r3, r2
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58020000 	.word	0x58020000
 8000c4c:	24000008 	.word	0x24000008
 8000c50:	240011d0 	.word	0x240011d0

08000c54 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
 8000c60:	4613      	mov	r3, r2
 8000c62:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000c64:	f7ff ff48 	bl	8000af8 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <Write_Data_Buffer+0x6c>)
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <Write_Data_Buffer+0x70>)
 8000c6e:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	0a1b      	lsrs	r3, r3, #8
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <Write_Data_Buffer+0x70>)
 8000c7a:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <Write_Data_Buffer+0x70>)
 8000c82:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <Write_Data_Buffer+0x74>)
 8000c8a:	f002 fe17 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000c8e:	2364      	movs	r3, #100	@ 0x64
 8000c90:	2203      	movs	r2, #3
 8000c92:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <Write_Data_Buffer+0x70>)
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <Write_Data_Buffer+0x78>)
 8000c96:	f005 fdb5 	bl	8006804 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&Flash, Data, len);
//	SPI_DMA=1;
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000c9a:	88ba      	ldrh	r2, [r7, #4]
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	6839      	ldr	r1, [r7, #0]
 8000ca2:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <Write_Data_Buffer+0x78>)
 8000ca4:	f005 fdae 	bl	8006804 <HAL_SPI_Transmit>
	csHIGH();
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2110      	movs	r1, #16
 8000cac:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <Write_Data_Buffer+0x74>)
 8000cae:	f002 fe05 	bl	80038bc <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000cb2:	2064      	movs	r0, #100	@ 0x64
 8000cb4:	f000 f8ac 	bl	8000e10 <delay_ns>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2400000c 	.word	0x2400000c
 8000cc4:	240010b4 	.word	0x240010b4
 8000cc8:	58020000 	.word	0x58020000
 8000ccc:	240011d0 	.word	0x240011d0

08000cd0 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000cda:	f7ff ff0d 	bl	8000af8 <Write_Enable>
	Tx_Buffer[0]=OP_Program_Ex;
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <Write_Data_Flash+0x5c>)
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <Write_Data_Flash+0x60>)
 8000ce4:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <Write_Data_Flash+0x60>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	0a1b      	lsrs	r3, r3, #8
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <Write_Data_Flash+0x60>)
 8000cf6:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <Write_Data_Flash+0x60>)
 8000cfe:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <Write_Data_Flash+0x64>)
 8000d06:	f002 fdd9 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000d0a:	2364      	movs	r3, #100	@ 0x64
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <Write_Data_Flash+0x60>)
 8000d10:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <Write_Data_Flash+0x68>)
 8000d12:	f005 fd77 	bl	8006804 <HAL_SPI_Transmit>
	csHIGH();
 8000d16:	2201      	movs	r2, #1
 8000d18:	2110      	movs	r1, #16
 8000d1a:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <Write_Data_Flash+0x64>)
 8000d1c:	f002 fdce 	bl	80038bc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d20:	f000 f8c6 	bl	8000eb0 <W25N_WaitForReady>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2400000d 	.word	0x2400000d
 8000d30:	240010b4 	.word	0x240010b4
 8000d34:	58020000 	.word	0x58020000
 8000d38:	240011d0 	.word	0x240011d0

08000d3c <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <Select_Page_Read+0x58>)
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <Select_Page_Read+0x5c>)
 8000d4c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <Select_Page_Read+0x5c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <Select_Page_Read+0x5c>)
 8000d5e:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <Select_Page_Read+0x5c>)
 8000d66:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <Select_Page_Read+0x60>)
 8000d6e:	f002 fda5 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000d72:	2364      	movs	r3, #100	@ 0x64
 8000d74:	2204      	movs	r2, #4
 8000d76:	4908      	ldr	r1, [pc, #32]	@ (8000d98 <Select_Page_Read+0x5c>)
 8000d78:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <Select_Page_Read+0x64>)
 8000d7a:	f005 fd43 	bl	8006804 <HAL_SPI_Transmit>
	csHIGH();
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2110      	movs	r1, #16
 8000d82:	4806      	ldr	r0, [pc, #24]	@ (8000d9c <Select_Page_Read+0x60>)
 8000d84:	f002 fd9a 	bl	80038bc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d88:	f000 f892 	bl	8000eb0 <W25N_WaitForReady>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2400000e 	.word	0x2400000e
 8000d98:	240010b4 	.word	0x240010b4
 8000d9c:	58020000 	.word	0x58020000
 8000da0:	240011d0 	.word	0x240011d0

08000da4 <Block_Erase>:
	csHIGH();
}

//Erase Block where page is located
//Page_Addr-> Address to page, where the block which includes page is erased
void Block_Erase(uint16_t Page_Addr){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000dae:	f7ff fea3 	bl	8000af8 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <Block_Erase+0x5c>)
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <Block_Erase+0x60>)
 8000db8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000dba:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <Block_Erase+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	0a1b      	lsrs	r3, r3, #8
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <Block_Erase+0x60>)
 8000dca:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <Block_Erase+0x60>)
 8000dd2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <Block_Erase+0x64>)
 8000dda:	f002 fd6f 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000dde:	2364      	movs	r3, #100	@ 0x64
 8000de0:	2204      	movs	r2, #4
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <Block_Erase+0x60>)
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <Block_Erase+0x68>)
 8000de6:	f005 fd0d 	bl	8006804 <HAL_SPI_Transmit>
	csHIGH();
 8000dea:	2201      	movs	r2, #1
 8000dec:	2110      	movs	r1, #16
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <Block_Erase+0x64>)
 8000df0:	f002 fd64 	bl	80038bc <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000df4:	f000 f85c 	bl	8000eb0 <W25N_WaitForReady>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2400000b 	.word	0x2400000b
 8000e04:	240010b4 	.word	0x240010b4
 8000e08:	58020000 	.word	0x58020000
 8000e0c:	240011d0 	.word	0x240011d0

08000e10 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <delay_ns+0x48>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	0a5b      	lsrs	r3, r3, #9
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <delay_ns+0x4c>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	09db      	lsrs	r3, r3, #7
 8000e26:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000e28:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <delay_ns+0x50>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000e38:	bf00      	nop
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <delay_ns+0x50>)
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f8      	bhi.n	8000e3a <delay_ns+0x2a>
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	2400101c 	.word	0x2400101c
 8000e5c:	00044b83 	.word	0x00044b83
 8000e60:	e0001000 	.word	0xe0001000

08000e64 <USART1_Printf>:

void USART1_Printf(const char *format, ...) {
 8000e64:	b40f      	push	{r0, r1, r2, r3}
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b0a2      	sub	sp, #136	@ 0x88
 8000e6a:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000e6c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e70:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e72:	f107 0008 	add.w	r0, r7, #8
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	f007 fb71 	bl	8008564 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fa2a 	bl	80002e0 <strlen>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f107 0108 	add.w	r1, r7, #8
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <USART1_Printf+0x48>)
 8000e9a:	f006 fa56 	bl	800734a <HAL_UART_Transmit>
}
 8000e9e:	bf00      	nop
 8000ea0:	3788      	adds	r7, #136	@ 0x88
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea8:	b004      	add	sp, #16
 8000eaa:	4770      	bx	lr
 8000eac:	24001270 	.word	0x24001270

08000eb0 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8000eb4:	2064      	movs	r0, #100	@ 0x64
 8000eb6:	f7ff ffab 	bl	8000e10 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000eba:	e002      	b.n	8000ec2 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8000ebc:	2064      	movs	r0, #100	@ 0x64
 8000ebe:	f7ff ffa7 	bl	8000e10 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <W25N_WaitForReady+0x2c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe34 	bl	8000b34 <Read_Status_Register>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f2      	bne.n	8000ebc <W25N_WaitForReady+0xc>
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2400101a 	.word	0x2400101a

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 ffae 	bl	8001e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f88a 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f9e4 	bl	80012b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ef0:	f000 f98c 	bl	800120c <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8000ef4:	f000 f900 	bl	80010f8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 fdb1 	bl	8001a60 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f000 fdae 	bl	8001a60 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f04:	2002      	movs	r0, #2
 8000f06:	f000 fdab 	bl	8001a60 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 fe47 	bl	8001ba0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f12:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <main+0x104>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f18:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f1a:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <main+0x104>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f20:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <main+0x104>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <main+0x104>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <main+0x104>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f32:	492c      	ldr	r1, [pc, #176]	@ (8000fe4 <main+0x104>)
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 fec3 	bl	8001cc0 <BSP_COM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <main+0x64>
  {
    Error_Handler();
 8000f40:	f000 fa86 	bl	8001450 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <main+0x108>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <main+0x108>)
 8000f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f4e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000f50:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <main+0x10c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a25      	ldr	r2, [pc, #148]	@ (8000fec <main+0x10c>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fbe1 	bl	8000724 <Flash_Init>
  ID=Read_ID();
 8000f62:	f7ff fe47 	bl	8000bf4 <Read_ID>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a21      	ldr	r2, [pc, #132]	@ (8000ff0 <main+0x110>)
 8000f6a:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  //Read_Register();
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000f6c:	2364      	movs	r3, #100	@ 0x64
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4920      	ldr	r1, [pc, #128]	@ (8000ff4 <main+0x114>)
 8000f72:	4821      	ldr	r0, [pc, #132]	@ (8000ff8 <main+0x118>)
 8000f74:	f006 fa77 	bl	8007466 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <main+0x114>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b31      	cmp	r3, #49	@ 0x31
 8000f7e:	d105      	bne.n	8000f8c <main+0xac>
		  Read_Data_Cont(16);
 8000f80:	2010      	movs	r0, #16
 8000f82:	f7ff fd25 	bl	80009d0 <Read_Data_Cont>
		  command = 0;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <main+0x114>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <main+0x114>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b32      	cmp	r3, #50	@ 0x32
 8000f92:	d10c      	bne.n	8000fae <main+0xce>
		  Start_Flight_Recording=1;
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <main+0x11c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8000f9a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f9e:	f7ff fb8d 	bl	80006bc <CAN_SendMessage>
		  BSP_LED_Toggle(LED_GREEN);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fdd2 	bl	8001b4c <BSP_LED_Toggle>
		  command=0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <main+0x114>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <main+0x114>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b33      	cmp	r3, #51	@ 0x33
 8000fb4:	d10c      	bne.n	8000fd0 <main+0xf0>
		  Start_Flight_Recording=0;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <main+0x11c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 8000fbc:	f240 1001 	movw	r0, #257	@ 0x101
 8000fc0:	f7ff fb7c 	bl	80006bc <CAN_SendMessage>
		  BSP_LED_Toggle(LED_GREEN);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 fdc1 	bl	8001b4c <BSP_LED_Toggle>
		  command=0;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <main+0x114>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <main+0x114>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b34      	cmp	r3, #52	@ 0x34
 8000fd6:	d1c9      	bne.n	8000f6c <main+0x8c>
		  Chip_Erase();
 8000fd8:	f7ff fc98 	bl	800090c <Chip_Erase>
		  command=0;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <main+0x114>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000fe2:	e7c3      	b.n	8000f6c <main+0x8c>
 8000fe4:	24001120 	.word	0x24001120
 8000fe8:	e000edf0 	.word	0xe000edf0
 8000fec:	e0001000 	.word	0xe0001000
 8000ff0:	24001258 	.word	0x24001258
 8000ff4:	2400125c 	.word	0x2400125c
 8000ff8:	24001270 	.word	0x24001270
 8000ffc:	240010c1 	.word	0x240010c1

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b09c      	sub	sp, #112	@ 0x70
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	224c      	movs	r2, #76	@ 0x4c
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f007 fab6 	bl	8008580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2220      	movs	r2, #32
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f007 fab0 	bl	8008580 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001020:	2002      	movs	r0, #2
 8001022:	f002 fc7f 	bl	8003924 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <SystemClock_Config+0xf0>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <SystemClock_Config+0xf0>)
 8001030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001034:	6193      	str	r3, [r2, #24]
 8001036:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <SystemClock_Config+0xf0>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <SystemClock_Config+0xf4>)
 8001042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001044:	4a2b      	ldr	r2, [pc, #172]	@ (80010f4 <SystemClock_Config+0xf4>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800104c:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <SystemClock_Config+0xf4>)
 800104e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001058:	bf00      	nop
 800105a:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <SystemClock_Config+0xf0>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001066:	d1f8      	bne.n	800105a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800106c:	2301      	movs	r3, #1
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2340      	movs	r3, #64	@ 0x40
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800107c:	2304      	movs	r3, #4
 800107e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001080:	233c      	movs	r3, #60	@ 0x3c
 8001082:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001088:	230a      	movs	r3, #10
 800108a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001090:	230c      	movs	r3, #12
 8001092:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001094:	2300      	movs	r3, #0
 8001096:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fc79 	bl	8003998 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010ac:	f000 f9d0 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	233f      	movs	r3, #63	@ 0x3f
 80010b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010bc:	2308      	movs	r3, #8
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010c0:	2340      	movs	r3, #64	@ 0x40
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c4:	2340      	movs	r3, #64	@ 0x40
 80010c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ce:	2340      	movs	r3, #64	@ 0x40
 80010d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2104      	movs	r1, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f8b8 	bl	800424c <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010e2:	f000 f9b5 	bl	8001450 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3770      	adds	r7, #112	@ 0x70
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	58024800 	.word	0x58024800
 80010f4:	58000400 	.word	0x58000400

080010f8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80010fe:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <MX_FDCAN1_Init+0x108>)
 8001100:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001104:	4a3e      	ldr	r2, [pc, #248]	@ (8001200 <MX_FDCAN1_Init+0x108>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800110a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800110e:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <MX_FDCAN1_Init+0x108>)
 8001110:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800111c:	4b39      	ldr	r3, [pc, #228]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800111e:	4a3a      	ldr	r2, [pc, #232]	@ (8001208 <MX_FDCAN1_Init+0x110>)
 8001120:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001122:	4b38      	ldr	r3, [pc, #224]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001128:	4b36      	ldr	r3, [pc, #216]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800112e:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001130:	2200      	movs	r2, #0
 8001132:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001134:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001136:	2200      	movs	r2, #0
 8001138:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800113a:	4b32      	ldr	r3, [pc, #200]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800113c:	2200      	movs	r2, #0
 800113e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001140:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001142:	2201      	movs	r2, #1
 8001144:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8001146:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001148:	2202      	movs	r2, #2
 800114a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 800114c:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800114e:	2205      	movs	r2, #5
 8001150:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001152:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001154:	2202      	movs	r2, #2
 8001156:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800115a:	2201      	movs	r2, #1
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001160:	2203      	movs	r2, #3
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001166:	2204      	movs	r2, #4
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800116c:	2203      	movs	r2, #3
 800116e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001178:	2200      	movs	r2, #0
 800117a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001184:	2240      	movs	r2, #64	@ 0x40
 8001186:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800118a:	2204      	movs	r2, #4
 800118c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001190:	2200      	movs	r2, #0
 8001192:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 8001196:	2204      	movs	r2, #4
 8001198:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800119a:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 800119c:	2200      	movs	r2, #0
 800119e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011c4:	480f      	ldr	r0, [pc, #60]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011c6:	f001 f871 	bl	80022ac <HAL_FDCAN_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80011d0:	f000 f93e 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80011d4:	480b      	ldr	r0, [pc, #44]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011d6:	f001 fa47 	bl	8002668 <HAL_FDCAN_Start>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 80011e0:	f000 f936 	bl	8001450 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80011e4:	2200      	movs	r2, #0
 80011e6:	2101      	movs	r1, #1
 80011e8:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_FDCAN1_Init+0x10c>)
 80011ea:	f001 fc2f 	bl	8002a4c <HAL_FDCAN_ActivateNotification>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80011f4:	f000 f92c 	bl	8001450 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400
 8001204:	24001130 	.word	0x24001130
 8001208:	4000a000 	.word	0x4000a000

0800120c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001212:	4a28      	ldr	r2, [pc, #160]	@ (80012b4 <MX_SPI1_Init+0xa8>)
 8001214:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001216:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001218:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800121c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001226:	2207      	movs	r2, #7
 8001228:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001238:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800123c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001244:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001264:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <MX_SPI1_Init+0xa4>)
 800129e:	f005 f98d 	bl	80065bc <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012a8:	f000 f8d2 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	240011d0 	.word	0x240011d0
 80012b4:	40013000 	.word	0x40013000

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	@ 0x30
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	4b5b      	ldr	r3, [pc, #364]	@ (800143c <MX_GPIO_Init+0x184>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d4:	4a59      	ldr	r2, [pc, #356]	@ (800143c <MX_GPIO_Init+0x184>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012de:	4b57      	ldr	r3, [pc, #348]	@ (800143c <MX_GPIO_Init+0x184>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ec:	4b53      	ldr	r3, [pc, #332]	@ (800143c <MX_GPIO_Init+0x184>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f2:	4a52      	ldr	r2, [pc, #328]	@ (800143c <MX_GPIO_Init+0x184>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fc:	4b4f      	ldr	r3, [pc, #316]	@ (800143c <MX_GPIO_Init+0x184>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <MX_GPIO_Init+0x184>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	4a4a      	ldr	r2, [pc, #296]	@ (800143c <MX_GPIO_Init+0x184>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131a:	4b48      	ldr	r3, [pc, #288]	@ (800143c <MX_GPIO_Init+0x184>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001328:	4b44      	ldr	r3, [pc, #272]	@ (800143c <MX_GPIO_Init+0x184>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	4a43      	ldr	r2, [pc, #268]	@ (800143c <MX_GPIO_Init+0x184>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001338:	4b40      	ldr	r3, [pc, #256]	@ (800143c <MX_GPIO_Init+0x184>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <MX_GPIO_Init+0x184>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	4a3b      	ldr	r2, [pc, #236]	@ (800143c <MX_GPIO_Init+0x184>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001356:	4b39      	ldr	r3, [pc, #228]	@ (800143c <MX_GPIO_Init+0x184>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <MX_GPIO_Init+0x184>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	4a34      	ldr	r2, [pc, #208]	@ (800143c <MX_GPIO_Init+0x184>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001374:	4b31      	ldr	r3, [pc, #196]	@ (800143c <MX_GPIO_Init+0x184>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001382:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <MX_GPIO_Init+0x184>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	4a2c      	ldr	r2, [pc, #176]	@ (800143c <MX_GPIO_Init+0x184>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001392:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <MX_GPIO_Init+0x184>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2110      	movs	r1, #16
 80013a4:	4826      	ldr	r0, [pc, #152]	@ (8001440 <MX_GPIO_Init+0x188>)
 80013a6:	f002 fa89 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2101      	movs	r1, #1
 80013ae:	4825      	ldr	r0, [pc, #148]	@ (8001444 <MX_GPIO_Init+0x18c>)
 80013b0:	f002 fa84 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2102      	movs	r1, #2
 80013b8:	4823      	ldr	r0, [pc, #140]	@ (8001448 <MX_GPIO_Init+0x190>)
 80013ba:	f002 fa7f 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 80013be:	2310      	movs	r3, #16
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	481a      	ldr	r0, [pc, #104]	@ (8001440 <MX_GPIO_Init+0x188>)
 80013d6:	f002 f8c1 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013da:	2301      	movs	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4814      	ldr	r0, [pc, #80]	@ (8001444 <MX_GPIO_Init+0x18c>)
 80013f2:	f002 f8b3 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001408:	2304      	movs	r3, #4
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	480e      	ldr	r0, [pc, #56]	@ (800144c <MX_GPIO_Init+0x194>)
 8001414:	f002 f8a2 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	@ (8001448 <MX_GPIO_Init+0x190>)
 8001430:	f002 f894 	bl	800355c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001434:	bf00      	nop
 8001436:	3730      	adds	r7, #48	@ 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	58024400 	.word	0x58024400
 8001440:	58020000 	.word	0x58020000
 8001444:	58021800 	.word	0x58021800
 8001448:	58021000 	.word	0x58021000
 800144c:	58020400 	.word	0x58020400

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <Error_Handler+0x10>)
 8001456:	f001 f907 	bl	8002668 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	24001130 	.word	0x24001130

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_MspInit+0x30>)
 800146c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001470:	4a08      	ldr	r2, [pc, #32]	@ (8001494 <HAL_MspInit+0x30>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_MspInit+0x30>)
 800147c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	58024400 	.word	0x58024400

08001498 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ba      	sub	sp, #232	@ 0xe8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	22c0      	movs	r2, #192	@ 0xc0
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f007 f861 	bl	8008580 <memset>
  if(hfdcan->Instance==FDCAN1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a33      	ldr	r2, [pc, #204]	@ (8001590 <HAL_FDCAN_MspInit+0xf8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d15e      	bne.n	8001586 <HAL_FDCAN_MspInit+0xee>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014d4:	2304      	movs	r3, #4
 80014d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80014d8:	230a      	movs	r3, #10
 80014da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 80014e0:	2314      	movs	r3, #20
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014e8:	23c0      	movs	r3, #192	@ 0xc0
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80014ec:	2320      	movs	r3, #32
 80014ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80014f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fa2f 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800150c:	f7ff ffa0 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_FDCAN_MspInit+0xfc>)
 8001512:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001516:	4a1f      	ldr	r2, [pc, #124]	@ (8001594 <HAL_FDCAN_MspInit+0xfc>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001520:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <HAL_FDCAN_MspInit+0xfc>)
 8001522:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_FDCAN_MspInit+0xfc>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <HAL_FDCAN_MspInit+0xfc>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_FDCAN_MspInit+0xfc>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800154c:	2303      	movs	r3, #3
 800154e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001564:	2309      	movs	r3, #9
 8001566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800156e:	4619      	mov	r1, r3
 8001570:	4809      	ldr	r0, [pc, #36]	@ (8001598 <HAL_FDCAN_MspInit+0x100>)
 8001572:	f001 fff3 	bl	800355c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2013      	movs	r0, #19
 800157c:	f000 fdff 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001580:	2013      	movs	r0, #19
 8001582:	f000 fe16 	bl	80021b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	37e8      	adds	r7, #232	@ 0xe8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	4000a000 	.word	0x4000a000
 8001594:	58024400 	.word	0x58024400
 8001598:	58020c00 	.word	0x58020c00

0800159c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0bc      	sub	sp, #240	@ 0xf0
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	22c0      	movs	r2, #192	@ 0xc0
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f006 ffdf 	bl	8008580 <memset>
  if(hspi->Instance==SPI1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a38      	ldr	r2, [pc, #224]	@ (80016a8 <HAL_SPI_MspInit+0x10c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d168      	bne.n	800169e <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015d8:	2300      	movs	r3, #0
 80015da:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 f9bf 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80015ec:	f7ff ff30 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f0:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 80015f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015f6:	4a2d      	ldr	r2, [pc, #180]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 80015f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001600:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 8001602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a25      	ldr	r2, [pc, #148]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_SPI_MspInit+0x110>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800164a:	2360      	movs	r3, #96	@ 0x60
 800164c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001662:	2305      	movs	r3, #5
 8001664:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800166c:	4619      	mov	r1, r3
 800166e:	4810      	ldr	r0, [pc, #64]	@ (80016b0 <HAL_SPI_MspInit+0x114>)
 8001670:	f001 ff74 	bl	800355c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001674:	2320      	movs	r3, #32
 8001676:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800168c:	2305      	movs	r3, #5
 800168e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001696:	4619      	mov	r1, r3
 8001698:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <HAL_SPI_MspInit+0x118>)
 800169a:	f001 ff5f 	bl	800355c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800169e:	bf00      	nop
 80016a0:	37f0      	adds	r7, #240	@ 0xf0
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40013000 	.word	0x40013000
 80016ac:	58024400 	.word	0x58024400
 80016b0:	58020000 	.word	0x58020000
 80016b4:	58020400 	.word	0x58020400

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	GPIOG->ODR^=GPIO_PIN_0;
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <SysTick_Handler+0x34>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Handler+0x34>)
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	6153      	str	r3, [r2, #20]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 fc04 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <SysTick_Handler+0x38>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <SysTick_Handler+0x28>
	  CLK_SIM++;
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <SysTick_Handler+0x3c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <SysTick_Handler+0x3c>)
 8001730:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001732:	e002      	b.n	800173a <SysTick_Handler+0x2e>
	  CLK_SIM=0;
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <SysTick_Handler+0x3c>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	58021800 	.word	0x58021800
 8001744:	240010c1 	.word	0x240010c1
 8001748:	24001260 	.word	0x24001260

0800174c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <FDCAN1_IT0_IRQHandler+0x10>)
 8001752:	f001 f9f5 	bl	8002b40 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	24001130 	.word	0x24001130

08001760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001764:	2000      	movs	r0, #0
 8001766:	f000 fa8d 	bl	8001c84 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 800177a:	e03f      	b.n	80017fc <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xFF;
 800177c:	23ff      	movs	r3, #255	@ 0xff
 800177e:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8001780:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	3301      	adds	r3, #1
 800178a:	b292      	uxth	r2, r2
 800178c:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 8001794:	4b21      	ldr	r3, [pc, #132]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017a2:	78db      	ldrb	r3, [r3, #3]
 80017a4:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 80017a6:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017ae:	795b      	ldrb	r3, [r3, #5]
 80017b0:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 80017b2:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017b4:	799b      	ldrb	r3, [r3, #6]
 80017b6:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017ba:	79db      	ldrb	r3, [r3, #7]
 80017bc:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0e1b      	lsrs	r3, r3, #24
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	75bb      	strb	r3, [r7, #22]

		//Stop bytez
		Temp[15]=0x00;
 80017e4:	2300      	movs	r3, #0
 80017e6:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	2110      	movs	r1, #16
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe ffe4 	bl	80007c4 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <HAL_FDCAN_RxFifo0Callback+0xac>)
 80017fe:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001800:	2140      	movs	r1, #64	@ 0x40
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001804:	f000 ffb6 	bl	8002774 <HAL_FDCAN_GetRxMessage>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0b6      	beq.n	800177c <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	240010d4 	.word	0x240010d4
 800181c:	240010c4 	.word	0x240010c4
 8001820:	24001260 	.word	0x24001260
 8001824:	240010c1 	.word	0x240010c1
 8001828:	24001130 	.word	0x24001130

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f006 fe98 	bl	8008590 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	24080000 	.word	0x24080000
 800188c:	00000400 	.word	0x00000400
 8001890:	24001264 	.word	0x24001264
 8001894:	24001450 	.word	0x24001450

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800189c:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <SystemInit+0x114>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a2:	4a42      	ldr	r2, [pc, #264]	@ (80019ac <SystemInit+0x114>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ac:	4b40      	ldr	r3, [pc, #256]	@ (80019b0 <SystemInit+0x118>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d807      	bhi.n	80018c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b8:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <SystemInit+0x118>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 030f 	bic.w	r3, r3, #15
 80018c0:	4a3b      	ldr	r2, [pc, #236]	@ (80019b0 <SystemInit+0x118>)
 80018c2:	f043 0307 	orr.w	r3, r3, #7
 80018c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c8:	4b3a      	ldr	r3, [pc, #232]	@ (80019b4 <SystemInit+0x11c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a39      	ldr	r2, [pc, #228]	@ (80019b4 <SystemInit+0x11c>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d4:	4b37      	ldr	r3, [pc, #220]	@ (80019b4 <SystemInit+0x11c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018da:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <SystemInit+0x11c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4935      	ldr	r1, [pc, #212]	@ (80019b4 <SystemInit+0x11c>)
 80018e0:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <SystemInit+0x120>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e6:	4b32      	ldr	r3, [pc, #200]	@ (80019b0 <SystemInit+0x118>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f2:	4b2f      	ldr	r3, [pc, #188]	@ (80019b0 <SystemInit+0x118>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	4a2d      	ldr	r2, [pc, #180]	@ (80019b0 <SystemInit+0x118>)
 80018fc:	f043 0307 	orr.w	r3, r3, #7
 8001900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001902:	4b2c      	ldr	r3, [pc, #176]	@ (80019b4 <SystemInit+0x11c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001908:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <SystemInit+0x11c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800190e:	4b29      	ldr	r3, [pc, #164]	@ (80019b4 <SystemInit+0x11c>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001914:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <SystemInit+0x11c>)
 8001916:	4a29      	ldr	r2, [pc, #164]	@ (80019bc <SystemInit+0x124>)
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800191a:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <SystemInit+0x11c>)
 800191c:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <SystemInit+0x128>)
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <SystemInit+0x11c>)
 8001922:	4a28      	ldr	r2, [pc, #160]	@ (80019c4 <SystemInit+0x12c>)
 8001924:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001926:	4b23      	ldr	r3, [pc, #140]	@ (80019b4 <SystemInit+0x11c>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800192c:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <SystemInit+0x11c>)
 800192e:	4a25      	ldr	r2, [pc, #148]	@ (80019c4 <SystemInit+0x12c>)
 8001930:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001932:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <SystemInit+0x11c>)
 8001934:	2200      	movs	r2, #0
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001938:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <SystemInit+0x11c>)
 800193a:	4a22      	ldr	r2, [pc, #136]	@ (80019c4 <SystemInit+0x12c>)
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800193e:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <SystemInit+0x11c>)
 8001940:	2200      	movs	r2, #0
 8001942:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <SystemInit+0x11c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1a      	ldr	r2, [pc, #104]	@ (80019b4 <SystemInit+0x11c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001950:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <SystemInit+0x11c>)
 8001952:	2200      	movs	r2, #0
 8001954:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <SystemInit+0x130>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <SystemInit+0x134>)
 800195c:	4013      	ands	r3, r2
 800195e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001962:	d202      	bcs.n	800196a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <SystemInit+0x138>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <SystemInit+0x11c>)
 800196c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d113      	bne.n	80019a0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <SystemInit+0x11c>)
 800197a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800197e:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <SystemInit+0x11c>)
 8001980:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001984:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <SystemInit+0x13c>)
 800198a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800198e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <SystemInit+0x11c>)
 8001992:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001996:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <SystemInit+0x11c>)
 8001998:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800199c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	52002000 	.word	0x52002000
 80019b4:	58024400 	.word	0x58024400
 80019b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019bc:	02020200 	.word	0x02020200
 80019c0:	01ff0000 	.word	0x01ff0000
 80019c4:	01010280 	.word	0x01010280
 80019c8:	5c001000 	.word	0x5c001000
 80019cc:	ffff0000 	.word	0xffff0000
 80019d0:	51008108 	.word	0x51008108
 80019d4:	52004000 	.word	0x52004000

080019d8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <ExitRun0Mode+0x2c>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <ExitRun0Mode+0x2c>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80019e8:	bf00      	nop
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <ExitRun0Mode+0x2c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f9      	beq.n	80019ea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	58024800 	.word	0x58024800

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a08:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a44 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a0c:	f7ff ffe4 	bl	80019d8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a10:	f7ff ff42 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f006 fdaf 	bl	800859c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff fa4f 	bl	8000ee0 <main>
  bx  lr
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a4c:	24001098 	.word	0x24001098
  ldr r2, =_sidata
 8001a50:	08008ff4 	.word	0x08008ff4
  ldr r2, =_sbss
 8001a54:	24001098 	.word	0x24001098
  ldr r4, =_ebss
 8001a58:	24001450 	.word	0x24001450

08001a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC3_IRQHandler>
	...

08001a60 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	@ 0x30
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <BSP_LED_Init+0x28>
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d006      	beq.n	8001a88 <BSP_LED_Init+0x28>
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d003      	beq.n	8001a88 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a80:	f06f 0301 	mvn.w	r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a86:	e055      	b.n	8001b34 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10f      	bne.n	8001aae <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	4a2a      	ldr	r2, [pc, #168]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	e021      	b.n	8001af2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10f      	bne.n	8001ad4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aba:	4a21      	ldr	r2, [pc, #132]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	e00e      	b.n	8001af2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ada:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <BSP_LED_Init+0xe0>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4a13      	ldr	r2, [pc, #76]	@ (8001b44 <BSP_LED_Init+0xe4>)
 8001af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001afa:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b48 <BSP_LED_Init+0xe8>)
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	f107 0218 	add.w	r2, r7, #24
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fd20 	bl	800355c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <BSP_LED_Init+0xe8>)
 8001b20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <BSP_LED_Init+0xe4>)
 8001b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f001 fec4 	bl	80038bc <HAL_GPIO_WritePin>
  }

  return ret;
 8001b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3730      	adds	r7, #48	@ 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	58024400 	.word	0x58024400
 8001b44:	08008f7c 	.word	0x08008f7c
 8001b48:	24001028 	.word	0x24001028

08001b4c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <BSP_LED_Toggle+0x28>
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d006      	beq.n	8001b74 <BSP_LED_Toggle+0x28>
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d003      	beq.n	8001b74 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b6c:	f06f 0301 	mvn.w	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e00b      	b.n	8001b8c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4a08      	ldr	r2, [pc, #32]	@ (8001b98 <BSP_LED_Toggle+0x4c>)
 8001b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4907      	ldr	r1, [pc, #28]	@ (8001b9c <BSP_LED_Toggle+0x50>)
 8001b80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f001 feb1 	bl	80038ee <HAL_GPIO_TogglePin>
  }

  return ret;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	24001028 	.word	0x24001028
 8001b9c:	08008f7c 	.word	0x08008f7c

08001ba0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c6c <BSP_PB_Init+0xcc>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c6c <BSP_PB_Init+0xcc>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <BSP_PB_Init+0xcc>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001bce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <BSP_PB_Init+0xd0>)
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 fcb1 	bl	800355c <HAL_GPIO_Init>
 8001bfa:	e031      	b.n	8001c60 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001bfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c00:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <BSP_PB_Init+0xd0>)
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	f107 020c 	add.w	r2, r7, #12
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 fca3 	bl	800355c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <BSP_PB_Init+0xd4>)
 8001c1c:	441a      	add	r2, r3
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4915      	ldr	r1, [pc, #84]	@ (8001c78 <BSP_PB_Init+0xd8>)
 8001c22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c26:	4619      	mov	r1, r3
 8001c28:	4610      	mov	r0, r2
 8001c2a:	f000 fafb 	bl	8002224 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <BSP_PB_Init+0xd4>)
 8001c34:	1898      	adds	r0, r3, r2
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4a10      	ldr	r2, [pc, #64]	@ (8001c7c <BSP_PB_Init+0xdc>)
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f000 fad0 	bl	80021e6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001c46:	2028      	movs	r0, #40	@ 0x28
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <BSP_PB_Init+0xe0>)
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	f000 fa93 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c58:	2328      	movs	r3, #40	@ 0x28
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 faa9 	bl	80021b2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	24001034 	.word	0x24001034
 8001c74:	24001268 	.word	0x24001268
 8001c78:	08008f84 	.word	0x08008f84
 8001c7c:	24001038 	.word	0x24001038
 8001c80:	2400103c 	.word	0x2400103c

08001c84 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <BSP_PB_IRQHandler+0x20>)
 8001c94:	4413      	add	r3, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fad8 	bl	800224c <HAL_EXTI_IRQHandler>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	24001268 	.word	0x24001268

08001ca8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cd6:	f06f 0301 	mvn.w	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e018      	b.n	8001d10 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2294      	movs	r2, #148	@ 0x94
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8001d1c <BSP_COM_Init+0x5c>)
 8001ce8:	4413      	add	r3, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f852 	bl	8001d94 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2294      	movs	r2, #148	@ 0x94
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <BSP_COM_Init+0x5c>)
 8001cfa:	4413      	add	r3, r2
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f80e 	bl	8001d20 <MX_USART3_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d0a:	f06f 0303 	mvn.w	r3, #3
 8001d0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001d10:	68fb      	ldr	r3, [r7, #12]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	24001270 	.word	0x24001270

08001d20 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <MX_USART3_Init+0x60>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	895b      	ldrh	r3, [r3, #10]
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	891b      	ldrh	r3, [r3, #8]
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	899b      	ldrh	r3, [r3, #12]
 8001d60:	461a      	mov	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d6c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f005 fa91 	bl	8007296 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	24001024 	.word	0x24001024

08001d84 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ff8d 	bl	8001ca8 <BSP_PB_Callback>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d9c:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da2:	4a26      	ldr	r2, [pc, #152]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dac:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001dd8:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dde:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <COM1_MspInit+0xa8>)
 8001dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e00:	2302      	movs	r3, #2
 8001e02:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	480b      	ldr	r0, [pc, #44]	@ (8001e40 <COM1_MspInit+0xac>)
 8001e14:	f001 fba2 	bl	800355c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e1c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001e22:	2307      	movs	r3, #7
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <COM1_MspInit+0xac>)
 8001e2e:	f001 fb95 	bl	800355c <HAL_GPIO_Init>
}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58020c00 	.word	0x58020c00

08001e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f000 f98c 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e50:	f002 fbb2 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_Init+0x68>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	4913      	ldr	r1, [pc, #76]	@ (8001eb0 <HAL_Init+0x6c>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <HAL_Init+0x68>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb0 <HAL_Init+0x6c>)
 8001e78:	5cd3      	ldrb	r3, [r2, r3]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb4 <HAL_Init+0x70>)
 8001e86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e88:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <HAL_Init+0x74>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 f814 	bl	8001ebc <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e002      	b.n	8001ea4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9e:	f7ff fae1 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	08008f6c 	.word	0x08008f6c
 8001eb4:	24001020 	.word	0x24001020
 8001eb8:	2400101c 	.word	0x2400101c

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <HAL_InitTick+0x60>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e021      	b.n	8001f14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <HAL_InitTick+0x64>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_InitTick+0x60>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f971 	bl	80021ce <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f93b 	bl	800217e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_InitTick+0x68>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	24001044 	.word	0x24001044
 8001f20:	2400101c 	.word	0x2400101c
 8001f24:	24001040 	.word	0x24001040

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	24001044 	.word	0x24001044
 8001f4c:	24001304 	.word	0x24001304

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	24001304 	.word	0x24001304

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	24001044 	.word	0x24001044

08001fb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fb4:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <HAL_GetREVID+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	5c001000 	.word	0x5c001000

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <__NVIC_SetPriorityGrouping+0x40>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00
 800200c:	05fa0000 	.word	0x05fa0000

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	@ (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	@ (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff29 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff40 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff90 	bl	80020bc <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5f 	bl	8002068 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff33 	bl	800202c <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa4 	bl	8002124 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80021e6:	b480      	push	{r7}
 80021e8:	b087      	sub	sp, #28
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	460b      	mov	r3, r1
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00a      	b.n	8002218 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	605a      	str	r2, [r3, #4]
      break;
 800220e:	e002      	b.n	8002216 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
      break;
 8002214:	bf00      	nop
  }

  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e003      	b.n	8002240 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800223e:	2300      	movs	r3, #0
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	2201      	movs	r2, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	011a      	lsls	r2, r3, #4
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_EXTI_IRQHandler+0x5c>)
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4798      	blx	r3
    }
  }
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	58000088 	.word	0x58000088

080022ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b098      	sub	sp, #96	@ 0x60
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80022b4:	4a84      	ldr	r2, [pc, #528]	@ (80024c8 <HAL_FDCAN_Init+0x21c>)
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	4611      	mov	r1, r2
 80022bc:	224c      	movs	r2, #76	@ 0x4c
 80022be:	4618      	mov	r0, r3
 80022c0:	f006 f992 	bl	80085e8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c6      	b.n	800265c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7e      	ldr	r2, [pc, #504]	@ (80024cc <HAL_FDCAN_Init+0x220>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d106      	bne.n	80022e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff f8cc 	bl	8001498 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0210 	bic.w	r2, r2, #16
 800230e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002310:	f7ff fe1e 	bl	8001f50 <HAL_GetTick>
 8002314:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002316:	e014      	b.n	8002342 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002318:	f7ff fe1a 	bl	8001f50 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b0a      	cmp	r3, #10
 8002324:	d90d      	bls.n	8002342 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2203      	movs	r2, #3
 800233a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e18c      	b.n	800265c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d0e3      	beq.n	8002318 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002360:	f7ff fdf6 	bl	8001f50 <HAL_GetTick>
 8002364:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002366:	e014      	b.n	8002392 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002368:	f7ff fdf2 	bl	8001f50 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b0a      	cmp	r3, #10
 8002374:	d90d      	bls.n	8002392 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e164      	b.n	800265c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0e3      	beq.n	8002368 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0202 	orr.w	r2, r2, #2
 80023ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7c1b      	ldrb	r3, [r3, #16]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d108      	bne.n	80023ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c6:	619a      	str	r2, [r3, #24]
 80023c8:	e007      	b.n	80023da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7c5b      	ldrb	r3, [r3, #17]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023f0:	619a      	str	r2, [r3, #24]
 80023f2:	e007      	b.n	8002404 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002402:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7c9b      	ldrb	r3, [r3, #18]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800241a:	619a      	str	r2, [r3, #24]
 800241c:	e007      	b.n	800242e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800242c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002452:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0210 	bic.w	r2, r2, #16
 8002462:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0204 	orr.w	r2, r2, #4
 800247a:	619a      	str	r2, [r3, #24]
 800247c:	e030      	b.n	80024e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02c      	beq.n	80024e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d020      	beq.n	80024d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800249c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0210 	orr.w	r2, r2, #16
 80024ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d114      	bne.n	80024e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	619a      	str	r2, [r3, #24]
 80024c6:	e00b      	b.n	80024e0 <HAL_FDCAN_Init+0x234>
 80024c8:	08008f20 	.word	0x08008f20
 80024cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0220 	orr.w	r2, r2, #32
 80024de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	3b01      	subs	r3, #1
 8002502:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002508:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800250a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002514:	d115      	bne.n	8002542 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	3b01      	subs	r3, #1
 8002522:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002524:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	3b01      	subs	r3, #1
 800252c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800252e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	3b01      	subs	r3, #1
 8002538:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800253e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002540:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002568:	4413      	add	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d011      	beq.n	8002592 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002576:	f023 0107 	bic.w	r1, r3, #7
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	3360      	adds	r3, #96	@ 0x60
 8002582:	443b      	add	r3, r7
 8002584:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d011      	beq.n	80025be <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80025a2:	f023 0107 	bic.w	r1, r3, #7
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	3360      	adds	r3, #96	@ 0x60
 80025ae:	443b      	add	r3, r7
 80025b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d012      	beq.n	80025ec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80025ce:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	3360      	adds	r3, #96	@ 0x60
 80025da:	443b      	add	r3, r7
 80025dc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80025e0:	011a      	lsls	r2, r3, #4
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80025fc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3360      	adds	r3, #96	@ 0x60
 8002608:	443b      	add	r3, r7
 800260a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a11      	ldr	r2, [pc, #68]	@ (8002664 <HAL_FDCAN_Init+0x3b8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d107      	bne.n	8002634 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f022 0203 	bic.w	r2, r2, #3
 8002632:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fd81 	bl	8003154 <FDCAN_CalcultateRamBlockAddresses>
 8002652:	4603      	mov	r3, r0
 8002654:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002658:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800265c:	4618      	mov	r0, r3
 800265e:	3760      	adds	r7, #96	@ 0x60
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	4000a000 	.word	0x4000a000

08002668 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d111      	bne.n	80026a0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e008      	b.n	80026b2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026a6:	f043 0204 	orr.w	r2, r3, #4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d141      	bne.n	800275a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026de:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e038      	b.n	800276c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002710:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e026      	b.n	800276c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fe93 	bl	8003460 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2101      	movs	r1, #1
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800274a:	2201      	movs	r2, #1
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e008      	b.n	800276c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002760:	f043 0208 	orr.w	r2, r3, #8
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
  }
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002774:	b480      	push	{r7}
 8002776:	b08b      	sub	sp, #44	@ 0x2c
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800278c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800278e:	7efb      	ldrb	r3, [r7, #27]
 8002790:	2b02      	cmp	r3, #2
 8002792:	f040 8149 	bne.w	8002a28 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b40      	cmp	r3, #64	@ 0x40
 800279a:	d14c      	bne.n	8002836 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80027a4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e13c      	b.n	8002a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e12a      	b.n	8002a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f4:	d10a      	bne.n	800280c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80027fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002806:	d101      	bne.n	800280c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002808:	2301      	movs	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	69f9      	ldr	r1, [r7, #28]
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
 8002834:	e068      	b.n	8002908 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b41      	cmp	r3, #65	@ 0x41
 800283a:	d14c      	bne.n	80028d6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002844:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0ec      	b.n	8002a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002876:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0da      	b.n	8002a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800288c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002894:	d10a      	bne.n	80028ac <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800289e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028a6:	d101      	bne.n	80028ac <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80028a8:	2301      	movs	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	69f9      	ldr	r1, [r7, #28]
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d4:	e018      	b.n	8002908 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d309      	bcc.n	80028f4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0a2      	b.n	8002a3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0c9b      	lsrs	r3, r3, #18
 8002922:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e005      	b.n	8002938 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	3304      	adds	r3, #4
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f003 020f 	and.w	r2, r3, #15
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e1b      	lsrs	r3, r3, #24
 800298c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0fda      	lsrs	r2, r3, #31
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	3304      	adds	r3, #4
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	e00a      	b.n	80029c4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	441a      	add	r2, r3
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	440b      	add	r3, r1
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	3301      	adds	r3, #1
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	461a      	mov	r2, r3
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d3ec      	bcc.n	80029ae <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b40      	cmp	r3, #64	@ 0x40
 80029d8:	d105      	bne.n	80029e6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80029e4:	e01e      	b.n	8002a24 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b41      	cmp	r3, #65	@ 0x41
 80029ea:	d105      	bne.n	80029f8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80029f6:	e015      	b.n	8002a24 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b1f      	cmp	r3, #31
 80029fc:	d808      	bhi.n	8002a10 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002a0e:	e009      	b.n	8002a24 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e008      	b.n	8002a3a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a2e:	f043 0208 	orr.w	r2, r3, #8
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	372c      	adds	r7, #44	@ 0x2c
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	08008f88 	.word	0x08008f88

08002a4c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002a5e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d002      	beq.n	8002a6c <HAL_FDCAN_ActivateNotification+0x20>
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d155      	bne.n	8002b18 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a8a:	e014      	b.n	8002ab6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d108      	bne.n	8002aae <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0202 	orr.w	r2, r2, #2
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aac:	e003      	b.n	8002ab6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <HAL_FDCAN_ActivateNotification+0xec>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	430b      	orrs	r3, r1
 8002b04:	6553      	str	r3, [r2, #84]	@ 0x54
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <HAL_FDCAN_ActivateNotification+0xf0>)
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	0f9b      	lsrs	r3, r3, #30
 8002b0e:	490b      	ldr	r1, [pc, #44]	@ (8002b3c <HAL_FDCAN_ActivateNotification+0xf0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e008      	b.n	8002b2a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	3fcfffff 	.word	0x3fcfffff
 8002b3c:	4000a800 	.word	0x4000a800

08002b40 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b096      	sub	sp, #88	@ 0x58
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002b48:	4b9a      	ldr	r3, [pc, #616]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	079b      	lsls	r3, r3, #30
 8002b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002b50:	4b98      	ldr	r3, [pc, #608]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	079b      	lsls	r3, r3, #30
 8002b56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b58:	4013      	ands	r3, r2
 8002b5a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b62:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002b66:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b70:	4013      	ands	r3, r2
 8002b72:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b88:	4013      	ands	r3, r2
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002baa:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8002bae:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bb8:	4013      	ands	r3, r2
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8002bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c04:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c06:	4b6b      	ldr	r3, [pc, #428]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa54 	bl	80030ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c14:	0a9b      	lsrs	r3, r3, #10
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01d      	beq.n	8002c5a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	0a9b      	lsrs	r3, r3, #10
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d017      	beq.n	8002c5a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002c32:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c3e:	4013      	ands	r3, r2
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c4c:	4b59      	ldr	r3, [pc, #356]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fa07 	bl	8003068 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c66:	4b54      	ldr	r3, [pc, #336]	@ (8002db8 <HAL_FDCAN_IRQHandler+0x278>)
 8002c68:	400b      	ands	r3, r1
 8002c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c6c:	4a51      	ldr	r2, [pc, #324]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c70:	0f9b      	lsrs	r3, r3, #30
 8002c72:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002c74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9c0 	bl	8002ffc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002c88:	4b4b      	ldr	r3, [pc, #300]	@ (8002db8 <HAL_FDCAN_IRQHandler+0x278>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c8e:	4a49      	ldr	r2, [pc, #292]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c92:	0f9b      	lsrs	r3, r3, #30
 8002c94:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002c96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f9ba 	bl	8003012 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002caa:	4b43      	ldr	r3, [pc, #268]	@ (8002db8 <HAL_FDCAN_IRQHandler+0x278>)
 8002cac:	400b      	ands	r3, r1
 8002cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cb0:	4a40      	ldr	r2, [pc, #256]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cb4:	0f9b      	lsrs	r3, r3, #30
 8002cb6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002cb8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe fd58 	bl	8001770 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <HAL_FDCAN_IRQHandler+0x278>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cd2:	4a38      	ldr	r2, [pc, #224]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd6:	0f9b      	lsrs	r3, r3, #30
 8002cd8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002cda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f9a3 	bl	8003028 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce4:	0adb      	lsrs	r3, r3, #11
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	0adb      	lsrs	r3, r3, #11
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d02:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d04:	4b2b      	ldr	r3, [pc, #172]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f997 	bl	800303e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d12:	0a5b      	lsrs	r3, r3, #9
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01d      	beq.n	8002d58 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1e:	0a5b      	lsrs	r3, r3, #9
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d017      	beq.n	8002d58 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d48:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002d50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f97d 	bl	8003052 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5a:	0cdb      	lsrs	r3, r3, #19
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	0cdb      	lsrs	r3, r3, #19
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002d78:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f97c 	bl	800307e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002da6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002da8:	4b02      	ldr	r3, [pc, #8]	@ (8002db4 <HAL_FDCAN_IRQHandler+0x274>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	e004      	b.n	8002dbc <HAL_FDCAN_IRQHandler+0x27c>
 8002db2:	bf00      	nop
 8002db4:	4000a800 	.word	0x4000a800
 8002db8:	3fcfffff 	.word	0x3fcfffff
 8002dbc:	f000 f969 	bl	8003092 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002de0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002de2:	4b83      	ldr	r3, [pc, #524]	@ (8002ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f95c 	bl	80030a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df0:	0c5b      	lsrs	r3, r3, #17
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	0c5b      	lsrs	r3, r3, #17
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00f      	beq.n	8002e26 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e10:	4b77      	ldr	r3, [pc, #476]	@ (8002ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e32:	4b70      	ldr	r3, [pc, #448]	@ (8002ff4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002e34:	400b      	ands	r3, r1
 8002e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e38:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e3c:	0f9b      	lsrs	r3, r3, #30
 8002e3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002e40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f94d 	bl	80030e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d011      	beq.n	8002e72 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e54:	4b67      	ldr	r3, [pc, #412]	@ (8002ff4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002e56:	400b      	ands	r3, r1
 8002e58:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e5a:	4a65      	ldr	r2, [pc, #404]	@ (8002ff0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e5e:	0f9b      	lsrs	r3, r3, #30
 8002e60:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a60      	ldr	r2, [pc, #384]	@ (8002ff8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	f040 80ac 	bne.w	8002fd6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a4 	beq.w	8002fd6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eba:	4013      	ands	r3, r2
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8002ee0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	4013      	ands	r3, r2
 8002eec:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8002ef8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f22:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002f24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8e6 	bl	80030f8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f38:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f8e6 	bl	800310e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01a      	beq.n	8002f84 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d014      	beq.n	8002f84 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f70:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2240      	movs	r2, #64	@ 0x40
 8002f78:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6939      	ldr	r1, [r7, #16]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8d0 	bl	8003124 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002f92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8d1 	bl	800313c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f874 	bl	80030ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3758      	adds	r7, #88	@ 0x58
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	4000a800 	.word	0x4000a800
 8002ff4:	3fcfffff 	.word	0x3fcfffff
 8002ff8:	4000a000 	.word	0x4000a000

08002ffc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003160:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800316a:	4ba7      	ldr	r3, [pc, #668]	@ (8003408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	0091      	lsls	r1, r2, #2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	430b      	orrs	r3, r1
 8003178:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003184:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4413      	add	r3, r2
 80031a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80031aa:	4b97      	ldr	r3, [pc, #604]	@ (8003408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	0091      	lsls	r1, r2, #2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	430b      	orrs	r3, r1
 80031b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	4413      	add	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80031ec:	4b86      	ldr	r3, [pc, #536]	@ (8003408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	0091      	lsls	r1, r2, #2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003206:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	041a      	lsls	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4413      	add	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003234:	4b74      	ldr	r3, [pc, #464]	@ (8003408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	0091      	lsls	r1, r2, #2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800324e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003256:	041a      	lsls	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4413      	add	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800327c:	4b62      	ldr	r3, [pc, #392]	@ (8003408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	0091      	lsls	r1, r2, #2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80032a8:	4b57      	ldr	r3, [pc, #348]	@ (8003408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	0091      	lsls	r1, r2, #2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032c2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	041a      	lsls	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	4413      	add	r3, r2
 80032e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80032ea:	4b47      	ldr	r3, [pc, #284]	@ (8003408 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	0091      	lsls	r1, r2, #2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003304:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	041a      	lsls	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003320:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003328:	061a      	lsls	r2, r3, #24
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003338:	4b34      	ldr	r3, [pc, #208]	@ (800340c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800333a:	4413      	add	r3, r2
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	441a      	add	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003374:	441a      	add	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	441a      	add	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d915      	bls.n	8003430 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003404:	e006      	b.n	8003414 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003406:	bf00      	nop
 8003408:	ffff0003 	.word	0xffff0003
 800340c:	10002b00 	.word	0x10002b00
 8003410:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e010      	b.n	8003452 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e005      	b.n	8003444 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3304      	adds	r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	429a      	cmp	r2, r3
 800344e:	d3f3      	bcc.n	8003438 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800347e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003486:	4313      	orrs	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e00a      	b.n	80034a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003494:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800349a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800349c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80034ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80034b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80034b8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	3304      	adds	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	3304      	adds	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e020      	b.n	800353a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3303      	adds	r3, #3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3302      	adds	r3, #2
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	440b      	add	r3, r1
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003510:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	440b      	add	r3, r1
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800351e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	440a      	add	r2, r1
 8003526:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003528:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	3304      	adds	r3, #4
 8003532:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	3304      	adds	r3, #4
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	4a06      	ldr	r2, [pc, #24]	@ (8003558 <FDCAN_CopyMessageToRAM+0xf8>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	461a      	mov	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4293      	cmp	r3, r2
 8003548:	d3d6      	bcc.n	80034f8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	3724      	adds	r7, #36	@ 0x24
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	08008f88 	.word	0x08008f88

0800355c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	@ 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800356a:	4b89      	ldr	r3, [pc, #548]	@ (8003790 <HAL_GPIO_Init+0x234>)
 800356c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800356e:	e194      	b.n	800389a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8186 	beq.w	8003894 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d005      	beq.n	80035a0 <HAL_GPIO_Init+0x44>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d130      	bne.n	8003602 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035d6:	2201      	movs	r2, #1
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0201 	and.w	r2, r3, #1
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b03      	cmp	r3, #3
 800360c:	d017      	beq.n	800363e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d123      	bne.n	8003692 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	69b9      	ldr	r1, [r7, #24]
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80e0 	beq.w	8003894 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003794 <HAL_GPIO_Init+0x238>)
 80036d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036da:	4a2e      	ldr	r2, [pc, #184]	@ (8003794 <HAL_GPIO_Init+0x238>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <HAL_GPIO_Init+0x238>)
 80036e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036f2:	4a29      	ldr	r2, [pc, #164]	@ (8003798 <HAL_GPIO_Init+0x23c>)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	220f      	movs	r2, #15
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a20      	ldr	r2, [pc, #128]	@ (800379c <HAL_GPIO_Init+0x240>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d052      	beq.n	80037c4 <HAL_GPIO_Init+0x268>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1f      	ldr	r2, [pc, #124]	@ (80037a0 <HAL_GPIO_Init+0x244>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d031      	beq.n	800378a <HAL_GPIO_Init+0x22e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <HAL_GPIO_Init+0x248>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02b      	beq.n	8003786 <HAL_GPIO_Init+0x22a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <HAL_GPIO_Init+0x24c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d025      	beq.n	8003782 <HAL_GPIO_Init+0x226>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_GPIO_Init+0x250>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01f      	beq.n	800377e <HAL_GPIO_Init+0x222>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1b      	ldr	r2, [pc, #108]	@ (80037b0 <HAL_GPIO_Init+0x254>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x21e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1a      	ldr	r2, [pc, #104]	@ (80037b4 <HAL_GPIO_Init+0x258>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x21a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a19      	ldr	r2, [pc, #100]	@ (80037b8 <HAL_GPIO_Init+0x25c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x216>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <HAL_GPIO_Init+0x260>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x212>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_GPIO_Init+0x264>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x20e>
 8003766:	2309      	movs	r3, #9
 8003768:	e02d      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 800376a:	230a      	movs	r3, #10
 800376c:	e02b      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 800376e:	2308      	movs	r3, #8
 8003770:	e029      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 8003772:	2307      	movs	r3, #7
 8003774:	e027      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 8003776:	2306      	movs	r3, #6
 8003778:	e025      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 800377a:	2305      	movs	r3, #5
 800377c:	e023      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 800377e:	2304      	movs	r3, #4
 8003780:	e021      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 8003782:	2303      	movs	r3, #3
 8003784:	e01f      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 8003786:	2302      	movs	r3, #2
 8003788:	e01d      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 800378a:	2301      	movs	r3, #1
 800378c:	e01b      	b.n	80037c6 <HAL_GPIO_Init+0x26a>
 800378e:	bf00      	nop
 8003790:	58000080 	.word	0x58000080
 8003794:	58024400 	.word	0x58024400
 8003798:	58000400 	.word	0x58000400
 800379c:	58020000 	.word	0x58020000
 80037a0:	58020400 	.word	0x58020400
 80037a4:	58020800 	.word	0x58020800
 80037a8:	58020c00 	.word	0x58020c00
 80037ac:	58021000 	.word	0x58021000
 80037b0:	58021400 	.word	0x58021400
 80037b4:	58021800 	.word	0x58021800
 80037b8:	58021c00 	.word	0x58021c00
 80037bc:	58022000 	.word	0x58022000
 80037c0:	58022400 	.word	0x58022400
 80037c4:	2300      	movs	r3, #0
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	f002 0203 	and.w	r2, r2, #3
 80037cc:	0092      	lsls	r2, r2, #2
 80037ce:	4093      	lsls	r3, r2
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d6:	4938      	ldr	r1, [pc, #224]	@ (80038b8 <HAL_GPIO_Init+0x35c>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800380a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	3301      	adds	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f ae63 	bne.w	8003570 <HAL_GPIO_Init+0x14>
  }
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	3724      	adds	r7, #36	@ 0x24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	58000400 	.word	0x58000400

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038d8:	e003      	b.n	80038e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	041a      	lsls	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	041a      	lsls	r2, r3, #16
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	43d9      	mvns	r1, r3
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	400b      	ands	r3, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d00a      	beq.n	800394e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003938:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d001      	beq.n	800394a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01f      	b.n	800398a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e01d      	b.n	800398a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800394e:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	490f      	ldr	r1, [pc, #60]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4313      	orrs	r3, r2
 800395c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800395e:	f7fe faf7 	bl	8001f50 <HAL_GetTick>
 8003962:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003964:	e009      	b.n	800397a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003966:	f7fe faf3 	bl	8001f50 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003974:	d901      	bls.n	800397a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e007      	b.n	800398a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003986:	d1ee      	bne.n	8003966 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	58024800 	.word	0x58024800

08003998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	@ 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f000 bc48 	b.w	800423c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8088 	beq.w	8003aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ba:	4b99      	ldr	r3, [pc, #612]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039c4:	4b96      	ldr	r3, [pc, #600]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d007      	beq.n	80039e0 <HAL_RCC_OscConfig+0x48>
 80039d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d2:	2b18      	cmp	r3, #24
 80039d4:	d111      	bne.n	80039fa <HAL_RCC_OscConfig+0x62>
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d10c      	bne.n	80039fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d06d      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x130>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d169      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f000 bc21 	b.w	800423c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x7a>
 8003a04:	4b86      	ldr	r3, [pc, #536]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a85      	ldr	r2, [pc, #532]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	e02e      	b.n	8003a70 <HAL_RCC_OscConfig+0xd8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x9c>
 8003a1a:	4b81      	ldr	r3, [pc, #516]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a80      	ldr	r2, [pc, #512]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b7e      	ldr	r3, [pc, #504]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xd8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0xc0>
 8003a3e:	4b78      	ldr	r3, [pc, #480]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a77      	ldr	r2, [pc, #476]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b75      	ldr	r3, [pc, #468]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a74      	ldr	r2, [pc, #464]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xd8>
 8003a58:	4b71      	ldr	r3, [pc, #452]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a70      	ldr	r2, [pc, #448]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b6e      	ldr	r3, [pc, #440]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a6d      	ldr	r2, [pc, #436]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fa6a 	bl	8001f50 <HAL_GetTick>
 8003a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe fa66 	bl	8001f50 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	@ 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e3d4      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a92:	4b63      	ldr	r3, [pc, #396]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe8>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fa56 	bl	8001f50 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fa52 	bl	8001f50 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	@ 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e3c0      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aba:	4b59      	ldr	r3, [pc, #356]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x110>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80ca 	beq.w	8003c6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad8:	4b51      	ldr	r3, [pc, #324]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ae0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_RCC_OscConfig+0x166>
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2b18      	cmp	r3, #24
 8003af2:	d156      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x20a>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d151      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afe:	4b48      	ldr	r3, [pc, #288]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x17e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e392      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b16:	4b42      	ldr	r3, [pc, #264]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0219 	bic.w	r2, r3, #25
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	493f      	ldr	r1, [pc, #252]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fe fa12 	bl	8001f50 <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b30:	f7fe fa0e 	bl	8001f50 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e37c      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b42:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	f7fe fa2f 	bl	8001fb0 <HAL_GetREVID>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d817      	bhi.n	8003b8c <HAL_RCC_OscConfig+0x1f4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d108      	bne.n	8003b76 <HAL_RCC_OscConfig+0x1de>
 8003b64:	4b2e      	ldr	r3, [pc, #184]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b74:	e07a      	b.n	8003c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	4b2a      	ldr	r3, [pc, #168]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	031b      	lsls	r3, r3, #12
 8003b84:	4926      	ldr	r1, [pc, #152]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8a:	e06f      	b.n	8003c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	4921      	ldr	r1, [pc, #132]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba0:	e064      	b.n	8003c6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d047      	beq.n	8003c3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003baa:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 0219 	bic.w	r2, r3, #25
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	491a      	ldr	r1, [pc, #104]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe f9c8 	bl	8001f50 <HAL_GetTick>
 8003bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7fe f9c4 	bl	8001f50 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e332      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd6:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be2:	f7fe f9e5 	bl	8001fb0 <HAL_GetREVID>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d819      	bhi.n	8003c24 <HAL_RCC_OscConfig+0x28c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b40      	cmp	r3, #64	@ 0x40
 8003bf6:	d108      	bne.n	8003c0a <HAL_RCC_OscConfig+0x272>
 8003bf8:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c00:	4a07      	ldr	r2, [pc, #28]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c06:	6053      	str	r3, [r2, #4]
 8003c08:	e030      	b.n	8003c6c <HAL_RCC_OscConfig+0x2d4>
 8003c0a:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	031b      	lsls	r3, r3, #12
 8003c18:	4901      	ldr	r1, [pc, #4]	@ (8003c20 <HAL_RCC_OscConfig+0x288>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
 8003c1e:	e025      	b.n	8003c6c <HAL_RCC_OscConfig+0x2d4>
 8003c20:	58024400 	.word	0x58024400
 8003c24:	4b9a      	ldr	r3, [pc, #616]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4997      	ldr	r1, [pc, #604]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
 8003c38:	e018      	b.n	8003c6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b95      	ldr	r3, [pc, #596]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a94      	ldr	r2, [pc, #592]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe f983 	bl	8001f50 <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fe f97f 	bl	8001f50 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e2ed      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c60:	4b8b      	ldr	r3, [pc, #556]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a9 	beq.w	8003dcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7a:	4b85      	ldr	r3, [pc, #532]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c84:	4b82      	ldr	r3, [pc, #520]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d007      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x308>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b18      	cmp	r3, #24
 8003c94:	d13a      	bne.n	8003d0c <HAL_RCC_OscConfig+0x374>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d135      	bne.n	8003d0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x320>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	2b80      	cmp	r3, #128	@ 0x80
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e2c1      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cb8:	f7fe f97a 	bl	8001fb0 <HAL_GetREVID>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d817      	bhi.n	8003cf6 <HAL_RCC_OscConfig+0x35e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x348>
 8003cce:	4b70      	ldr	r3, [pc, #448]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003cd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cdc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cde:	e075      	b.n	8003dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	069b      	lsls	r3, r3, #26
 8003cee:	4968      	ldr	r1, [pc, #416]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cf4:	e06a      	b.n	8003dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cf6:	4b66      	ldr	r3, [pc, #408]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	4962      	ldr	r1, [pc, #392]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d0a:	e05f      	b.n	8003dcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d042      	beq.n	8003d9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d14:	4b5e      	ldr	r3, [pc, #376]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a5d      	ldr	r2, [pc, #372]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe f916 	bl	8001f50 <HAL_GetTick>
 8003d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d28:	f7fe f912 	bl	8001f50 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e280      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d3a:	4b55      	ldr	r3, [pc, #340]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d46:	f7fe f933 	bl	8001fb0 <HAL_GetREVID>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d817      	bhi.n	8003d84 <HAL_RCC_OscConfig+0x3ec>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d108      	bne.n	8003d6e <HAL_RCC_OscConfig+0x3d6>
 8003d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d64:	4a4a      	ldr	r2, [pc, #296]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d6a:	6053      	str	r3, [r2, #4]
 8003d6c:	e02e      	b.n	8003dcc <HAL_RCC_OscConfig+0x434>
 8003d6e:	4b48      	ldr	r3, [pc, #288]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	069b      	lsls	r3, r3, #26
 8003d7c:	4944      	ldr	r1, [pc, #272]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
 8003d82:	e023      	b.n	8003dcc <HAL_RCC_OscConfig+0x434>
 8003d84:	4b42      	ldr	r3, [pc, #264]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	493f      	ldr	r1, [pc, #252]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60cb      	str	r3, [r1, #12]
 8003d98:	e018      	b.n	8003dcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe f8d3 	bl	8001f50 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dae:	f7fe f8cf 	bl	8001f50 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e23d      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dc0:	4b33      	ldr	r3, [pc, #204]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d036      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d019      	beq.n	8003e14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fe f8b0 	bl	8001f50 <HAL_GetTick>
 8003df0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe f8ac 	bl	8001f50 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e21a      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e06:	4b22      	ldr	r3, [pc, #136]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x45c>
 8003e12:	e018      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b1e      	ldr	r3, [pc, #120]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e18:	4a1d      	ldr	r2, [pc, #116]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe f896 	bl	8001f50 <HAL_GetTick>
 8003e24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe f892 	bl	8001f50 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e200      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d039      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e66:	f7fe f873 	bl	8001f50 <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e6e:	f7fe f86f 	bl	8001f50 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1dd      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e80:	4b03      	ldr	r3, [pc, #12]	@ (8003e90 <HAL_RCC_OscConfig+0x4f8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x4d6>
 8003e8c:	e01b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
 8003e8e:	bf00      	nop
 8003e90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e94:	4b9b      	ldr	r3, [pc, #620]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a9a      	ldr	r2, [pc, #616]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ea0:	f7fe f856 	bl	8001f50 <HAL_GetTick>
 8003ea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea8:	f7fe f852 	bl	8001f50 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1c0      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003eba:	4b92      	ldr	r3, [pc, #584]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8081 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8004108 <HAL_RCC_OscConfig+0x770>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a8b      	ldr	r2, [pc, #556]	@ (8004108 <HAL_RCC_OscConfig+0x770>)
 8003eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee0:	f7fe f836 	bl	8001f50 <HAL_GetTick>
 8003ee4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee8:	f7fe f832 	bl	8001f50 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	@ 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1a0      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efa:	4b83      	ldr	r3, [pc, #524]	@ (8004108 <HAL_RCC_OscConfig+0x770>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d106      	bne.n	8003f1c <HAL_RCC_OscConfig+0x584>
 8003f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	4a7c      	ldr	r2, [pc, #496]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f1a:	e02d      	b.n	8003f78 <HAL_RCC_OscConfig+0x5e0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10c      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5a6>
 8003f24:	4b77      	ldr	r3, [pc, #476]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a76      	ldr	r2, [pc, #472]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	4b74      	ldr	r3, [pc, #464]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f34:	4a73      	ldr	r2, [pc, #460]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f36:	f023 0304 	bic.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3c:	e01c      	b.n	8003f78 <HAL_RCC_OscConfig+0x5e0>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x5c8>
 8003f46:	4b6f      	ldr	r3, [pc, #444]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	f043 0304 	orr.w	r3, r3, #4
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f52:	4b6c      	ldr	r3, [pc, #432]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	4a6b      	ldr	r2, [pc, #428]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0x5e0>
 8003f60:	4b68      	ldr	r3, [pc, #416]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a67      	ldr	r2, [pc, #412]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6c:	4b65      	ldr	r3, [pc, #404]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f70:	4a64      	ldr	r2, [pc, #400]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003f72:	f023 0304 	bic.w	r3, r3, #4
 8003f76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d015      	beq.n	8003fac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fd ffe6 	bl	8001f50 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fd ffe2 	bl	8001f50 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e14e      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f9e:	4b59      	ldr	r3, [pc, #356]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ee      	beq.n	8003f88 <HAL_RCC_OscConfig+0x5f0>
 8003faa:	e014      	b.n	8003fd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fd ffd0 	bl	8001f50 <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fd ffcc 	bl	8001f50 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e138      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fca:	4b4e      	ldr	r3, [pc, #312]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ee      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 812d 	beq.w	800423a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fe0:	4b48      	ldr	r3, [pc, #288]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fe8:	2b18      	cmp	r3, #24
 8003fea:	f000 80bd 	beq.w	8004168 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	f040 809e 	bne.w	8004134 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff8:	4b42      	ldr	r3, [pc, #264]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a41      	ldr	r2, [pc, #260]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8003ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd ffa4 	bl	8001f50 <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd ffa0 	bl	8001f50 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e10e      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800401e:	4b39      	ldr	r3, [pc, #228]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800402a:	4b36      	ldr	r3, [pc, #216]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 800402c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800402e:	4b37      	ldr	r3, [pc, #220]	@ (800410c <HAL_RCC_OscConfig+0x774>)
 8004030:	4013      	ands	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800403a:	0112      	lsls	r2, r2, #4
 800403c:	430a      	orrs	r2, r1
 800403e:	4931      	ldr	r1, [pc, #196]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	628b      	str	r3, [r1, #40]	@ 0x28
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	3b01      	subs	r3, #1
 800404a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004052:	3b01      	subs	r3, #1
 8004054:	025b      	lsls	r3, r3, #9
 8004056:	b29b      	uxth	r3, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	3b01      	subs	r3, #1
 8004060:	041b      	lsls	r3, r3, #16
 8004062:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406c:	3b01      	subs	r3, #1
 800406e:	061b      	lsls	r3, r3, #24
 8004070:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004074:	4923      	ldr	r1, [pc, #140]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800407a:	4b22      	ldr	r3, [pc, #136]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	4a21      	ldr	r2, [pc, #132]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004086:	4b1f      	ldr	r3, [pc, #124]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8004088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800408a:	4b21      	ldr	r3, [pc, #132]	@ (8004110 <HAL_RCC_OscConfig+0x778>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004092:	00d2      	lsls	r2, r2, #3
 8004094:	491b      	ldr	r1, [pc, #108]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 8004096:	4313      	orrs	r3, r2
 8004098:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	f023 020c 	bic.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	4917      	ldr	r1, [pc, #92]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040ac:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	f023 0202 	bic.w	r2, r3, #2
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b8:	4912      	ldr	r1, [pc, #72]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040be:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c2:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80040e2:	4b08      	ldr	r3, [pc, #32]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	4a07      	ldr	r2, [pc, #28]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ee:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a04      	ldr	r2, [pc, #16]	@ (8004104 <HAL_RCC_OscConfig+0x76c>)
 80040f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd ff29 	bl	8001f50 <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004100:	e011      	b.n	8004126 <HAL_RCC_OscConfig+0x78e>
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400
 8004108:	58024800 	.word	0x58024800
 800410c:	fffffc0c 	.word	0xfffffc0c
 8004110:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004114:	f7fd ff1c 	bl	8001f50 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e08a      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004126:	4b47      	ldr	r3, [pc, #284]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x77c>
 8004132:	e082      	b.n	800423a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4b43      	ldr	r3, [pc, #268]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a42      	ldr	r2, [pc, #264]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 800413a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800413e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fd ff06 	bl	8001f50 <HAL_GetTick>
 8004144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004148:	f7fd ff02 	bl	8001f50 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e070      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800415a:	4b3a      	ldr	r3, [pc, #232]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x7b0>
 8004166:	e068      	b.n	800423a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004168:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800416e:	4b35      	ldr	r3, [pc, #212]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	2b01      	cmp	r3, #1
 800417a:	d031      	beq.n	80041e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f003 0203 	and.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d12a      	bne.n	80041e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d122      	bne.n	80041e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d11a      	bne.n	80041e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	0a5b      	lsrs	r3, r3, #9
 80041ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d111      	bne.n	80041e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d108      	bne.n	80041e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e02b      	b.n	800423c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80041e4:	4b17      	ldr	r3, [pc, #92]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 80041e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d01f      	beq.n	800423a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80041fa:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004206:	f7fd fea3 	bl	8001f50 <HAL_GetTick>
 800420a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800420c:	bf00      	nop
 800420e:	f7fd fe9f 	bl	8001f50 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	4293      	cmp	r3, r2
 8004218:	d0f9      	beq.n	800420e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800421a:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 800421c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <HAL_RCC_OscConfig+0x8b0>)
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004226:	00d2      	lsls	r2, r2, #3
 8004228:	4906      	ldr	r1, [pc, #24]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 800422a:	4313      	orrs	r3, r2
 800422c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800422e:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	4a04      	ldr	r2, [pc, #16]	@ (8004244 <HAL_RCC_OscConfig+0x8ac>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3730      	adds	r7, #48	@ 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	58024400 	.word	0x58024400
 8004248:	ffff0007 	.word	0xffff0007

0800424c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e19c      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b8a      	ldr	r3, [pc, #552]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d910      	bls.n	8004290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b87      	ldr	r3, [pc, #540]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 020f 	bic.w	r2, r3, #15
 8004276:	4985      	ldr	r1, [pc, #532]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b83      	ldr	r3, [pc, #524]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e184      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d908      	bls.n	80042be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042ac:	4b78      	ldr	r3, [pc, #480]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	4975      	ldr	r1, [pc, #468]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	4b70      	ldr	r3, [pc, #448]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d908      	bls.n	80042ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042da:	4b6d      	ldr	r3, [pc, #436]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	496a      	ldr	r1, [pc, #424]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	4b64      	ldr	r3, [pc, #400]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004304:	429a      	cmp	r2, r3
 8004306:	d908      	bls.n	800431a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004308:	4b61      	ldr	r3, [pc, #388]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	495e      	ldr	r1, [pc, #376]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004316:	4313      	orrs	r3, r2
 8004318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	4b59      	ldr	r3, [pc, #356]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004332:	429a      	cmp	r2, r3
 8004334:	d908      	bls.n	8004348 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004336:	4b56      	ldr	r3, [pc, #344]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4953      	ldr	r1, [pc, #332]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004344:	4313      	orrs	r3, r2
 8004346:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	4b4d      	ldr	r3, [pc, #308]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	429a      	cmp	r2, r3
 8004362:	d908      	bls.n	8004376 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f023 020f 	bic.w	r2, r3, #15
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4947      	ldr	r1, [pc, #284]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004372:	4313      	orrs	r3, r2
 8004374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d055      	beq.n	800442e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004382:	4b43      	ldr	r3, [pc, #268]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4940      	ldr	r1, [pc, #256]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004390:	4313      	orrs	r3, r2
 8004392:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d107      	bne.n	80043ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800439c:	4b3c      	ldr	r3, [pc, #240]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d121      	bne.n	80043ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0f6      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043b4:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d115      	bne.n	80043ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0ea      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043cc:	4b30      	ldr	r3, [pc, #192]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0de      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0d6      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ec:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f023 0207 	bic.w	r2, r3, #7
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4925      	ldr	r1, [pc, #148]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fd fda7 	bl	8001f50 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004404:	e00a      	b.n	800441c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004406:	f7fd fda3 	bl	8001f50 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0be      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441c:	4b1c      	ldr	r3, [pc, #112]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	429a      	cmp	r2, r3
 800442c:	d1eb      	bne.n	8004406 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	429a      	cmp	r2, r3
 8004448:	d208      	bcs.n	800445c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f023 020f 	bic.w	r2, r3, #15
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	490e      	ldr	r1, [pc, #56]	@ (8004490 <HAL_RCC_ClockConfig+0x244>)
 8004458:	4313      	orrs	r3, r2
 800445a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d214      	bcs.n	8004494 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b08      	ldr	r3, [pc, #32]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 020f 	bic.w	r2, r3, #15
 8004472:	4906      	ldr	r1, [pc, #24]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b04      	ldr	r3, [pc, #16]	@ (800448c <HAL_RCC_ClockConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e086      	b.n	800459a <HAL_RCC_ClockConfig+0x34e>
 800448c:	52002000 	.word	0x52002000
 8004490:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d010      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	4b3f      	ldr	r3, [pc, #252]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d208      	bcs.n	80044c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044b0:	4b3c      	ldr	r3, [pc, #240]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	4939      	ldr	r1, [pc, #228]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d010      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044da:	429a      	cmp	r2, r3
 80044dc:	d208      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044de:	4b31      	ldr	r3, [pc, #196]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	492e      	ldr	r1, [pc, #184]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	4b28      	ldr	r3, [pc, #160]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004508:	429a      	cmp	r2, r3
 800450a:	d208      	bcs.n	800451e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800450c:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4922      	ldr	r1, [pc, #136]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 800451a:	4313      	orrs	r3, r2
 800451c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d010      	beq.n	800454c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	4b1d      	ldr	r3, [pc, #116]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004536:	429a      	cmp	r2, r3
 8004538:	d208      	bcs.n	800454c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800453a:	4b1a      	ldr	r3, [pc, #104]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4917      	ldr	r1, [pc, #92]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 8004548:	4313      	orrs	r3, r2
 800454a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800454c:	f000 f834 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b14      	ldr	r3, [pc, #80]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	4912      	ldr	r1, [pc, #72]	@ (80045a8 <HAL_RCC_ClockConfig+0x35c>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800456a:	4b0e      	ldr	r3, [pc, #56]	@ (80045a4 <HAL_RCC_ClockConfig+0x358>)
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a0d      	ldr	r2, [pc, #52]	@ (80045a8 <HAL_RCC_ClockConfig+0x35c>)
 8004574:	5cd3      	ldrb	r3, [r2, r3]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	4a0a      	ldr	r2, [pc, #40]	@ (80045ac <HAL_RCC_ClockConfig+0x360>)
 8004582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004584:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <HAL_RCC_ClockConfig+0x364>)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800458a:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <HAL_RCC_ClockConfig+0x368>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fc94 	bl	8001ebc <HAL_InitTick>
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	58024400 	.word	0x58024400
 80045a8:	08008f6c 	.word	0x08008f6c
 80045ac:	24001020 	.word	0x24001020
 80045b0:	2400101c 	.word	0x2400101c
 80045b4:	24001040 	.word	0x24001040

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	@ 0x24
 80045bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045be:	4bb3      	ldr	r3, [pc, #716]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045c6:	2b18      	cmp	r3, #24
 80045c8:	f200 8155 	bhi.w	8004876 <HAL_RCC_GetSysClockFreq+0x2be>
 80045cc:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	08004639 	.word	0x08004639
 80045d8:	08004877 	.word	0x08004877
 80045dc:	08004877 	.word	0x08004877
 80045e0:	08004877 	.word	0x08004877
 80045e4:	08004877 	.word	0x08004877
 80045e8:	08004877 	.word	0x08004877
 80045ec:	08004877 	.word	0x08004877
 80045f0:	08004877 	.word	0x08004877
 80045f4:	0800465f 	.word	0x0800465f
 80045f8:	08004877 	.word	0x08004877
 80045fc:	08004877 	.word	0x08004877
 8004600:	08004877 	.word	0x08004877
 8004604:	08004877 	.word	0x08004877
 8004608:	08004877 	.word	0x08004877
 800460c:	08004877 	.word	0x08004877
 8004610:	08004877 	.word	0x08004877
 8004614:	08004665 	.word	0x08004665
 8004618:	08004877 	.word	0x08004877
 800461c:	08004877 	.word	0x08004877
 8004620:	08004877 	.word	0x08004877
 8004624:	08004877 	.word	0x08004877
 8004628:	08004877 	.word	0x08004877
 800462c:	08004877 	.word	0x08004877
 8004630:	08004877 	.word	0x08004877
 8004634:	0800466b 	.word	0x0800466b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004638:	4b94      	ldr	r3, [pc, #592]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004644:	4b91      	ldr	r3, [pc, #580]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	08db      	lsrs	r3, r3, #3
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	4a90      	ldr	r2, [pc, #576]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004656:	e111      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004658:	4b8d      	ldr	r3, [pc, #564]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800465a:	61bb      	str	r3, [r7, #24]
      break;
 800465c:	e10e      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800465e:	4b8d      	ldr	r3, [pc, #564]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004660:	61bb      	str	r3, [r7, #24]
      break;
 8004662:	e10b      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004664:	4b8c      	ldr	r3, [pc, #560]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004666:	61bb      	str	r3, [r7, #24]
      break;
 8004668:	e108      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800466a:	4b88      	ldr	r3, [pc, #544]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004674:	4b85      	ldr	r3, [pc, #532]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800467e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004680:	4b82      	ldr	r3, [pc, #520]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800468a:	4b80      	ldr	r3, [pc, #512]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468e:	08db      	lsrs	r3, r3, #3
 8004690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80e1 	beq.w	8004870 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	f000 8083 	beq.w	80047bc <HAL_RCC_GetSysClockFreq+0x204>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	f200 80a1 	bhi.w	8004800 <HAL_RCC_GetSysClockFreq+0x248>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x114>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d056      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046ca:	e099      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046cc:	4b6f      	ldr	r3, [pc, #444]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02d      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046d8:	4b6c      	ldr	r3, [pc, #432]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
 80046e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b62      	ldr	r3, [pc, #392]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a02 	vldr	s12, [r7, #8]
 8004716:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800489c <HAL_RCC_GetSysClockFreq+0x2e4>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004732:	e087      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80048a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b51      	ldr	r3, [pc, #324]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a02 	vldr	s12, [r7, #8]
 800475a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800489c <HAL_RCC_GetSysClockFreq+0x2e4>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004776:	e065      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80048a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b40      	ldr	r3, [pc, #256]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a02 	vldr	s12, [r7, #8]
 800479e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800489c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047ba:	e043      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80048a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ce:	4b2f      	ldr	r3, [pc, #188]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	ed97 6a02 	vldr	s12, [r7, #8]
 80047e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800489c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047fe:	e021      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80048a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	4b1e      	ldr	r3, [pc, #120]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004822:	ed97 6a02 	vldr	s12, [r7, #8]
 8004826:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800489c <HAL_RCC_GetSysClockFreq+0x2e4>
 800482a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004842:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004844:	4b11      	ldr	r3, [pc, #68]	@ (800488c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	0a5b      	lsrs	r3, r3, #9
 800484a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800484e:	3301      	adds	r3, #1
 8004850:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800485c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004868:	ee17 3a90 	vmov	r3, s15
 800486c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800486e:	e005      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
      break;
 8004874:	e002      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004876:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004878:	61bb      	str	r3, [r7, #24]
      break;
 800487a:	bf00      	nop
  }

  return sysclockfreq;
 800487c:	69bb      	ldr	r3, [r7, #24]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3724      	adds	r7, #36	@ 0x24
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	58024400 	.word	0x58024400
 8004890:	03d09000 	.word	0x03d09000
 8004894:	003d0900 	.word	0x003d0900
 8004898:	007a1200 	.word	0x007a1200
 800489c:	46000000 	.word	0x46000000
 80048a0:	4c742400 	.word	0x4c742400
 80048a4:	4a742400 	.word	0x4a742400
 80048a8:	4af42400 	.word	0x4af42400

080048ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048b2:	f7ff fe81 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 80048b6:	4602      	mov	r2, r0
 80048b8:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x50>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	490f      	ldr	r1, [pc, #60]	@ (8004900 <HAL_RCC_GetHCLKFreq+0x54>)
 80048c4:	5ccb      	ldrb	r3, [r1, r3]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	fa22 f303 	lsr.w	r3, r2, r3
 80048ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048d0:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x50>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	4a09      	ldr	r2, [pc, #36]	@ (8004900 <HAL_RCC_GetHCLKFreq+0x54>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a07      	ldr	r2, [pc, #28]	@ (8004904 <HAL_RCC_GetHCLKFreq+0x58>)
 80048e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048ea:	4a07      	ldr	r2, [pc, #28]	@ (8004908 <HAL_RCC_GetHCLKFreq+0x5c>)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048f0:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <HAL_RCC_GetHCLKFreq+0x58>)
 80048f2:	681b      	ldr	r3, [r3, #0]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	58024400 	.word	0x58024400
 8004900:	08008f6c 	.word	0x08008f6c
 8004904:	24001020 	.word	0x24001020
 8004908:	2400101c 	.word	0x2400101c

0800490c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004910:	f7ff ffcc 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4904      	ldr	r1, [pc, #16]	@ (8004934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	58024400 	.word	0x58024400
 8004934:	08008f6c 	.word	0x08008f6c

08004938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800493c:	f7ff ffb6 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b06      	ldr	r3, [pc, #24]	@ (800495c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4904      	ldr	r1, [pc, #16]	@ (8004960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	58024400 	.word	0x58024400
 8004960:	08008f6c 	.word	0x08008f6c

08004964 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b0ca      	sub	sp, #296	@ 0x128
 800496a:	af00      	add	r7, sp, #0
 800496c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004970:	2300      	movs	r3, #0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004976:	2300      	movs	r3, #0
 8004978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004988:	2500      	movs	r5, #0
 800498a:	ea54 0305 	orrs.w	r3, r4, r5
 800498e:	d049      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004996:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800499a:	d02f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800499c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049a0:	d828      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049a6:	d01a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049ac:	d822      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b6:	d007      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049b8:	e01c      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ba:	4bb8      	ldr	r3, [pc, #736]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049be:	4ab7      	ldr	r2, [pc, #732]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049c6:	e01a      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049cc:	3308      	adds	r3, #8
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 fc8f 	bl	80062f4 <RCCEx_PLL2_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049dc:	e00f      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	3328      	adds	r3, #40	@ 0x28
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 fd36 	bl	8006458 <RCCEx_PLL3_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049f2:	e004      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049fa:	e000      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a06:	4ba5      	ldr	r3, [pc, #660]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a14:	4aa1      	ldr	r2, [pc, #644]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a16:	430b      	orrs	r3, r1
 8004a18:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a1a:	e003      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004a30:	f04f 0900 	mov.w	r9, #0
 8004a34:	ea58 0309 	orrs.w	r3, r8, r9
 8004a38:	d047      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d82a      	bhi.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a44:	a201      	add	r2, pc, #4	@ (adr r2, 8004a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a61 	.word	0x08004a61
 8004a50:	08004a6f 	.word	0x08004a6f
 8004a54:	08004a85 	.word	0x08004a85
 8004a58:	08004aa3 	.word	0x08004aa3
 8004a5c:	08004aa3 	.word	0x08004aa3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a60:	4b8e      	ldr	r3, [pc, #568]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a64:	4a8d      	ldr	r2, [pc, #564]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a6c:	e01a      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	3308      	adds	r3, #8
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 fc3c 	bl	80062f4 <RCCEx_PLL2_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a82:	e00f      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	3328      	adds	r3, #40	@ 0x28
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fce3 	bl	8006458 <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a98:	e004      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aac:	4b7b      	ldr	r3, [pc, #492]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab0:	f023 0107 	bic.w	r1, r3, #7
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aba:	4a78      	ldr	r2, [pc, #480]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ac0:	e003      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004ad6:	f04f 0b00 	mov.w	fp, #0
 8004ada:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ade:	d04c      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aea:	d030      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af0:	d829      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af4:	d02d      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af8:	d825      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d018      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d821      	bhi.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004b06:	2b40      	cmp	r3, #64	@ 0x40
 8004b08:	d007      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004b0a:	e01c      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0c:	4b63      	ldr	r3, [pc, #396]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	4a62      	ldr	r2, [pc, #392]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b18:	e01c      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	3308      	adds	r3, #8
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 fbe6 	bl	80062f4 <RCCEx_PLL2_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b2e:	e011      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	3328      	adds	r3, #40	@ 0x28
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fc8d 	bl	8006458 <RCCEx_PLL3_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b44:	e006      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b4c:	e002      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	4a4c      	ldr	r2, [pc, #304]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b70:	e003      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d053      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ba2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ba6:	d035      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ba8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004bac:	d82e      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004bb2:	d031      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004bb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004bb8:	d828      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bc4:	d822      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004bca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bce:	d007      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004bd0:	e01c      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd2:	4b32      	ldr	r3, [pc, #200]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	4a31      	ldr	r2, [pc, #196]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bde:	e01c      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	3308      	adds	r3, #8
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fb83 	bl	80062f4 <RCCEx_PLL2_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bf4:	e011      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	3328      	adds	r3, #40	@ 0x28
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fc2a 	bl	8006458 <RCCEx_PLL3_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c0a:	e006      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c12:	e002      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c14:	bf00      	nop
 8004c16:	e000      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c22:	4b1e      	ldr	r3, [pc, #120]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c32:	4a1a      	ldr	r2, [pc, #104]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c38:	e003      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004c4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c52:	2300      	movs	r3, #0
 8004c54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	d056      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c6e:	d038      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c74:	d831      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c7a:	d034      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004c7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c80:	d82b      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c86:	d01d      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c8c:	d825      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d006      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c98:	e01f      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca0:	4ba2      	ldr	r3, [pc, #648]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	4aa1      	ldr	r2, [pc, #644]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cac:	e01c      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fb1c 	bl	80062f4 <RCCEx_PLL2_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cc2:	e011      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	3328      	adds	r3, #40	@ 0x28
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 fbc3 	bl	8006458 <RCCEx_PLL3_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ce0:	e002      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cf0:	4b8e      	ldr	r3, [pc, #568]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d00:	4a8a      	ldr	r2, [pc, #552]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d02:	430b      	orrs	r3, r1
 8004d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d06:	e003      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d20:	2300      	movs	r3, #0
 8004d22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004d26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	d03a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d36:	2b30      	cmp	r3, #48	@ 0x30
 8004d38:	d01f      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004d3a:	2b30      	cmp	r3, #48	@ 0x30
 8004d3c:	d819      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d00c      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d815      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d111      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d4e:	4b77      	ldr	r3, [pc, #476]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4a76      	ldr	r2, [pc, #472]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d5a:	e011      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d60:	3308      	adds	r3, #8
 8004d62:	2102      	movs	r1, #2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f001 fac5 	bl	80062f4 <RCCEx_PLL2_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d88:	4b68      	ldr	r3, [pc, #416]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d96:	4a65      	ldr	r2, [pc, #404]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004db2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	d051      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd0:	d035      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd6:	d82e      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004dd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ddc:	d031      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004dde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004de2:	d828      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de8:	d01a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dee:	d822      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df8:	d007      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004dfa:	e01c      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	4a4a      	ldr	r2, [pc, #296]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e08:	e01c      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0e:	3308      	adds	r3, #8
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fa6e 	bl	80062f4 <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e1e:	e011      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e24:	3328      	adds	r3, #40	@ 0x28
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fb15 	bl	8006458 <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e34:	e006      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e3c:	e002      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e4c:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5a:	4a34      	ldr	r2, [pc, #208]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d056      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e94:	d033      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004e96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e9a:	d82c      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ea0:	d02f      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ea2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ea6:	d826      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ea8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eac:	d02b      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004eae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eb2:	d820      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eb8:	d012      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004eba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ebe:	d81a      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d022      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec8:	d115      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	3308      	adds	r3, #8
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 fa0e 	bl	80062f4 <RCCEx_PLL2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ede:	e015      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee4:	3328      	adds	r3, #40	@ 0x28
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 fab5 	bl	8006458 <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004efc:	e006      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004efe:	bf00      	nop
 8004f00:	e004      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f02:	bf00      	nop
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f22:	4a02      	ldr	r2, [pc, #8]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d055      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f64:	d033      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f6a:	d82c      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f70:	d02f      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f76:	d826      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f7c:	d02b      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004f7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f82:	d820      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f88:	d012      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f8e:	d81a      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d022      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f98:	d115      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f9a6 	bl	80062f4 <RCCEx_PLL2_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fae:	e015      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb4:	3328      	adds	r3, #40	@ 0x28
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 fa4d 	bl	8006458 <RCCEx_PLL3_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fcc:	e006      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fce:	bf00      	nop
 8004fd0:	e004      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fe4:	4ba3      	ldr	r3, [pc, #652]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ff4:	4a9f      	ldr	r2, [pc, #636]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ffa:	e003      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005014:	2300      	movs	r3, #0
 8005016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800501a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800501e:	460b      	mov	r3, r1
 8005020:	4313      	orrs	r3, r2
 8005022:	d037      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800502e:	d00e      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005034:	d816      	bhi.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d018      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800503a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800503e:	d111      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005040:	4b8c      	ldr	r3, [pc, #560]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	4a8b      	ldr	r2, [pc, #556]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800504a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800504c:	e00f      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005052:	3308      	adds	r3, #8
 8005054:	2101      	movs	r1, #1
 8005056:	4618      	mov	r0, r3
 8005058:	f001 f94c 	bl	80062f4 <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005062:	e004      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800506a:	e000      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800506c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005076:	4b7f      	ldr	r3, [pc, #508]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	4a7b      	ldr	r2, [pc, #492]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005086:	430b      	orrs	r3, r1
 8005088:	6513      	str	r3, [r2, #80]	@ 0x50
 800508a:	e003      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80050a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80050aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d039      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d81c      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80050be:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	08005101 	.word	0x08005101
 80050c8:	080050d5 	.word	0x080050d5
 80050cc:	080050e3 	.word	0x080050e3
 80050d0:	08005101 	.word	0x08005101
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d4:	4b67      	ldr	r3, [pc, #412]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	4a66      	ldr	r2, [pc, #408]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050e0:	e00f      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e6:	3308      	adds	r3, #8
 80050e8:	2102      	movs	r1, #2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 f902 	bl	80062f4 <RCCEx_PLL2_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050f6:	e004      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050fe:	e000      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800510a:	4b5a      	ldr	r3, [pc, #360]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800510c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510e:	f023 0103 	bic.w	r1, r3, #3
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005118:	4a56      	ldr	r2, [pc, #344]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800511a:	430b      	orrs	r3, r1
 800511c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800511e:	e003      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800513e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	f000 809f 	beq.w	8005288 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800514a:	4b4b      	ldr	r3, [pc, #300]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a4a      	ldr	r2, [pc, #296]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005154:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005156:	f7fc fefb 	bl	8001f50 <HAL_GetTick>
 800515a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800515e:	e00b      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005160:	f7fc fef6 	bl	8001f50 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b64      	cmp	r3, #100	@ 0x64
 800516e:	d903      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005176:	e005      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005178:	4b3f      	ldr	r3, [pc, #252]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ed      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005188:	2b00      	cmp	r3, #0
 800518a:	d179      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800518c:	4b39      	ldr	r3, [pc, #228]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800518e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005198:	4053      	eors	r3, r2
 800519a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d015      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051a2:	4b34      	ldr	r3, [pc, #208]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ae:	4b31      	ldr	r3, [pc, #196]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	4a30      	ldr	r2, [pc, #192]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051be:	4a2d      	ldr	r2, [pc, #180]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051da:	d118      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fc feb8 	bl	8001f50 <HAL_GetTick>
 80051e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051e4:	e00d      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e6:	f7fc feb3 	bl	8001f50 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051f0:	1ad2      	subs	r2, r2, r3
 80051f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d903      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005200:	e005      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005202:	4b1c      	ldr	r3, [pc, #112]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0eb      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800520e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005212:	2b00      	cmp	r3, #0
 8005214:	d129      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800521e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005226:	d10e      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005228:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005238:	091a      	lsrs	r2, r3, #4
 800523a:	4b10      	ldr	r3, [pc, #64]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800523c:	4013      	ands	r3, r2
 800523e:	4a0d      	ldr	r2, [pc, #52]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005240:	430b      	orrs	r3, r1
 8005242:	6113      	str	r3, [r2, #16]
 8005244:	e005      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005246:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800524c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005250:	6113      	str	r3, [r2, #16]
 8005252:	4b08      	ldr	r3, [pc, #32]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005254:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800525e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005262:	4a04      	ldr	r2, [pc, #16]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005264:	430b      	orrs	r3, r1
 8005266:	6713      	str	r3, [r2, #112]	@ 0x70
 8005268:	e00e      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800526a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800526e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005272:	e009      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005274:	58024400 	.word	0x58024400
 8005278:	58024800 	.word	0x58024800
 800527c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f002 0301 	and.w	r3, r2, #1
 8005294:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800529e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f000 8089 	beq.w	80053bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80052aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052b0:	2b28      	cmp	r3, #40	@ 0x28
 80052b2:	d86b      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80052b4:	a201      	add	r2, pc, #4	@ (adr r2, 80052bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	08005395 	.word	0x08005395
 80052c0:	0800538d 	.word	0x0800538d
 80052c4:	0800538d 	.word	0x0800538d
 80052c8:	0800538d 	.word	0x0800538d
 80052cc:	0800538d 	.word	0x0800538d
 80052d0:	0800538d 	.word	0x0800538d
 80052d4:	0800538d 	.word	0x0800538d
 80052d8:	0800538d 	.word	0x0800538d
 80052dc:	08005361 	.word	0x08005361
 80052e0:	0800538d 	.word	0x0800538d
 80052e4:	0800538d 	.word	0x0800538d
 80052e8:	0800538d 	.word	0x0800538d
 80052ec:	0800538d 	.word	0x0800538d
 80052f0:	0800538d 	.word	0x0800538d
 80052f4:	0800538d 	.word	0x0800538d
 80052f8:	0800538d 	.word	0x0800538d
 80052fc:	08005377 	.word	0x08005377
 8005300:	0800538d 	.word	0x0800538d
 8005304:	0800538d 	.word	0x0800538d
 8005308:	0800538d 	.word	0x0800538d
 800530c:	0800538d 	.word	0x0800538d
 8005310:	0800538d 	.word	0x0800538d
 8005314:	0800538d 	.word	0x0800538d
 8005318:	0800538d 	.word	0x0800538d
 800531c:	08005395 	.word	0x08005395
 8005320:	0800538d 	.word	0x0800538d
 8005324:	0800538d 	.word	0x0800538d
 8005328:	0800538d 	.word	0x0800538d
 800532c:	0800538d 	.word	0x0800538d
 8005330:	0800538d 	.word	0x0800538d
 8005334:	0800538d 	.word	0x0800538d
 8005338:	0800538d 	.word	0x0800538d
 800533c:	08005395 	.word	0x08005395
 8005340:	0800538d 	.word	0x0800538d
 8005344:	0800538d 	.word	0x0800538d
 8005348:	0800538d 	.word	0x0800538d
 800534c:	0800538d 	.word	0x0800538d
 8005350:	0800538d 	.word	0x0800538d
 8005354:	0800538d 	.word	0x0800538d
 8005358:	0800538d 	.word	0x0800538d
 800535c:	08005395 	.word	0x08005395
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	3308      	adds	r3, #8
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f000 ffc3 	bl	80062f4 <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005374:	e00f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	3328      	adds	r3, #40	@ 0x28
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f001 f86a 	bl	8006458 <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800539e:	4bbf      	ldr	r3, [pc, #764]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ac:	4abb      	ldr	r2, [pc, #748]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80053b2:	e003      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f002 0302 	and.w	r3, r2, #2
 80053c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80053d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80053d6:	460b      	mov	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	d041      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d824      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005439 	.word	0x08005439
 80053f0:	08005405 	.word	0x08005405
 80053f4:	0800541b 	.word	0x0800541b
 80053f8:	08005439 	.word	0x08005439
 80053fc:	08005439 	.word	0x08005439
 8005400:	08005439 	.word	0x08005439
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005408:	3308      	adds	r3, #8
 800540a:	2101      	movs	r1, #1
 800540c:	4618      	mov	r0, r3
 800540e:	f000 ff71 	bl	80062f4 <RCCEx_PLL2_Config>
 8005412:	4603      	mov	r3, r0
 8005414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005418:	e00f      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541e:	3328      	adds	r3, #40	@ 0x28
 8005420:	2101      	movs	r1, #1
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f818 	bl	8006458 <RCCEx_PLL3_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800542e:	e004      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005436:	e000      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005442:	4b96      	ldr	r3, [pc, #600]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005446:	f023 0107 	bic.w	r1, r3, #7
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005450:	4a92      	ldr	r2, [pc, #584]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005452:	430b      	orrs	r3, r1
 8005454:	6553      	str	r3, [r2, #84]	@ 0x54
 8005456:	e003      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f002 0304 	and.w	r3, r2, #4
 800546c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005470:	2300      	movs	r3, #0
 8005472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005476:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800547a:	460b      	mov	r3, r1
 800547c:	4313      	orrs	r3, r2
 800547e:	d044      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005488:	2b05      	cmp	r3, #5
 800548a:	d825      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800548c:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054e1 	.word	0x080054e1
 8005498:	080054ad 	.word	0x080054ad
 800549c:	080054c3 	.word	0x080054c3
 80054a0:	080054e1 	.word	0x080054e1
 80054a4:	080054e1 	.word	0x080054e1
 80054a8:	080054e1 	.word	0x080054e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b0:	3308      	adds	r3, #8
 80054b2:	2101      	movs	r1, #1
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 ff1d 	bl	80062f4 <RCCEx_PLL2_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054c0:	e00f      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	3328      	adds	r3, #40	@ 0x28
 80054c8:	2101      	movs	r1, #1
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 ffc4 	bl	8006458 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054d6:	e004      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80054e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054ea:	4b6c      	ldr	r3, [pc, #432]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ee:	f023 0107 	bic.w	r1, r3, #7
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054fa:	4a68      	ldr	r2, [pc, #416]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005500:	e003      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f002 0320 	and.w	r3, r2, #32
 8005516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005524:	460b      	mov	r3, r1
 8005526:	4313      	orrs	r3, r2
 8005528:	d055      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005536:	d033      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800553c:	d82c      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005542:	d02f      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005548:	d826      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800554a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800554e:	d02b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005550:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005554:	d820      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800555a:	d012      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800555c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005560:	d81a      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d022      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800556a:	d115      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	3308      	adds	r3, #8
 8005572:	2100      	movs	r1, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f000 febd 	bl	80062f4 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005580:	e015      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	3328      	adds	r3, #40	@ 0x28
 8005588:	2102      	movs	r1, #2
 800558a:	4618      	mov	r0, r3
 800558c:	f000 ff64 	bl	8006458 <RCCEx_PLL3_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005596:	e00a      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800559e:	e006      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055a0:	bf00      	nop
 80055a2:	e004      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055a4:	bf00      	nop
 80055a6:	e002      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055b6:	4b39      	ldr	r3, [pc, #228]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	4a35      	ldr	r2, [pc, #212]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80055cc:	e003      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80055e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055e6:	2300      	movs	r3, #0
 80055e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80055ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4313      	orrs	r3, r2
 80055f4:	d058      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005602:	d033      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005604:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005608:	d82c      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560e:	d02f      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005614:	d826      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005616:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800561a:	d02b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800561c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005620:	d820      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005626:	d012      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800562c:	d81a      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d022      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005636:	d115      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	3308      	adds	r3, #8
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fe57 	bl	80062f4 <RCCEx_PLL2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800564c:	e015      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005652:	3328      	adds	r3, #40	@ 0x28
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fefe 	bl	8006458 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005662:	e00a      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800566a:	e006      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800566c:	bf00      	nop
 800566e:	e004      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005670:	bf00      	nop
 8005672:	e002      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10e      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005682:	4b06      	ldr	r3, [pc, #24]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005692:	4a02      	ldr	r2, [pc, #8]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005694:	430b      	orrs	r3, r1
 8005696:	6593      	str	r3, [r2, #88]	@ 0x58
 8005698:	e006      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800569a:	bf00      	nop
 800569c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80056b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b8:	2300      	movs	r3, #0
 80056ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80056c2:	460b      	mov	r3, r1
 80056c4:	4313      	orrs	r3, r2
 80056c6:	d055      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056d4:	d033      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80056d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056da:	d82c      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e0:	d02f      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80056e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e6:	d826      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056ec:	d02b      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80056ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056f2:	d820      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f8:	d012      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80056fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056fe:	d81a      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d022      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005708:	d115      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	3308      	adds	r3, #8
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fdee 	bl	80062f4 <RCCEx_PLL2_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800571e:	e015      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005724:	3328      	adds	r3, #40	@ 0x28
 8005726:	2102      	movs	r1, #2
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fe95 	bl	8006458 <RCCEx_PLL3_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005734:	e00a      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800573c:	e006      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800573e:	bf00      	nop
 8005740:	e004      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800574a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10b      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005754:	4ba1      	ldr	r3, [pc, #644]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005758:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800575c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005760:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005764:	4a9d      	ldr	r2, [pc, #628]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005766:	430b      	orrs	r3, r1
 8005768:	6593      	str	r3, [r2, #88]	@ 0x58
 800576a:	e003      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f002 0308 	and.w	r3, r2, #8
 8005780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005784:	2300      	movs	r3, #0
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800578a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800578e:	460b      	mov	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	d01e      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a0:	d10c      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	3328      	adds	r3, #40	@ 0x28
 80057a8:	2102      	movs	r1, #2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fe54 	bl	8006458 <RCCEx_PLL3_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057bc:	4b87      	ldr	r3, [pc, #540]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057cc:	4a83      	ldr	r2, [pc, #524]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ce:	430b      	orrs	r3, r1
 80057d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f002 0310 	and.w	r3, r2, #16
 80057de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80057ec:	460b      	mov	r3, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	d01e      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057fe:	d10c      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	3328      	adds	r3, #40	@ 0x28
 8005806:	2102      	movs	r1, #2
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fe25 	bl	8006458 <RCCEx_PLL3_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800581a:	4b70      	ldr	r3, [pc, #448]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800581c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800582a:	4a6c      	ldr	r2, [pc, #432]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800582c:	430b      	orrs	r3, r1
 800582e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800583c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005840:	2300      	movs	r3, #0
 8005842:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005846:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800584a:	460b      	mov	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	d03e      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800585c:	d022      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800585e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005862:	d81b      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586c:	d00b      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800586e:	e015      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	3308      	adds	r3, #8
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fd3b 	bl	80062f4 <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005884:	e00f      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3328      	adds	r3, #40	@ 0x28
 800588c:	2102      	movs	r1, #2
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fde2 	bl	8006458 <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80058a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058ae:	4b4b      	ldr	r3, [pc, #300]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058be:	4a47      	ldr	r2, [pc, #284]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c4:	e003      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80058da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058dc:	2300      	movs	r3, #0
 80058de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80058e4:	460b      	mov	r3, r1
 80058e6:	4313      	orrs	r3, r2
 80058e8:	d03b      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058f6:	d01f      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80058f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058fc:	d818      	bhi.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80058fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005902:	d003      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005904:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005908:	d007      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800590a:	e011      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800590c:	4b33      	ldr	r3, [pc, #204]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	4a32      	ldr	r2, [pc, #200]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005918:	e00f      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	3328      	adds	r3, #40	@ 0x28
 8005920:	2101      	movs	r1, #1
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fd98 	bl	8006458 <RCCEx_PLL3_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800592e:	e004      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005936:	e000      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800593a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10b      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005942:	4b26      	ldr	r3, [pc, #152]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005946:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005952:	4a22      	ldr	r2, [pc, #136]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005954:	430b      	orrs	r3, r1
 8005956:	6553      	str	r3, [r2, #84]	@ 0x54
 8005958:	e003      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800595e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800596e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005970:	2300      	movs	r3, #0
 8005972:	677b      	str	r3, [r7, #116]	@ 0x74
 8005974:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d034      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598c:	d007      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800598e:	e011      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	4a11      	ldr	r2, [pc, #68]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800599c:	e00e      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	3308      	adds	r3, #8
 80059a4:	2102      	movs	r1, #2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fca4 	bl	80062f4 <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059b2:	e003      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10d      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d2:	4a02      	ldr	r2, [pc, #8]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059d4:	430b      	orrs	r3, r1
 80059d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059d8:	e006      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059f6:	2300      	movs	r3, #0
 80059f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80059fe:	460b      	mov	r3, r1
 8005a00:	4313      	orrs	r3, r2
 8005a02:	d00c      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	3328      	adds	r3, #40	@ 0x28
 8005a0a:	2102      	movs	r1, #2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fd23 	bl	8006458 <RCCEx_PLL3_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d038      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a46:	d018      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a4c:	d811      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a52:	d014      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a58:	d80b      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a62:	d106      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a64:	4bc3      	ldr	r3, [pc, #780]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4ac2      	ldr	r2, [pc, #776]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a70:	e008      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a78:	e004      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a7a:	bf00      	nop
 8005a7c:	e002      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a7e:	bf00      	nop
 8005a80:	e000      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a8c:	4bb9      	ldr	r3, [pc, #740]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a9c:	4ab5      	ldr	r2, [pc, #724]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aba:	2300      	movs	r3, #0
 8005abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005abe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d009      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ac8:	4baa      	ldr	r3, [pc, #680]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005acc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad6:	4aa7      	ldr	r2, [pc, #668]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ae8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aea:	2300      	movs	r3, #0
 8005aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005af2:	460b      	mov	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	d00a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005af8:	4b9e      	ldr	r3, [pc, #632]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b08:	4a9a      	ldr	r2, [pc, #616]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005b24:	460b      	mov	r3, r1
 8005b26:	4313      	orrs	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b2a:	4b92      	ldr	r3, [pc, #584]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b38:	4a8e      	ldr	r2, [pc, #568]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d00e      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b5a:	4b86      	ldr	r3, [pc, #536]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	4a85      	ldr	r2, [pc, #532]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b64:	6113      	str	r3, [r2, #16]
 8005b66:	4b83      	ldr	r3, [pc, #524]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b68:	6919      	ldr	r1, [r3, #16]
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b72:	4a80      	ldr	r2, [pc, #512]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b86:	2300      	movs	r3, #0
 8005b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4313      	orrs	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b94:	4b77      	ldr	r3, [pc, #476]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba2:	4a74      	ldr	r2, [pc, #464]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d00a      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bd4:	4a67      	ldr	r2, [pc, #412]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	2100      	movs	r1, #0
 8005be4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	d011      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fb78 	bl	80062f4 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	2100      	movs	r1, #0
 8005c24:	6239      	str	r1, [r7, #32]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d011      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fb58 	bl	80062f4 <RCCEx_PLL2_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	2100      	movs	r1, #0
 8005c64:	61b9      	str	r1, [r7, #24]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c70:	460b      	mov	r3, r1
 8005c72:	4313      	orrs	r3, r2
 8005c74:	d011      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fb38 	bl	80062f4 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	6139      	str	r1, [r7, #16]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	d011      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	3328      	adds	r3, #40	@ 0x28
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fbca 	bl	8006458 <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	d011      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	3328      	adds	r3, #40	@ 0x28
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fbaa 	bl	8006458 <RCCEx_PLL3_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	2100      	movs	r1, #0
 8005d24:	6039      	str	r1, [r7, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d011      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	3328      	adds	r3, #40	@ 0x28
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fb8a 	bl	8006458 <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005d5a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e000      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d74:	58024400 	.word	0x58024400

08005d78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d7c:	f7fe fd96 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 8005d80:	4602      	mov	r2, r0
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	091b      	lsrs	r3, r3, #4
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	4904      	ldr	r1, [pc, #16]	@ (8005da0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d8e:	5ccb      	ldrb	r3, [r1, r3]
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	58024400 	.word	0x58024400
 8005da0:	08008f6c 	.word	0x08008f6c

08005da4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	@ 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dac:	4ba1      	ldr	r3, [pc, #644]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005db6:	4b9f      	ldr	r3, [pc, #636]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dba:	0b1b      	lsrs	r3, r3, #12
 8005dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	091b      	lsrs	r3, r3, #4
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005dce:	4b99      	ldr	r3, [pc, #612]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd2:	08db      	lsrs	r3, r3, #3
 8005dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8111 	beq.w	8006014 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	f000 8083 	beq.w	8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	f200 80a1 	bhi.w	8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d056      	beq.n	8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e0e:	e099      	b.n	8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e10:	4b88      	ldr	r3, [pc, #544]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02d      	beq.n	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e1c:	4b85      	ldr	r3, [pc, #532]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	08db      	lsrs	r3, r3, #3
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	4a84      	ldr	r2, [pc, #528]	@ (8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e46:	4b7b      	ldr	r3, [pc, #492]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e76:	e087      	b.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eba:	e065      	b.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ece:	4b59      	ldr	r3, [pc, #356]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005efe:	e043      	b.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f12:	4b48      	ldr	r3, [pc, #288]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f42:	e021      	b.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f56:	4b37      	ldr	r3, [pc, #220]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f88:	4b2a      	ldr	r3, [pc, #168]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	0a5b      	lsrs	r3, r3, #9
 8005f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fae:	ee17 2a90 	vmov	r2, s15
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fba:	0c1b      	lsrs	r3, r3, #16
 8005fbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fdc:	ee17 2a90 	vmov	r2, s15
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005fe4:	4b13      	ldr	r3, [pc, #76]	@ (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	0e1b      	lsrs	r3, r3, #24
 8005fea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800600a:	ee17 2a90 	vmov	r2, s15
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006012:	e008      	b.n	8006026 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	609a      	str	r2, [r3, #8]
}
 8006026:	bf00      	nop
 8006028:	3724      	adds	r7, #36	@ 0x24
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	58024400 	.word	0x58024400
 8006038:	03d09000 	.word	0x03d09000
 800603c:	46000000 	.word	0x46000000
 8006040:	4c742400 	.word	0x4c742400
 8006044:	4a742400 	.word	0x4a742400
 8006048:	4af42400 	.word	0x4af42400

0800604c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800604c:	b480      	push	{r7}
 800604e:	b089      	sub	sp, #36	@ 0x24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006054:	4ba1      	ldr	r3, [pc, #644]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800605e:	4b9f      	ldr	r3, [pc, #636]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006062:	0d1b      	lsrs	r3, r3, #20
 8006064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006068:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800606a:	4b9c      	ldr	r3, [pc, #624]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006076:	4b99      	ldr	r3, [pc, #612]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	08db      	lsrs	r3, r3, #3
 800607c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	fb02 f303 	mul.w	r3, r2, r3
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8111 	beq.w	80062bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b02      	cmp	r3, #2
 800609e:	f000 8083 	beq.w	80061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	f200 80a1 	bhi.w	80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d056      	beq.n	8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060b6:	e099      	b.n	80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060b8:	4b88      	ldr	r3, [pc, #544]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02d      	beq.n	8006120 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060c4:	4b85      	ldr	r3, [pc, #532]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	08db      	lsrs	r3, r3, #3
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	4a84      	ldr	r2, [pc, #528]	@ (80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
 80060d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b7b      	ldr	r3, [pc, #492]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006102:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800611e:	e087      	b.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b6a      	ldr	r3, [pc, #424]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a03 	vldr	s12, [r7, #12]
 8006146:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006162:	e065      	b.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006176:	4b59      	ldr	r3, [pc, #356]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	ed97 6a03 	vldr	s12, [r7, #12]
 800618a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a6:	e043      	b.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80062f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ba:	4b48      	ldr	r3, [pc, #288]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ea:	e021      	b.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fe:	4b37      	ldr	r3, [pc, #220]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006212:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800622e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006230:	4b2a      	ldr	r3, [pc, #168]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006234:	0a5b      	lsrs	r3, r3, #9
 8006236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800624a:	edd7 6a07 	vldr	s13, [r7, #28]
 800624e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006256:	ee17 2a90 	vmov	r2, s15
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800625e:	4b1f      	ldr	r3, [pc, #124]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006270:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006274:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006278:	edd7 6a07 	vldr	s13, [r7, #28]
 800627c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006284:	ee17 2a90 	vmov	r2, s15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800628c:	4b13      	ldr	r3, [pc, #76]	@ (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	0e1b      	lsrs	r3, r3, #24
 8006292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b2:	ee17 2a90 	vmov	r2, s15
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062ba:	e008      	b.n	80062ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	609a      	str	r2, [r3, #8]
}
 80062ce:	bf00      	nop
 80062d0:	3724      	adds	r7, #36	@ 0x24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	58024400 	.word	0x58024400
 80062e0:	03d09000 	.word	0x03d09000
 80062e4:	46000000 	.word	0x46000000
 80062e8:	4c742400 	.word	0x4c742400
 80062ec:	4a742400 	.word	0x4a742400
 80062f0:	4af42400 	.word	0x4af42400

080062f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006302:	4b53      	ldr	r3, [pc, #332]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	2b03      	cmp	r3, #3
 800630c:	d101      	bne.n	8006312 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e099      	b.n	8006446 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006312:	4b4f      	ldr	r3, [pc, #316]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a4e      	ldr	r2, [pc, #312]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006318:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800631c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631e:	f7fb fe17 	bl	8001f50 <HAL_GetTick>
 8006322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006324:	e008      	b.n	8006338 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006326:	f7fb fe13 	bl	8001f50 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d901      	bls.n	8006338 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e086      	b.n	8006446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006338:	4b45      	ldr	r3, [pc, #276]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f0      	bne.n	8006326 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006344:	4b42      	ldr	r3, [pc, #264]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	031b      	lsls	r3, r3, #12
 8006352:	493f      	ldr	r1, [pc, #252]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006354:	4313      	orrs	r3, r2
 8006356:	628b      	str	r3, [r1, #40]	@ 0x28
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	3b01      	subs	r3, #1
 800635e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	3b01      	subs	r3, #1
 8006368:	025b      	lsls	r3, r3, #9
 800636a:	b29b      	uxth	r3, r3
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	3b01      	subs	r3, #1
 8006374:	041b      	lsls	r3, r3, #16
 8006376:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	3b01      	subs	r3, #1
 8006382:	061b      	lsls	r3, r3, #24
 8006384:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006388:	4931      	ldr	r1, [pc, #196]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 800638a:	4313      	orrs	r3, r2
 800638c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800638e:	4b30      	ldr	r3, [pc, #192]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	492d      	ldr	r1, [pc, #180]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 800639c:	4313      	orrs	r3, r2
 800639e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	f023 0220 	bic.w	r2, r3, #32
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	4928      	ldr	r1, [pc, #160]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063b2:	4b27      	ldr	r3, [pc, #156]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a26      	ldr	r2, [pc, #152]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063b8:	f023 0310 	bic.w	r3, r3, #16
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063be:	4b24      	ldr	r3, [pc, #144]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063c2:	4b24      	ldr	r3, [pc, #144]	@ (8006454 <RCCEx_PLL2_Config+0x160>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	69d2      	ldr	r2, [r2, #28]
 80063ca:	00d2      	lsls	r2, r2, #3
 80063cc:	4920      	ldr	r1, [pc, #128]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063d8:	f043 0310 	orr.w	r3, r3, #16
 80063dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	4a19      	ldr	r2, [pc, #100]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063f0:	e00f      	b.n	8006412 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d106      	bne.n	8006406 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063f8:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	4a14      	ldr	r2, [pc, #80]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 80063fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006404:	e005      	b.n	8006412 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006406:	4b12      	ldr	r3, [pc, #72]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640a:	4a11      	ldr	r2, [pc, #68]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 800640c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006410:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006412:	4b0f      	ldr	r3, [pc, #60]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a0e      	ldr	r2, [pc, #56]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 8006418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800641c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800641e:	f7fb fd97 	bl	8001f50 <HAL_GetTick>
 8006422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006424:	e008      	b.n	8006438 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006426:	f7fb fd93 	bl	8001f50 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e006      	b.n	8006446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006438:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <RCCEx_PLL2_Config+0x15c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	58024400 	.word	0x58024400
 8006454:	ffff0007 	.word	0xffff0007

08006458 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006466:	4b53      	ldr	r3, [pc, #332]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b03      	cmp	r3, #3
 8006470:	d101      	bne.n	8006476 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e099      	b.n	80065aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006476:	4b4f      	ldr	r3, [pc, #316]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a4e      	ldr	r2, [pc, #312]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800647c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006482:	f7fb fd65 	bl	8001f50 <HAL_GetTick>
 8006486:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006488:	e008      	b.n	800649c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800648a:	f7fb fd61 	bl	8001f50 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e086      	b.n	80065aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800649c:	4b45      	ldr	r3, [pc, #276]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f0      	bne.n	800648a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064a8:	4b42      	ldr	r3, [pc, #264]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	051b      	lsls	r3, r3, #20
 80064b6:	493f      	ldr	r1, [pc, #252]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	025b      	lsls	r3, r3, #9
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	041b      	lsls	r3, r3, #16
 80064da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80064ec:	4931      	ldr	r1, [pc, #196]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064f2:	4b30      	ldr	r3, [pc, #192]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	492d      	ldr	r1, [pc, #180]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006504:	4b2b      	ldr	r3, [pc, #172]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	4928      	ldr	r1, [pc, #160]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006512:	4313      	orrs	r3, r2
 8006514:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006516:	4b27      	ldr	r3, [pc, #156]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	4a26      	ldr	r2, [pc, #152]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800651c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006522:	4b24      	ldr	r3, [pc, #144]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006526:	4b24      	ldr	r3, [pc, #144]	@ (80065b8 <RCCEx_PLL3_Config+0x160>)
 8006528:	4013      	ands	r3, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	69d2      	ldr	r2, [r2, #28]
 800652e:	00d2      	lsls	r2, r2, #3
 8006530:	4920      	ldr	r1, [pc, #128]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006536:	4b1f      	ldr	r3, [pc, #124]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	4a1e      	ldr	r2, [pc, #120]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800653c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006548:	4b1a      	ldr	r3, [pc, #104]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800654a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654c:	4a19      	ldr	r2, [pc, #100]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800654e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006554:	e00f      	b.n	8006576 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d106      	bne.n	800656a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800655c:	4b15      	ldr	r3, [pc, #84]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	4a14      	ldr	r2, [pc, #80]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006562:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006568:	e005      	b.n	8006576 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800656a:	4b12      	ldr	r3, [pc, #72]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656e:	4a11      	ldr	r2, [pc, #68]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006574:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006576:	4b0f      	ldr	r3, [pc, #60]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a0e      	ldr	r2, [pc, #56]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006582:	f7fb fce5 	bl	8001f50 <HAL_GetTick>
 8006586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006588:	e008      	b.n	800659c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800658a:	f7fb fce1 	bl	8001f50 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e006      	b.n	80065aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800659c:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <RCCEx_PLL3_Config+0x15c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0f0      	beq.n	800658a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	58024400 	.word	0x58024400
 80065b8:	ffff0007 	.word	0xffff0007

080065bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e10f      	b.n	80067ee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a87      	ldr	r2, [pc, #540]	@ (80067f8 <HAL_SPI_Init+0x23c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <HAL_SPI_Init+0x42>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a86      	ldr	r2, [pc, #536]	@ (80067fc <HAL_SPI_Init+0x240>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00a      	beq.n	80065fe <HAL_SPI_Init+0x42>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a84      	ldr	r2, [pc, #528]	@ (8006800 <HAL_SPI_Init+0x244>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d005      	beq.n	80065fe <HAL_SPI_Init+0x42>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d901      	bls.n	80065fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0f7      	b.n	80067ee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fe2e 	bl	8007260 <SPI_GetPacketSize>
 8006604:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a7b      	ldr	r2, [pc, #492]	@ (80067f8 <HAL_SPI_Init+0x23c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00c      	beq.n	800662a <HAL_SPI_Init+0x6e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a79      	ldr	r2, [pc, #484]	@ (80067fc <HAL_SPI_Init+0x240>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d007      	beq.n	800662a <HAL_SPI_Init+0x6e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a78      	ldr	r2, [pc, #480]	@ (8006800 <HAL_SPI_Init+0x244>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d002      	beq.n	800662a <HAL_SPI_Init+0x6e>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b08      	cmp	r3, #8
 8006628:	d811      	bhi.n	800664e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800662e:	4a72      	ldr	r2, [pc, #456]	@ (80067f8 <HAL_SPI_Init+0x23c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a70      	ldr	r2, [pc, #448]	@ (80067fc <HAL_SPI_Init+0x240>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_SPI_Init+0x8c>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6f      	ldr	r2, [pc, #444]	@ (8006800 <HAL_SPI_Init+0x244>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d104      	bne.n	8006652 <HAL_SPI_Init+0x96>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b10      	cmp	r3, #16
 800664c:	d901      	bls.n	8006652 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e0cd      	b.n	80067ee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fa ff98 	bl	800159c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800668e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006698:	d119      	bne.n	80066ce <HAL_SPI_Init+0x112>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066a2:	d103      	bne.n	80066ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10c      	bne.n	80066ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066bc:	d107      	bne.n	80066ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00f      	beq.n	80066fa <HAL_SPI_Init+0x13e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b06      	cmp	r3, #6
 80066e0:	d90b      	bls.n	80066fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e007      	b.n	800670a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006708:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69da      	ldr	r2, [r3, #28]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	431a      	orrs	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671c:	ea42 0103 	orr.w	r1, r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676a:	ea42 0103 	orr.w	r1, r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d113      	bne.n	80067aa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006794:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0201 	bic.w	r2, r2, #1
 80067b8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40013000 	.word	0x40013000
 80067fc:	40003800 	.word	0x40003800
 8006800:	40003c00 	.word	0x40003c00

08006804 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3320      	adds	r3, #32
 800681a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800681c:	f7fb fb98 	bl	8001f50 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	d001      	beq.n	8006832 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800682e:	2302      	movs	r3, #2
 8006830:	e1d1      	b.n	8006bd6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_SPI_Transmit+0x3a>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e1c9      	b.n	8006bd6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_SPI_Transmit+0x4c>
 800684c:	2302      	movs	r3, #2
 800684e:	e1c2      	b.n	8006bd6 <HAL_SPI_Transmit+0x3d2>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2203      	movs	r2, #3
 800685c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	88fa      	ldrh	r2, [r7, #6]
 800687a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80068a8:	d108      	bne.n	80068bc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e009      	b.n	80068d0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80068ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4b96      	ldr	r3, [pc, #600]	@ (8006b30 <HAL_SPI_Transmit+0x32c>)
 80068d8:	4013      	ands	r3, r2
 80068da:	88f9      	ldrh	r1, [r7, #6]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068fc:	d107      	bne.n	800690e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800690c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2b0f      	cmp	r3, #15
 8006914:	d947      	bls.n	80069a6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006916:	e03f      	b.n	8006998 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b02      	cmp	r3, #2
 8006924:	d114      	bne.n	8006950 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800694e:	e023      	b.n	8006998 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006950:	f7fb fafe 	bl	8001f50 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d803      	bhi.n	8006968 <HAL_SPI_Transmit+0x164>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d102      	bne.n	800696e <HAL_SPI_Transmit+0x16a>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d114      	bne.n	8006998 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fba8 	bl	80070c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800697a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e11e      	b.n	8006bd6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1b9      	bne.n	8006918 <HAL_SPI_Transmit+0x114>
 80069a4:	e0f1      	b.n	8006b8a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2b07      	cmp	r3, #7
 80069ac:	f240 80e6 	bls.w	8006b7c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80069b0:	e05d      	b.n	8006a6e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d132      	bne.n	8006a26 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d918      	bls.n	80069fe <HAL_SPI_Transmit+0x1fa>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d014      	beq.n	80069fe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e4:	1d1a      	adds	r2, r3, #4
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b02      	subs	r3, #2
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069fc:	e037      	b.n	8006a6e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0c:	1c9a      	adds	r2, r3, #2
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006a24:	e023      	b.n	8006a6e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a26:	f7fb fa93 	bl	8001f50 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d803      	bhi.n	8006a3e <HAL_SPI_Transmit+0x23a>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d102      	bne.n	8006a44 <HAL_SPI_Transmit+0x240>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d114      	bne.n	8006a6e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fb3d 	bl	80070c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e0b3      	b.n	8006bd6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d19b      	bne.n	80069b2 <HAL_SPI_Transmit+0x1ae>
 8006a7a:	e086      	b.n	8006b8a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d154      	bne.n	8006b34 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d918      	bls.n	8006ac8 <HAL_SPI_Transmit+0x2c4>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9a:	2b40      	cmp	r3, #64	@ 0x40
 8006a9c:	d914      	bls.n	8006ac8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aae:	1d1a      	adds	r2, r3, #4
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b04      	subs	r3, #4
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006ac6:	e059      	b.n	8006b7c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d917      	bls.n	8006b04 <HAL_SPI_Transmit+0x300>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aea:	1c9a      	adds	r2, r3, #2
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b02      	subs	r3, #2
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b02:	e03b      	b.n	8006b7c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3320      	adds	r3, #32
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b2e:	e025      	b.n	8006b7c <HAL_SPI_Transmit+0x378>
 8006b30:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b34:	f7fb fa0c 	bl	8001f50 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d803      	bhi.n	8006b4c <HAL_SPI_Transmit+0x348>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d102      	bne.n	8006b52 <HAL_SPI_Transmit+0x34e>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d114      	bne.n	8006b7c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fab6 	bl	80070c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e02c      	b.n	8006bd6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f47f af79 	bne.w	8006a7c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2108      	movs	r1, #8
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fb35 	bl	8007204 <SPI_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba6:	f043 0220 	orr.w	r2, r3, #32
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fa87 	bl	80070c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop

08006be0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3330      	adds	r3, #48	@ 0x30
 8006c02:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c04:	f7fb f9a4 	bl	8001f50 <HAL_GetTick>
 8006c08:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006c16:	2302      	movs	r3, #2
 8006c18:	e250      	b.n	80070bc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_SPI_Receive+0x46>
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e248      	b.n	80070bc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_SPI_Receive+0x58>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e241      	b.n	80070bc <HAL_SPI_Receive+0x4dc>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2204      	movs	r2, #4
 8006c44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	88fa      	ldrh	r2, [r7, #6]
 8006c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006c90:	d108      	bne.n	8006ca4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	e009      	b.n	8006cb8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006cb6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	4b95      	ldr	r3, [pc, #596]	@ (8006f14 <HAL_SPI_Receive+0x334>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	88f9      	ldrh	r1, [r7, #6]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ce4:	d107      	bne.n	8006cf6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cf4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d96c      	bls.n	8006dd8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006cfe:	e064      	b.n	8006dca <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d114      	bne.n	8006d40 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d26:	1d1a      	adds	r2, r3, #4
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d3e:	e044      	b.n	8006dca <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8bfa      	ldrh	r2, [r7, #30]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d919      	bls.n	8006d82 <HAL_SPI_Receive+0x1a2>
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d014      	beq.n	8006d82 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d62:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d80:	e023      	b.n	8006dca <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d82:	f7fb f8e5 	bl	8001f50 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d803      	bhi.n	8006d9a <HAL_SPI_Receive+0x1ba>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d102      	bne.n	8006da0 <HAL_SPI_Receive+0x1c0>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d114      	bne.n	8006dca <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f98f 	bl	80070c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e178      	b.n	80070bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d194      	bne.n	8006d00 <HAL_SPI_Receive+0x120>
 8006dd6:	e15e      	b.n	8007096 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b07      	cmp	r3, #7
 8006dde:	f240 8153 	bls.w	8007088 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006de2:	e08f      	b.n	8006f04 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d114      	bne.n	8006e24 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	8812      	ldrh	r2, [r2, #0]
 8006e02:	b292      	uxth	r2, r2
 8006e04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e0a:	1c9a      	adds	r2, r3, #2
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006e22:	e06f      	b.n	8006f04 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8bfa      	ldrh	r2, [r7, #30]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d924      	bls.n	8006e7c <HAL_SPI_Receive+0x29c>
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01f      	beq.n	8006e7c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	8812      	ldrh	r2, [r2, #0]
 8006e44:	b292      	uxth	r2, r2
 8006e46:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e4c:	1c9a      	adds	r2, r3, #2
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	8812      	ldrh	r2, [r2, #0]
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b02      	subs	r3, #2
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006e7a:	e043      	b.n	8006f04 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d119      	bne.n	8006ebc <HAL_SPI_Receive+0x2dc>
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d014      	beq.n	8006ebc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	8812      	ldrh	r2, [r2, #0]
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ea2:	1c9a      	adds	r2, r3, #2
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006eba:	e023      	b.n	8006f04 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ebc:	f7fb f848 	bl	8001f50 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d803      	bhi.n	8006ed4 <HAL_SPI_Receive+0x2f4>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d102      	bne.n	8006eda <HAL_SPI_Receive+0x2fa>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d114      	bne.n	8006f04 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f8f2 	bl	80070c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ee6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e0db      	b.n	80070bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f47f af69 	bne.w	8006de4 <HAL_SPI_Receive+0x204>
 8006f12:	e0c0      	b.n	8007096 <HAL_SPI_Receive+0x4b6>
 8006f14:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d117      	bne.n	8006f5e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006f5c:	e094      	b.n	8007088 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	8bfa      	ldrh	r2, [r7, #30]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d946      	bls.n	8006ffa <HAL_SPI_Receive+0x41a>
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d041      	beq.n	8006ffa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f82:	7812      	ldrb	r2, [r2, #0]
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fd6:	7812      	ldrb	r2, [r2, #0]
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b04      	subs	r3, #4
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ff8:	e046      	b.n	8007088 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b03      	cmp	r3, #3
 8007004:	d81c      	bhi.n	8007040 <HAL_SPI_Receive+0x460>
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d017      	beq.n	8007040 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800703e:	e023      	b.n	8007088 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007040:	f7fa ff86 	bl	8001f50 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d803      	bhi.n	8007058 <HAL_SPI_Receive+0x478>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d102      	bne.n	800705e <HAL_SPI_Receive+0x47e>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d114      	bne.n	8007088 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f830 	bl	80070c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e019      	b.n	80070bc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	f47f af41 	bne.w	8006f18 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f814 	bl	80070c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
  }
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0208 	orr.w	r2, r2, #8
 80070e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0210 	orr.w	r2, r2, #16
 80070f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6919      	ldr	r1, [r3, #16]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b3c      	ldr	r3, [pc, #240]	@ (8007200 <SPI_CloseTransfer+0x13c>)
 8007110:	400b      	ands	r3, r1
 8007112:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007122:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b04      	cmp	r3, #4
 800712e:	d014      	beq.n	800715a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00f      	beq.n	800715a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007140:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0220 	orr.w	r2, r2, #32
 8007158:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b03      	cmp	r3, #3
 8007164:	d014      	beq.n	8007190 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00f      	beq.n	8007190 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007176:	f043 0204 	orr.w	r2, r3, #4
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800718e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00f      	beq.n	80071ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071a0:	f043 0201 	orr.w	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00f      	beq.n	80071e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ca:	f043 0208 	orr.w	r2, r3, #8
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	fffffc90 	.word	0xfffffc90

08007204 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007214:	e010      	b.n	8007238 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007216:	f7fa fe9b 	bl	8001f50 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d803      	bhi.n	800722e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d102      	bne.n	8007234 <SPI_WaitOnFlagUntilTimeout+0x30>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e00f      	b.n	8007258 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695a      	ldr	r2, [r3, #20]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	429a      	cmp	r2, r3
 8007254:	d0df      	beq.n	8007216 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726c:	095b      	lsrs	r3, r3, #5
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	3307      	adds	r3, #7
 800727e:	08db      	lsrs	r3, r3, #3
 8007280:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	fb02 f303 	mul.w	r3, r2, r3
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e042      	b.n	800732e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f83b 	bl	8007336 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2224      	movs	r2, #36	@ 0x24
 80072c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0201 	bic.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fef1 	bl	80080c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f986 	bl	80075f8 <UART_SetConfig>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e01b      	b.n	800732e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007304:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007314:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f042 0201 	orr.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ff70 	bl	800820c <UART_CheckIdleState>
 800732c:	4603      	mov	r3, r0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b08a      	sub	sp, #40	@ 0x28
 800734e:	af02      	add	r7, sp, #8
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	4613      	mov	r3, r2
 8007358:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007360:	2b20      	cmp	r3, #32
 8007362:	d17b      	bne.n	800745c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <HAL_UART_Transmit+0x26>
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e074      	b.n	800745e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2221      	movs	r2, #33	@ 0x21
 8007380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007384:	f7fa fde4 	bl	8001f50 <HAL_GetTick>
 8007388:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	88fa      	ldrh	r2, [r7, #6]
 8007396:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a2:	d108      	bne.n	80073b6 <HAL_UART_Transmit+0x6c>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	e003      	b.n	80073be <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073be:	e030      	b.n	8007422 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2200      	movs	r2, #0
 80073c8:	2180      	movs	r1, #128	@ 0x80
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 ffc8 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e03d      	b.n	800745e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10b      	bne.n	8007400 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	3302      	adds	r3, #2
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	e007      	b.n	8007410 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3301      	adds	r3, #1
 800740e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1c8      	bne.n	80073c0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	2140      	movs	r1, #64	@ 0x40
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 ff91 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e006      	b.n	800745e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	e000      	b.n	800745e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800745c:	2302      	movs	r3, #2
  }
}
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b08a      	sub	sp, #40	@ 0x28
 800746a:	af02      	add	r7, sp, #8
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800747c:	2b20      	cmp	r3, #32
 800747e:	f040 80b5 	bne.w	80075ec <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_UART_Receive+0x28>
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e0ad      	b.n	80075ee <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2222      	movs	r2, #34	@ 0x22
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074a8:	f7fa fd52 	bl	8001f50 <HAL_GetTick>
 80074ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c6:	d10e      	bne.n	80074e6 <HAL_UART_Receive+0x80>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d105      	bne.n	80074dc <HAL_UART_Receive+0x76>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074da:	e02d      	b.n	8007538 <HAL_UART_Receive+0xd2>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	22ff      	movs	r2, #255	@ 0xff
 80074e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074e4:	e028      	b.n	8007538 <HAL_UART_Receive+0xd2>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10d      	bne.n	800750a <HAL_UART_Receive+0xa4>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d104      	bne.n	8007500 <HAL_UART_Receive+0x9a>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	22ff      	movs	r2, #255	@ 0xff
 80074fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074fe:	e01b      	b.n	8007538 <HAL_UART_Receive+0xd2>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	227f      	movs	r2, #127	@ 0x7f
 8007504:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007508:	e016      	b.n	8007538 <HAL_UART_Receive+0xd2>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007512:	d10d      	bne.n	8007530 <HAL_UART_Receive+0xca>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <HAL_UART_Receive+0xc0>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	227f      	movs	r2, #127	@ 0x7f
 8007520:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007524:	e008      	b.n	8007538 <HAL_UART_Receive+0xd2>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	223f      	movs	r2, #63	@ 0x3f
 800752a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800752e:	e003      	b.n	8007538 <HAL_UART_Receive+0xd2>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800753e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007548:	d108      	bne.n	800755c <HAL_UART_Receive+0xf6>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	e003      	b.n	8007564 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007564:	e036      	b.n	80075d4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2200      	movs	r2, #0
 800756e:	2120      	movs	r1, #32
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fef5 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d005      	beq.n	8007588 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e032      	b.n	80075ee <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10c      	bne.n	80075a8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007594:	b29a      	uxth	r2, r3
 8007596:	8a7b      	ldrh	r3, [r7, #18]
 8007598:	4013      	ands	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	3302      	adds	r3, #2
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	e00c      	b.n	80075c2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	8a7b      	ldrh	r3, [r7, #18]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	4013      	ands	r3, r2
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	3301      	adds	r3, #1
 80075c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1c2      	bne.n	8007566 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	e000      	b.n	80075ee <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80075ec:	2302      	movs	r3, #2
  }
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075fc:	b092      	sub	sp, #72	@ 0x48
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	431a      	orrs	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	431a      	orrs	r2, r3
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	4313      	orrs	r3, r2
 800761e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4bbe      	ldr	r3, [pc, #760]	@ (8007920 <UART_SetConfig+0x328>)
 8007628:	4013      	ands	r3, r2
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007630:	430b      	orrs	r3, r1
 8007632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4ab3      	ldr	r2, [pc, #716]	@ (8007924 <UART_SetConfig+0x32c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007660:	4313      	orrs	r3, r2
 8007662:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	4baf      	ldr	r3, [pc, #700]	@ (8007928 <UART_SetConfig+0x330>)
 800766c:	4013      	ands	r3, r2
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007674:	430b      	orrs	r3, r1
 8007676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	f023 010f 	bic.w	r1, r3, #15
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4aa6      	ldr	r2, [pc, #664]	@ (800792c <UART_SetConfig+0x334>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d177      	bne.n	8007788 <UART_SetConfig+0x190>
 8007698:	4ba5      	ldr	r3, [pc, #660]	@ (8007930 <UART_SetConfig+0x338>)
 800769a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076a0:	2b28      	cmp	r3, #40	@ 0x28
 80076a2:	d86d      	bhi.n	8007780 <UART_SetConfig+0x188>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <UART_SetConfig+0xb4>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	08007751 	.word	0x08007751
 80076b0:	08007781 	.word	0x08007781
 80076b4:	08007781 	.word	0x08007781
 80076b8:	08007781 	.word	0x08007781
 80076bc:	08007781 	.word	0x08007781
 80076c0:	08007781 	.word	0x08007781
 80076c4:	08007781 	.word	0x08007781
 80076c8:	08007781 	.word	0x08007781
 80076cc:	08007759 	.word	0x08007759
 80076d0:	08007781 	.word	0x08007781
 80076d4:	08007781 	.word	0x08007781
 80076d8:	08007781 	.word	0x08007781
 80076dc:	08007781 	.word	0x08007781
 80076e0:	08007781 	.word	0x08007781
 80076e4:	08007781 	.word	0x08007781
 80076e8:	08007781 	.word	0x08007781
 80076ec:	08007761 	.word	0x08007761
 80076f0:	08007781 	.word	0x08007781
 80076f4:	08007781 	.word	0x08007781
 80076f8:	08007781 	.word	0x08007781
 80076fc:	08007781 	.word	0x08007781
 8007700:	08007781 	.word	0x08007781
 8007704:	08007781 	.word	0x08007781
 8007708:	08007781 	.word	0x08007781
 800770c:	08007769 	.word	0x08007769
 8007710:	08007781 	.word	0x08007781
 8007714:	08007781 	.word	0x08007781
 8007718:	08007781 	.word	0x08007781
 800771c:	08007781 	.word	0x08007781
 8007720:	08007781 	.word	0x08007781
 8007724:	08007781 	.word	0x08007781
 8007728:	08007781 	.word	0x08007781
 800772c:	08007771 	.word	0x08007771
 8007730:	08007781 	.word	0x08007781
 8007734:	08007781 	.word	0x08007781
 8007738:	08007781 	.word	0x08007781
 800773c:	08007781 	.word	0x08007781
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
 800774c:	08007779 	.word	0x08007779
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e222      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007758:	2304      	movs	r3, #4
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e21e      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007760:	2308      	movs	r3, #8
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e21a      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007768:	2310      	movs	r3, #16
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e216      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007770:	2320      	movs	r3, #32
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e212      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007778:	2340      	movs	r3, #64	@ 0x40
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777e:	e20e      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007786:	e20a      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a69      	ldr	r2, [pc, #420]	@ (8007934 <UART_SetConfig+0x33c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d130      	bne.n	80077f4 <UART_SetConfig+0x1fc>
 8007792:	4b67      	ldr	r3, [pc, #412]	@ (8007930 <UART_SetConfig+0x338>)
 8007794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007796:	f003 0307 	and.w	r3, r3, #7
 800779a:	2b05      	cmp	r3, #5
 800779c:	d826      	bhi.n	80077ec <UART_SetConfig+0x1f4>
 800779e:	a201      	add	r2, pc, #4	@ (adr r2, 80077a4 <UART_SetConfig+0x1ac>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077bd 	.word	0x080077bd
 80077a8:	080077c5 	.word	0x080077c5
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	080077d5 	.word	0x080077d5
 80077b4:	080077dd 	.word	0x080077dd
 80077b8:	080077e5 	.word	0x080077e5
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e1ec      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80077c4:	2304      	movs	r3, #4
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e1e8      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80077cc:	2308      	movs	r3, #8
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e1e4      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80077d4:	2310      	movs	r3, #16
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e1e0      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80077dc:	2320      	movs	r3, #32
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e2:	e1dc      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80077e4:	2340      	movs	r3, #64	@ 0x40
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e1d8      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80077ec:	2380      	movs	r3, #128	@ 0x80
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f2:	e1d4      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a4f      	ldr	r2, [pc, #316]	@ (8007938 <UART_SetConfig+0x340>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d130      	bne.n	8007860 <UART_SetConfig+0x268>
 80077fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007930 <UART_SetConfig+0x338>)
 8007800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b05      	cmp	r3, #5
 8007808:	d826      	bhi.n	8007858 <UART_SetConfig+0x260>
 800780a:	a201      	add	r2, pc, #4	@ (adr r2, 8007810 <UART_SetConfig+0x218>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	08007829 	.word	0x08007829
 8007814:	08007831 	.word	0x08007831
 8007818:	08007839 	.word	0x08007839
 800781c:	08007841 	.word	0x08007841
 8007820:	08007849 	.word	0x08007849
 8007824:	08007851 	.word	0x08007851
 8007828:	2300      	movs	r3, #0
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e1b6      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007830:	2304      	movs	r3, #4
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e1b2      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007838:	2308      	movs	r3, #8
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e1ae      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007840:	2310      	movs	r3, #16
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e1aa      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007848:	2320      	movs	r3, #32
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e1a6      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007850:	2340      	movs	r3, #64	@ 0x40
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e1a2      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e19e      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a35      	ldr	r2, [pc, #212]	@ (800793c <UART_SetConfig+0x344>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d130      	bne.n	80078cc <UART_SetConfig+0x2d4>
 800786a:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <UART_SetConfig+0x338>)
 800786c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	2b05      	cmp	r3, #5
 8007874:	d826      	bhi.n	80078c4 <UART_SetConfig+0x2cc>
 8007876:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <UART_SetConfig+0x284>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	08007895 	.word	0x08007895
 8007880:	0800789d 	.word	0x0800789d
 8007884:	080078a5 	.word	0x080078a5
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078bd 	.word	0x080078bd
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e180      	b.n	8007b9e <UART_SetConfig+0x5a6>
 800789c:	2304      	movs	r3, #4
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e17c      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80078a4:	2308      	movs	r3, #8
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e178      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e174      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80078b4:	2320      	movs	r3, #32
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e170      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80078bc:	2340      	movs	r3, #64	@ 0x40
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e16c      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80078c4:	2380      	movs	r3, #128	@ 0x80
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e168      	b.n	8007b9e <UART_SetConfig+0x5a6>
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007940 <UART_SetConfig+0x348>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d142      	bne.n	800795c <UART_SetConfig+0x364>
 80078d6:	4b16      	ldr	r3, [pc, #88]	@ (8007930 <UART_SetConfig+0x338>)
 80078d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d838      	bhi.n	8007954 <UART_SetConfig+0x35c>
 80078e2:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <UART_SetConfig+0x2f0>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007901 	.word	0x08007901
 80078ec:	08007909 	.word	0x08007909
 80078f0:	08007911 	.word	0x08007911
 80078f4:	08007919 	.word	0x08007919
 80078f8:	08007945 	.word	0x08007945
 80078fc:	0800794d 	.word	0x0800794d
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e14a      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007908:	2304      	movs	r3, #4
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e146      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007910:	2308      	movs	r3, #8
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e142      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007918:	2310      	movs	r3, #16
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e13e      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007920:	cfff69f3 	.word	0xcfff69f3
 8007924:	58000c00 	.word	0x58000c00
 8007928:	11fff4ff 	.word	0x11fff4ff
 800792c:	40011000 	.word	0x40011000
 8007930:	58024400 	.word	0x58024400
 8007934:	40004400 	.word	0x40004400
 8007938:	40004800 	.word	0x40004800
 800793c:	40004c00 	.word	0x40004c00
 8007940:	40005000 	.word	0x40005000
 8007944:	2320      	movs	r3, #32
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e128      	b.n	8007b9e <UART_SetConfig+0x5a6>
 800794c:	2340      	movs	r3, #64	@ 0x40
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e124      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007954:	2380      	movs	r3, #128	@ 0x80
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e120      	b.n	8007b9e <UART_SetConfig+0x5a6>
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4acb      	ldr	r2, [pc, #812]	@ (8007c90 <UART_SetConfig+0x698>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d176      	bne.n	8007a54 <UART_SetConfig+0x45c>
 8007966:	4bcb      	ldr	r3, [pc, #812]	@ (8007c94 <UART_SetConfig+0x69c>)
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800796e:	2b28      	cmp	r3, #40	@ 0x28
 8007970:	d86c      	bhi.n	8007a4c <UART_SetConfig+0x454>
 8007972:	a201      	add	r2, pc, #4	@ (adr r2, 8007978 <UART_SetConfig+0x380>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007a1d 	.word	0x08007a1d
 800797c:	08007a4d 	.word	0x08007a4d
 8007980:	08007a4d 	.word	0x08007a4d
 8007984:	08007a4d 	.word	0x08007a4d
 8007988:	08007a4d 	.word	0x08007a4d
 800798c:	08007a4d 	.word	0x08007a4d
 8007990:	08007a4d 	.word	0x08007a4d
 8007994:	08007a4d 	.word	0x08007a4d
 8007998:	08007a25 	.word	0x08007a25
 800799c:	08007a4d 	.word	0x08007a4d
 80079a0:	08007a4d 	.word	0x08007a4d
 80079a4:	08007a4d 	.word	0x08007a4d
 80079a8:	08007a4d 	.word	0x08007a4d
 80079ac:	08007a4d 	.word	0x08007a4d
 80079b0:	08007a4d 	.word	0x08007a4d
 80079b4:	08007a4d 	.word	0x08007a4d
 80079b8:	08007a2d 	.word	0x08007a2d
 80079bc:	08007a4d 	.word	0x08007a4d
 80079c0:	08007a4d 	.word	0x08007a4d
 80079c4:	08007a4d 	.word	0x08007a4d
 80079c8:	08007a4d 	.word	0x08007a4d
 80079cc:	08007a4d 	.word	0x08007a4d
 80079d0:	08007a4d 	.word	0x08007a4d
 80079d4:	08007a4d 	.word	0x08007a4d
 80079d8:	08007a35 	.word	0x08007a35
 80079dc:	08007a4d 	.word	0x08007a4d
 80079e0:	08007a4d 	.word	0x08007a4d
 80079e4:	08007a4d 	.word	0x08007a4d
 80079e8:	08007a4d 	.word	0x08007a4d
 80079ec:	08007a4d 	.word	0x08007a4d
 80079f0:	08007a4d 	.word	0x08007a4d
 80079f4:	08007a4d 	.word	0x08007a4d
 80079f8:	08007a3d 	.word	0x08007a3d
 80079fc:	08007a4d 	.word	0x08007a4d
 8007a00:	08007a4d 	.word	0x08007a4d
 8007a04:	08007a4d 	.word	0x08007a4d
 8007a08:	08007a4d 	.word	0x08007a4d
 8007a0c:	08007a4d 	.word	0x08007a4d
 8007a10:	08007a4d 	.word	0x08007a4d
 8007a14:	08007a4d 	.word	0x08007a4d
 8007a18:	08007a45 	.word	0x08007a45
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a22:	e0bc      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a24:	2304      	movs	r3, #4
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e0b8      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e0b4      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a34:	2310      	movs	r3, #16
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e0b0      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a3c:	2320      	movs	r3, #32
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e0ac      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a44:	2340      	movs	r3, #64	@ 0x40
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e0a8      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a4c:	2380      	movs	r3, #128	@ 0x80
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a52:	e0a4      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a8f      	ldr	r2, [pc, #572]	@ (8007c98 <UART_SetConfig+0x6a0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d130      	bne.n	8007ac0 <UART_SetConfig+0x4c8>
 8007a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8007c94 <UART_SetConfig+0x69c>)
 8007a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	d826      	bhi.n	8007ab8 <UART_SetConfig+0x4c0>
 8007a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <UART_SetConfig+0x478>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a89 	.word	0x08007a89
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	08007a99 	.word	0x08007a99
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007aa9 	.word	0x08007aa9
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e086      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a90:	2304      	movs	r3, #4
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e082      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007a98:	2308      	movs	r3, #8
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e07e      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e07a      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aae:	e076      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007ab0:	2340      	movs	r3, #64	@ 0x40
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e072      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007ab8:	2380      	movs	r3, #128	@ 0x80
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e06e      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a75      	ldr	r2, [pc, #468]	@ (8007c9c <UART_SetConfig+0x6a4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d130      	bne.n	8007b2c <UART_SetConfig+0x534>
 8007aca:	4b72      	ldr	r3, [pc, #456]	@ (8007c94 <UART_SetConfig+0x69c>)
 8007acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	2b05      	cmp	r3, #5
 8007ad4:	d826      	bhi.n	8007b24 <UART_SetConfig+0x52c>
 8007ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8007adc <UART_SetConfig+0x4e4>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007af5 	.word	0x08007af5
 8007ae0:	08007afd 	.word	0x08007afd
 8007ae4:	08007b05 	.word	0x08007b05
 8007ae8:	08007b0d 	.word	0x08007b0d
 8007aec:	08007b15 	.word	0x08007b15
 8007af0:	08007b1d 	.word	0x08007b1d
 8007af4:	2300      	movs	r3, #0
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e050      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007afc:	2304      	movs	r3, #4
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e04c      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b04:	2308      	movs	r3, #8
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e048      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b0c:	2310      	movs	r3, #16
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e044      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b14:	2320      	movs	r3, #32
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e040      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b1c:	2340      	movs	r3, #64	@ 0x40
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e03c      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b24:	2380      	movs	r3, #128	@ 0x80
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e038      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a5b      	ldr	r2, [pc, #364]	@ (8007ca0 <UART_SetConfig+0x6a8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d130      	bne.n	8007b98 <UART_SetConfig+0x5a0>
 8007b36:	4b57      	ldr	r3, [pc, #348]	@ (8007c94 <UART_SetConfig+0x69c>)
 8007b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	d826      	bhi.n	8007b90 <UART_SetConfig+0x598>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <UART_SetConfig+0x550>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b61 	.word	0x08007b61
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	08007b71 	.word	0x08007b71
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b89 	.word	0x08007b89
 8007b60:	2302      	movs	r3, #2
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e01a      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e016      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b70:	2308      	movs	r3, #8
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e012      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e00e      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b80:	2320      	movs	r3, #32
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e00a      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b88:	2340      	movs	r3, #64	@ 0x40
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e006      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b90:	2380      	movs	r3, #128	@ 0x80
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e002      	b.n	8007b9e <UART_SetConfig+0x5a6>
 8007b98:	2380      	movs	r3, #128	@ 0x80
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8007ca0 <UART_SetConfig+0x6a8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	f040 80f8 	bne.w	8007d9a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007baa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	dc46      	bgt.n	8007c40 <UART_SetConfig+0x648>
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	f2c0 8082 	blt.w	8007cbc <UART_SetConfig+0x6c4>
 8007bb8:	3b02      	subs	r3, #2
 8007bba:	2b1e      	cmp	r3, #30
 8007bbc:	d87e      	bhi.n	8007cbc <UART_SetConfig+0x6c4>
 8007bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <UART_SetConfig+0x5cc>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007c47 	.word	0x08007c47
 8007bc8:	08007cbd 	.word	0x08007cbd
 8007bcc:	08007c4f 	.word	0x08007c4f
 8007bd0:	08007cbd 	.word	0x08007cbd
 8007bd4:	08007cbd 	.word	0x08007cbd
 8007bd8:	08007cbd 	.word	0x08007cbd
 8007bdc:	08007c5f 	.word	0x08007c5f
 8007be0:	08007cbd 	.word	0x08007cbd
 8007be4:	08007cbd 	.word	0x08007cbd
 8007be8:	08007cbd 	.word	0x08007cbd
 8007bec:	08007cbd 	.word	0x08007cbd
 8007bf0:	08007cbd 	.word	0x08007cbd
 8007bf4:	08007cbd 	.word	0x08007cbd
 8007bf8:	08007cbd 	.word	0x08007cbd
 8007bfc:	08007c6f 	.word	0x08007c6f
 8007c00:	08007cbd 	.word	0x08007cbd
 8007c04:	08007cbd 	.word	0x08007cbd
 8007c08:	08007cbd 	.word	0x08007cbd
 8007c0c:	08007cbd 	.word	0x08007cbd
 8007c10:	08007cbd 	.word	0x08007cbd
 8007c14:	08007cbd 	.word	0x08007cbd
 8007c18:	08007cbd 	.word	0x08007cbd
 8007c1c:	08007cbd 	.word	0x08007cbd
 8007c20:	08007cbd 	.word	0x08007cbd
 8007c24:	08007cbd 	.word	0x08007cbd
 8007c28:	08007cbd 	.word	0x08007cbd
 8007c2c:	08007cbd 	.word	0x08007cbd
 8007c30:	08007cbd 	.word	0x08007cbd
 8007c34:	08007cbd 	.word	0x08007cbd
 8007c38:	08007cbd 	.word	0x08007cbd
 8007c3c:	08007caf 	.word	0x08007caf
 8007c40:	2b40      	cmp	r3, #64	@ 0x40
 8007c42:	d037      	beq.n	8007cb4 <UART_SetConfig+0x6bc>
 8007c44:	e03a      	b.n	8007cbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c46:	f7fe f897 	bl	8005d78 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c4c:	e03c      	b.n	8007cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fe f8a6 	bl	8005da4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c5c:	e034      	b.n	8007cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5e:	f107 0318 	add.w	r3, r7, #24
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe f9f2 	bl	800604c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6c:	e02c      	b.n	8007cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c6e:	4b09      	ldr	r3, [pc, #36]	@ (8007c94 <UART_SetConfig+0x69c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d016      	beq.n	8007ca8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c7a:	4b06      	ldr	r3, [pc, #24]	@ (8007c94 <UART_SetConfig+0x69c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	08db      	lsrs	r3, r3, #3
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	4a07      	ldr	r2, [pc, #28]	@ (8007ca4 <UART_SetConfig+0x6ac>)
 8007c86:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c8c:	e01c      	b.n	8007cc8 <UART_SetConfig+0x6d0>
 8007c8e:	bf00      	nop
 8007c90:	40011400 	.word	0x40011400
 8007c94:	58024400 	.word	0x58024400
 8007c98:	40007800 	.word	0x40007800
 8007c9c:	40007c00 	.word	0x40007c00
 8007ca0:	58000c00 	.word	0x58000c00
 8007ca4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ca8:	4b9d      	ldr	r3, [pc, #628]	@ (8007f20 <UART_SetConfig+0x928>)
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cac:	e00c      	b.n	8007cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cae:	4b9d      	ldr	r3, [pc, #628]	@ (8007f24 <UART_SetConfig+0x92c>)
 8007cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb2:	e009      	b.n	8007cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cba:	e005      	b.n	8007cc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 81de 	beq.w	800808c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	4a94      	ldr	r2, [pc, #592]	@ (8007f28 <UART_SetConfig+0x930>)
 8007cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ce2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	4413      	add	r3, r2
 8007cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d305      	bcc.n	8007d00 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d903      	bls.n	8007d08 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d06:	e1c1      	b.n	800808c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	60fa      	str	r2, [r7, #12]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d14:	4a84      	ldr	r2, [pc, #528]	@ (8007f28 <UART_SetConfig+0x930>)
 8007d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	607a      	str	r2, [r7, #4]
 8007d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d2a:	f7f8 fb31 	bl	8000390 <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4610      	mov	r0, r2
 8007d34:	4619      	mov	r1, r3
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	020b      	lsls	r3, r1, #8
 8007d40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d44:	0202      	lsls	r2, r0, #8
 8007d46:	6979      	ldr	r1, [r7, #20]
 8007d48:	6849      	ldr	r1, [r1, #4]
 8007d4a:	0849      	lsrs	r1, r1, #1
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	4605      	mov	r5, r0
 8007d52:	eb12 0804 	adds.w	r8, r2, r4
 8007d56:	eb43 0905 	adc.w	r9, r3, r5
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	469a      	mov	sl, r3
 8007d62:	4693      	mov	fp, r2
 8007d64:	4652      	mov	r2, sl
 8007d66:	465b      	mov	r3, fp
 8007d68:	4640      	mov	r0, r8
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7f8 fb10 	bl	8000390 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4613      	mov	r3, r2
 8007d76:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d7e:	d308      	bcc.n	8007d92 <UART_SetConfig+0x79a>
 8007d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d86:	d204      	bcs.n	8007d92 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d8e:	60da      	str	r2, [r3, #12]
 8007d90:	e17c      	b.n	800808c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d98:	e178      	b.n	800808c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007da2:	f040 80c5 	bne.w	8007f30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007da6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	dc48      	bgt.n	8007e40 <UART_SetConfig+0x848>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	db7b      	blt.n	8007eaa <UART_SetConfig+0x8b2>
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d879      	bhi.n	8007eaa <UART_SetConfig+0x8b2>
 8007db6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <UART_SetConfig+0x7c4>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007e47 	.word	0x08007e47
 8007dc0:	08007e4f 	.word	0x08007e4f
 8007dc4:	08007eab 	.word	0x08007eab
 8007dc8:	08007eab 	.word	0x08007eab
 8007dcc:	08007e57 	.word	0x08007e57
 8007dd0:	08007eab 	.word	0x08007eab
 8007dd4:	08007eab 	.word	0x08007eab
 8007dd8:	08007eab 	.word	0x08007eab
 8007ddc:	08007e67 	.word	0x08007e67
 8007de0:	08007eab 	.word	0x08007eab
 8007de4:	08007eab 	.word	0x08007eab
 8007de8:	08007eab 	.word	0x08007eab
 8007dec:	08007eab 	.word	0x08007eab
 8007df0:	08007eab 	.word	0x08007eab
 8007df4:	08007eab 	.word	0x08007eab
 8007df8:	08007eab 	.word	0x08007eab
 8007dfc:	08007e77 	.word	0x08007e77
 8007e00:	08007eab 	.word	0x08007eab
 8007e04:	08007eab 	.word	0x08007eab
 8007e08:	08007eab 	.word	0x08007eab
 8007e0c:	08007eab 	.word	0x08007eab
 8007e10:	08007eab 	.word	0x08007eab
 8007e14:	08007eab 	.word	0x08007eab
 8007e18:	08007eab 	.word	0x08007eab
 8007e1c:	08007eab 	.word	0x08007eab
 8007e20:	08007eab 	.word	0x08007eab
 8007e24:	08007eab 	.word	0x08007eab
 8007e28:	08007eab 	.word	0x08007eab
 8007e2c:	08007eab 	.word	0x08007eab
 8007e30:	08007eab 	.word	0x08007eab
 8007e34:	08007eab 	.word	0x08007eab
 8007e38:	08007eab 	.word	0x08007eab
 8007e3c:	08007e9d 	.word	0x08007e9d
 8007e40:	2b40      	cmp	r3, #64	@ 0x40
 8007e42:	d02e      	beq.n	8007ea2 <UART_SetConfig+0x8aa>
 8007e44:	e031      	b.n	8007eaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e46:	f7fc fd61 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8007e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e4c:	e033      	b.n	8007eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e4e:	f7fc fd73 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8007e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e54:	e02f      	b.n	8007eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fd ffa2 	bl	8005da4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e027      	b.n	8007eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e66:	f107 0318 	add.w	r3, r7, #24
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe f8ee 	bl	800604c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e74:	e01f      	b.n	8007eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e76:	4b2d      	ldr	r3, [pc, #180]	@ (8007f2c <UART_SetConfig+0x934>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e82:	4b2a      	ldr	r3, [pc, #168]	@ (8007f2c <UART_SetConfig+0x934>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	08db      	lsrs	r3, r3, #3
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	4a24      	ldr	r2, [pc, #144]	@ (8007f20 <UART_SetConfig+0x928>)
 8007e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e94:	e00f      	b.n	8007eb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e96:	4b22      	ldr	r3, [pc, #136]	@ (8007f20 <UART_SetConfig+0x928>)
 8007e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e9a:	e00c      	b.n	8007eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e9c:	4b21      	ldr	r3, [pc, #132]	@ (8007f24 <UART_SetConfig+0x92c>)
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea0:	e009      	b.n	8007eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e005      	b.n	8007eb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80e7 	beq.w	800808c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec2:	4a19      	ldr	r2, [pc, #100]	@ (8007f28 <UART_SetConfig+0x930>)
 8007ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed0:	005a      	lsls	r2, r3, #1
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	441a      	add	r2, r3
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d916      	bls.n	8007f18 <UART_SetConfig+0x920>
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef0:	d212      	bcs.n	8007f18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f023 030f 	bic.w	r3, r3, #15
 8007efa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007f14:	60da      	str	r2, [r3, #12]
 8007f16:	e0b9      	b.n	800808c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f1e:	e0b5      	b.n	800808c <UART_SetConfig+0xa94>
 8007f20:	03d09000 	.word	0x03d09000
 8007f24:	003d0900 	.word	0x003d0900
 8007f28:	08008f98 	.word	0x08008f98
 8007f2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	dc49      	bgt.n	8007fcc <UART_SetConfig+0x9d4>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	db7c      	blt.n	8008036 <UART_SetConfig+0xa3e>
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d87a      	bhi.n	8008036 <UART_SetConfig+0xa3e>
 8007f40:	a201      	add	r2, pc, #4	@ (adr r2, 8007f48 <UART_SetConfig+0x950>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007fd3 	.word	0x08007fd3
 8007f4c:	08007fdb 	.word	0x08007fdb
 8007f50:	08008037 	.word	0x08008037
 8007f54:	08008037 	.word	0x08008037
 8007f58:	08007fe3 	.word	0x08007fe3
 8007f5c:	08008037 	.word	0x08008037
 8007f60:	08008037 	.word	0x08008037
 8007f64:	08008037 	.word	0x08008037
 8007f68:	08007ff3 	.word	0x08007ff3
 8007f6c:	08008037 	.word	0x08008037
 8007f70:	08008037 	.word	0x08008037
 8007f74:	08008037 	.word	0x08008037
 8007f78:	08008037 	.word	0x08008037
 8007f7c:	08008037 	.word	0x08008037
 8007f80:	08008037 	.word	0x08008037
 8007f84:	08008037 	.word	0x08008037
 8007f88:	08008003 	.word	0x08008003
 8007f8c:	08008037 	.word	0x08008037
 8007f90:	08008037 	.word	0x08008037
 8007f94:	08008037 	.word	0x08008037
 8007f98:	08008037 	.word	0x08008037
 8007f9c:	08008037 	.word	0x08008037
 8007fa0:	08008037 	.word	0x08008037
 8007fa4:	08008037 	.word	0x08008037
 8007fa8:	08008037 	.word	0x08008037
 8007fac:	08008037 	.word	0x08008037
 8007fb0:	08008037 	.word	0x08008037
 8007fb4:	08008037 	.word	0x08008037
 8007fb8:	08008037 	.word	0x08008037
 8007fbc:	08008037 	.word	0x08008037
 8007fc0:	08008037 	.word	0x08008037
 8007fc4:	08008037 	.word	0x08008037
 8007fc8:	08008029 	.word	0x08008029
 8007fcc:	2b40      	cmp	r3, #64	@ 0x40
 8007fce:	d02e      	beq.n	800802e <UART_SetConfig+0xa36>
 8007fd0:	e031      	b.n	8008036 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd2:	f7fc fc9b 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8007fd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fd8:	e033      	b.n	8008042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fda:	f7fc fcad 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8007fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fe0:	e02f      	b.n	8008042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd fedc 	bl	8005da4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff0:	e027      	b.n	8008042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff2:	f107 0318 	add.w	r3, r7, #24
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe f828 	bl	800604c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008000:	e01f      	b.n	8008042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008002:	4b2d      	ldr	r3, [pc, #180]	@ (80080b8 <UART_SetConfig+0xac0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800800e:	4b2a      	ldr	r3, [pc, #168]	@ (80080b8 <UART_SetConfig+0xac0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	08db      	lsrs	r3, r3, #3
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	4a28      	ldr	r2, [pc, #160]	@ (80080bc <UART_SetConfig+0xac4>)
 800801a:	fa22 f303 	lsr.w	r3, r2, r3
 800801e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008020:	e00f      	b.n	8008042 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008022:	4b26      	ldr	r3, [pc, #152]	@ (80080bc <UART_SetConfig+0xac4>)
 8008024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008026:	e00c      	b.n	8008042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008028:	4b25      	ldr	r3, [pc, #148]	@ (80080c0 <UART_SetConfig+0xac8>)
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800802c:	e009      	b.n	8008042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008034:	e005      	b.n	8008042 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008040:	bf00      	nop
    }

    if (pclk != 0U)
 8008042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d021      	beq.n	800808c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	4a1d      	ldr	r2, [pc, #116]	@ (80080c4 <UART_SetConfig+0xacc>)
 800804e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008052:	461a      	mov	r2, r3
 8008054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008056:	fbb3 f2f2 	udiv	r2, r3, r2
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	085b      	lsrs	r3, r3, #1
 8008060:	441a      	add	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	fbb2 f3f3 	udiv	r3, r2, r3
 800806a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	2b0f      	cmp	r3, #15
 8008070:	d909      	bls.n	8008086 <UART_SetConfig+0xa8e>
 8008072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008078:	d205      	bcs.n	8008086 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	b29a      	uxth	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60da      	str	r2, [r3, #12]
 8008084:	e002      	b.n	800808c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2201      	movs	r2, #1
 8008090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2201      	movs	r2, #1
 8008098:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2200      	movs	r2, #0
 80080a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2200      	movs	r2, #0
 80080a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3748      	adds	r7, #72	@ 0x48
 80080b0:	46bd      	mov	sp, r7
 80080b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080b6:	bf00      	nop
 80080b8:	58024400 	.word	0x58024400
 80080bc:	03d09000 	.word	0x03d09000
 80080c0:	003d0900 	.word	0x003d0900
 80080c4:	08008f98 	.word	0x08008f98

080080c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01a      	beq.n	80081de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081c6:	d10a      	bne.n	80081de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	605a      	str	r2, [r3, #4]
  }
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b098      	sub	sp, #96	@ 0x60
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800821c:	f7f9 fe98 	bl	8001f50 <HAL_GetTick>
 8008220:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b08      	cmp	r3, #8
 800822e:	d12f      	bne.n	8008290 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008230:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008238:	2200      	movs	r2, #0
 800823a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f88e 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d022      	beq.n	8008290 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800825e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008268:	647b      	str	r3, [r7, #68]	@ 0x44
 800826a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800826e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e6      	bne.n	800824a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e063      	b.n	8008358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b04      	cmp	r3, #4
 800829c:	d149      	bne.n	8008332 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800829e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082a6:	2200      	movs	r2, #0
 80082a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f857 	bl	8008360 <UART_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d03c      	beq.n	8008332 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	623b      	str	r3, [r7, #32]
   return(result);
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80082d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e6      	bne.n	80082b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800830a:	61fa      	str	r2, [r7, #28]
 800830c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	69b9      	ldr	r1, [r7, #24]
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	617b      	str	r3, [r7, #20]
   return(result);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e5      	bne.n	80082ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e012      	b.n	8008358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3758      	adds	r7, #88	@ 0x58
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4613      	mov	r3, r2
 800836e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008370:	e04f      	b.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d04b      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837a:	f7f9 fde9 	bl	8001f50 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	429a      	cmp	r2, r3
 8008388:	d302      	bcc.n	8008390 <UART_WaitOnFlagUntilTimeout+0x30>
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e04e      	b.n	8008432 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d037      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b80      	cmp	r3, #128	@ 0x80
 80083a6:	d034      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b40      	cmp	r3, #64	@ 0x40
 80083ac:	d031      	beq.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d110      	bne.n	80083de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2208      	movs	r2, #8
 80083c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f839 	bl	800843c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2208      	movs	r2, #8
 80083ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e029      	b.n	8008432 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ec:	d111      	bne.n	8008412 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 f81f 	bl	800843c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e00f      	b.n	8008432 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4013      	ands	r3, r2
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	bf0c      	ite	eq
 8008422:	2301      	moveq	r3, #1
 8008424:	2300      	movne	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	429a      	cmp	r2, r3
 800842e:	d0a0      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b095      	sub	sp, #84	@ 0x54
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008462:	643b      	str	r3, [r7, #64]	@ 0x40
 8008464:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008468:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e6      	bne.n	8008444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3308      	adds	r3, #8
 800847c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	61fb      	str	r3, [r7, #28]
   return(result);
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	4b1e      	ldr	r3, [pc, #120]	@ (8008504 <UART_EndRxTransfer+0xc8>)
 800848a:	4013      	ands	r3, r2
 800848c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3308      	adds	r3, #8
 8008494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008496:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008498:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800849c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e5      	bne.n	8008476 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d118      	bne.n	80084e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 0310 	bic.w	r3, r3, #16
 80084c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6979      	ldr	r1, [r7, #20]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	613b      	str	r3, [r7, #16]
   return(result);
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e6      	bne.n	80084b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80084f8:	bf00      	nop
 80084fa:	3754      	adds	r7, #84	@ 0x54
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	effffffe 	.word	0xeffffffe

08008508 <_vsniprintf_r>:
 8008508:	b530      	push	{r4, r5, lr}
 800850a:	4614      	mov	r4, r2
 800850c:	2c00      	cmp	r4, #0
 800850e:	b09b      	sub	sp, #108	@ 0x6c
 8008510:	4605      	mov	r5, r0
 8008512:	461a      	mov	r2, r3
 8008514:	da05      	bge.n	8008522 <_vsniprintf_r+0x1a>
 8008516:	238b      	movs	r3, #139	@ 0x8b
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	f04f 30ff 	mov.w	r0, #4294967295
 800851e:	b01b      	add	sp, #108	@ 0x6c
 8008520:	bd30      	pop	{r4, r5, pc}
 8008522:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008526:	f8ad 300c 	strh.w	r3, [sp, #12]
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	9319      	str	r3, [sp, #100]	@ 0x64
 8008530:	bf14      	ite	ne
 8008532:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008536:	4623      	moveq	r3, r4
 8008538:	9302      	str	r3, [sp, #8]
 800853a:	9305      	str	r3, [sp, #20]
 800853c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008540:	9100      	str	r1, [sp, #0]
 8008542:	9104      	str	r1, [sp, #16]
 8008544:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008548:	4669      	mov	r1, sp
 800854a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800854c:	f000 f9ae 	bl	80088ac <_svfiprintf_r>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	bfbc      	itt	lt
 8008554:	238b      	movlt	r3, #139	@ 0x8b
 8008556:	602b      	strlt	r3, [r5, #0]
 8008558:	2c00      	cmp	r4, #0
 800855a:	d0e0      	beq.n	800851e <_vsniprintf_r+0x16>
 800855c:	9b00      	ldr	r3, [sp, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e7dc      	b.n	800851e <_vsniprintf_r+0x16>

08008564 <vsniprintf>:
 8008564:	b507      	push	{r0, r1, r2, lr}
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	460a      	mov	r2, r1
 800856c:	4601      	mov	r1, r0
 800856e:	4803      	ldr	r0, [pc, #12]	@ (800857c <vsniprintf+0x18>)
 8008570:	6800      	ldr	r0, [r0, #0]
 8008572:	f7ff ffc9 	bl	8008508 <_vsniprintf_r>
 8008576:	b003      	add	sp, #12
 8008578:	f85d fb04 	ldr.w	pc, [sp], #4
 800857c:	24001048 	.word	0x24001048

08008580 <memset>:
 8008580:	4402      	add	r2, r0
 8008582:	4603      	mov	r3, r0
 8008584:	4293      	cmp	r3, r2
 8008586:	d100      	bne.n	800858a <memset+0xa>
 8008588:	4770      	bx	lr
 800858a:	f803 1b01 	strb.w	r1, [r3], #1
 800858e:	e7f9      	b.n	8008584 <memset+0x4>

08008590 <__errno>:
 8008590:	4b01      	ldr	r3, [pc, #4]	@ (8008598 <__errno+0x8>)
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	24001048 	.word	0x24001048

0800859c <__libc_init_array>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4d0d      	ldr	r5, [pc, #52]	@ (80085d4 <__libc_init_array+0x38>)
 80085a0:	4c0d      	ldr	r4, [pc, #52]	@ (80085d8 <__libc_init_array+0x3c>)
 80085a2:	1b64      	subs	r4, r4, r5
 80085a4:	10a4      	asrs	r4, r4, #2
 80085a6:	2600      	movs	r6, #0
 80085a8:	42a6      	cmp	r6, r4
 80085aa:	d109      	bne.n	80085c0 <__libc_init_array+0x24>
 80085ac:	4d0b      	ldr	r5, [pc, #44]	@ (80085dc <__libc_init_array+0x40>)
 80085ae:	4c0c      	ldr	r4, [pc, #48]	@ (80085e0 <__libc_init_array+0x44>)
 80085b0:	f000 fc64 	bl	8008e7c <_init>
 80085b4:	1b64      	subs	r4, r4, r5
 80085b6:	10a4      	asrs	r4, r4, #2
 80085b8:	2600      	movs	r6, #0
 80085ba:	42a6      	cmp	r6, r4
 80085bc:	d105      	bne.n	80085ca <__libc_init_array+0x2e>
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c4:	4798      	blx	r3
 80085c6:	3601      	adds	r6, #1
 80085c8:	e7ee      	b.n	80085a8 <__libc_init_array+0xc>
 80085ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ce:	4798      	blx	r3
 80085d0:	3601      	adds	r6, #1
 80085d2:	e7f2      	b.n	80085ba <__libc_init_array+0x1e>
 80085d4:	08008fec 	.word	0x08008fec
 80085d8:	08008fec 	.word	0x08008fec
 80085dc:	08008fec 	.word	0x08008fec
 80085e0:	08008ff0 	.word	0x08008ff0

080085e4 <__retarget_lock_acquire_recursive>:
 80085e4:	4770      	bx	lr

080085e6 <__retarget_lock_release_recursive>:
 80085e6:	4770      	bx	lr

080085e8 <memcpy>:
 80085e8:	440a      	add	r2, r1
 80085ea:	4291      	cmp	r1, r2
 80085ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f0:	d100      	bne.n	80085f4 <memcpy+0xc>
 80085f2:	4770      	bx	lr
 80085f4:	b510      	push	{r4, lr}
 80085f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fe:	4291      	cmp	r1, r2
 8008600:	d1f9      	bne.n	80085f6 <memcpy+0xe>
 8008602:	bd10      	pop	{r4, pc}

08008604 <_free_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4605      	mov	r5, r0
 8008608:	2900      	cmp	r1, #0
 800860a:	d041      	beq.n	8008690 <_free_r+0x8c>
 800860c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008610:	1f0c      	subs	r4, r1, #4
 8008612:	2b00      	cmp	r3, #0
 8008614:	bfb8      	it	lt
 8008616:	18e4      	addlt	r4, r4, r3
 8008618:	f000 f8e0 	bl	80087dc <__malloc_lock>
 800861c:	4a1d      	ldr	r2, [pc, #116]	@ (8008694 <_free_r+0x90>)
 800861e:	6813      	ldr	r3, [r2, #0]
 8008620:	b933      	cbnz	r3, 8008630 <_free_r+0x2c>
 8008622:	6063      	str	r3, [r4, #4]
 8008624:	6014      	str	r4, [r2, #0]
 8008626:	4628      	mov	r0, r5
 8008628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800862c:	f000 b8dc 	b.w	80087e8 <__malloc_unlock>
 8008630:	42a3      	cmp	r3, r4
 8008632:	d908      	bls.n	8008646 <_free_r+0x42>
 8008634:	6820      	ldr	r0, [r4, #0]
 8008636:	1821      	adds	r1, r4, r0
 8008638:	428b      	cmp	r3, r1
 800863a:	bf01      	itttt	eq
 800863c:	6819      	ldreq	r1, [r3, #0]
 800863e:	685b      	ldreq	r3, [r3, #4]
 8008640:	1809      	addeq	r1, r1, r0
 8008642:	6021      	streq	r1, [r4, #0]
 8008644:	e7ed      	b.n	8008622 <_free_r+0x1e>
 8008646:	461a      	mov	r2, r3
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	b10b      	cbz	r3, 8008650 <_free_r+0x4c>
 800864c:	42a3      	cmp	r3, r4
 800864e:	d9fa      	bls.n	8008646 <_free_r+0x42>
 8008650:	6811      	ldr	r1, [r2, #0]
 8008652:	1850      	adds	r0, r2, r1
 8008654:	42a0      	cmp	r0, r4
 8008656:	d10b      	bne.n	8008670 <_free_r+0x6c>
 8008658:	6820      	ldr	r0, [r4, #0]
 800865a:	4401      	add	r1, r0
 800865c:	1850      	adds	r0, r2, r1
 800865e:	4283      	cmp	r3, r0
 8008660:	6011      	str	r1, [r2, #0]
 8008662:	d1e0      	bne.n	8008626 <_free_r+0x22>
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	6053      	str	r3, [r2, #4]
 800866a:	4408      	add	r0, r1
 800866c:	6010      	str	r0, [r2, #0]
 800866e:	e7da      	b.n	8008626 <_free_r+0x22>
 8008670:	d902      	bls.n	8008678 <_free_r+0x74>
 8008672:	230c      	movs	r3, #12
 8008674:	602b      	str	r3, [r5, #0]
 8008676:	e7d6      	b.n	8008626 <_free_r+0x22>
 8008678:	6820      	ldr	r0, [r4, #0]
 800867a:	1821      	adds	r1, r4, r0
 800867c:	428b      	cmp	r3, r1
 800867e:	bf04      	itt	eq
 8008680:	6819      	ldreq	r1, [r3, #0]
 8008682:	685b      	ldreq	r3, [r3, #4]
 8008684:	6063      	str	r3, [r4, #4]
 8008686:	bf04      	itt	eq
 8008688:	1809      	addeq	r1, r1, r0
 800868a:	6021      	streq	r1, [r4, #0]
 800868c:	6054      	str	r4, [r2, #4]
 800868e:	e7ca      	b.n	8008626 <_free_r+0x22>
 8008690:	bd38      	pop	{r3, r4, r5, pc}
 8008692:	bf00      	nop
 8008694:	2400144c 	.word	0x2400144c

08008698 <sbrk_aligned>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	4e0f      	ldr	r6, [pc, #60]	@ (80086d8 <sbrk_aligned+0x40>)
 800869c:	460c      	mov	r4, r1
 800869e:	6831      	ldr	r1, [r6, #0]
 80086a0:	4605      	mov	r5, r0
 80086a2:	b911      	cbnz	r1, 80086aa <sbrk_aligned+0x12>
 80086a4:	f000 fba4 	bl	8008df0 <_sbrk_r>
 80086a8:	6030      	str	r0, [r6, #0]
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 fb9f 	bl	8008df0 <_sbrk_r>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d103      	bne.n	80086be <sbrk_aligned+0x26>
 80086b6:	f04f 34ff 	mov.w	r4, #4294967295
 80086ba:	4620      	mov	r0, r4
 80086bc:	bd70      	pop	{r4, r5, r6, pc}
 80086be:	1cc4      	adds	r4, r0, #3
 80086c0:	f024 0403 	bic.w	r4, r4, #3
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d0f8      	beq.n	80086ba <sbrk_aligned+0x22>
 80086c8:	1a21      	subs	r1, r4, r0
 80086ca:	4628      	mov	r0, r5
 80086cc:	f000 fb90 	bl	8008df0 <_sbrk_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	d1f2      	bne.n	80086ba <sbrk_aligned+0x22>
 80086d4:	e7ef      	b.n	80086b6 <sbrk_aligned+0x1e>
 80086d6:	bf00      	nop
 80086d8:	24001448 	.word	0x24001448

080086dc <_malloc_r>:
 80086dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	1ccd      	adds	r5, r1, #3
 80086e2:	f025 0503 	bic.w	r5, r5, #3
 80086e6:	3508      	adds	r5, #8
 80086e8:	2d0c      	cmp	r5, #12
 80086ea:	bf38      	it	cc
 80086ec:	250c      	movcc	r5, #12
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	4606      	mov	r6, r0
 80086f2:	db01      	blt.n	80086f8 <_malloc_r+0x1c>
 80086f4:	42a9      	cmp	r1, r5
 80086f6:	d904      	bls.n	8008702 <_malloc_r+0x26>
 80086f8:	230c      	movs	r3, #12
 80086fa:	6033      	str	r3, [r6, #0]
 80086fc:	2000      	movs	r0, #0
 80086fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087d8 <_malloc_r+0xfc>
 8008706:	f000 f869 	bl	80087dc <__malloc_lock>
 800870a:	f8d8 3000 	ldr.w	r3, [r8]
 800870e:	461c      	mov	r4, r3
 8008710:	bb44      	cbnz	r4, 8008764 <_malloc_r+0x88>
 8008712:	4629      	mov	r1, r5
 8008714:	4630      	mov	r0, r6
 8008716:	f7ff ffbf 	bl	8008698 <sbrk_aligned>
 800871a:	1c43      	adds	r3, r0, #1
 800871c:	4604      	mov	r4, r0
 800871e:	d158      	bne.n	80087d2 <_malloc_r+0xf6>
 8008720:	f8d8 4000 	ldr.w	r4, [r8]
 8008724:	4627      	mov	r7, r4
 8008726:	2f00      	cmp	r7, #0
 8008728:	d143      	bne.n	80087b2 <_malloc_r+0xd6>
 800872a:	2c00      	cmp	r4, #0
 800872c:	d04b      	beq.n	80087c6 <_malloc_r+0xea>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	4639      	mov	r1, r7
 8008732:	4630      	mov	r0, r6
 8008734:	eb04 0903 	add.w	r9, r4, r3
 8008738:	f000 fb5a 	bl	8008df0 <_sbrk_r>
 800873c:	4581      	cmp	r9, r0
 800873e:	d142      	bne.n	80087c6 <_malloc_r+0xea>
 8008740:	6821      	ldr	r1, [r4, #0]
 8008742:	1a6d      	subs	r5, r5, r1
 8008744:	4629      	mov	r1, r5
 8008746:	4630      	mov	r0, r6
 8008748:	f7ff ffa6 	bl	8008698 <sbrk_aligned>
 800874c:	3001      	adds	r0, #1
 800874e:	d03a      	beq.n	80087c6 <_malloc_r+0xea>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	442b      	add	r3, r5
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	f8d8 3000 	ldr.w	r3, [r8]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	bb62      	cbnz	r2, 80087b8 <_malloc_r+0xdc>
 800875e:	f8c8 7000 	str.w	r7, [r8]
 8008762:	e00f      	b.n	8008784 <_malloc_r+0xa8>
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	1b52      	subs	r2, r2, r5
 8008768:	d420      	bmi.n	80087ac <_malloc_r+0xd0>
 800876a:	2a0b      	cmp	r2, #11
 800876c:	d917      	bls.n	800879e <_malloc_r+0xc2>
 800876e:	1961      	adds	r1, r4, r5
 8008770:	42a3      	cmp	r3, r4
 8008772:	6025      	str	r5, [r4, #0]
 8008774:	bf18      	it	ne
 8008776:	6059      	strne	r1, [r3, #4]
 8008778:	6863      	ldr	r3, [r4, #4]
 800877a:	bf08      	it	eq
 800877c:	f8c8 1000 	streq.w	r1, [r8]
 8008780:	5162      	str	r2, [r4, r5]
 8008782:	604b      	str	r3, [r1, #4]
 8008784:	4630      	mov	r0, r6
 8008786:	f000 f82f 	bl	80087e8 <__malloc_unlock>
 800878a:	f104 000b 	add.w	r0, r4, #11
 800878e:	1d23      	adds	r3, r4, #4
 8008790:	f020 0007 	bic.w	r0, r0, #7
 8008794:	1ac2      	subs	r2, r0, r3
 8008796:	bf1c      	itt	ne
 8008798:	1a1b      	subne	r3, r3, r0
 800879a:	50a3      	strne	r3, [r4, r2]
 800879c:	e7af      	b.n	80086fe <_malloc_r+0x22>
 800879e:	6862      	ldr	r2, [r4, #4]
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	bf0c      	ite	eq
 80087a4:	f8c8 2000 	streq.w	r2, [r8]
 80087a8:	605a      	strne	r2, [r3, #4]
 80087aa:	e7eb      	b.n	8008784 <_malloc_r+0xa8>
 80087ac:	4623      	mov	r3, r4
 80087ae:	6864      	ldr	r4, [r4, #4]
 80087b0:	e7ae      	b.n	8008710 <_malloc_r+0x34>
 80087b2:	463c      	mov	r4, r7
 80087b4:	687f      	ldr	r7, [r7, #4]
 80087b6:	e7b6      	b.n	8008726 <_malloc_r+0x4a>
 80087b8:	461a      	mov	r2, r3
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	42a3      	cmp	r3, r4
 80087be:	d1fb      	bne.n	80087b8 <_malloc_r+0xdc>
 80087c0:	2300      	movs	r3, #0
 80087c2:	6053      	str	r3, [r2, #4]
 80087c4:	e7de      	b.n	8008784 <_malloc_r+0xa8>
 80087c6:	230c      	movs	r3, #12
 80087c8:	6033      	str	r3, [r6, #0]
 80087ca:	4630      	mov	r0, r6
 80087cc:	f000 f80c 	bl	80087e8 <__malloc_unlock>
 80087d0:	e794      	b.n	80086fc <_malloc_r+0x20>
 80087d2:	6005      	str	r5, [r0, #0]
 80087d4:	e7d6      	b.n	8008784 <_malloc_r+0xa8>
 80087d6:	bf00      	nop
 80087d8:	2400144c 	.word	0x2400144c

080087dc <__malloc_lock>:
 80087dc:	4801      	ldr	r0, [pc, #4]	@ (80087e4 <__malloc_lock+0x8>)
 80087de:	f7ff bf01 	b.w	80085e4 <__retarget_lock_acquire_recursive>
 80087e2:	bf00      	nop
 80087e4:	24001444 	.word	0x24001444

080087e8 <__malloc_unlock>:
 80087e8:	4801      	ldr	r0, [pc, #4]	@ (80087f0 <__malloc_unlock+0x8>)
 80087ea:	f7ff befc 	b.w	80085e6 <__retarget_lock_release_recursive>
 80087ee:	bf00      	nop
 80087f0:	24001444 	.word	0x24001444

080087f4 <__ssputs_r>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	688e      	ldr	r6, [r1, #8]
 80087fa:	461f      	mov	r7, r3
 80087fc:	42be      	cmp	r6, r7
 80087fe:	680b      	ldr	r3, [r1, #0]
 8008800:	4682      	mov	sl, r0
 8008802:	460c      	mov	r4, r1
 8008804:	4690      	mov	r8, r2
 8008806:	d82d      	bhi.n	8008864 <__ssputs_r+0x70>
 8008808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800880c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008810:	d026      	beq.n	8008860 <__ssputs_r+0x6c>
 8008812:	6965      	ldr	r5, [r4, #20]
 8008814:	6909      	ldr	r1, [r1, #16]
 8008816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800881a:	eba3 0901 	sub.w	r9, r3, r1
 800881e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008822:	1c7b      	adds	r3, r7, #1
 8008824:	444b      	add	r3, r9
 8008826:	106d      	asrs	r5, r5, #1
 8008828:	429d      	cmp	r5, r3
 800882a:	bf38      	it	cc
 800882c:	461d      	movcc	r5, r3
 800882e:	0553      	lsls	r3, r2, #21
 8008830:	d527      	bpl.n	8008882 <__ssputs_r+0x8e>
 8008832:	4629      	mov	r1, r5
 8008834:	f7ff ff52 	bl	80086dc <_malloc_r>
 8008838:	4606      	mov	r6, r0
 800883a:	b360      	cbz	r0, 8008896 <__ssputs_r+0xa2>
 800883c:	6921      	ldr	r1, [r4, #16]
 800883e:	464a      	mov	r2, r9
 8008840:	f7ff fed2 	bl	80085e8 <memcpy>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800884a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800884e:	81a3      	strh	r3, [r4, #12]
 8008850:	6126      	str	r6, [r4, #16]
 8008852:	6165      	str	r5, [r4, #20]
 8008854:	444e      	add	r6, r9
 8008856:	eba5 0509 	sub.w	r5, r5, r9
 800885a:	6026      	str	r6, [r4, #0]
 800885c:	60a5      	str	r5, [r4, #8]
 800885e:	463e      	mov	r6, r7
 8008860:	42be      	cmp	r6, r7
 8008862:	d900      	bls.n	8008866 <__ssputs_r+0x72>
 8008864:	463e      	mov	r6, r7
 8008866:	6820      	ldr	r0, [r4, #0]
 8008868:	4632      	mov	r2, r6
 800886a:	4641      	mov	r1, r8
 800886c:	f000 faa6 	bl	8008dbc <memmove>
 8008870:	68a3      	ldr	r3, [r4, #8]
 8008872:	1b9b      	subs	r3, r3, r6
 8008874:	60a3      	str	r3, [r4, #8]
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	4433      	add	r3, r6
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	2000      	movs	r0, #0
 800887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008882:	462a      	mov	r2, r5
 8008884:	f000 fac4 	bl	8008e10 <_realloc_r>
 8008888:	4606      	mov	r6, r0
 800888a:	2800      	cmp	r0, #0
 800888c:	d1e0      	bne.n	8008850 <__ssputs_r+0x5c>
 800888e:	6921      	ldr	r1, [r4, #16]
 8008890:	4650      	mov	r0, sl
 8008892:	f7ff feb7 	bl	8008604 <_free_r>
 8008896:	230c      	movs	r3, #12
 8008898:	f8ca 3000 	str.w	r3, [sl]
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a2:	81a3      	strh	r3, [r4, #12]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e7e9      	b.n	800887e <__ssputs_r+0x8a>
	...

080088ac <_svfiprintf_r>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	4698      	mov	r8, r3
 80088b2:	898b      	ldrh	r3, [r1, #12]
 80088b4:	061b      	lsls	r3, r3, #24
 80088b6:	b09d      	sub	sp, #116	@ 0x74
 80088b8:	4607      	mov	r7, r0
 80088ba:	460d      	mov	r5, r1
 80088bc:	4614      	mov	r4, r2
 80088be:	d510      	bpl.n	80088e2 <_svfiprintf_r+0x36>
 80088c0:	690b      	ldr	r3, [r1, #16]
 80088c2:	b973      	cbnz	r3, 80088e2 <_svfiprintf_r+0x36>
 80088c4:	2140      	movs	r1, #64	@ 0x40
 80088c6:	f7ff ff09 	bl	80086dc <_malloc_r>
 80088ca:	6028      	str	r0, [r5, #0]
 80088cc:	6128      	str	r0, [r5, #16]
 80088ce:	b930      	cbnz	r0, 80088de <_svfiprintf_r+0x32>
 80088d0:	230c      	movs	r3, #12
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	b01d      	add	sp, #116	@ 0x74
 80088da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088de:	2340      	movs	r3, #64	@ 0x40
 80088e0:	616b      	str	r3, [r5, #20]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e6:	2320      	movs	r3, #32
 80088e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80088f0:	2330      	movs	r3, #48	@ 0x30
 80088f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a90 <_svfiprintf_r+0x1e4>
 80088f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088fa:	f04f 0901 	mov.w	r9, #1
 80088fe:	4623      	mov	r3, r4
 8008900:	469a      	mov	sl, r3
 8008902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008906:	b10a      	cbz	r2, 800890c <_svfiprintf_r+0x60>
 8008908:	2a25      	cmp	r2, #37	@ 0x25
 800890a:	d1f9      	bne.n	8008900 <_svfiprintf_r+0x54>
 800890c:	ebba 0b04 	subs.w	fp, sl, r4
 8008910:	d00b      	beq.n	800892a <_svfiprintf_r+0x7e>
 8008912:	465b      	mov	r3, fp
 8008914:	4622      	mov	r2, r4
 8008916:	4629      	mov	r1, r5
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff ff6b 	bl	80087f4 <__ssputs_r>
 800891e:	3001      	adds	r0, #1
 8008920:	f000 80a7 	beq.w	8008a72 <_svfiprintf_r+0x1c6>
 8008924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008926:	445a      	add	r2, fp
 8008928:	9209      	str	r2, [sp, #36]	@ 0x24
 800892a:	f89a 3000 	ldrb.w	r3, [sl]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 809f 	beq.w	8008a72 <_svfiprintf_r+0x1c6>
 8008934:	2300      	movs	r3, #0
 8008936:	f04f 32ff 	mov.w	r2, #4294967295
 800893a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800893e:	f10a 0a01 	add.w	sl, sl, #1
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	9307      	str	r3, [sp, #28]
 8008946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800894a:	931a      	str	r3, [sp, #104]	@ 0x68
 800894c:	4654      	mov	r4, sl
 800894e:	2205      	movs	r2, #5
 8008950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008954:	484e      	ldr	r0, [pc, #312]	@ (8008a90 <_svfiprintf_r+0x1e4>)
 8008956:	f7f7 fccb 	bl	80002f0 <memchr>
 800895a:	9a04      	ldr	r2, [sp, #16]
 800895c:	b9d8      	cbnz	r0, 8008996 <_svfiprintf_r+0xea>
 800895e:	06d0      	lsls	r0, r2, #27
 8008960:	bf44      	itt	mi
 8008962:	2320      	movmi	r3, #32
 8008964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008968:	0711      	lsls	r1, r2, #28
 800896a:	bf44      	itt	mi
 800896c:	232b      	movmi	r3, #43	@ 0x2b
 800896e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008972:	f89a 3000 	ldrb.w	r3, [sl]
 8008976:	2b2a      	cmp	r3, #42	@ 0x2a
 8008978:	d015      	beq.n	80089a6 <_svfiprintf_r+0xfa>
 800897a:	9a07      	ldr	r2, [sp, #28]
 800897c:	4654      	mov	r4, sl
 800897e:	2000      	movs	r0, #0
 8008980:	f04f 0c0a 	mov.w	ip, #10
 8008984:	4621      	mov	r1, r4
 8008986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800898a:	3b30      	subs	r3, #48	@ 0x30
 800898c:	2b09      	cmp	r3, #9
 800898e:	d94b      	bls.n	8008a28 <_svfiprintf_r+0x17c>
 8008990:	b1b0      	cbz	r0, 80089c0 <_svfiprintf_r+0x114>
 8008992:	9207      	str	r2, [sp, #28]
 8008994:	e014      	b.n	80089c0 <_svfiprintf_r+0x114>
 8008996:	eba0 0308 	sub.w	r3, r0, r8
 800899a:	fa09 f303 	lsl.w	r3, r9, r3
 800899e:	4313      	orrs	r3, r2
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	46a2      	mov	sl, r4
 80089a4:	e7d2      	b.n	800894c <_svfiprintf_r+0xa0>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	1d19      	adds	r1, r3, #4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	9103      	str	r1, [sp, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bfbb      	ittet	lt
 80089b2:	425b      	neglt	r3, r3
 80089b4:	f042 0202 	orrlt.w	r2, r2, #2
 80089b8:	9307      	strge	r3, [sp, #28]
 80089ba:	9307      	strlt	r3, [sp, #28]
 80089bc:	bfb8      	it	lt
 80089be:	9204      	strlt	r2, [sp, #16]
 80089c0:	7823      	ldrb	r3, [r4, #0]
 80089c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80089c4:	d10a      	bne.n	80089dc <_svfiprintf_r+0x130>
 80089c6:	7863      	ldrb	r3, [r4, #1]
 80089c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ca:	d132      	bne.n	8008a32 <_svfiprintf_r+0x186>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	1d1a      	adds	r2, r3, #4
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	9203      	str	r2, [sp, #12]
 80089d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089d8:	3402      	adds	r4, #2
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008aa0 <_svfiprintf_r+0x1f4>
 80089e0:	7821      	ldrb	r1, [r4, #0]
 80089e2:	2203      	movs	r2, #3
 80089e4:	4650      	mov	r0, sl
 80089e6:	f7f7 fc83 	bl	80002f0 <memchr>
 80089ea:	b138      	cbz	r0, 80089fc <_svfiprintf_r+0x150>
 80089ec:	9b04      	ldr	r3, [sp, #16]
 80089ee:	eba0 000a 	sub.w	r0, r0, sl
 80089f2:	2240      	movs	r2, #64	@ 0x40
 80089f4:	4082      	lsls	r2, r0
 80089f6:	4313      	orrs	r3, r2
 80089f8:	3401      	adds	r4, #1
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a00:	4824      	ldr	r0, [pc, #144]	@ (8008a94 <_svfiprintf_r+0x1e8>)
 8008a02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a06:	2206      	movs	r2, #6
 8008a08:	f7f7 fc72 	bl	80002f0 <memchr>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d036      	beq.n	8008a7e <_svfiprintf_r+0x1d2>
 8008a10:	4b21      	ldr	r3, [pc, #132]	@ (8008a98 <_svfiprintf_r+0x1ec>)
 8008a12:	bb1b      	cbnz	r3, 8008a5c <_svfiprintf_r+0x1b0>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	3307      	adds	r3, #7
 8008a18:	f023 0307 	bic.w	r3, r3, #7
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a22:	4433      	add	r3, r6
 8008a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a26:	e76a      	b.n	80088fe <_svfiprintf_r+0x52>
 8008a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	2001      	movs	r0, #1
 8008a30:	e7a8      	b.n	8008984 <_svfiprintf_r+0xd8>
 8008a32:	2300      	movs	r3, #0
 8008a34:	3401      	adds	r4, #1
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f04f 0c0a 	mov.w	ip, #10
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a44:	3a30      	subs	r2, #48	@ 0x30
 8008a46:	2a09      	cmp	r2, #9
 8008a48:	d903      	bls.n	8008a52 <_svfiprintf_r+0x1a6>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0c6      	beq.n	80089dc <_svfiprintf_r+0x130>
 8008a4e:	9105      	str	r1, [sp, #20]
 8008a50:	e7c4      	b.n	80089dc <_svfiprintf_r+0x130>
 8008a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a56:	4604      	mov	r4, r0
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e7f0      	b.n	8008a3e <_svfiprintf_r+0x192>
 8008a5c:	ab03      	add	r3, sp, #12
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	462a      	mov	r2, r5
 8008a62:	4b0e      	ldr	r3, [pc, #56]	@ (8008a9c <_svfiprintf_r+0x1f0>)
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	4638      	mov	r0, r7
 8008a68:	f3af 8000 	nop.w
 8008a6c:	1c42      	adds	r2, r0, #1
 8008a6e:	4606      	mov	r6, r0
 8008a70:	d1d6      	bne.n	8008a20 <_svfiprintf_r+0x174>
 8008a72:	89ab      	ldrh	r3, [r5, #12]
 8008a74:	065b      	lsls	r3, r3, #25
 8008a76:	f53f af2d 	bmi.w	80088d4 <_svfiprintf_r+0x28>
 8008a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a7c:	e72c      	b.n	80088d8 <_svfiprintf_r+0x2c>
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	462a      	mov	r2, r5
 8008a84:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <_svfiprintf_r+0x1f0>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f000 f879 	bl	8008b80 <_printf_i>
 8008a8e:	e7ed      	b.n	8008a6c <_svfiprintf_r+0x1c0>
 8008a90:	08008fb0 	.word	0x08008fb0
 8008a94:	08008fba 	.word	0x08008fba
 8008a98:	00000000 	.word	0x00000000
 8008a9c:	080087f5 	.word	0x080087f5
 8008aa0:	08008fb6 	.word	0x08008fb6

08008aa4 <_printf_common>:
 8008aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	4698      	mov	r8, r3
 8008aac:	688a      	ldr	r2, [r1, #8]
 8008aae:	690b      	ldr	r3, [r1, #16]
 8008ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	bfb8      	it	lt
 8008ab8:	4613      	movlt	r3, r2
 8008aba:	6033      	str	r3, [r6, #0]
 8008abc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	b10a      	cbz	r2, 8008aca <_printf_common+0x26>
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	6033      	str	r3, [r6, #0]
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	0699      	lsls	r1, r3, #26
 8008ace:	bf42      	ittt	mi
 8008ad0:	6833      	ldrmi	r3, [r6, #0]
 8008ad2:	3302      	addmi	r3, #2
 8008ad4:	6033      	strmi	r3, [r6, #0]
 8008ad6:	6825      	ldr	r5, [r4, #0]
 8008ad8:	f015 0506 	ands.w	r5, r5, #6
 8008adc:	d106      	bne.n	8008aec <_printf_common+0x48>
 8008ade:	f104 0a19 	add.w	sl, r4, #25
 8008ae2:	68e3      	ldr	r3, [r4, #12]
 8008ae4:	6832      	ldr	r2, [r6, #0]
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	42ab      	cmp	r3, r5
 8008aea:	dc26      	bgt.n	8008b3a <_printf_common+0x96>
 8008aec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	3b00      	subs	r3, #0
 8008af4:	bf18      	it	ne
 8008af6:	2301      	movne	r3, #1
 8008af8:	0692      	lsls	r2, r2, #26
 8008afa:	d42b      	bmi.n	8008b54 <_printf_common+0xb0>
 8008afc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b00:	4641      	mov	r1, r8
 8008b02:	4638      	mov	r0, r7
 8008b04:	47c8      	blx	r9
 8008b06:	3001      	adds	r0, #1
 8008b08:	d01e      	beq.n	8008b48 <_printf_common+0xa4>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	6922      	ldr	r2, [r4, #16]
 8008b0e:	f003 0306 	and.w	r3, r3, #6
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	bf02      	ittt	eq
 8008b16:	68e5      	ldreq	r5, [r4, #12]
 8008b18:	6833      	ldreq	r3, [r6, #0]
 8008b1a:	1aed      	subeq	r5, r5, r3
 8008b1c:	68a3      	ldr	r3, [r4, #8]
 8008b1e:	bf0c      	ite	eq
 8008b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b24:	2500      	movne	r5, #0
 8008b26:	4293      	cmp	r3, r2
 8008b28:	bfc4      	itt	gt
 8008b2a:	1a9b      	subgt	r3, r3, r2
 8008b2c:	18ed      	addgt	r5, r5, r3
 8008b2e:	2600      	movs	r6, #0
 8008b30:	341a      	adds	r4, #26
 8008b32:	42b5      	cmp	r5, r6
 8008b34:	d11a      	bne.n	8008b6c <_printf_common+0xc8>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e008      	b.n	8008b4c <_printf_common+0xa8>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4652      	mov	r2, sl
 8008b3e:	4641      	mov	r1, r8
 8008b40:	4638      	mov	r0, r7
 8008b42:	47c8      	blx	r9
 8008b44:	3001      	adds	r0, #1
 8008b46:	d103      	bne.n	8008b50 <_printf_common+0xac>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b50:	3501      	adds	r5, #1
 8008b52:	e7c6      	b.n	8008ae2 <_printf_common+0x3e>
 8008b54:	18e1      	adds	r1, r4, r3
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	2030      	movs	r0, #48	@ 0x30
 8008b5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b5e:	4422      	add	r2, r4
 8008b60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b68:	3302      	adds	r3, #2
 8008b6a:	e7c7      	b.n	8008afc <_printf_common+0x58>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4622      	mov	r2, r4
 8008b70:	4641      	mov	r1, r8
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c8      	blx	r9
 8008b76:	3001      	adds	r0, #1
 8008b78:	d0e6      	beq.n	8008b48 <_printf_common+0xa4>
 8008b7a:	3601      	adds	r6, #1
 8008b7c:	e7d9      	b.n	8008b32 <_printf_common+0x8e>
	...

08008b80 <_printf_i>:
 8008b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	7e0f      	ldrb	r7, [r1, #24]
 8008b86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b88:	2f78      	cmp	r7, #120	@ 0x78
 8008b8a:	4691      	mov	r9, r2
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	469a      	mov	sl, r3
 8008b92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b96:	d807      	bhi.n	8008ba8 <_printf_i+0x28>
 8008b98:	2f62      	cmp	r7, #98	@ 0x62
 8008b9a:	d80a      	bhi.n	8008bb2 <_printf_i+0x32>
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	f000 80d1 	beq.w	8008d44 <_printf_i+0x1c4>
 8008ba2:	2f58      	cmp	r7, #88	@ 0x58
 8008ba4:	f000 80b8 	beq.w	8008d18 <_printf_i+0x198>
 8008ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bb0:	e03a      	b.n	8008c28 <_printf_i+0xa8>
 8008bb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bb6:	2b15      	cmp	r3, #21
 8008bb8:	d8f6      	bhi.n	8008ba8 <_printf_i+0x28>
 8008bba:	a101      	add	r1, pc, #4	@ (adr r1, 8008bc0 <_printf_i+0x40>)
 8008bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bc0:	08008c19 	.word	0x08008c19
 8008bc4:	08008c2d 	.word	0x08008c2d
 8008bc8:	08008ba9 	.word	0x08008ba9
 8008bcc:	08008ba9 	.word	0x08008ba9
 8008bd0:	08008ba9 	.word	0x08008ba9
 8008bd4:	08008ba9 	.word	0x08008ba9
 8008bd8:	08008c2d 	.word	0x08008c2d
 8008bdc:	08008ba9 	.word	0x08008ba9
 8008be0:	08008ba9 	.word	0x08008ba9
 8008be4:	08008ba9 	.word	0x08008ba9
 8008be8:	08008ba9 	.word	0x08008ba9
 8008bec:	08008d2b 	.word	0x08008d2b
 8008bf0:	08008c57 	.word	0x08008c57
 8008bf4:	08008ce5 	.word	0x08008ce5
 8008bf8:	08008ba9 	.word	0x08008ba9
 8008bfc:	08008ba9 	.word	0x08008ba9
 8008c00:	08008d4d 	.word	0x08008d4d
 8008c04:	08008ba9 	.word	0x08008ba9
 8008c08:	08008c57 	.word	0x08008c57
 8008c0c:	08008ba9 	.word	0x08008ba9
 8008c10:	08008ba9 	.word	0x08008ba9
 8008c14:	08008ced 	.word	0x08008ced
 8008c18:	6833      	ldr	r3, [r6, #0]
 8008c1a:	1d1a      	adds	r2, r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6032      	str	r2, [r6, #0]
 8008c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e09c      	b.n	8008d66 <_printf_i+0x1e6>
 8008c2c:	6833      	ldr	r3, [r6, #0]
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	1d19      	adds	r1, r3, #4
 8008c32:	6031      	str	r1, [r6, #0]
 8008c34:	0606      	lsls	r6, r0, #24
 8008c36:	d501      	bpl.n	8008c3c <_printf_i+0xbc>
 8008c38:	681d      	ldr	r5, [r3, #0]
 8008c3a:	e003      	b.n	8008c44 <_printf_i+0xc4>
 8008c3c:	0645      	lsls	r5, r0, #25
 8008c3e:	d5fb      	bpl.n	8008c38 <_printf_i+0xb8>
 8008c40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	da03      	bge.n	8008c50 <_printf_i+0xd0>
 8008c48:	232d      	movs	r3, #45	@ 0x2d
 8008c4a:	426d      	negs	r5, r5
 8008c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c50:	4858      	ldr	r0, [pc, #352]	@ (8008db4 <_printf_i+0x234>)
 8008c52:	230a      	movs	r3, #10
 8008c54:	e011      	b.n	8008c7a <_printf_i+0xfa>
 8008c56:	6821      	ldr	r1, [r4, #0]
 8008c58:	6833      	ldr	r3, [r6, #0]
 8008c5a:	0608      	lsls	r0, r1, #24
 8008c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c60:	d402      	bmi.n	8008c68 <_printf_i+0xe8>
 8008c62:	0649      	lsls	r1, r1, #25
 8008c64:	bf48      	it	mi
 8008c66:	b2ad      	uxthmi	r5, r5
 8008c68:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c6a:	4852      	ldr	r0, [pc, #328]	@ (8008db4 <_printf_i+0x234>)
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	bf14      	ite	ne
 8008c70:	230a      	movne	r3, #10
 8008c72:	2308      	moveq	r3, #8
 8008c74:	2100      	movs	r1, #0
 8008c76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c7a:	6866      	ldr	r6, [r4, #4]
 8008c7c:	60a6      	str	r6, [r4, #8]
 8008c7e:	2e00      	cmp	r6, #0
 8008c80:	db05      	blt.n	8008c8e <_printf_i+0x10e>
 8008c82:	6821      	ldr	r1, [r4, #0]
 8008c84:	432e      	orrs	r6, r5
 8008c86:	f021 0104 	bic.w	r1, r1, #4
 8008c8a:	6021      	str	r1, [r4, #0]
 8008c8c:	d04b      	beq.n	8008d26 <_printf_i+0x1a6>
 8008c8e:	4616      	mov	r6, r2
 8008c90:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c94:	fb03 5711 	mls	r7, r3, r1, r5
 8008c98:	5dc7      	ldrb	r7, [r0, r7]
 8008c9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c9e:	462f      	mov	r7, r5
 8008ca0:	42bb      	cmp	r3, r7
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	d9f4      	bls.n	8008c90 <_printf_i+0x110>
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	d10b      	bne.n	8008cc2 <_printf_i+0x142>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	07df      	lsls	r7, r3, #31
 8008cae:	d508      	bpl.n	8008cc2 <_printf_i+0x142>
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	6861      	ldr	r1, [r4, #4]
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	bfde      	ittt	le
 8008cb8:	2330      	movle	r3, #48	@ 0x30
 8008cba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cc2:	1b92      	subs	r2, r2, r6
 8008cc4:	6122      	str	r2, [r4, #16]
 8008cc6:	f8cd a000 	str.w	sl, [sp]
 8008cca:	464b      	mov	r3, r9
 8008ccc:	aa03      	add	r2, sp, #12
 8008cce:	4621      	mov	r1, r4
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	f7ff fee7 	bl	8008aa4 <_printf_common>
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d14a      	bne.n	8008d70 <_printf_i+0x1f0>
 8008cda:	f04f 30ff 	mov.w	r0, #4294967295
 8008cde:	b004      	add	sp, #16
 8008ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	f043 0320 	orr.w	r3, r3, #32
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	4832      	ldr	r0, [pc, #200]	@ (8008db8 <_printf_i+0x238>)
 8008cee:	2778      	movs	r7, #120	@ 0x78
 8008cf0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	6831      	ldr	r1, [r6, #0]
 8008cf8:	061f      	lsls	r7, r3, #24
 8008cfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cfe:	d402      	bmi.n	8008d06 <_printf_i+0x186>
 8008d00:	065f      	lsls	r7, r3, #25
 8008d02:	bf48      	it	mi
 8008d04:	b2ad      	uxthmi	r5, r5
 8008d06:	6031      	str	r1, [r6, #0]
 8008d08:	07d9      	lsls	r1, r3, #31
 8008d0a:	bf44      	itt	mi
 8008d0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008d10:	6023      	strmi	r3, [r4, #0]
 8008d12:	b11d      	cbz	r5, 8008d1c <_printf_i+0x19c>
 8008d14:	2310      	movs	r3, #16
 8008d16:	e7ad      	b.n	8008c74 <_printf_i+0xf4>
 8008d18:	4826      	ldr	r0, [pc, #152]	@ (8008db4 <_printf_i+0x234>)
 8008d1a:	e7e9      	b.n	8008cf0 <_printf_i+0x170>
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	f023 0320 	bic.w	r3, r3, #32
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	e7f6      	b.n	8008d14 <_printf_i+0x194>
 8008d26:	4616      	mov	r6, r2
 8008d28:	e7bd      	b.n	8008ca6 <_printf_i+0x126>
 8008d2a:	6833      	ldr	r3, [r6, #0]
 8008d2c:	6825      	ldr	r5, [r4, #0]
 8008d2e:	6961      	ldr	r1, [r4, #20]
 8008d30:	1d18      	adds	r0, r3, #4
 8008d32:	6030      	str	r0, [r6, #0]
 8008d34:	062e      	lsls	r6, r5, #24
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	d501      	bpl.n	8008d3e <_printf_i+0x1be>
 8008d3a:	6019      	str	r1, [r3, #0]
 8008d3c:	e002      	b.n	8008d44 <_printf_i+0x1c4>
 8008d3e:	0668      	lsls	r0, r5, #25
 8008d40:	d5fb      	bpl.n	8008d3a <_printf_i+0x1ba>
 8008d42:	8019      	strh	r1, [r3, #0]
 8008d44:	2300      	movs	r3, #0
 8008d46:	6123      	str	r3, [r4, #16]
 8008d48:	4616      	mov	r6, r2
 8008d4a:	e7bc      	b.n	8008cc6 <_printf_i+0x146>
 8008d4c:	6833      	ldr	r3, [r6, #0]
 8008d4e:	1d1a      	adds	r2, r3, #4
 8008d50:	6032      	str	r2, [r6, #0]
 8008d52:	681e      	ldr	r6, [r3, #0]
 8008d54:	6862      	ldr	r2, [r4, #4]
 8008d56:	2100      	movs	r1, #0
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f7f7 fac9 	bl	80002f0 <memchr>
 8008d5e:	b108      	cbz	r0, 8008d64 <_printf_i+0x1e4>
 8008d60:	1b80      	subs	r0, r0, r6
 8008d62:	6060      	str	r0, [r4, #4]
 8008d64:	6863      	ldr	r3, [r4, #4]
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d6e:	e7aa      	b.n	8008cc6 <_printf_i+0x146>
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	4632      	mov	r2, r6
 8008d74:	4649      	mov	r1, r9
 8008d76:	4640      	mov	r0, r8
 8008d78:	47d0      	blx	sl
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d0ad      	beq.n	8008cda <_printf_i+0x15a>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	079b      	lsls	r3, r3, #30
 8008d82:	d413      	bmi.n	8008dac <_printf_i+0x22c>
 8008d84:	68e0      	ldr	r0, [r4, #12]
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	4298      	cmp	r0, r3
 8008d8a:	bfb8      	it	lt
 8008d8c:	4618      	movlt	r0, r3
 8008d8e:	e7a6      	b.n	8008cde <_printf_i+0x15e>
 8008d90:	2301      	movs	r3, #1
 8008d92:	4632      	mov	r2, r6
 8008d94:	4649      	mov	r1, r9
 8008d96:	4640      	mov	r0, r8
 8008d98:	47d0      	blx	sl
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d09d      	beq.n	8008cda <_printf_i+0x15a>
 8008d9e:	3501      	adds	r5, #1
 8008da0:	68e3      	ldr	r3, [r4, #12]
 8008da2:	9903      	ldr	r1, [sp, #12]
 8008da4:	1a5b      	subs	r3, r3, r1
 8008da6:	42ab      	cmp	r3, r5
 8008da8:	dcf2      	bgt.n	8008d90 <_printf_i+0x210>
 8008daa:	e7eb      	b.n	8008d84 <_printf_i+0x204>
 8008dac:	2500      	movs	r5, #0
 8008dae:	f104 0619 	add.w	r6, r4, #25
 8008db2:	e7f5      	b.n	8008da0 <_printf_i+0x220>
 8008db4:	08008fc1 	.word	0x08008fc1
 8008db8:	08008fd2 	.word	0x08008fd2

08008dbc <memmove>:
 8008dbc:	4288      	cmp	r0, r1
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	eb01 0402 	add.w	r4, r1, r2
 8008dc4:	d902      	bls.n	8008dcc <memmove+0x10>
 8008dc6:	4284      	cmp	r4, r0
 8008dc8:	4623      	mov	r3, r4
 8008dca:	d807      	bhi.n	8008ddc <memmove+0x20>
 8008dcc:	1e43      	subs	r3, r0, #1
 8008dce:	42a1      	cmp	r1, r4
 8008dd0:	d008      	beq.n	8008de4 <memmove+0x28>
 8008dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dda:	e7f8      	b.n	8008dce <memmove+0x12>
 8008ddc:	4402      	add	r2, r0
 8008dde:	4601      	mov	r1, r0
 8008de0:	428a      	cmp	r2, r1
 8008de2:	d100      	bne.n	8008de6 <memmove+0x2a>
 8008de4:	bd10      	pop	{r4, pc}
 8008de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dee:	e7f7      	b.n	8008de0 <memmove+0x24>

08008df0 <_sbrk_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d06      	ldr	r5, [pc, #24]	@ (8008e0c <_sbrk_r+0x1c>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7f8 fd16 	bl	800182c <_sbrk>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_sbrk_r+0x1a>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_sbrk_r+0x1a>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	24001440 	.word	0x24001440

08008e10 <_realloc_r>:
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	4607      	mov	r7, r0
 8008e16:	4614      	mov	r4, r2
 8008e18:	460d      	mov	r5, r1
 8008e1a:	b921      	cbnz	r1, 8008e26 <_realloc_r+0x16>
 8008e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e20:	4611      	mov	r1, r2
 8008e22:	f7ff bc5b 	b.w	80086dc <_malloc_r>
 8008e26:	b92a      	cbnz	r2, 8008e34 <_realloc_r+0x24>
 8008e28:	f7ff fbec 	bl	8008604 <_free_r>
 8008e2c:	4625      	mov	r5, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e34:	f000 f81a 	bl	8008e6c <_malloc_usable_size_r>
 8008e38:	4284      	cmp	r4, r0
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	d802      	bhi.n	8008e44 <_realloc_r+0x34>
 8008e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e42:	d8f4      	bhi.n	8008e2e <_realloc_r+0x1e>
 8008e44:	4621      	mov	r1, r4
 8008e46:	4638      	mov	r0, r7
 8008e48:	f7ff fc48 	bl	80086dc <_malloc_r>
 8008e4c:	4680      	mov	r8, r0
 8008e4e:	b908      	cbnz	r0, 8008e54 <_realloc_r+0x44>
 8008e50:	4645      	mov	r5, r8
 8008e52:	e7ec      	b.n	8008e2e <_realloc_r+0x1e>
 8008e54:	42b4      	cmp	r4, r6
 8008e56:	4622      	mov	r2, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	bf28      	it	cs
 8008e5c:	4632      	movcs	r2, r6
 8008e5e:	f7ff fbc3 	bl	80085e8 <memcpy>
 8008e62:	4629      	mov	r1, r5
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7ff fbcd 	bl	8008604 <_free_r>
 8008e6a:	e7f1      	b.n	8008e50 <_realloc_r+0x40>

08008e6c <_malloc_usable_size_r>:
 8008e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e70:	1f18      	subs	r0, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bfbc      	itt	lt
 8008e76:	580b      	ldrlt	r3, [r1, r0]
 8008e78:	18c0      	addlt	r0, r0, r3
 8008e7a:	4770      	bx	lr

08008e7c <_init>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr

08008e88 <_fini>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	bf00      	nop
 8008e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8e:	bc08      	pop	{r3}
 8008e90:	469e      	mov	lr, r3
 8008e92:	4770      	bx	lr
