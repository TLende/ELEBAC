
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006aa8  08006aa8  00007aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006adc  08006adc  00007adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006ae8  08006ae8  00007ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000004c  24000000  08006aec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000974  2400004c  08006b38  0000804c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009c0  08006b38  000089c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000135ac  00000000  00000000  0000807a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025d3  00000000  00000000  0001b626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cc0  00000000  00000000  0001dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009c5  00000000  00000000  0001e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000373f0  00000000  00000000  0001f285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011ae9  00000000  00000000  00056675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e1b3  00000000  00000000  0006815e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c6311  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003480  00000000  00000000  001c6354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001c97d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400004c 	.word	0x2400004c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006a90 	.word	0x08006a90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000050 	.word	0x24000050
 80002d4:	08006a90 	.word	0x08006a90

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b988 	b.w	8000610 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	468e      	mov	lr, r1
 8000320:	4604      	mov	r4, r0
 8000322:	4688      	mov	r8, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d962      	bls.n	80003f4 <__udivmoddi4+0xdc>
 800032e:	fab2 f682 	clz	r6, r2
 8000332:	b14e      	cbz	r6, 8000348 <__udivmoddi4+0x30>
 8000334:	f1c6 0320 	rsb	r3, r6, #32
 8000338:	fa01 f806 	lsl.w	r8, r1, r6
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	40b7      	lsls	r7, r6
 8000342:	ea43 0808 	orr.w	r8, r3, r8
 8000346:	40b4      	lsls	r4, r6
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	fbb8 f1fe 	udiv	r1, r8, lr
 8000354:	0c23      	lsrs	r3, r4, #16
 8000356:	fb0e 8811 	mls	r8, lr, r1, r8
 800035a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035e:	fb01 f20c 	mul.w	r2, r1, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0x62>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f101 30ff 	add.w	r0, r1, #4294967295
 800036c:	f080 80ea 	bcs.w	8000544 <__udivmoddi4+0x22c>
 8000370:	429a      	cmp	r2, r3
 8000372:	f240 80e7 	bls.w	8000544 <__udivmoddi4+0x22c>
 8000376:	3902      	subs	r1, #2
 8000378:	443b      	add	r3, r7
 800037a:	1a9a      	subs	r2, r3, r2
 800037c:	b2a3      	uxth	r3, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800038a:	fb00 fc0c 	mul.w	ip, r0, ip
 800038e:	459c      	cmp	ip, r3
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x8e>
 8000392:	18fb      	adds	r3, r7, r3
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295
 8000398:	f080 80d6 	bcs.w	8000548 <__udivmoddi4+0x230>
 800039c:	459c      	cmp	ip, r3
 800039e:	f240 80d3 	bls.w	8000548 <__udivmoddi4+0x230>
 80003a2:	443b      	add	r3, r7
 80003a4:	3802      	subs	r0, #2
 80003a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003aa:	eba3 030c 	sub.w	r3, r3, ip
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11d      	cbz	r5, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40f3      	lsrs	r3, r6
 80003b4:	2200      	movs	r2, #0
 80003b6:	e9c5 3200 	strd	r3, r2, [r5]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d905      	bls.n	80003ce <__udivmoddi4+0xb6>
 80003c2:	b10d      	cbz	r5, 80003c8 <__udivmoddi4+0xb0>
 80003c4:	e9c5 0100 	strd	r0, r1, [r5]
 80003c8:	2100      	movs	r1, #0
 80003ca:	4608      	mov	r0, r1
 80003cc:	e7f5      	b.n	80003ba <__udivmoddi4+0xa2>
 80003ce:	fab3 f183 	clz	r1, r3
 80003d2:	2900      	cmp	r1, #0
 80003d4:	d146      	bne.n	8000464 <__udivmoddi4+0x14c>
 80003d6:	4573      	cmp	r3, lr
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xc8>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 8105 	bhi.w	80005ea <__udivmoddi4+0x2d2>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4690      	mov	r8, r2
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0e5      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003ee:	e9c5 4800 	strd	r4, r8, [r5]
 80003f2:	e7e2      	b.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f000 8090 	beq.w	800051a <__udivmoddi4+0x202>
 80003fa:	fab2 f682 	clz	r6, r2
 80003fe:	2e00      	cmp	r6, #0
 8000400:	f040 80a4 	bne.w	800054c <__udivmoddi4+0x234>
 8000404:	1a8a      	subs	r2, r1, r2
 8000406:	0c03      	lsrs	r3, r0, #16
 8000408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040c:	b280      	uxth	r0, r0
 800040e:	b2bc      	uxth	r4, r7
 8000410:	2101      	movs	r1, #1
 8000412:	fbb2 fcfe 	udiv	ip, r2, lr
 8000416:	fb0e 221c 	mls	r2, lr, ip, r2
 800041a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800041e:	fb04 f20c 	mul.w	r2, r4, ip
 8000422:	429a      	cmp	r2, r3
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x11e>
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	f10c 38ff 	add.w	r8, ip, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x11c>
 800042e:	429a      	cmp	r2, r3
 8000430:	f200 80e0 	bhi.w	80005f4 <__udivmoddi4+0x2dc>
 8000434:	46c4      	mov	ip, r8
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	fbb3 f2fe 	udiv	r2, r3, lr
 800043c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000440:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000444:	fb02 f404 	mul.w	r4, r2, r4
 8000448:	429c      	cmp	r4, r3
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x144>
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x142>
 8000454:	429c      	cmp	r4, r3
 8000456:	f200 80ca 	bhi.w	80005ee <__udivmoddi4+0x2d6>
 800045a:	4602      	mov	r2, r0
 800045c:	1b1b      	subs	r3, r3, r4
 800045e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0x98>
 8000464:	f1c1 0620 	rsb	r6, r1, #32
 8000468:	408b      	lsls	r3, r1
 800046a:	fa22 f706 	lsr.w	r7, r2, r6
 800046e:	431f      	orrs	r7, r3
 8000470:	fa0e f401 	lsl.w	r4, lr, r1
 8000474:	fa20 f306 	lsr.w	r3, r0, r6
 8000478:	fa2e fe06 	lsr.w	lr, lr, r6
 800047c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000480:	4323      	orrs	r3, r4
 8000482:	fa00 f801 	lsl.w	r8, r0, r1
 8000486:	fa1f fc87 	uxth.w	ip, r7
 800048a:	fbbe f0f9 	udiv	r0, lr, r9
 800048e:	0c1c      	lsrs	r4, r3, #16
 8000490:	fb09 ee10 	mls	lr, r9, r0, lr
 8000494:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000498:	fb00 fe0c 	mul.w	lr, r0, ip
 800049c:	45a6      	cmp	lr, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x1a0>
 80004a4:	193c      	adds	r4, r7, r4
 80004a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80004aa:	f080 809c 	bcs.w	80005e6 <__udivmoddi4+0x2ce>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f240 8099 	bls.w	80005e6 <__udivmoddi4+0x2ce>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	eba4 040e 	sub.w	r4, r4, lr
 80004bc:	fa1f fe83 	uxth.w	lr, r3
 80004c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c4:	fb09 4413 	mls	r4, r9, r3, r4
 80004c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d0:	45a4      	cmp	ip, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1ce>
 80004d4:	193c      	adds	r4, r7, r4
 80004d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004da:	f080 8082 	bcs.w	80005e2 <__udivmoddi4+0x2ca>
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d97f      	bls.n	80005e2 <__udivmoddi4+0x2ca>
 80004e2:	3b02      	subs	r3, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f2:	4564      	cmp	r4, ip
 80004f4:	4673      	mov	r3, lr
 80004f6:	46e1      	mov	r9, ip
 80004f8:	d362      	bcc.n	80005c0 <__udivmoddi4+0x2a8>
 80004fa:	d05f      	beq.n	80005bc <__udivmoddi4+0x2a4>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x1fe>
 80004fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000502:	eb64 0409 	sbc.w	r4, r4, r9
 8000506:	fa04 f606 	lsl.w	r6, r4, r6
 800050a:	fa22 f301 	lsr.w	r3, r2, r1
 800050e:	431e      	orrs	r6, r3
 8000510:	40cc      	lsrs	r4, r1
 8000512:	e9c5 6400 	strd	r6, r4, [r5]
 8000516:	2100      	movs	r1, #0
 8000518:	e74f      	b.n	80003ba <__udivmoddi4+0xa2>
 800051a:	fbb1 fcf2 	udiv	ip, r1, r2
 800051e:	0c01      	lsrs	r1, r0, #16
 8000520:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000524:	b280      	uxth	r0, r0
 8000526:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800052a:	463b      	mov	r3, r7
 800052c:	4638      	mov	r0, r7
 800052e:	463c      	mov	r4, r7
 8000530:	46b8      	mov	r8, r7
 8000532:	46be      	mov	lr, r7
 8000534:	2620      	movs	r6, #32
 8000536:	fbb1 f1f7 	udiv	r1, r1, r7
 800053a:	eba2 0208 	sub.w	r2, r2, r8
 800053e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000542:	e766      	b.n	8000412 <__udivmoddi4+0xfa>
 8000544:	4601      	mov	r1, r0
 8000546:	e718      	b.n	800037a <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e72c      	b.n	80003a6 <__udivmoddi4+0x8e>
 800054c:	f1c6 0220 	rsb	r2, r6, #32
 8000550:	fa2e f302 	lsr.w	r3, lr, r2
 8000554:	40b7      	lsls	r7, r6
 8000556:	40b1      	lsls	r1, r6
 8000558:	fa20 f202 	lsr.w	r2, r0, r2
 800055c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000560:	430a      	orrs	r2, r1
 8000562:	fbb3 f8fe 	udiv	r8, r3, lr
 8000566:	b2bc      	uxth	r4, r7
 8000568:	fb0e 3318 	mls	r3, lr, r8, r3
 800056c:	0c11      	lsrs	r1, r2, #16
 800056e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000572:	fb08 f904 	mul.w	r9, r8, r4
 8000576:	40b0      	lsls	r0, r6
 8000578:	4589      	cmp	r9, r1
 800057a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800057e:	b280      	uxth	r0, r0
 8000580:	d93e      	bls.n	8000600 <__udivmoddi4+0x2e8>
 8000582:	1879      	adds	r1, r7, r1
 8000584:	f108 3cff 	add.w	ip, r8, #4294967295
 8000588:	d201      	bcs.n	800058e <__udivmoddi4+0x276>
 800058a:	4589      	cmp	r9, r1
 800058c:	d81f      	bhi.n	80005ce <__udivmoddi4+0x2b6>
 800058e:	eba1 0109 	sub.w	r1, r1, r9
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	fb0e 1119 	mls	r1, lr, r9, r1
 800059e:	b292      	uxth	r2, r2
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	4542      	cmp	r2, r8
 80005a6:	d229      	bcs.n	80005fc <__udivmoddi4+0x2e4>
 80005a8:	18ba      	adds	r2, r7, r2
 80005aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80005ae:	d2c4      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b0:	4542      	cmp	r2, r8
 80005b2:	d2c2      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443a      	add	r2, r7
 80005ba:	e7be      	b.n	800053a <__udivmoddi4+0x222>
 80005bc:	45f0      	cmp	r8, lr
 80005be:	d29d      	bcs.n	80004fc <__udivmoddi4+0x1e4>
 80005c0:	ebbe 0302 	subs.w	r3, lr, r2
 80005c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c8:	3801      	subs	r0, #1
 80005ca:	46e1      	mov	r9, ip
 80005cc:	e796      	b.n	80004fc <__udivmoddi4+0x1e4>
 80005ce:	eba7 0909 	sub.w	r9, r7, r9
 80005d2:	4449      	add	r1, r9
 80005d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005dc:	fb09 f804 	mul.w	r8, r9, r4
 80005e0:	e7db      	b.n	800059a <__udivmoddi4+0x282>
 80005e2:	4673      	mov	r3, lr
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1ce>
 80005e6:	4650      	mov	r0, sl
 80005e8:	e766      	b.n	80004b8 <__udivmoddi4+0x1a0>
 80005ea:	4608      	mov	r0, r1
 80005ec:	e6fd      	b.n	80003ea <__udivmoddi4+0xd2>
 80005ee:	443b      	add	r3, r7
 80005f0:	3a02      	subs	r2, #2
 80005f2:	e733      	b.n	800045c <__udivmoddi4+0x144>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	443b      	add	r3, r7
 80005fa:	e71c      	b.n	8000436 <__udivmoddi4+0x11e>
 80005fc:	4649      	mov	r1, r9
 80005fe:	e79c      	b.n	800053a <__udivmoddi4+0x222>
 8000600:	eba1 0109 	sub.w	r1, r1, r9
 8000604:	46c4      	mov	ip, r8
 8000606:	fbb1 f9fe 	udiv	r9, r1, lr
 800060a:	fb09 f804 	mul.w	r8, r9, r4
 800060e:	e7c4      	b.n	800059a <__udivmoddi4+0x282>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <W25N_WaitForReady>:
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f001 f895 	bl	8001748 <HAL_Delay>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 800061e:	e002      	b.n	8000626 <W25N_WaitForReady+0x12>
        HAL_Delay(1);  // Wait until flash is ready
 8000620:	2001      	movs	r0, #1
 8000622:	f001 f891 	bl	8001748 <HAL_Delay>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <W25N_WaitForReady+0x2c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f878 	bl	8000720 <Read_Status_Register>
 8000630:	4603      	mov	r3, r0
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f2      	bne.n	8000620 <W25N_WaitForReady+0xc>
    }
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	24000006 	.word	0x24000006

08000644 <Write_Enable>:

void Write_Enable(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	csLOW();
 8000648:	2200      	movs	r2, #0
 800064a:	2110      	movs	r1, #16
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <Write_Enable+0x30>)
 800064e:	f001 fbcd 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000652:	2364      	movs	r3, #100	@ 0x64
 8000654:	2201      	movs	r2, #1
 8000656:	4908      	ldr	r1, [pc, #32]	@ (8000678 <Write_Enable+0x34>)
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <Write_Enable+0x38>)
 800065a:	f004 fb6b 	bl	8004d34 <HAL_SPI_Transmit>
	csHIGH();
 800065e:	2201      	movs	r2, #1
 8000660:	2110      	movs	r1, #16
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <Write_Enable+0x30>)
 8000664:	f001 fbc2 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f001 f86d 	bl	8001748 <HAL_Delay>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	58020000 	.word	0x58020000
 8000678:	24000007 	.word	0x24000007
 800067c:	24000088 	.word	0x24000088

08000680 <Flash_Init>:
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	HAL_Delay(1);
}

void Flash_Init(uint8_t BUF){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068e:	f001 f85b 	bl	8001748 <HAL_Delay>
	if(BUF){
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d012      	beq.n	80006be <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <Flash_Init+0x98>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f83f 	bl	8000720 <Read_Status_Register>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <Flash_Init+0x98>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f864 	bl	8000784 <Write_Status_Register>
 80006bc:	e011      	b.n	80006e2 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <Flash_Init+0x98>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f82c 	bl	8000720 <Read_Status_Register>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	f023 0308 	bic.w	r3, r3, #8
 80006d2:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 80006d4:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <Flash_Init+0x98>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f851 	bl	8000784 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <Flash_Init+0x9c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f81a 	bl	8000720 <Read_Status_Register>
 80006ec:	4603      	mov	r3, r0
 80006ee:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 80006f0:	7b7b      	ldrb	r3, [r7, #13]
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 80006f8:	7b7b      	ldrb	r3, [r7, #13]
 80006fa:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 80006fe:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <Flash_Init+0x9c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7b7a      	ldrb	r2, [r7, #13]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f83b 	bl	8000784 <Write_Status_Register>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000005 	.word	0x24000005
 800071c:	24000004 	.word	0x24000004

08000720 <Read_Status_Register>:

uint8_t Read_Status_Register(uint8_t SR){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <Read_Status_Register+0x50>)
 800072c:	781a      	ldrb	r2, [r3, #0]
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <Read_Status_Register+0x54>)
 8000730:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000732:	4a10      	ldr	r2, [pc, #64]	@ (8000774 <Read_Status_Register+0x54>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000738:	2200      	movs	r2, #0
 800073a:	2110      	movs	r1, #16
 800073c:	480e      	ldr	r0, [pc, #56]	@ (8000778 <Read_Status_Register+0x58>)
 800073e:	f001 fb55 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000742:	2364      	movs	r3, #100	@ 0x64
 8000744:	2202      	movs	r2, #2
 8000746:	490b      	ldr	r1, [pc, #44]	@ (8000774 <Read_Status_Register+0x54>)
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <Read_Status_Register+0x5c>)
 800074a:	f004 faf3 	bl	8004d34 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 800074e:	2364      	movs	r3, #100	@ 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	490b      	ldr	r1, [pc, #44]	@ (8000780 <Read_Status_Register+0x60>)
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <Read_Status_Register+0x5c>)
 8000756:	f004 fcdb 	bl	8005110 <HAL_SPI_Receive>
	csHIGH();
 800075a:	2201      	movs	r2, #1
 800075c:	2110      	movs	r1, #16
 800075e:	4806      	ldr	r0, [pc, #24]	@ (8000778 <Read_Status_Register+0x58>)
 8000760:	f001 fb44 	bl	8001dec <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <Read_Status_Register+0x60>)
 8000766:	781b      	ldrb	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	24000002 	.word	0x24000002
 8000774:	24000068 	.word	0x24000068
 8000778:	58020000 	.word	0x58020000
 800077c:	24000088 	.word	0x24000088
 8000780:	24000070 	.word	0x24000070

08000784 <Write_Status_Register>:

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <Write_Status_Register+0x4c>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <Write_Status_Register+0x50>)
 800079a:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 800079c:	4a0d      	ldr	r2, [pc, #52]	@ (80007d4 <Write_Status_Register+0x50>)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 80007a2:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <Write_Status_Register+0x50>)
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	7093      	strb	r3, [r2, #2]
	csLOW();
 80007a8:	2200      	movs	r2, #0
 80007aa:	2110      	movs	r1, #16
 80007ac:	480a      	ldr	r0, [pc, #40]	@ (80007d8 <Write_Status_Register+0x54>)
 80007ae:	f001 fb1d 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 80007b2:	2364      	movs	r3, #100	@ 0x64
 80007b4:	2203      	movs	r2, #3
 80007b6:	4907      	ldr	r1, [pc, #28]	@ (80007d4 <Write_Status_Register+0x50>)
 80007b8:	4808      	ldr	r0, [pc, #32]	@ (80007dc <Write_Status_Register+0x58>)
 80007ba:	f004 fabb 	bl	8004d34 <HAL_SPI_Transmit>
	csHIGH();
 80007be:	2201      	movs	r2, #1
 80007c0:	2110      	movs	r1, #16
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <Write_Status_Register+0x54>)
 80007c4:	f001 fb12 	bl	8001dec <HAL_GPIO_WritePin>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	24000003 	.word	0x24000003
 80007d4:	24000068 	.word	0x24000068
 80007d8:	58020000 	.word	0x58020000
 80007dc:	24000088 	.word	0x24000088

080007e0 <Read_ID>:

uint32_t Read_ID(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2100      	movs	r1, #0
 80007ea:	460a      	mov	r2, r1
 80007ec:	801a      	strh	r2, [r3, #0]
 80007ee:	460a      	mov	r2, r1
 80007f0:	709a      	strb	r2, [r3, #2]
	csLOW();
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	480f      	ldr	r0, [pc, #60]	@ (8000834 <Read_ID+0x54>)
 80007f8:	f001 faf8 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 80007fc:	2364      	movs	r3, #100	@ 0x64
 80007fe:	2202      	movs	r2, #2
 8000800:	490d      	ldr	r1, [pc, #52]	@ (8000838 <Read_ID+0x58>)
 8000802:	480e      	ldr	r0, [pc, #56]	@ (800083c <Read_ID+0x5c>)
 8000804:	f004 fa96 	bl	8004d34 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000808:	1d39      	adds	r1, r7, #4
 800080a:	2364      	movs	r3, #100	@ 0x64
 800080c:	2203      	movs	r2, #3
 800080e:	480b      	ldr	r0, [pc, #44]	@ (800083c <Read_ID+0x5c>)
 8000810:	f004 fc7e 	bl	8005110 <HAL_SPI_Receive>
	csHIGH();
 8000814:	2201      	movs	r2, #1
 8000816:	2110      	movs	r1, #16
 8000818:	4806      	ldr	r0, [pc, #24]	@ (8000834 <Read_ID+0x54>)
 800081a:	f001 fae7 	bl	8001dec <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 800081e:	793b      	ldrb	r3, [r7, #4]
 8000820:	041a      	lsls	r2, r3, #16
 8000822:	797b      	ldrb	r3, [r7, #5]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	79b9      	ldrb	r1, [r7, #6]
 8000828:	430b      	orrs	r3, r1
 800082a:	4313      	orrs	r3, r2
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58020000 	.word	0x58020000
 8000838:	24000000 	.word	0x24000000
 800083c:	24000088 	.word	0x24000088

08000840 <Write_Data_Buffer>:

void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	80fb      	strh	r3, [r7, #6]
 800084c:	4613      	mov	r3, r2
 800084e:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000850:	f7ff fef8 	bl	8000644 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <Write_Data_Buffer+0x6c>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <Write_Data_Buffer+0x70>)
 800085a:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	0a1b      	lsrs	r3, r3, #8
 8000860:	b29b      	uxth	r3, r3
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <Write_Data_Buffer+0x70>)
 8000866:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <Write_Data_Buffer+0x70>)
 800086e:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000870:	2200      	movs	r2, #0
 8000872:	2110      	movs	r1, #16
 8000874:	480f      	ldr	r0, [pc, #60]	@ (80008b4 <Write_Data_Buffer+0x74>)
 8000876:	f001 fab9 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 800087a:	2364      	movs	r3, #100	@ 0x64
 800087c:	2203      	movs	r2, #3
 800087e:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <Write_Data_Buffer+0x70>)
 8000880:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <Write_Data_Buffer+0x78>)
 8000882:	f004 fa57 	bl	8004d34 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, 1000);
 8000886:	88ba      	ldrh	r2, [r7, #4]
 8000888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088c:	6839      	ldr	r1, [r7, #0]
 800088e:	480a      	ldr	r0, [pc, #40]	@ (80008b8 <Write_Data_Buffer+0x78>)
 8000890:	f004 fa50 	bl	8004d34 <HAL_SPI_Transmit>
	csHIGH();
 8000894:	2201      	movs	r2, #1
 8000896:	2110      	movs	r1, #16
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <Write_Data_Buffer+0x74>)
 800089a:	f001 faa7 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800089e:	2005      	movs	r0, #5
 80008a0:	f000 ff52 	bl	8001748 <HAL_Delay>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	24000009 	.word	0x24000009
 80008b0:	24000068 	.word	0x24000068
 80008b4:	58020000 	.word	0x58020000
 80008b8:	24000088 	.word	0x24000088

080008bc <Write_Data_Flash>:

void Write_Data_Flash(uint16_t Page_Addr){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <Write_Data_Flash+0x58>)
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <Write_Data_Flash+0x5c>)
 80008cc:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <Write_Data_Flash+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <Write_Data_Flash+0x5c>)
 80008de:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <Write_Data_Flash+0x5c>)
 80008e6:	70da      	strb	r2, [r3, #3]
	csLOW();
 80008e8:	2200      	movs	r2, #0
 80008ea:	2110      	movs	r1, #16
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <Write_Data_Flash+0x60>)
 80008ee:	f001 fa7d 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 80008f2:	2364      	movs	r3, #100	@ 0x64
 80008f4:	2204      	movs	r2, #4
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <Write_Data_Flash+0x5c>)
 80008f8:	4809      	ldr	r0, [pc, #36]	@ (8000920 <Write_Data_Flash+0x64>)
 80008fa:	f004 fa1b 	bl	8004d34 <HAL_SPI_Transmit>
	csHIGH();
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	4806      	ldr	r0, [pc, #24]	@ (800091c <Write_Data_Flash+0x60>)
 8000904:	f001 fa72 	bl	8001dec <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000908:	f7ff fe84 	bl	8000614 <W25N_WaitForReady>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2400000a 	.word	0x2400000a
 8000918:	24000068 	.word	0x24000068
 800091c:	58020000 	.word	0x58020000
 8000920:	24000088 	.word	0x24000088

08000924 <Select_Page_Read>:

void Select_Page_Read(uint16_t Page_Addr){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <Select_Page_Read+0x54>)
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <Select_Page_Read+0x58>)
 8000934:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <Select_Page_Read+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <Select_Page_Read+0x58>)
 8000946:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <Select_Page_Read+0x58>)
 800094e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000950:	2200      	movs	r2, #0
 8000952:	2110      	movs	r1, #16
 8000954:	480a      	ldr	r0, [pc, #40]	@ (8000980 <Select_Page_Read+0x5c>)
 8000956:	f001 fa49 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 800095a:	2364      	movs	r3, #100	@ 0x64
 800095c:	2204      	movs	r2, #4
 800095e:	4907      	ldr	r1, [pc, #28]	@ (800097c <Select_Page_Read+0x58>)
 8000960:	4808      	ldr	r0, [pc, #32]	@ (8000984 <Select_Page_Read+0x60>)
 8000962:	f004 f9e7 	bl	8004d34 <HAL_SPI_Transmit>
	csHIGH();
 8000966:	2201      	movs	r2, #1
 8000968:	2110      	movs	r1, #16
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <Select_Page_Read+0x5c>)
 800096c:	f001 fa3e 	bl	8001dec <HAL_GPIO_WritePin>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2400000b 	.word	0x2400000b
 800097c:	24000068 	.word	0x24000068
 8000980:	58020000 	.word	0x58020000
 8000984:	24000088 	.word	0x24000088

08000988 <Read_Data_Buffer>:

void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	807b      	strh	r3, [r7, #2]
	Tx_Buffer[0]=OP_Read_Data;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <Read_Data_Buffer+0x60>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <Read_Data_Buffer+0x64>)
 800099a:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <Read_Data_Buffer+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <Read_Data_Buffer+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 80009a8:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <Read_Data_Buffer+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	70da      	strb	r2, [r3, #3]
	//W25N_WaitForReady();
	HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 feca 	bl	8001748 <HAL_Delay>
	csLOW();
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <Read_Data_Buffer+0x68>)
 80009ba:	f001 fa17 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 80009be:	2364      	movs	r3, #100	@ 0x64
 80009c0:	2204      	movs	r2, #4
 80009c2:	490a      	ldr	r1, [pc, #40]	@ (80009ec <Read_Data_Buffer+0x64>)
 80009c4:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <Read_Data_Buffer+0x6c>)
 80009c6:	f004 f9b5 	bl	8004d34 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data, len, 100);
 80009ca:	887a      	ldrh	r2, [r7, #2]
 80009cc:	2364      	movs	r3, #100	@ 0x64
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	4808      	ldr	r0, [pc, #32]	@ (80009f4 <Read_Data_Buffer+0x6c>)
 80009d2:	f004 fb9d 	bl	8005110 <HAL_SPI_Receive>
	csHIGH();
 80009d6:	2201      	movs	r2, #1
 80009d8:	2110      	movs	r1, #16
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <Read_Data_Buffer+0x68>)
 80009dc:	f001 fa06 	bl	8001dec <HAL_GPIO_WritePin>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2400000c 	.word	0x2400000c
 80009ec:	24000068 	.word	0x24000068
 80009f0:	58020000 	.word	0x58020000
 80009f4:	24000088 	.word	0x24000088

080009f8 <Block_Erase>:

void Block_Erase(uint16_t Page_Addr){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000a02:	f7ff fe1f 	bl	8000644 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <Block_Erase+0x5c>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <Block_Erase+0x60>)
 8000a0c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <Block_Erase+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <Block_Erase+0x60>)
 8000a1e:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <Block_Erase+0x60>)
 8000a26:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <Block_Erase+0x64>)
 8000a2e:	f001 f9dd 	bl	8001dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000a32:	2364      	movs	r3, #100	@ 0x64
 8000a34:	2204      	movs	r2, #4
 8000a36:	4908      	ldr	r1, [pc, #32]	@ (8000a58 <Block_Erase+0x60>)
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <Block_Erase+0x68>)
 8000a3a:	f004 f97b 	bl	8004d34 <HAL_SPI_Transmit>
	csHIGH();
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2110      	movs	r1, #16
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <Block_Erase+0x64>)
 8000a44:	f001 f9d2 	bl	8001dec <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000a48:	f7ff fde4 	bl	8000614 <W25N_WaitForReady>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	24000008 	.word	0x24000008
 8000a58:	24000068 	.word	0x24000068
 8000a5c:	58020000 	.word	0x58020000
 8000a60:	24000088 	.word	0x24000088

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fddc 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f8b0 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f980 	bl	8000d74 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a74:	f000 f928 	bl	8000cc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 fbe1 	bl	8001240 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 fbde 	bl	8001240 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 fbdb 	bl	8001240 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 fc77 	bl	8001380 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a92:	4b43      	ldr	r3, [pc, #268]	@ (8000ba0 <main+0x13c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a98:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ba0 <main+0x13c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba0 <main+0x13c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba0 <main+0x13c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000aac:	4b3c      	ldr	r3, [pc, #240]	@ (8000ba0 <main+0x13c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ab2:	493b      	ldr	r1, [pc, #236]	@ (8000ba0 <main+0x13c>)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fcf3 	bl	80014a0 <BSP_COM_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <main+0x60>
  {
    Error_Handler();
 8000ac0:	f000 f9de 	bl	8000e80 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Flash_Init(0);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fddb 	bl	8000680 <Flash_Init>
  ID=Read_ID();
 8000aca:	f7ff fe89 	bl	80007e0 <Read_ID>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a34      	ldr	r2, [pc, #208]	@ (8000ba4 <main+0x140>)
 8000ad2:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  SR_1 = Read_Status_Register(SR_1_Addr);
 8000ad4:	4b34      	ldr	r3, [pc, #208]	@ (8000ba8 <main+0x144>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe21 	bl	8000720 <Read_Status_Register>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <main+0x148>)
 8000ae4:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 fe2e 	bl	8001748 <HAL_Delay>
	  SR_2 = Read_Status_Register(SR_2_Addr);
 8000aec:	4b30      	ldr	r3, [pc, #192]	@ (8000bb0 <main+0x14c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe15 	bl	8000720 <Read_Status_Register>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <main+0x150>)
 8000afc:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 fe22 	bl	8001748 <HAL_Delay>
	  SR_3 = Read_Status_Register(SR_3_Addr);
 8000b04:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <main+0x154>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe09 	bl	8000720 <Read_Status_Register>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <main+0x158>)
 8000b14:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 fe16 	bl	8001748 <HAL_Delay>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4927      	ldr	r1, [pc, #156]	@ (8000bc0 <main+0x15c>)
 8000b22:	4828      	ldr	r0, [pc, #160]	@ (8000bc4 <main+0x160>)
 8000b24:	f004 ff37 	bl	8005996 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000b28:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <main+0x15c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b31      	cmp	r3, #49	@ 0x31
 8000b2e:	d115      	bne.n	8000b5c <main+0xf8>
		  Select_Page_Read(150);
 8000b30:	2096      	movs	r0, #150	@ 0x96
 8000b32:	f7ff fef7 	bl	8000924 <Select_Page_Read>
		  Read_Data_Buffer(Read_Data, 2048);
 8000b36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b3a:	4823      	ldr	r0, [pc, #140]	@ (8000bc8 <main+0x164>)
 8000b3c:	f7ff ff24 	bl	8000988 <Read_Data_Buffer>
		  BSP_LED_Toggle(LED_GREEN);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fbf3 	bl	800132c <BSP_LED_Toggle>
		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_Data[0], 2048, HAL_MAX_DELAY);
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b4e:	491e      	ldr	r1, [pc, #120]	@ (8000bc8 <main+0x164>)
 8000b50:	481c      	ldr	r0, [pc, #112]	@ (8000bc4 <main+0x160>)
 8000b52:	f004 fe92 	bl	800587a <HAL_UART_Transmit>
		  command = 0;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <main+0x15c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	  }

	  //Write
	  if(command==0x32){
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <main+0x15c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b32      	cmp	r3, #50	@ 0x32
 8000b62:	d112      	bne.n	8000b8a <main+0x126>
		  //Block_Erase(150);
		  Write_Data_Buffer(0, &Tx[0], strlen(Tx));
 8000b64:	4819      	ldr	r0, [pc, #100]	@ (8000bcc <main+0x168>)
 8000b66:	f7ff fbb7 	bl	80002d8 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4916      	ldr	r1, [pc, #88]	@ (8000bcc <main+0x168>)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fe64 	bl	8000840 <Write_Data_Buffer>
		  Write_Data_Flash(150);
 8000b78:	2096      	movs	r0, #150	@ 0x96
 8000b7a:	f7ff fe9f 	bl	80008bc <Write_Data_Flash>
		  BSP_LED_Toggle(LED_RED);
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f000 fbd4 	bl	800132c <BSP_LED_Toggle>
		  command=0;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <main+0x15c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
	  }
	  if(command==0x33){
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <main+0x15c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b33      	cmp	r3, #51	@ 0x33
 8000b90:	d1a0      	bne.n	8000ad4 <main+0x70>
		  Block_Erase(150);
 8000b92:	2096      	movs	r0, #150	@ 0x96
 8000b94:	f7ff ff30 	bl	80009f8 <Block_Erase>
		  command=0;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <main+0x15c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
	  SR_1 = Read_Status_Register(SR_1_Addr);
 8000b9e:	e799      	b.n	8000ad4 <main+0x70>
 8000ba0:	24000078 	.word	0x24000078
 8000ba4:	24000110 	.word	0x24000110
 8000ba8:	24000004 	.word	0x24000004
 8000bac:	24000918 	.word	0x24000918
 8000bb0:	24000005 	.word	0x24000005
 8000bb4:	24000919 	.word	0x24000919
 8000bb8:	24000006 	.word	0x24000006
 8000bbc:	2400091a 	.word	0x2400091a
 8000bc0:	24000114 	.word	0x24000114
 8000bc4:	24000928 	.word	0x24000928
 8000bc8:	24000118 	.word	0x24000118
 8000bcc:	24000010 	.word	0x24000010

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b09c      	sub	sp, #112	@ 0x70
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bda:	224c      	movs	r2, #76	@ 0x4c
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 ff2a 	bl	8006a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2220      	movs	r2, #32
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 ff24 	bl	8006a38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f001 f92f 	bl	8001e54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b31      	ldr	r3, [pc, #196]	@ (8000cc0 <SystemClock_Config+0xf0>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a30      	ldr	r2, [pc, #192]	@ (8000cc0 <SystemClock_Config+0xf0>)
 8000c00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <SystemClock_Config+0xf0>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <SystemClock_Config+0xf4>)
 8000c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c14:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc4 <SystemClock_Config+0xf4>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c1c:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <SystemClock_Config+0xf4>)
 8000c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c28:	bf00      	nop
 8000c2a:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <SystemClock_Config+0xf0>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c36:	d1f8      	bne.n	8000c2a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c40:	2340      	movs	r3, #64	@ 0x40
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c50:	233c      	movs	r3, #60	@ 0x3c
 8000c52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c60:	230c      	movs	r3, #12
 8000c62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f929 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c7c:	f000 f900 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	233f      	movs	r3, #63	@ 0x3f
 8000c82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2303      	movs	r3, #3
 8000c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c90:	2340      	movs	r3, #64	@ 0x40
 8000c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c94:	2340      	movs	r3, #64	@ 0x40
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fd68 	bl	800277c <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000cb2:	f000 f8e5 	bl	8000e80 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3770      	adds	r7, #112	@ 0x70
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	58024800 	.word	0x58024800
 8000cc4:	58000400 	.word	0x58000400

08000cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000cce:	4a28      	ldr	r2, [pc, #160]	@ (8000d70 <MX_SPI1_Init+0xa8>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000cd4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000ce2:	2207      	movs	r2, #7
 8000ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000cf4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000cfc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d20:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_SPI1_Init+0xa4>)
 8000d5a:	f003 fec7 	bl	8004aec <HAL_SPI_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000d64:	f000 f88c 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000088 	.word	0x24000088
 8000d70:	40013000 	.word	0x40013000

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	4a38      	ldr	r2, [pc, #224]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9a:	4b36      	ldr	r3, [pc, #216]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da8:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	4a31      	ldr	r2, [pc, #196]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd6:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	4a1a      	ldr	r2, [pc, #104]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <MX_GPIO_Init+0x104>)
 8000e26:	f000 ffe1 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <MX_GPIO_Init+0x108>)
 8000e30:	f000 ffdc 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8000e34:	2310      	movs	r3, #16
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480b      	ldr	r0, [pc, #44]	@ (8000e78 <MX_GPIO_Init+0x104>)
 8000e4c:	f000 fe1e 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_GPIO_Init+0x108>)
 8000e68:	f000 fe10 	bl	8001a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	@ 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	58021000 	.word	0x58021000

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <Error_Handler+0x8>

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_MspInit+0x30>)
 8000e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e98:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <HAL_MspInit+0x30>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_MspInit+0x30>)
 8000ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	58024400 	.word	0x58024400

08000ec0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0bc      	sub	sp, #240	@ 0xf0
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	22c0      	movs	r2, #192	@ 0xc0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f005 fda9 	bl	8006a38 <memset>
  if(hspi->Instance==SPI1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a38      	ldr	r2, [pc, #224]	@ (8000fcc <HAL_SPI_MspInit+0x10c>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d168      	bne.n	8000fc2 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ef0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 ffc5 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f10:	f7ff ffb6 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f14:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f24:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a25      	ldr	r2, [pc, #148]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f6e:	2360      	movs	r3, #96	@ 0x60
 8000f70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f90:	4619      	mov	r1, r3
 8000f92:	4810      	ldr	r0, [pc, #64]	@ (8000fd4 <HAL_SPI_MspInit+0x114>)
 8000f94:	f000 fd7a 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f98:	2320      	movs	r3, #32
 8000f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <HAL_SPI_MspInit+0x118>)
 8000fbe:	f000 fd65 	bl	8001a8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fc2:	bf00      	nop
 8000fc4:	37f0      	adds	r7, #240	@ 0xf0
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40013000 	.word	0x40013000
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58020000 	.word	0x58020000
 8000fd8:	58020400 	.word	0x58020400

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Time++;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <SysTick_Handler+0x30>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <SysTick_Handler+0x30>)
 800103e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 fb62 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	if(Time>=1000){
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <SysTick_Handler+0x30>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800104c:	d305      	bcc.n	800105a <SysTick_Handler+0x2a>
  		Print_SR=1;
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <SysTick_Handler+0x34>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
  		Time=0;
 8001054:	4b02      	ldr	r3, [pc, #8]	@ (8001060 <SysTick_Handler+0x30>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
  	}

  /* USER CODE END SysTick_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2400091c 	.word	0x2400091c
 8001064:	2400091b 	.word	0x2400091b

08001068 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f9f9 	bl	8001464 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800107c:	4b43      	ldr	r3, [pc, #268]	@ (800118c <SystemInit+0x114>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001082:	4a42      	ldr	r2, [pc, #264]	@ (800118c <SystemInit+0x114>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108c:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <SystemInit+0x118>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	2b06      	cmp	r3, #6
 8001096:	d807      	bhi.n	80010a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001098:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <SystemInit+0x118>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001190 <SystemInit+0x118>)
 80010a2:	f043 0307 	orr.w	r3, r3, #7
 80010a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001194 <SystemInit+0x11c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a39      	ldr	r2, [pc, #228]	@ (8001194 <SystemInit+0x11c>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b4:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <SystemInit+0x11c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010ba:	4b36      	ldr	r3, [pc, #216]	@ (8001194 <SystemInit+0x11c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4935      	ldr	r1, [pc, #212]	@ (8001194 <SystemInit+0x11c>)
 80010c0:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <SystemInit+0x120>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <SystemInit+0x118>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <SystemInit+0x118>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 030f 	bic.w	r3, r3, #15
 80010da:	4a2d      	ldr	r2, [pc, #180]	@ (8001190 <SystemInit+0x118>)
 80010dc:	f043 0307 	orr.w	r3, r3, #7
 80010e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <SystemInit+0x11c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <SystemInit+0x11c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ee:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <SystemInit+0x11c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <SystemInit+0x11c>)
 80010f6:	4a29      	ldr	r2, [pc, #164]	@ (800119c <SystemInit+0x124>)
 80010f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <SystemInit+0x11c>)
 80010fc:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <SystemInit+0x128>)
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <SystemInit+0x11c>)
 8001102:	4a28      	ldr	r2, [pc, #160]	@ (80011a4 <SystemInit+0x12c>)
 8001104:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <SystemInit+0x11c>)
 8001108:	2200      	movs	r2, #0
 800110a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800110c:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <SystemInit+0x11c>)
 800110e:	4a25      	ldr	r2, [pc, #148]	@ (80011a4 <SystemInit+0x12c>)
 8001110:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <SystemInit+0x11c>)
 8001114:	2200      	movs	r2, #0
 8001116:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <SystemInit+0x11c>)
 800111a:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <SystemInit+0x12c>)
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <SystemInit+0x11c>)
 8001120:	2200      	movs	r2, #0
 8001122:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <SystemInit+0x11c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1a      	ldr	r2, [pc, #104]	@ (8001194 <SystemInit+0x11c>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <SystemInit+0x11c>)
 8001132:	2200      	movs	r2, #0
 8001134:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <SystemInit+0x130>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <SystemInit+0x134>)
 800113c:	4013      	ands	r3, r2
 800113e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001142:	d202      	bcs.n	800114a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <SystemInit+0x138>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <SystemInit+0x11c>)
 800114c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d113      	bne.n	8001180 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <SystemInit+0x11c>)
 800115a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800115e:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <SystemInit+0x11c>)
 8001160:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001164:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <SystemInit+0x13c>)
 800116a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800116e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <SystemInit+0x11c>)
 8001172:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001176:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <SystemInit+0x11c>)
 8001178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800117c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	52002000 	.word	0x52002000
 8001194:	58024400 	.word	0x58024400
 8001198:	eaf6ed7f 	.word	0xeaf6ed7f
 800119c:	02020200 	.word	0x02020200
 80011a0:	01ff0000 	.word	0x01ff0000
 80011a4:	01010280 	.word	0x01010280
 80011a8:	5c001000 	.word	0x5c001000
 80011ac:	ffff0000 	.word	0xffff0000
 80011b0:	51008108 	.word	0x51008108
 80011b4:	52004000 	.word	0x52004000

080011b8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <ExitRun0Mode+0x2c>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <ExitRun0Mode+0x2c>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80011c8:	bf00      	nop
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <ExitRun0Mode+0x2c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f9      	beq.n	80011ca <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	58024800 	.word	0x58024800

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001224 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80011ec:	f7ff ffe4 	bl	80011b8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f0:	f7ff ff42 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f005 fc15 	bl	8006a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fc21 	bl	8000a64 <main>
  bx  lr
 8001222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001228:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800122c:	2400004c 	.word	0x2400004c
  ldr r2, =_sidata
 8001230:	08006aec 	.word	0x08006aec
  ldr r2, =_sbss
 8001234:	2400004c 	.word	0x2400004c
  ldr r4, =_ebss
 8001238:	240009c0 	.word	0x240009c0

0800123c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC3_IRQHandler>
	...

08001240 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	@ 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <BSP_LED_Init+0x28>
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d006      	beq.n	8001268 <BSP_LED_Init+0x28>
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d003      	beq.n	8001268 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001260:	f06f 0301 	mvn.w	r3, #1
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001266:	e055      	b.n	8001314 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10f      	bne.n	800128e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800126e:	4b2c      	ldr	r3, [pc, #176]	@ (8001320 <BSP_LED_Init+0xe0>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	4a2a      	ldr	r2, [pc, #168]	@ (8001320 <BSP_LED_Init+0xe0>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127e:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <BSP_LED_Init+0xe0>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	e021      	b.n	80012d2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d10f      	bne.n	80012b4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001294:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <BSP_LED_Init+0xe0>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	4a21      	ldr	r2, [pc, #132]	@ (8001320 <BSP_LED_Init+0xe0>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <BSP_LED_Init+0xe0>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	e00e      	b.n	80012d2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <BSP_LED_Init+0xe0>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <BSP_LED_Init+0xe0>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c4:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <BSP_LED_Init+0xe0>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <BSP_LED_Init+0xe4>)
 80012d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012da:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <BSP_LED_Init+0xe8>)
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	f107 0218 	add.w	r2, r7, #24
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fbc8 	bl	8001a8c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <BSP_LED_Init+0xe8>)
 8001300:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <BSP_LED_Init+0xe4>)
 8001308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	f000 fd6c 	bl	8001dec <HAL_GPIO_WritePin>
  }

  return ret;
 8001314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001316:	4618      	mov	r0, r3
 8001318:	3730      	adds	r7, #48	@ 0x30
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	58024400 	.word	0x58024400
 8001324:	08006ab8 	.word	0x08006ab8
 8001328:	2400002c 	.word	0x2400002c

0800132c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <BSP_LED_Toggle+0x28>
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d006      	beq.n	8001354 <BSP_LED_Toggle+0x28>
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d003      	beq.n	8001354 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800134c:	f06f 0301 	mvn.w	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e00b      	b.n	800136c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <BSP_LED_Toggle+0x4c>)
 8001358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4907      	ldr	r1, [pc, #28]	@ (800137c <BSP_LED_Toggle+0x50>)
 8001360:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001364:	4619      	mov	r1, r3
 8001366:	4610      	mov	r0, r2
 8001368:	f000 fd59 	bl	8001e1e <HAL_GPIO_TogglePin>
  }

  return ret;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2400002c 	.word	0x2400002c
 800137c:	08006ab8 	.word	0x08006ab8

08001380 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001390:	4b2e      	ldr	r3, [pc, #184]	@ (800144c <BSP_PB_Init+0xcc>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001396:	4a2d      	ldr	r2, [pc, #180]	@ (800144c <BSP_PB_Init+0xcc>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a0:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <BSP_PB_Init+0xcc>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80013ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80013b4:	2302      	movs	r3, #2
 80013b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <BSP_PB_Init+0xd0>)
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fb59 	bl	8001a8c <HAL_GPIO_Init>
 80013da:	e031      	b.n	8001440 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80013dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013e0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001450 <BSP_PB_Init+0xd0>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fb4b 	bl	8001a8c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4a16      	ldr	r2, [pc, #88]	@ (8001454 <BSP_PB_Init+0xd4>)
 80013fc:	441a      	add	r2, r3
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4915      	ldr	r1, [pc, #84]	@ (8001458 <BSP_PB_Init+0xd8>)
 8001402:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f000 fafb 	bl	8001a04 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <BSP_PB_Init+0xd4>)
 8001414:	1898      	adds	r0, r3, r2
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a10      	ldr	r2, [pc, #64]	@ (800145c <BSP_PB_Init+0xdc>)
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	461a      	mov	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f000 fad0 	bl	80019c6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001426:	2028      	movs	r0, #40	@ 0x28
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <BSP_PB_Init+0xe0>)
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f000 fa93 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001438:	2328      	movs	r3, #40	@ 0x28
 800143a:	4618      	mov	r0, r3
 800143c:	f000 faa9 	bl	8001992 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	58024400 	.word	0x58024400
 8001450:	24000038 	.word	0x24000038
 8001454:	24000920 	.word	0x24000920
 8001458:	08006ac0 	.word	0x08006ac0
 800145c:	2400003c 	.word	0x2400003c
 8001460:	24000040 	.word	0x24000040

08001464 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <BSP_PB_IRQHandler+0x20>)
 8001474:	4413      	add	r3, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fad8 	bl	8001a2c <HAL_EXTI_IRQHandler>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24000920 	.word	0x24000920

08001488 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014b6:	f06f 0301 	mvn.w	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e018      	b.n	80014f0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2294      	movs	r2, #148	@ 0x94
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <BSP_COM_Init+0x5c>)
 80014c8:	4413      	add	r3, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f852 	bl	8001574 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2294      	movs	r2, #148	@ 0x94
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <BSP_COM_Init+0x5c>)
 80014da:	4413      	add	r3, r2
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f80e 	bl	8001500 <MX_USART3_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014ea:	f06f 0303 	mvn.w	r3, #3
 80014ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014f0:	68fb      	ldr	r3, [r7, #12]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	24000928 	.word	0x24000928

08001500 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_USART3_Init+0x60>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	220c      	movs	r2, #12
 800151e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	895b      	ldrh	r3, [r3, #10]
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	891b      	ldrh	r3, [r3, #8]
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	899b      	ldrh	r3, [r3, #12]
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800154c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f004 f939 	bl	80057c6 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	24000028 	.word	0x24000028

08001564 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ff8d 	bl	8001488 <BSP_PB_Callback>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	@ (800161c <COM1_MspInit+0xa8>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001582:	4a26      	ldr	r2, [pc, #152]	@ (800161c <COM1_MspInit+0xa8>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <COM1_MspInit+0xa8>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <COM1_MspInit+0xa8>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a0:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <COM1_MspInit+0xa8>)
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <COM1_MspInit+0xa8>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <COM1_MspInit+0xa8>)
 80015ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015be:	4a17      	ldr	r2, [pc, #92]	@ (800161c <COM1_MspInit+0xa8>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <COM1_MspInit+0xa8>)
 80015ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80015d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80015e8:	2307      	movs	r3, #7
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480b      	ldr	r0, [pc, #44]	@ (8001620 <COM1_MspInit+0xac>)
 80015f4:	f000 fa4a 	bl	8001a8c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80015f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4804      	ldr	r0, [pc, #16]	@ (8001620 <COM1_MspInit+0xac>)
 800160e:	f000 fa3d 	bl	8001a8c <HAL_GPIO_Init>
}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	@ 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	58024400 	.word	0x58024400
 8001620:	58020c00 	.word	0x58020c00

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162a:	2003      	movs	r0, #3
 800162c:	f000 f98c 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001630:	f001 fa5a 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_Init+0x68>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	4913      	ldr	r1, [pc, #76]	@ (8001690 <HAL_Init+0x6c>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <HAL_Init+0x68>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <HAL_Init+0x6c>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <HAL_Init+0x70>)
 8001666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001668:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <HAL_Init+0x74>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f814 	bl	800169c <HAL_InitTick>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e002      	b.n	8001684 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800167e:	f7ff fc05 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58024400 	.word	0x58024400
 8001690:	08006aa8 	.word	0x08006aa8
 8001694:	24000024 	.word	0x24000024
 8001698:	24000020 	.word	0x24000020

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_InitTick+0x60>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e021      	b.n	80016f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <HAL_InitTick+0x64>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_InitTick+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f971 	bl	80019ae <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f93b 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	@ (8001704 <HAL_InitTick+0x68>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	24000048 	.word	0x24000048
 8001700:	24000020 	.word	0x24000020
 8001704:	24000044 	.word	0x24000044

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	24000048 	.word	0x24000048
 800172c:	240009bc 	.word	0x240009bc

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	240009bc 	.word	0x240009bc

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	24000048 	.word	0x24000048

08001790 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <HAL_GetREVID+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1b      	lsrs	r3, r3, #16
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	5c001000 	.word	0x5c001000

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	05fa0000 	.word	0x05fa0000

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	@ (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	@ (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff40 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff33 	bl	800180c <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa4 	bl	8001904 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80019c6:	b480      	push	{r7}
 80019c8:	b087      	sub	sp, #28
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	460b      	mov	r3, r1
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00a      	b.n	80019f8 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d103      	bne.n	80019f0 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	605a      	str	r2, [r3, #4]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
      break;
 80019f4:	bf00      	nop
  }

  return status;
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e003      	b.n	8001a20 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2201      	movs	r2, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	011a      	lsls	r2, r3, #4
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_EXTI_IRQHandler+0x5c>)
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4798      	blx	r3
    }
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	58000088 	.word	0x58000088

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a9a:	4b89      	ldr	r3, [pc, #548]	@ (8001cc0 <HAL_GPIO_Init+0x234>)
 8001a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a9e:	e194      	b.n	8001dca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8186 	beq.w	8001dc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d005      	beq.n	8001ad0 <HAL_GPIO_Init+0x44>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d130      	bne.n	8001b32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b06:	2201      	movs	r2, #1
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f003 0201 	and.w	r2, r3, #1
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d017      	beq.n	8001b6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d123      	bne.n	8001bc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	69b9      	ldr	r1, [r7, #24]
 8001bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0203 	and.w	r2, r3, #3
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80e0 	beq.w	8001dc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_GPIO_Init+0x238>)
 8001c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <HAL_GPIO_Init+0x238>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c14:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_GPIO_Init+0x238>)
 8001c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c22:	4a29      	ldr	r2, [pc, #164]	@ (8001cc8 <HAL_GPIO_Init+0x23c>)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a20      	ldr	r2, [pc, #128]	@ (8001ccc <HAL_GPIO_Init+0x240>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d052      	beq.n	8001cf4 <HAL_GPIO_Init+0x268>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <HAL_GPIO_Init+0x244>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_GPIO_Init+0x22e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd4 <HAL_GPIO_Init+0x248>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d02b      	beq.n	8001cb6 <HAL_GPIO_Init+0x22a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <HAL_GPIO_Init+0x24c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d025      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <HAL_GPIO_Init+0x250>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01f      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_GPIO_Init+0x254>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce4 <HAL_GPIO_Init+0x258>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a19      	ldr	r2, [pc, #100]	@ (8001ce8 <HAL_GPIO_Init+0x25c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a18      	ldr	r2, [pc, #96]	@ (8001cec <HAL_GPIO_Init+0x260>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_GPIO_Init+0x264>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c96:	2309      	movs	r3, #9
 8001c98:	e02d      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	e02b      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	e029      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e027      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e025      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e023      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e021      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e01f      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e01d      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e01b      	b.n	8001cf6 <HAL_GPIO_Init+0x26a>
 8001cbe:	bf00      	nop
 8001cc0:	58000080 	.word	0x58000080
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	58000400 	.word	0x58000400
 8001ccc:	58020000 	.word	0x58020000
 8001cd0:	58020400 	.word	0x58020400
 8001cd4:	58020800 	.word	0x58020800
 8001cd8:	58020c00 	.word	0x58020c00
 8001cdc:	58021000 	.word	0x58021000
 8001ce0:	58021400 	.word	0x58021400
 8001ce4:	58021800 	.word	0x58021800
 8001ce8:	58021c00 	.word	0x58021c00
 8001cec:	58022000 	.word	0x58022000
 8001cf0:	58022400 	.word	0x58022400
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d06:	4938      	ldr	r1, [pc, #224]	@ (8001de8 <HAL_GPIO_Init+0x35c>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f ae63 	bne.w	8001aa0 <HAL_GPIO_Init+0x14>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	3724      	adds	r7, #36	@ 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58000400 	.word	0x58000400

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d00a      	beq.n	8001e7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e01f      	b.n	8001eba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e01d      	b.n	8001eba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	490f      	ldr	r1, [pc, #60]	@ (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e8e:	f7ff fc4f 	bl	8001730 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e94:	e009      	b.n	8001eaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e96:	f7ff fc4b 	bl	8001730 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ea4:	d901      	bls.n	8001eaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e007      	b.n	8001eba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	58024800 	.word	0x58024800

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	@ 0x30
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f000 bc48 	b.w	800276c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8088 	beq.w	8001ffa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eea:	4b99      	ldr	r3, [pc, #612]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ef4:	4b96      	ldr	r3, [pc, #600]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d007      	beq.n	8001f10 <HAL_RCC_OscConfig+0x48>
 8001f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f02:	2b18      	cmp	r3, #24
 8001f04:	d111      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62>
 8001f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	4b8f      	ldr	r3, [pc, #572]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d06d      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x130>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d169      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f000 bc21 	b.w	800276c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7a>
 8001f34:	4b86      	ldr	r3, [pc, #536]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a85      	ldr	r2, [pc, #532]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e02e      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x9c>
 8001f4a:	4b81      	ldr	r3, [pc, #516]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a80      	ldr	r2, [pc, #512]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b7e      	ldr	r3, [pc, #504]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7d      	ldr	r2, [pc, #500]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0xc0>
 8001f6e:	4b78      	ldr	r3, [pc, #480]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a77      	ldr	r2, [pc, #476]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b75      	ldr	r3, [pc, #468]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a74      	ldr	r2, [pc, #464]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd8>
 8001f88:	4b71      	ldr	r3, [pc, #452]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a70      	ldr	r2, [pc, #448]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b6e      	ldr	r3, [pc, #440]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6d      	ldr	r2, [pc, #436]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fbc2 	bl	8001730 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff fbbe 	bl	8001730 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	@ 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e3d4      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe8>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fbae 	bl	8001730 <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fbaa 	bl	8001730 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e3c0      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fea:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x110>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80ca 	beq.w	800219c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002008:	4b51      	ldr	r3, [pc, #324]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002010:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002012:	4b4f      	ldr	r3, [pc, #316]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_RCC_OscConfig+0x166>
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	2b18      	cmp	r3, #24
 8002022:	d156      	bne.n	80020d2 <HAL_RCC_OscConfig+0x20a>
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d151      	bne.n	80020d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202e:	4b48      	ldr	r3, [pc, #288]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x17e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e392      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002046:	4b42      	ldr	r3, [pc, #264]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0219 	bic.w	r2, r3, #25
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	493f      	ldr	r1, [pc, #252]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fb6a 	bl	8001730 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fb66 	bl	8001730 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e37c      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002072:	4b37      	ldr	r3, [pc, #220]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	f7ff fb87 	bl	8001790 <HAL_GetREVID>
 8002082:	4603      	mov	r3, r0
 8002084:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002088:	4293      	cmp	r3, r2
 800208a:	d817      	bhi.n	80020bc <HAL_RCC_OscConfig+0x1f4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	d108      	bne.n	80020a6 <HAL_RCC_OscConfig+0x1de>
 8002094:	4b2e      	ldr	r3, [pc, #184]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800209c:	4a2c      	ldr	r2, [pc, #176]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 800209e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	e07a      	b.n	800219c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	031b      	lsls	r3, r3, #12
 80020b4:	4926      	ldr	r1, [pc, #152]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ba:	e06f      	b.n	800219c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4921      	ldr	r1, [pc, #132]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	e064      	b.n	800219c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d047      	beq.n	800216a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0219 	bic.w	r2, r3, #25
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	491a      	ldr	r1, [pc, #104]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fb20 	bl	8001730 <HAL_GetTick>
 80020f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff fb1c 	bl	8001730 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e332      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002106:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	f7ff fb3d 	bl	8001790 <HAL_GetREVID>
 8002116:	4603      	mov	r3, r0
 8002118:	f241 0203 	movw	r2, #4099	@ 0x1003
 800211c:	4293      	cmp	r3, r2
 800211e:	d819      	bhi.n	8002154 <HAL_RCC_OscConfig+0x28c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d108      	bne.n	800213a <HAL_RCC_OscConfig+0x272>
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002136:	6053      	str	r3, [r2, #4]
 8002138:	e030      	b.n	800219c <HAL_RCC_OscConfig+0x2d4>
 800213a:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	031b      	lsls	r3, r3, #12
 8002148:	4901      	ldr	r1, [pc, #4]	@ (8002150 <HAL_RCC_OscConfig+0x288>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
 800214e:	e025      	b.n	800219c <HAL_RCC_OscConfig+0x2d4>
 8002150:	58024400 	.word	0x58024400
 8002154:	4b9a      	ldr	r3, [pc, #616]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	4997      	ldr	r1, [pc, #604]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
 8002168:	e018      	b.n	800219c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b95      	ldr	r3, [pc, #596]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a94      	ldr	r2, [pc, #592]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff fadb 	bl	8001730 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff fad7 	bl	8001730 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e2ed      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002190:	4b8b      	ldr	r3, [pc, #556]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a9 	beq.w	80022fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021aa:	4b85      	ldr	r3, [pc, #532]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021b4:	4b82      	ldr	r3, [pc, #520]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d007      	beq.n	80021d0 <HAL_RCC_OscConfig+0x308>
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b18      	cmp	r3, #24
 80021c4:	d13a      	bne.n	800223c <HAL_RCC_OscConfig+0x374>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d135      	bne.n	800223c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021d0:	4b7b      	ldr	r3, [pc, #492]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x320>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b80      	cmp	r3, #128	@ 0x80
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e2c1      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021e8:	f7ff fad2 	bl	8001790 <HAL_GetREVID>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d817      	bhi.n	8002226 <HAL_RCC_OscConfig+0x35e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d108      	bne.n	8002210 <HAL_RCC_OscConfig+0x348>
 80021fe:	4b70      	ldr	r3, [pc, #448]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002206:	4a6e      	ldr	r2, [pc, #440]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800220c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800220e:	e075      	b.n	80022fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002210:	4b6b      	ldr	r3, [pc, #428]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	069b      	lsls	r3, r3, #26
 800221e:	4968      	ldr	r1, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002224:	e06a      	b.n	80022fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002226:	4b66      	ldr	r3, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4962      	ldr	r1, [pc, #392]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800223a:	e05f      	b.n	80022fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d042      	beq.n	80022ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002244:	4b5e      	ldr	r3, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5d      	ldr	r2, [pc, #372]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 800224a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff fa6e 	bl	8001730 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002258:	f7ff fa6a 	bl	8001730 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e280      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800226a:	4b55      	ldr	r3, [pc, #340]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002276:	f7ff fa8b 	bl	8001790 <HAL_GetREVID>
 800227a:	4603      	mov	r3, r0
 800227c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002280:	4293      	cmp	r3, r2
 8002282:	d817      	bhi.n	80022b4 <HAL_RCC_OscConfig+0x3ec>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	2b20      	cmp	r3, #32
 800228a:	d108      	bne.n	800229e <HAL_RCC_OscConfig+0x3d6>
 800228c:	4b4c      	ldr	r3, [pc, #304]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002294:	4a4a      	ldr	r2, [pc, #296]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002296:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800229a:	6053      	str	r3, [r2, #4]
 800229c:	e02e      	b.n	80022fc <HAL_RCC_OscConfig+0x434>
 800229e:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	069b      	lsls	r3, r3, #26
 80022ac:	4944      	ldr	r1, [pc, #272]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
 80022b2:	e023      	b.n	80022fc <HAL_RCC_OscConfig+0x434>
 80022b4:	4b42      	ldr	r3, [pc, #264]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	493f      	ldr	r1, [pc, #252]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
 80022c8:	e018      	b.n	80022fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022ca:	4b3d      	ldr	r3, [pc, #244]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a3c      	ldr	r2, [pc, #240]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff fa2b 	bl	8001730 <HAL_GetTick>
 80022da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80022de:	f7ff fa27 	bl	8001730 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e23d      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022f0:	4b33      	ldr	r3, [pc, #204]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d036      	beq.n	8002376 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d019      	beq.n	8002344 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	4a2a      	ldr	r2, [pc, #168]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7ff fa08 	bl	8001730 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fa04 	bl	8001730 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e21a      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x45c>
 8002342:	e018      	b.n	8002376 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002344:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7ff f9ee 	bl	8001730 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff f9ea 	bl	8001730 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e200      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d039      	beq.n	80023f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800238a:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a0c      	ldr	r2, [pc, #48]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002394:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002396:	f7ff f9cb 	bl	8001730 <HAL_GetTick>
 800239a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800239e:	f7ff f9c7 	bl	8001730 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1dd      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x4d6>
 80023bc:	e01b      	b.n	80023f6 <HAL_RCC_OscConfig+0x52e>
 80023be:	bf00      	nop
 80023c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a9a      	ldr	r2, [pc, #616]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80023ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023d0:	f7ff f9ae 	bl	8001730 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d8:	f7ff f9aa 	bl	8001730 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1c0      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023ea:	4b92      	ldr	r3, [pc, #584]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8081 	beq.w	8002506 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002404:	4b8c      	ldr	r3, [pc, #560]	@ (8002638 <HAL_RCC_OscConfig+0x770>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a8b      	ldr	r2, [pc, #556]	@ (8002638 <HAL_RCC_OscConfig+0x770>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002410:	f7ff f98e 	bl	8001730 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002418:	f7ff f98a 	bl	8001730 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1a0      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242a:	4b83      	ldr	r3, [pc, #524]	@ (8002638 <HAL_RCC_OscConfig+0x770>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x584>
 800243e:	4b7d      	ldr	r3, [pc, #500]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002442:	4a7c      	ldr	r2, [pc, #496]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	@ 0x70
 800244a:	e02d      	b.n	80024a8 <HAL_RCC_OscConfig+0x5e0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x5a6>
 8002454:	4b77      	ldr	r3, [pc, #476]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	4a76      	ldr	r2, [pc, #472]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002460:	4b74      	ldr	r3, [pc, #464]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	4a73      	ldr	r2, [pc, #460]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002466:	f023 0304 	bic.w	r3, r3, #4
 800246a:	6713      	str	r3, [r2, #112]	@ 0x70
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x5e0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c8>
 8002476:	4b6f      	ldr	r3, [pc, #444]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	4a6e      	ldr	r2, [pc, #440]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	@ 0x70
 8002482:	4b6c      	ldr	r3, [pc, #432]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	4a6b      	ldr	r2, [pc, #428]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	@ 0x70
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x5e0>
 8002490:	4b68      	ldr	r3, [pc, #416]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002494:	4a67      	ldr	r2, [pc, #412]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	@ 0x70
 800249c:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	4a64      	ldr	r2, [pc, #400]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d015      	beq.n	80024dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff f93e 	bl	8001730 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff f93a 	bl	8001730 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e14e      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ce:	4b59      	ldr	r3, [pc, #356]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <HAL_RCC_OscConfig+0x5f0>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7ff f928 	bl	8001730 <HAL_GetTick>
 80024e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7ff f924 	bl	8001730 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e138      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ee      	bne.n	80024e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 812d 	beq.w	800276a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002510:	4b48      	ldr	r3, [pc, #288]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002518:	2b18      	cmp	r3, #24
 800251a:	f000 80bd 	beq.w	8002698 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	2b02      	cmp	r3, #2
 8002524:	f040 809e 	bne.w	8002664 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b42      	ldr	r3, [pc, #264]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a41      	ldr	r2, [pc, #260]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 800252e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f8fc 	bl	8001730 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff f8f8 	bl	8001730 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e10e      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800254e:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255a:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 800255c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800255e:	4b37      	ldr	r3, [pc, #220]	@ (800263c <HAL_RCC_OscConfig+0x774>)
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	430a      	orrs	r2, r1
 800256e:	4931      	ldr	r1, [pc, #196]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	628b      	str	r3, [r1, #40]	@ 0x28
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	3b01      	subs	r3, #1
 800257a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002582:	3b01      	subs	r3, #1
 8002584:	025b      	lsls	r3, r3, #9
 8002586:	b29b      	uxth	r3, r3
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	3b01      	subs	r3, #1
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	3b01      	subs	r3, #1
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80025a4:	4923      	ldr	r1, [pc, #140]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80025aa:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ae:	4a21      	ldr	r2, [pc, #132]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ba:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <HAL_RCC_OscConfig+0x778>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025c2:	00d2      	lsls	r2, r2, #3
 80025c4:	491b      	ldr	r1, [pc, #108]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	f023 020c 	bic.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4917      	ldr	r1, [pc, #92]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025dc:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	f023 0202 	bic.w	r2, r3, #2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e8:	4912      	ldr	r1, [pc, #72]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f2:	4a10      	ldr	r2, [pc, #64]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002612:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261e:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <HAL_RCC_OscConfig+0x76c>)
 8002624:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7ff f881 	bl	8001730 <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002630:	e011      	b.n	8002656 <HAL_RCC_OscConfig+0x78e>
 8002632:	bf00      	nop
 8002634:	58024400 	.word	0x58024400
 8002638:	58024800 	.word	0x58024800
 800263c:	fffffc0c 	.word	0xfffffc0c
 8002640:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff f874 	bl	8001730 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e08a      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x77c>
 8002662:	e082      	b.n	800276a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b43      	ldr	r3, [pc, #268]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 800266a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff f85e 	bl	8001730 <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff f85a 	bl	8001730 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e070      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800268a:	4b3a      	ldr	r3, [pc, #232]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x7b0>
 8002696:	e068      	b.n	800276a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002698:	4b36      	ldr	r3, [pc, #216]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800269e:	4b35      	ldr	r3, [pc, #212]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d031      	beq.n	8002710 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d12a      	bne.n	8002710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d122      	bne.n	8002710 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d11a      	bne.n	8002710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	0a5b      	lsrs	r3, r3, #9
 80026de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d111      	bne.n	8002710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d108      	bne.n	8002710 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0e1b      	lsrs	r3, r3, #24
 8002702:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e02b      	b.n	800276c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 8002716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002718:	08db      	lsrs	r3, r3, #3
 800271a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800271e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	429a      	cmp	r2, r3
 8002728:	d01f      	beq.n	800276a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800272a:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	4a11      	ldr	r2, [pc, #68]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002736:	f7fe fffb 	bl	8001730 <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800273c:	bf00      	nop
 800273e:	f7fe fff7 	bl	8001730 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	4293      	cmp	r3, r2
 8002748:	d0f9      	beq.n	800273e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800274a:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 800274c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_RCC_OscConfig+0x8b0>)
 8002750:	4013      	ands	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002756:	00d2      	lsls	r2, r2, #3
 8002758:	4906      	ldr	r1, [pc, #24]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 800275a:	4313      	orrs	r3, r2
 800275c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <HAL_RCC_OscConfig+0x8ac>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3730      	adds	r7, #48	@ 0x30
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	58024400 	.word	0x58024400
 8002778:	ffff0007 	.word	0xffff0007

0800277c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e19c      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b8a      	ldr	r3, [pc, #552]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b87      	ldr	r3, [pc, #540]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 020f 	bic.w	r2, r3, #15
 80027a6:	4985      	ldr	r1, [pc, #532]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b83      	ldr	r3, [pc, #524]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e184      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d010      	beq.n	80027ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	4b7b      	ldr	r3, [pc, #492]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027d8:	429a      	cmp	r2, r3
 80027da:	d908      	bls.n	80027ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027dc:	4b78      	ldr	r3, [pc, #480]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4975      	ldr	r1, [pc, #468]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d010      	beq.n	800281c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	4b70      	ldr	r3, [pc, #448]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002806:	429a      	cmp	r2, r3
 8002808:	d908      	bls.n	800281c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800280a:	4b6d      	ldr	r3, [pc, #436]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	496a      	ldr	r1, [pc, #424]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002818:	4313      	orrs	r3, r2
 800281a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d010      	beq.n	800284a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	4b64      	ldr	r3, [pc, #400]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002834:	429a      	cmp	r2, r3
 8002836:	d908      	bls.n	800284a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002838:	4b61      	ldr	r3, [pc, #388]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	495e      	ldr	r1, [pc, #376]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002846:	4313      	orrs	r3, r2
 8002848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	4b59      	ldr	r3, [pc, #356]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002862:	429a      	cmp	r2, r3
 8002864:	d908      	bls.n	8002878 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002866:	4b56      	ldr	r3, [pc, #344]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4953      	ldr	r1, [pc, #332]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002874:	4313      	orrs	r3, r2
 8002876:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	429a      	cmp	r2, r3
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b4a      	ldr	r3, [pc, #296]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f023 020f 	bic.w	r2, r3, #15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4947      	ldr	r1, [pc, #284]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d055      	beq.n	800295e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80028b2:	4b43      	ldr	r3, [pc, #268]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4940      	ldr	r1, [pc, #256]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028cc:	4b3c      	ldr	r3, [pc, #240]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d121      	bne.n	800291c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0f6      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d115      	bne.n	800291c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0ea      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028fc:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0de      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800290c:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0d6      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800291c:	4b28      	ldr	r3, [pc, #160]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f023 0207 	bic.w	r2, r3, #7
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4925      	ldr	r1, [pc, #148]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800292a:	4313      	orrs	r3, r2
 800292c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800292e:	f7fe feff 	bl	8001730 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002934:	e00a      	b.n	800294c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002936:	f7fe fefb 	bl	8001730 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0be      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294c:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	429a      	cmp	r2, r3
 800295c:	d1eb      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	429a      	cmp	r2, r3
 8002978:	d208      	bcs.n	800298c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	490e      	ldr	r1, [pc, #56]	@ (80029c0 <HAL_RCC_ClockConfig+0x244>)
 8002988:	4313      	orrs	r3, r2
 800298a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d214      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 020f 	bic.w	r2, r3, #15
 80029a2:	4906      	ldr	r1, [pc, #24]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <HAL_RCC_ClockConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e086      	b.n	8002aca <HAL_RCC_ClockConfig+0x34e>
 80029bc:	52002000 	.word	0x52002000
 80029c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029dc:	429a      	cmp	r2, r3
 80029de:	d208      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029e0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	4939      	ldr	r1, [pc, #228]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d010      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	4b34      	ldr	r3, [pc, #208]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d208      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a0e:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	492e      	ldr	r1, [pc, #184]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d010      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d208      	bcs.n	8002a4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4922      	ldr	r1, [pc, #136]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d010      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d208      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4917      	ldr	r1, [pc, #92]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a7c:	f000 f834 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	4912      	ldr	r1, [pc, #72]	@ (8002ad8 <HAL_RCC_ClockConfig+0x35c>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <HAL_RCC_ClockConfig+0x358>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <HAL_RCC_ClockConfig+0x35c>)
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8002adc <HAL_RCC_ClockConfig+0x360>)
 8002ab2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <HAL_RCC_ClockConfig+0x364>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_RCC_ClockConfig+0x368>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fdec 	bl	800169c <HAL_InitTick>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	58024400 	.word	0x58024400
 8002ad8:	08006aa8 	.word	0x08006aa8
 8002adc:	24000024 	.word	0x24000024
 8002ae0:	24000020 	.word	0x24000020
 8002ae4:	24000044 	.word	0x24000044

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	@ 0x24
 8002aec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aee:	4bb3      	ldr	r3, [pc, #716]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002af6:	2b18      	cmp	r3, #24
 8002af8:	f200 8155 	bhi.w	8002da6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002afc:	a201      	add	r2, pc, #4	@ (adr r2, 8002b04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b69 	.word	0x08002b69
 8002b08:	08002da7 	.word	0x08002da7
 8002b0c:	08002da7 	.word	0x08002da7
 8002b10:	08002da7 	.word	0x08002da7
 8002b14:	08002da7 	.word	0x08002da7
 8002b18:	08002da7 	.word	0x08002da7
 8002b1c:	08002da7 	.word	0x08002da7
 8002b20:	08002da7 	.word	0x08002da7
 8002b24:	08002b8f 	.word	0x08002b8f
 8002b28:	08002da7 	.word	0x08002da7
 8002b2c:	08002da7 	.word	0x08002da7
 8002b30:	08002da7 	.word	0x08002da7
 8002b34:	08002da7 	.word	0x08002da7
 8002b38:	08002da7 	.word	0x08002da7
 8002b3c:	08002da7 	.word	0x08002da7
 8002b40:	08002da7 	.word	0x08002da7
 8002b44:	08002b95 	.word	0x08002b95
 8002b48:	08002da7 	.word	0x08002da7
 8002b4c:	08002da7 	.word	0x08002da7
 8002b50:	08002da7 	.word	0x08002da7
 8002b54:	08002da7 	.word	0x08002da7
 8002b58:	08002da7 	.word	0x08002da7
 8002b5c:	08002da7 	.word	0x08002da7
 8002b60:	08002da7 	.word	0x08002da7
 8002b64:	08002b9b 	.word	0x08002b9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b68:	4b94      	ldr	r3, [pc, #592]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b74:	4b91      	ldr	r3, [pc, #580]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	4a90      	ldr	r2, [pc, #576]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b86:	e111      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b88:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b8a:	61bb      	str	r3, [r7, #24]
      break;
 8002b8c:	e10e      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b90:	61bb      	str	r3, [r7, #24]
      break;
 8002b92:	e10b      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b94:	4b8c      	ldr	r3, [pc, #560]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b96:	61bb      	str	r3, [r7, #24]
      break;
 8002b98:	e108      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b9a:	4b88      	ldr	r3, [pc, #544]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ba4:	4b85      	ldr	r3, [pc, #532]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002bb0:	4b82      	ldr	r3, [pc, #520]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002bba:	4b80      	ldr	r3, [pc, #512]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbe:	08db      	lsrs	r3, r3, #3
 8002bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80e1 	beq.w	8002da0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	f000 8083 	beq.w	8002cec <HAL_RCC_GetSysClockFreq+0x204>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f200 80a1 	bhi.w	8002d30 <HAL_RCC_GetSysClockFreq+0x248>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x114>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d056      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002bfa:	e099      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02d      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c08:	4b6c      	ldr	r3, [pc, #432]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	4a6b      	ldr	r2, [pc, #428]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c32:	4b62      	ldr	r3, [pc, #392]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002c62:	e087      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002dd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	4b51      	ldr	r3, [pc, #324]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ca6:	e065      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002dd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cba:	4b40      	ldr	r3, [pc, #256]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cea:	e043      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002dd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d2e:	e021      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002dd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d42:	4b1e      	ldr	r3, [pc, #120]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d74:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	0a5b      	lsrs	r3, r3, #9
 8002d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d7e:	3301      	adds	r3, #1
 8002d80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	ee17 3a90 	vmov	r3, s15
 8002d9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d9e:	e005      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
      break;
 8002da4:	e002      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002da6:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002da8:	61bb      	str	r3, [r7, #24]
      break;
 8002daa:	bf00      	nop
  }

  return sysclockfreq;
 8002dac:	69bb      	ldr	r3, [r7, #24]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	03d09000 	.word	0x03d09000
 8002dc4:	003d0900 	.word	0x003d0900
 8002dc8:	007a1200 	.word	0x007a1200
 8002dcc:	46000000 	.word	0x46000000
 8002dd0:	4c742400 	.word	0x4c742400
 8002dd4:	4a742400 	.word	0x4a742400
 8002dd8:	4af42400 	.word	0x4af42400

08002ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002de2:	f7ff fe81 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_RCC_GetHCLKFreq+0x50>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490f      	ldr	r1, [pc, #60]	@ (8002e30 <HAL_RCC_GetHCLKFreq+0x54>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_RCC_GetHCLKFreq+0x50>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	4a07      	ldr	r2, [pc, #28]	@ (8002e34 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e1a:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e20:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	08006aa8 	.word	0x08006aa8
 8002e34:	24000024 	.word	0x24000024
 8002e38:	24000020 	.word	0x24000020

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e40:	f7ff ffcc 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4904      	ldr	r1, [pc, #16]	@ (8002e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	58024400 	.word	0x58024400
 8002e64:	08006aa8 	.word	0x08006aa8

08002e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e6c:	f7ff ffb6 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4904      	ldr	r1, [pc, #16]	@ (8002e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	08006aa8 	.word	0x08006aa8

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e98:	b0ca      	sub	sp, #296	@ 0x128
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002eb8:	2500      	movs	r5, #0
 8002eba:	ea54 0305 	orrs.w	r3, r4, r5
 8002ebe:	d049      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ec6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002eca:	d02f      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ecc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ed0:	d828      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed6:	d01a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ed8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002edc:	d822      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee6:	d007      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eea:	4bb8      	ldr	r3, [pc, #736]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	4ab7      	ldr	r2, [pc, #732]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ef6:	e01a      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efc:	3308      	adds	r3, #8
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 fc8f 	bl	8004824 <RCCEx_PLL2_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f0c:	e00f      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f12:	3328      	adds	r3, #40	@ 0x28
 8002f14:	2102      	movs	r1, #2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f001 fd36 	bl	8004988 <RCCEx_PLL3_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f22:	e004      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f36:	4ba5      	ldr	r3, [pc, #660]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f44:	4aa1      	ldr	r2, [pc, #644]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f46:	430b      	orrs	r3, r1
 8002f48:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002f60:	f04f 0900 	mov.w	r9, #0
 8002f64:	ea58 0309 	orrs.w	r3, r8, r9
 8002f68:	d047      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d82a      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f74:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f91 	.word	0x08002f91
 8002f80:	08002f9f 	.word	0x08002f9f
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fd3 	.word	0x08002fd3
 8002f8c:	08002fd3 	.word	0x08002fd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f90:	4b8e      	ldr	r3, [pc, #568]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4a8d      	ldr	r2, [pc, #564]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f9c:	e01a      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fc3c 	bl	8004824 <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fb2:	e00f      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb8:	3328      	adds	r3, #40	@ 0x28
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 fce3 	bl	8004988 <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fc8:	e004      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe0:	f023 0107 	bic.w	r1, r3, #7
 8002fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	4a78      	ldr	r2, [pc, #480]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ff0:	e003      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003006:	f04f 0b00 	mov.w	fp, #0
 800300a:	ea5a 030b 	orrs.w	r3, sl, fp
 800300e:	d04c      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301a:	d030      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800301c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003020:	d829      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003022:	2bc0      	cmp	r3, #192	@ 0xc0
 8003024:	d02d      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003026:	2bc0      	cmp	r3, #192	@ 0xc0
 8003028:	d825      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	d018      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800302e:	2b80      	cmp	r3, #128	@ 0x80
 8003030:	d821      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d007      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800303a:	e01c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303c:	4b63      	ldr	r3, [pc, #396]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	4a62      	ldr	r2, [pc, #392]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003048:	e01c      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	3308      	adds	r3, #8
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f001 fbe6 	bl	8004824 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800305e:	e011      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	3328      	adds	r3, #40	@ 0x28
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f001 fc8d 	bl	8004988 <RCCEx_PLL3_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800307c:	e002      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800308c:	4b4f      	ldr	r3, [pc, #316]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800308e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003090:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	4a4c      	ldr	r2, [pc, #304]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800309c:	430b      	orrs	r3, r1
 800309e:	6513      	str	r3, [r2, #80]	@ 0x50
 80030a0:	e003      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80030b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80030c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80030c4:	460b      	mov	r3, r1
 80030c6:	4313      	orrs	r3, r2
 80030c8:	d053      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030d6:	d035      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80030d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030dc:	d82e      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80030e2:	d031      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80030e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80030e8:	d828      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ee:	d01a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80030f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030f4:	d822      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80030fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030fe:	d007      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003100:	e01c      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003102:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	4a31      	ldr	r2, [pc, #196]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800310e:	e01c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	3308      	adds	r3, #8
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f001 fb83 	bl	8004824 <RCCEx_PLL2_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003124:	e011      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312a:	3328      	adds	r3, #40	@ 0x28
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f001 fc2a 	bl	8004988 <RCCEx_PLL3_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800313a:	e006      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003142:	e002      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003144:	bf00      	nop
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003152:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800315a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003162:	4a1a      	ldr	r2, [pc, #104]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003164:	430b      	orrs	r3, r1
 8003166:	6593      	str	r3, [r2, #88]	@ 0x58
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800316e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800317e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003188:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800318c:	460b      	mov	r3, r1
 800318e:	4313      	orrs	r3, r2
 8003190:	d056      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800319a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800319e:	d038      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80031a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031a4:	d831      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031aa:	d034      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80031ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031b0:	d82b      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031b6:	d01d      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80031b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031bc:	d825      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80031c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80031c8:	e01f      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031ca:	bf00      	nop
 80031cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d0:	4ba2      	ldr	r3, [pc, #648]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	4aa1      	ldr	r2, [pc, #644]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031dc:	e01c      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e2:	3308      	adds	r3, #8
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 fb1c 	bl	8004824 <RCCEx_PLL2_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031f2:	e011      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f8:	3328      	adds	r3, #40	@ 0x28
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 fbc3 	bl	8004988 <RCCEx_PLL3_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003208:	e006      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003210:	e002      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003220:	4b8e      	ldr	r3, [pc, #568]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003224:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003230:	4a8a      	ldr	r2, [pc, #552]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003232:	430b      	orrs	r3, r1
 8003234:	6593      	str	r3, [r2, #88]	@ 0x58
 8003236:	e003      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800323c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800324c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003256:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800325a:	460b      	mov	r3, r1
 800325c:	4313      	orrs	r3, r2
 800325e:	d03a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	2b30      	cmp	r3, #48	@ 0x30
 8003268:	d01f      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800326a:	2b30      	cmp	r3, #48	@ 0x30
 800326c:	d819      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d00c      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d815      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d019      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d111      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327e:	4b77      	ldr	r3, [pc, #476]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	4a76      	ldr	r2, [pc, #472]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003288:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800328a:	e011      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003290:	3308      	adds	r3, #8
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fac5 	bl	8004824 <RCCEx_PLL2_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a8:	e002      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80032ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032b8:	4b68      	ldr	r3, [pc, #416]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c6:	4a65      	ldr	r2, [pc, #404]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032c8:	430b      	orrs	r3, r1
 80032ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032cc:	e003      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80032e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80032e6:	2300      	movs	r3, #0
 80032e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80032ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4313      	orrs	r3, r2
 80032f4:	d051      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80032f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003300:	d035      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003306:	d82e      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003308:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800330c:	d031      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800330e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003312:	d828      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003318:	d01a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800331e:	d822      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003328:	d007      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800332a:	e01c      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332c:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003336:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003338:	e01c      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333e:	3308      	adds	r3, #8
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fa6e 	bl	8004824 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800334e:	e011      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	3328      	adds	r3, #40	@ 0x28
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fb15 	bl	8004988 <RCCEx_PLL3_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003364:	e006      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800336c:	e002      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800337c:	4b37      	ldr	r3, [pc, #220]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800337e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003380:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	4a34      	ldr	r2, [pc, #208]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338c:	430b      	orrs	r3, r1
 800338e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003390:	e003      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80033a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80033b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80033b4:	460b      	mov	r3, r1
 80033b6:	4313      	orrs	r3, r2
 80033b8:	d056      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d033      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80033c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ca:	d82c      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033d0:	d02f      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80033d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033d6:	d826      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033dc:	d02b      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80033de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033e2:	d820      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033e8:	d012      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80033ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033ee:	d81a      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d022      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d115      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fe:	3308      	adds	r3, #8
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f001 fa0e 	bl	8004824 <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800340e:	e015      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	3328      	adds	r3, #40	@ 0x28
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f001 fab5 	bl	8004988 <RCCEx_PLL3_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003424:	e00a      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800342c:	e006      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800342e:	bf00      	nop
 8003430:	e004      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003432:	bf00      	nop
 8003434:	e002      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800343a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003448:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003452:	4a02      	ldr	r2, [pc, #8]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003454:	430b      	orrs	r3, r1
 8003456:	6513      	str	r3, [r2, #80]	@ 0x50
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800345a:	bf00      	nop
 800345c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800347e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	d055      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003494:	d033      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349a:	d82c      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a0:	d02f      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a6:	d826      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80034a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034ac:	d02b      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80034ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034b2:	d820      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80034b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034b8:	d012      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80034ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034be:	d81a      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d022      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80034c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034c8:	d115      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	3308      	adds	r3, #8
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f9a6 	bl	8004824 <RCCEx_PLL2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034de:	e015      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e4:	3328      	adds	r3, #40	@ 0x28
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fa4d 	bl	8004988 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034f4:	e00a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034fc:	e006      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80034fe:	bf00      	nop
 8003500:	e004      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800350a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003514:	4ba3      	ldr	r3, [pc, #652]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003518:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003524:	4a9f      	ldr	r2, [pc, #636]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003526:	430b      	orrs	r3, r1
 8003528:	6593      	str	r3, [r2, #88]	@ 0x58
 800352a:	e003      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800354a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800354e:	460b      	mov	r3, r1
 8003550:	4313      	orrs	r3, r2
 8003552:	d037      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800355e:	d00e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003564:	d816      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d018      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800356a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800356e:	d111      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003570:	4b8c      	ldr	r3, [pc, #560]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	4a8b      	ldr	r2, [pc, #556]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800357c:	e00f      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3308      	adds	r3, #8
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f001 f94c 	bl	8004824 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003592:	e004      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800359c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800359e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035a6:	4b7f      	ldr	r3, [pc, #508]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	4a7b      	ldr	r2, [pc, #492]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b6:	430b      	orrs	r3, r1
 80035b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80035ba:	e003      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80035d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80035de:	460b      	mov	r3, r1
 80035e0:	4313      	orrs	r3, r2
 80035e2:	d039      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d81c      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80035ee:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	08003631 	.word	0x08003631
 80035f8:	08003605 	.word	0x08003605
 80035fc:	08003613 	.word	0x08003613
 8003600:	08003631 	.word	0x08003631
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4b67      	ldr	r3, [pc, #412]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	4a66      	ldr	r2, [pc, #408]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003610:	e00f      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	3308      	adds	r3, #8
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f001 f902 	bl	8004824 <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003626:	e004      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800363a:	4b5a      	ldr	r3, [pc, #360]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	f023 0103 	bic.w	r1, r3, #3
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003648:	4a56      	ldr	r2, [pc, #344]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364a:	430b      	orrs	r3, r1
 800364c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003664:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800366e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	f000 809f 	beq.w	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800367a:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003684:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003686:	f7fe f853 	bl	8001730 <HAL_GetTick>
 800368a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800368e:	e00b      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003690:	f7fe f84e 	bl	8001730 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	@ 0x64
 800369e:	d903      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036a6:	e005      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036a8:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ed      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80036b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d179      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036bc:	4b39      	ldr	r3, [pc, #228]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036c8:	4053      	eors	r3, r2
 80036ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d2:	4b34      	ldr	r3, [pc, #208]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036de:	4b31      	ldr	r3, [pc, #196]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	4a30      	ldr	r2, [pc, #192]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ea:	4b2e      	ldr	r3, [pc, #184]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	4a2d      	ldr	r2, [pc, #180]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80036f6:	4a2b      	ldr	r2, [pc, #172]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800370a:	d118      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe f810 	bl	8001730 <HAL_GetTick>
 8003710:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003714:	e00d      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fe f80b 	bl	8001730 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003726:	429a      	cmp	r2, r3
 8003728:	d903      	bls.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003730:	e005      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003732:	4b1c      	ldr	r3, [pc, #112]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0eb      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003742:	2b00      	cmp	r3, #0
 8003744:	d129      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800374e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003756:	d10e      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003758:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003764:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003768:	091a      	lsrs	r2, r3, #4
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800376c:	4013      	ands	r3, r2
 800376e:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6113      	str	r3, [r2, #16]
 8003774:	e005      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	4a0a      	ldr	r2, [pc, #40]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003780:	6113      	str	r3, [r2, #16]
 8003782:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003784:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003794:	430b      	orrs	r3, r1
 8003796:	6713      	str	r3, [r2, #112]	@ 0x70
 8003798:	e00e      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800379a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80037a2:	e009      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80037a4:	58024400 	.word	0x58024400
 80037a8:	58024800 	.word	0x58024800
 80037ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f002 0301 	and.w	r3, r2, #1
 80037c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f000 8089 	beq.w	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037e0:	2b28      	cmp	r3, #40	@ 0x28
 80037e2:	d86b      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80037e4:	a201      	add	r2, pc, #4	@ (adr r2, 80037ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	080038c5 	.word	0x080038c5
 80037f0:	080038bd 	.word	0x080038bd
 80037f4:	080038bd 	.word	0x080038bd
 80037f8:	080038bd 	.word	0x080038bd
 80037fc:	080038bd 	.word	0x080038bd
 8003800:	080038bd 	.word	0x080038bd
 8003804:	080038bd 	.word	0x080038bd
 8003808:	080038bd 	.word	0x080038bd
 800380c:	08003891 	.word	0x08003891
 8003810:	080038bd 	.word	0x080038bd
 8003814:	080038bd 	.word	0x080038bd
 8003818:	080038bd 	.word	0x080038bd
 800381c:	080038bd 	.word	0x080038bd
 8003820:	080038bd 	.word	0x080038bd
 8003824:	080038bd 	.word	0x080038bd
 8003828:	080038bd 	.word	0x080038bd
 800382c:	080038a7 	.word	0x080038a7
 8003830:	080038bd 	.word	0x080038bd
 8003834:	080038bd 	.word	0x080038bd
 8003838:	080038bd 	.word	0x080038bd
 800383c:	080038bd 	.word	0x080038bd
 8003840:	080038bd 	.word	0x080038bd
 8003844:	080038bd 	.word	0x080038bd
 8003848:	080038bd 	.word	0x080038bd
 800384c:	080038c5 	.word	0x080038c5
 8003850:	080038bd 	.word	0x080038bd
 8003854:	080038bd 	.word	0x080038bd
 8003858:	080038bd 	.word	0x080038bd
 800385c:	080038bd 	.word	0x080038bd
 8003860:	080038bd 	.word	0x080038bd
 8003864:	080038bd 	.word	0x080038bd
 8003868:	080038bd 	.word	0x080038bd
 800386c:	080038c5 	.word	0x080038c5
 8003870:	080038bd 	.word	0x080038bd
 8003874:	080038bd 	.word	0x080038bd
 8003878:	080038bd 	.word	0x080038bd
 800387c:	080038bd 	.word	0x080038bd
 8003880:	080038bd 	.word	0x080038bd
 8003884:	080038bd 	.word	0x080038bd
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080038c5 	.word	0x080038c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	3308      	adds	r3, #8
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ffc3 	bl	8004824 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038a4:	e00f      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038aa:	3328      	adds	r3, #40	@ 0x28
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f86a 	bl	8004988 <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038ba:	e004      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80038c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038ce:	4bbf      	ldr	r3, [pc, #764]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038dc:	4abb      	ldr	r2, [pc, #748]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038de:	430b      	orrs	r3, r1
 80038e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f002 0302 	and.w	r3, r2, #2
 80038f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003902:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d041      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003912:	2b05      	cmp	r3, #5
 8003914:	d824      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003916:	a201      	add	r2, pc, #4	@ (adr r2, 800391c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	08003969 	.word	0x08003969
 8003920:	08003935 	.word	0x08003935
 8003924:	0800394b 	.word	0x0800394b
 8003928:	08003969 	.word	0x08003969
 800392c:	08003969 	.word	0x08003969
 8003930:	08003969 	.word	0x08003969
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	3308      	adds	r3, #8
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f000 ff71 	bl	8004824 <RCCEx_PLL2_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003948:	e00f      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	3328      	adds	r3, #40	@ 0x28
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f818 	bl	8004988 <RCCEx_PLL3_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800395e:	e004      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003972:	4b96      	ldr	r3, [pc, #600]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	f023 0107 	bic.w	r1, r3, #7
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003980:	4a92      	ldr	r2, [pc, #584]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003982:	430b      	orrs	r3, r1
 8003984:	6553      	str	r3, [r2, #84]	@ 0x54
 8003986:	e003      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f002 0304 	and.w	r3, r2, #4
 800399c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4313      	orrs	r3, r2
 80039ae:	d044      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d825      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80039bc:	a201      	add	r2, pc, #4	@ (adr r2, 80039c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	08003a11 	.word	0x08003a11
 80039c8:	080039dd 	.word	0x080039dd
 80039cc:	080039f3 	.word	0x080039f3
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	08003a11 	.word	0x08003a11
 80039d8:	08003a11 	.word	0x08003a11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e0:	3308      	adds	r3, #8
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 ff1d 	bl	8004824 <RCCEx_PLL2_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80039f0:	e00f      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	3328      	adds	r3, #40	@ 0x28
 80039f8:	2101      	movs	r1, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 ffc4 	bl	8004988 <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a06:	e004      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a0e:	e000      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1e:	f023 0107 	bic.w	r1, r3, #7
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2a:	4a68      	ldr	r2, [pc, #416]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f002 0320 	and.w	r3, r2, #32
 8003a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a54:	460b      	mov	r3, r1
 8003a56:	4313      	orrs	r3, r2
 8003a58:	d055      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a66:	d033      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a6c:	d82c      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a72:	d02f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a78:	d826      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a7e:	d02b      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003a80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a84:	d820      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a8a:	d012      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a90:	d81a      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d022      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a9a:	d115      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 febd 	bl	8004824 <RCCEx_PLL2_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e015      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	3328      	adds	r3, #40	@ 0x28
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 ff64 	bl	8004988 <RCCEx_PLL3_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ac6:	e00a      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ace:	e006      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ad0:	bf00      	nop
 8003ad2:	e004      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ad4:	bf00      	nop
 8003ad6:	e002      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae6:	4b39      	ldr	r3, [pc, #228]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	4a35      	ldr	r2, [pc, #212]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6553      	str	r3, [r2, #84]	@ 0x54
 8003afc:	e003      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003b1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4313      	orrs	r3, r2
 8003b24:	d058      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b32:	d033      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003b34:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b38:	d82c      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3e:	d02f      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b44:	d826      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b4a:	d02b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003b4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b50:	d820      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b56:	d012      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b5c:	d81a      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d022      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b66:	d115      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fe57 	bl	8004824 <RCCEx_PLL2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b7c:	e015      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	3328      	adds	r3, #40	@ 0x28
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fefe 	bl	8004988 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b92:	e00a      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b9a:	e006      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e004      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bc2:	4a02      	ldr	r2, [pc, #8]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003bca:	bf00      	nop
 8003bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d055      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c00:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c04:	d033      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003c06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c0a:	d82c      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c10:	d02f      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c16:	d826      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c18:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c1c:	d02b      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003c1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c22:	d820      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c28:	d012      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c2e:	d81a      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d022      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c38:	d115      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	3308      	adds	r3, #8
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fdee 	bl	8004824 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c4e:	e015      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	3328      	adds	r3, #40	@ 0x28
 8003c56:	2102      	movs	r1, #2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fe95 	bl	8004988 <RCCEx_PLL3_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c64:	e00a      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e004      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c84:	4ba1      	ldr	r3, [pc, #644]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c94:	4a9d      	ldr	r2, [pc, #628]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f002 0308 	and.w	r3, r2, #8
 8003cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d01e      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	3328      	adds	r3, #40	@ 0x28
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fe54 	bl	8004988 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003cec:	4b87      	ldr	r3, [pc, #540]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cfc:	4a83      	ldr	r2, [pc, #524]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	f002 0310 	and.w	r3, r2, #16
 8003d0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	d01e      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d2e:	d10c      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	3328      	adds	r3, #40	@ 0x28
 8003d36:	2102      	movs	r1, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fe25 	bl	8004988 <RCCEx_PLL3_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d4a:	4b70      	ldr	r3, [pc, #448]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d5a:	4a6c      	ldr	r2, [pc, #432]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003d6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d70:	2300      	movs	r3, #0
 8003d72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	d03e      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d8c:	d022      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d92:	d81b      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003d9e:	e015      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	3308      	adds	r3, #8
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fd3b 	bl	8004824 <RCCEx_PLL2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	3328      	adds	r3, #40	@ 0x28
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fde2 	bl	8004988 <RCCEx_PLL3_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dde:	4b4b      	ldr	r3, [pc, #300]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003dee:	4a47      	ldr	r2, [pc, #284]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df4:	e003      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e14:	460b      	mov	r3, r1
 8003e16:	4313      	orrs	r3, r2
 8003e18:	d03b      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e26:	d01f      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003e28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e2c:	d818      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e32:	d003      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e38:	d007      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003e3a:	e011      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3c:	4b33      	ldr	r3, [pc, #204]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	4a32      	ldr	r2, [pc, #200]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e48:	e00f      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	3328      	adds	r3, #40	@ 0x28
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fd98 	bl	8004988 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e5e:	e004      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e72:	4b26      	ldr	r3, [pc, #152]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	4a22      	ldr	r2, [pc, #136]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003e9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ea4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d034      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ebc:	d007      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003ebe:	e011      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b12      	ldr	r3, [pc, #72]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	4a11      	ldr	r2, [pc, #68]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ecc:	e00e      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fca4 	bl	8004824 <RCCEx_PLL2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ee2:	e003      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10d      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ef4:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f02:	4a02      	ldr	r2, [pc, #8]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f08:	e006      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003f24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f26:	2300      	movs	r3, #0
 8003f28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d00c      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	3328      	adds	r3, #40	@ 0x28
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fd23 	bl	8004988 <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003f64:	460b      	mov	r3, r1
 8003f66:	4313      	orrs	r3, r2
 8003f68:	d038      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f76:	d018      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7c:	d811      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f82:	d014      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f88:	d80b      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d011      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f94:	4bc3      	ldr	r3, [pc, #780]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	4ac2      	ldr	r2, [pc, #776]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fbc:	4bb9      	ldr	r3, [pc, #740]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fcc:	4ab5      	ldr	r2, [pc, #724]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fea:	2300      	movs	r3, #0
 8003fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ff8:	4baa      	ldr	r3, [pc, #680]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004006:	4aa7      	ldr	r2, [pc, #668]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004008:	430b      	orrs	r3, r1
 800400a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004018:	653b      	str	r3, [r7, #80]	@ 0x50
 800401a:	2300      	movs	r3, #0
 800401c:	657b      	str	r3, [r7, #84]	@ 0x54
 800401e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004028:	4b9e      	ldr	r3, [pc, #632]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004038:	4a9a      	ldr	r2, [pc, #616]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800404a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404c:	2300      	movs	r3, #0
 800404e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004050:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800405a:	4b92      	ldr	r3, [pc, #584]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800405c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004068:	4a8e      	ldr	r2, [pc, #568]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800406a:	430b      	orrs	r3, r1
 800406c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800407a:	643b      	str	r3, [r7, #64]	@ 0x40
 800407c:	2300      	movs	r3, #0
 800407e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004080:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d00e      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800408a:	4b86      	ldr	r3, [pc, #536]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	4a85      	ldr	r2, [pc, #532]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004090:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004094:	6113      	str	r3, [r2, #16]
 8004096:	4b83      	ldr	r3, [pc, #524]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004098:	6919      	ldr	r1, [r3, #16]
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80040a2:	4a80      	ldr	r2, [pc, #512]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80040b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040b6:	2300      	movs	r3, #0
 80040b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040c4:	4b77      	ldr	r3, [pc, #476]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d2:	4a74      	ldr	r2, [pc, #464]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80040e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e6:	2300      	movs	r3, #0
 80040e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80040ee:	460b      	mov	r3, r1
 80040f0:	4313      	orrs	r3, r2
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040f4:	4b6b      	ldr	r3, [pc, #428]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004104:	4a67      	ldr	r2, [pc, #412]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004106:	430b      	orrs	r3, r1
 8004108:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	2100      	movs	r1, #0
 8004114:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004120:	460b      	mov	r3, r1
 8004122:	4313      	orrs	r3, r2
 8004124:	d011      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	3308      	adds	r3, #8
 800412c:	2100      	movs	r1, #0
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fb78 	bl	8004824 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800413a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	2100      	movs	r1, #0
 8004154:	6239      	str	r1, [r7, #32]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
 800415c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004160:	460b      	mov	r3, r1
 8004162:	4313      	orrs	r3, r2
 8004164:	d011      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	3308      	adds	r3, #8
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fb58 	bl	8004824 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800417a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	2100      	movs	r1, #0
 8004194:	61b9      	str	r1, [r7, #24]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d011      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	3308      	adds	r3, #8
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fb38 	bl	8004824 <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	2100      	movs	r1, #0
 80041d4:	6139      	str	r1, [r7, #16]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80041e0:	460b      	mov	r3, r1
 80041e2:	4313      	orrs	r3, r2
 80041e4:	d011      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	3328      	adds	r3, #40	@ 0x28
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fbca 	bl	8004988 <RCCEx_PLL3_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	2100      	movs	r1, #0
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d011      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	3328      	adds	r3, #40	@ 0x28
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fbaa 	bl	8004988 <RCCEx_PLL3_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800423a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	2100      	movs	r1, #0
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d011      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	3328      	adds	r3, #40	@ 0x28
 800426c:	2102      	movs	r1, #2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fb8a 	bl	8004988 <RCCEx_PLL3_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800427a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800428a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800429e:	46bd      	mov	sp, r7
 80042a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a4:	58024400 	.word	0x58024400

080042a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042ac:	f7fe fd96 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4904      	ldr	r1, [pc, #16]	@ (80042d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58024400 	.word	0x58024400
 80042d0:	08006aa8 	.word	0x08006aa8

080042d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	@ 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042dc:	4ba1      	ldr	r3, [pc, #644]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80042e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	0b1b      	lsrs	r3, r3, #12
 80042ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042f2:	4b9c      	ldr	r3, [pc, #624]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80042fe:	4b99      	ldr	r3, [pc, #612]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004302:	08db      	lsrs	r3, r3, #3
 8004304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8111 	beq.w	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b02      	cmp	r3, #2
 8004326:	f000 8083 	beq.w	8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b02      	cmp	r3, #2
 800432e:	f200 80a1 	bhi.w	8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d056      	beq.n	80043ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800433e:	e099      	b.n	8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004340:	4b88      	ldr	r3, [pc, #544]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02d      	beq.n	80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800434c:	4b85      	ldr	r3, [pc, #532]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	4a84      	ldr	r2, [pc, #528]	@ (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004376:	4b7b      	ldr	r3, [pc, #492]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	ed97 6a03 	vldr	s12, [r7, #12]
 800438a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800438e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043a6:	e087      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ea:	e065      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fe:	4b59      	ldr	r3, [pc, #356]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004412:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800442e:	e043      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b48      	ldr	r3, [pc, #288]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a03 	vldr	s12, [r7, #12]
 8004456:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004472:	e021      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004486:	4b37      	ldr	r3, [pc, #220]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004496:	ed97 6a03 	vldr	s12, [r7, #12]
 800449a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800449e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80044b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	0a5b      	lsrs	r3, r3, #9
 80044be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044de:	ee17 2a90 	vmov	r2, s15
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80044e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004500:	edd7 6a07 	vldr	s13, [r7, #28]
 8004504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450c:	ee17 2a90 	vmov	r2, s15
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004514:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800452a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800452e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453a:	ee17 2a90 	vmov	r2, s15
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004542:	e008      	b.n	8004556 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
}
 8004556:	bf00      	nop
 8004558:	3724      	adds	r7, #36	@ 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
 8004568:	03d09000 	.word	0x03d09000
 800456c:	46000000 	.word	0x46000000
 8004570:	4c742400 	.word	0x4c742400
 8004574:	4a742400 	.word	0x4a742400
 8004578:	4af42400 	.word	0x4af42400

0800457c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	@ 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004584:	4ba1      	ldr	r3, [pc, #644]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800458e:	4b9f      	ldr	r3, [pc, #636]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	0d1b      	lsrs	r3, r3, #20
 8004594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004598:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800459a:	4b9c      	ldr	r3, [pc, #624]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045a6:	4b99      	ldr	r3, [pc, #612]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	08db      	lsrs	r3, r3, #3
 80045ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8111 	beq.w	80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	f000 8083 	beq.w	80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	f200 80a1 	bhi.w	800471c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d056      	beq.n	8004694 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045e6:	e099      	b.n	800471c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e8:	4b88      	ldr	r3, [pc, #544]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02d      	beq.n	8004650 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045f4:	4b85      	ldr	r3, [pc, #532]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	4a84      	ldr	r2, [pc, #528]	@ (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b7b      	ldr	r3, [pc, #492]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800464e:	e087      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b6a      	ldr	r3, [pc, #424]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a03 	vldr	s12, [r7, #12]
 8004676:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004692:	e065      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800481c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b59      	ldr	r3, [pc, #356]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d6:	e043      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b48      	ldr	r3, [pc, #288]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800471a:	e021      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800481c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b37      	ldr	r3, [pc, #220]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004742:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800475e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004760:	4b2a      	ldr	r3, [pc, #168]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	0a5b      	lsrs	r3, r3, #9
 8004766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800477a:	edd7 6a07 	vldr	s13, [r7, #28]
 800477e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004786:	ee17 2a90 	vmov	r2, s15
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800478e:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	0c1b      	lsrs	r3, r3, #16
 8004794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b4:	ee17 2a90 	vmov	r2, s15
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e2:	ee17 2a90 	vmov	r2, s15
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047ea:	e008      	b.n	80047fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
}
 80047fe:	bf00      	nop
 8004800:	3724      	adds	r7, #36	@ 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400
 8004810:	03d09000 	.word	0x03d09000
 8004814:	46000000 	.word	0x46000000
 8004818:	4c742400 	.word	0x4c742400
 800481c:	4a742400 	.word	0x4a742400
 8004820:	4af42400 	.word	0x4af42400

08004824 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004832:	4b53      	ldr	r3, [pc, #332]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b03      	cmp	r3, #3
 800483c:	d101      	bne.n	8004842 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e099      	b.n	8004976 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004842:	4b4f      	ldr	r3, [pc, #316]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a4e      	ldr	r2, [pc, #312]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004848:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800484c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484e:	f7fc ff6f 	bl	8001730 <HAL_GetTick>
 8004852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004854:	e008      	b.n	8004868 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004856:	f7fc ff6b 	bl	8001730 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e086      	b.n	8004976 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004868:	4b45      	ldr	r3, [pc, #276]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004874:	4b42      	ldr	r3, [pc, #264]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	031b      	lsls	r3, r3, #12
 8004882:	493f      	ldr	r1, [pc, #252]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	628b      	str	r3, [r1, #40]	@ 0x28
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	3b01      	subs	r3, #1
 800488e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	3b01      	subs	r3, #1
 8004898:	025b      	lsls	r3, r3, #9
 800489a:	b29b      	uxth	r3, r3
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048b8:	4931      	ldr	r1, [pc, #196]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048be:	4b30      	ldr	r3, [pc, #192]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	492d      	ldr	r1, [pc, #180]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	f023 0220 	bic.w	r2, r3, #32
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	4928      	ldr	r1, [pc, #160]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048e2:	4b27      	ldr	r3, [pc, #156]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	4a26      	ldr	r2, [pc, #152]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	f023 0310 	bic.w	r3, r3, #16
 80048ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ee:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f2:	4b24      	ldr	r3, [pc, #144]	@ (8004984 <RCCEx_PLL2_Config+0x160>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	69d2      	ldr	r2, [r2, #28]
 80048fa:	00d2      	lsls	r2, r2, #3
 80048fc:	4920      	ldr	r1, [pc, #128]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004902:	4b1f      	ldr	r3, [pc, #124]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	4a1e      	ldr	r2, [pc, #120]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004908:	f043 0310 	orr.w	r3, r3, #16
 800490c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	4a19      	ldr	r2, [pc, #100]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 800491a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800491e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004920:	e00f      	b.n	8004942 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d106      	bne.n	8004936 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004928:	4b15      	ldr	r3, [pc, #84]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a14      	ldr	r2, [pc, #80]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004934:	e005      	b.n	8004942 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004936:	4b12      	ldr	r3, [pc, #72]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	4a11      	ldr	r2, [pc, #68]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 800493c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004940:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004942:	4b0f      	ldr	r3, [pc, #60]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a0e      	ldr	r2, [pc, #56]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004948:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800494c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fc feef 	bl	8001730 <HAL_GetTick>
 8004952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004954:	e008      	b.n	8004968 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004956:	f7fc feeb 	bl	8001730 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e006      	b.n	8004976 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <RCCEx_PLL2_Config+0x15c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
 8004984:	ffff0007 	.word	0xffff0007

08004988 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004996:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d101      	bne.n	80049a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e099      	b.n	8004ada <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049a6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a4e      	ldr	r2, [pc, #312]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b2:	f7fc febd 	bl	8001730 <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049b8:	e008      	b.n	80049cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049ba:	f7fc feb9 	bl	8001730 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e086      	b.n	8004ada <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049cc:	4b45      	ldr	r3, [pc, #276]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f0      	bne.n	80049ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049d8:	4b42      	ldr	r3, [pc, #264]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	051b      	lsls	r3, r3, #20
 80049e6:	493f      	ldr	r1, [pc, #252]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a1c:	4931      	ldr	r1, [pc, #196]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a22:	4b30      	ldr	r3, [pc, #192]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	492d      	ldr	r1, [pc, #180]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	4928      	ldr	r1, [pc, #160]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a46:	4b27      	ldr	r3, [pc, #156]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	4a26      	ldr	r2, [pc, #152]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a52:	4b24      	ldr	r3, [pc, #144]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a56:	4b24      	ldr	r3, [pc, #144]	@ (8004ae8 <RCCEx_PLL3_Config+0x160>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	69d2      	ldr	r2, [r2, #28]
 8004a5e:	00d2      	lsls	r2, r2, #3
 8004a60:	4920      	ldr	r1, [pc, #128]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a84:	e00f      	b.n	8004aa6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a8c:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	4a14      	ldr	r2, [pc, #80]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a98:	e005      	b.n	8004aa6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fe3d 	bl	8001730 <HAL_GetTick>
 8004ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ab8:	e008      	b.n	8004acc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004aba:	f7fc fe39 	bl	8001730 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e006      	b.n	8004ada <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
 8004ae8:	ffff0007 	.word	0xffff0007

08004aec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e10f      	b.n	8004d1e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a87      	ldr	r2, [pc, #540]	@ (8004d28 <HAL_SPI_Init+0x23c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00f      	beq.n	8004b2e <HAL_SPI_Init+0x42>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a86      	ldr	r2, [pc, #536]	@ (8004d2c <HAL_SPI_Init+0x240>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00a      	beq.n	8004b2e <HAL_SPI_Init+0x42>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a84      	ldr	r2, [pc, #528]	@ (8004d30 <HAL_SPI_Init+0x244>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d005      	beq.n	8004b2e <HAL_SPI_Init+0x42>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d901      	bls.n	8004b2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0f7      	b.n	8004d1e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fe2e 	bl	8005790 <SPI_GetPacketSize>
 8004b34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7b      	ldr	r2, [pc, #492]	@ (8004d28 <HAL_SPI_Init+0x23c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00c      	beq.n	8004b5a <HAL_SPI_Init+0x6e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a79      	ldr	r2, [pc, #484]	@ (8004d2c <HAL_SPI_Init+0x240>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <HAL_SPI_Init+0x6e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a78      	ldr	r2, [pc, #480]	@ (8004d30 <HAL_SPI_Init+0x244>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_Init+0x6e>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d811      	bhi.n	8004b7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b5e:	4a72      	ldr	r2, [pc, #456]	@ (8004d28 <HAL_SPI_Init+0x23c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a70      	ldr	r2, [pc, #448]	@ (8004d2c <HAL_SPI_Init+0x240>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_SPI_Init+0x8c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6f      	ldr	r2, [pc, #444]	@ (8004d30 <HAL_SPI_Init+0x244>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d104      	bne.n	8004b82 <HAL_SPI_Init+0x96>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d901      	bls.n	8004b82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0cd      	b.n	8004d1e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fc f992 	bl	8000ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004bbe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bc8:	d119      	bne.n	8004bfe <HAL_SPI_Init+0x112>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bd2:	d103      	bne.n	8004bdc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10c      	bne.n	8004bfe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bec:	d107      	bne.n	8004bfe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00f      	beq.n	8004c2a <HAL_SPI_Init+0x13e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b06      	cmp	r3, #6
 8004c10:	d90b      	bls.n	8004c2a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e007      	b.n	8004c3a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	431a      	orrs	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	ea42 0103 	orr.w	r1, r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9a:	ea42 0103 	orr.w	r1, r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d113      	bne.n	8004cda <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cd8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40013000 	.word	0x40013000
 8004d2c:	40003800 	.word	0x40003800
 8004d30:	40003c00 	.word	0x40003c00

08004d34 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3320      	adds	r3, #32
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d4c:	f7fc fcf0 	bl	8001730 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d001      	beq.n	8004d62 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e1d1      	b.n	8005106 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_SPI_Transmit+0x3a>
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e1c9      	b.n	8005106 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_SPI_Transmit+0x4c>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e1c2      	b.n	8005106 <HAL_SPI_Transmit+0x3d2>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004dd8:	d108      	bne.n	8004dec <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e009      	b.n	8004e00 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004dfe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b96      	ldr	r3, [pc, #600]	@ (8005060 <HAL_SPI_Transmit+0x32c>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	88f9      	ldrh	r1, [r7, #6]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e2c:	d107      	bne.n	8004e3e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b0f      	cmp	r3, #15
 8004e44:	d947      	bls.n	8004ed6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004e46:	e03f      	b.n	8004ec8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d114      	bne.n	8004e80 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	1d1a      	adds	r2, r3, #4
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004e7e:	e023      	b.n	8004ec8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e80:	f7fc fc56 	bl	8001730 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d803      	bhi.n	8004e98 <HAL_SPI_Transmit+0x164>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x16a>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d114      	bne.n	8004ec8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fba8 	bl	80055f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eaa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e11e      	b.n	8005106 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1b9      	bne.n	8004e48 <HAL_SPI_Transmit+0x114>
 8004ed4:	e0f1      	b.n	80050ba <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b07      	cmp	r3, #7
 8004edc:	f240 80e6 	bls.w	80050ac <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ee0:	e05d      	b.n	8004f9e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d132      	bne.n	8004f56 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d918      	bls.n	8004f2e <HAL_SPI_Transmit+0x1fa>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d014      	beq.n	8004f2e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f14:	1d1a      	adds	r2, r3, #4
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b02      	subs	r3, #2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004f2c:	e037      	b.n	8004f9e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f32:	881a      	ldrh	r2, [r3, #0]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004f54:	e023      	b.n	8004f9e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f56:	f7fc fbeb 	bl	8001730 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d803      	bhi.n	8004f6e <HAL_SPI_Transmit+0x23a>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d102      	bne.n	8004f74 <HAL_SPI_Transmit+0x240>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d114      	bne.n	8004f9e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fb3d 	bl	80055f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0b3      	b.n	8005106 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d19b      	bne.n	8004ee2 <HAL_SPI_Transmit+0x1ae>
 8004faa:	e086      	b.n	80050ba <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d154      	bne.n	8005064 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d918      	bls.n	8004ff8 <HAL_SPI_Transmit+0x2c4>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fca:	2b40      	cmp	r3, #64	@ 0x40
 8004fcc:	d914      	bls.n	8004ff8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b04      	subs	r3, #4
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004ff6:	e059      	b.n	80050ac <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d917      	bls.n	8005034 <HAL_SPI_Transmit+0x300>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501a:	1c9a      	adds	r2, r3, #2
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b02      	subs	r3, #2
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005032:	e03b      	b.n	80050ac <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3320      	adds	r3, #32
 800503e:	7812      	ldrb	r2, [r2, #0]
 8005040:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800505e:	e025      	b.n	80050ac <HAL_SPI_Transmit+0x378>
 8005060:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005064:	f7fc fb64 	bl	8001730 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d803      	bhi.n	800507c <HAL_SPI_Transmit+0x348>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d102      	bne.n	8005082 <HAL_SPI_Transmit+0x34e>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d114      	bne.n	80050ac <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fab6 	bl	80055f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800508e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e02c      	b.n	8005106 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f47f af79 	bne.w	8004fac <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2108      	movs	r1, #8
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fb35 	bl	8005734 <SPI_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d6:	f043 0220 	orr.w	r2, r3, #32
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa87 	bl	80055f4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005104:	2300      	movs	r3, #0
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop

08005110 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	b29b      	uxth	r3, r3
 8005128:	3301      	adds	r3, #1
 800512a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3330      	adds	r3, #48	@ 0x30
 8005132:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005134:	f7fc fafc 	bl	8001730 <HAL_GetTick>
 8005138:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d001      	beq.n	800514a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	e250      	b.n	80055ec <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <HAL_SPI_Receive+0x46>
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e248      	b.n	80055ec <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_SPI_Receive+0x58>
 8005164:	2302      	movs	r3, #2
 8005166:	e241      	b.n	80055ec <HAL_SPI_Receive+0x4dc>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2204      	movs	r2, #4
 8005174:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80051c0:	d108      	bne.n	80051d4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e009      	b.n	80051e8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80051e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	4b95      	ldr	r3, [pc, #596]	@ (8005444 <HAL_SPI_Receive+0x334>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	88f9      	ldrh	r1, [r7, #6]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005214:	d107      	bne.n	8005226 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005224:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b0f      	cmp	r3, #15
 800522c:	d96c      	bls.n	8005308 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800522e:	e064      	b.n	80052fa <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d114      	bne.n	8005270 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800524e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005250:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005256:	1d1a      	adds	r2, r3, #4
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800526e:	e044      	b.n	80052fa <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005276:	b29b      	uxth	r3, r3
 8005278:	8bfa      	ldrh	r2, [r7, #30]
 800527a:	429a      	cmp	r2, r3
 800527c:	d919      	bls.n	80052b2 <HAL_SPI_Receive+0x1a2>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d014      	beq.n	80052b2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005290:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005292:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005298:	1d1a      	adds	r2, r3, #4
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80052b0:	e023      	b.n	80052fa <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b2:	f7fc fa3d 	bl	8001730 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d803      	bhi.n	80052ca <HAL_SPI_Receive+0x1ba>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d102      	bne.n	80052d0 <HAL_SPI_Receive+0x1c0>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d114      	bne.n	80052fa <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f98f 	bl	80055f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e178      	b.n	80055ec <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d194      	bne.n	8005230 <HAL_SPI_Receive+0x120>
 8005306:	e15e      	b.n	80055c6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b07      	cmp	r3, #7
 800530e:	f240 8153 	bls.w	80055b8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005312:	e08f      	b.n	8005434 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d114      	bne.n	8005354 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	8812      	ldrh	r2, [r2, #0]
 8005332:	b292      	uxth	r2, r2
 8005334:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800533a:	1c9a      	adds	r2, r3, #2
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005352:	e06f      	b.n	8005434 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800535a:	b29b      	uxth	r3, r3
 800535c:	8bfa      	ldrh	r2, [r7, #30]
 800535e:	429a      	cmp	r2, r3
 8005360:	d924      	bls.n	80053ac <HAL_SPI_Receive+0x29c>
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01f      	beq.n	80053ac <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	8812      	ldrh	r2, [r2, #0]
 800538a:	b292      	uxth	r2, r2
 800538c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005392:	1c9a      	adds	r2, r3, #2
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b02      	subs	r3, #2
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80053aa:	e043      	b.n	8005434 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d119      	bne.n	80053ec <HAL_SPI_Receive+0x2dc>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d014      	beq.n	80053ec <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	b292      	uxth	r2, r2
 80053cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d2:	1c9a      	adds	r2, r3, #2
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80053ea:	e023      	b.n	8005434 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ec:	f7fc f9a0 	bl	8001730 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d803      	bhi.n	8005404 <HAL_SPI_Receive+0x2f4>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d102      	bne.n	800540a <HAL_SPI_Receive+0x2fa>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d114      	bne.n	8005434 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f8f2 	bl	80055f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e0db      	b.n	80055ec <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	f47f af69 	bne.w	8005314 <HAL_SPI_Receive+0x204>
 8005442:	e0c0      	b.n	80055c6 <HAL_SPI_Receive+0x4b6>
 8005444:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d117      	bne.n	800548e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800548c:	e094      	b.n	80055b8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005494:	b29b      	uxth	r3, r3
 8005496:	8bfa      	ldrh	r2, [r7, #30]
 8005498:	429a      	cmp	r2, r3
 800549a:	d946      	bls.n	800552a <HAL_SPI_Receive+0x41a>
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d041      	beq.n	800552a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054b2:	7812      	ldrb	r2, [r2, #0]
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b04      	subs	r3, #4
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005528:	e046      	b.n	80055b8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d81c      	bhi.n	8005570 <HAL_SPI_Receive+0x460>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d017      	beq.n	8005570 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800556e:	e023      	b.n	80055b8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005570:	f7fc f8de 	bl	8001730 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d803      	bhi.n	8005588 <HAL_SPI_Receive+0x478>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d102      	bne.n	800558e <HAL_SPI_Receive+0x47e>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d114      	bne.n	80055b8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f830 	bl	80055f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800559a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e019      	b.n	80055ec <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f47f af41 	bne.w	8005448 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f814 	bl	80055f4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
  }
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0208 	orr.w	r2, r2, #8
 8005612:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0210 	orr.w	r2, r2, #16
 8005622:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6919      	ldr	r1, [r3, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b3c      	ldr	r3, [pc, #240]	@ (8005730 <SPI_CloseTransfer+0x13c>)
 8005640:	400b      	ands	r3, r1
 8005642:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005652:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b04      	cmp	r3, #4
 800565e:	d014      	beq.n	800568a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00f      	beq.n	800568a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005670:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0220 	orr.w	r2, r2, #32
 8005688:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b03      	cmp	r3, #3
 8005694:	d014      	beq.n	80056c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00f      	beq.n	80056c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056a6:	f043 0204 	orr.w	r2, r3, #4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00f      	beq.n	80056ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00f      	beq.n	8005714 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056fa:	f043 0208 	orr.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005712:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	fffffc90 	.word	0xfffffc90

08005734 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005744:	e010      	b.n	8005768 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005746:	f7fb fff3 	bl	8001730 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d803      	bhi.n	800575e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d102      	bne.n	8005764 <SPI_WaitOnFlagUntilTimeout+0x30>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e00f      	b.n	8005788 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	429a      	cmp	r2, r3
 8005784:	d0df      	beq.n	8005746 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	3301      	adds	r3, #1
 80057a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	3307      	adds	r3, #7
 80057ae:	08db      	lsrs	r3, r3, #3
 80057b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e042      	b.n	800585e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f83b 	bl	8005866 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	@ 0x24
 80057f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fef1 	bl	80065f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f986 	bl	8005b28 <UART_SetConfig>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e01b      	b.n	800585e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005834:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005844:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0201 	orr.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 ff70 	bl	800673c <UART_CheckIdleState>
 800585c:	4603      	mov	r3, r0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b08a      	sub	sp, #40	@ 0x28
 800587e:	af02      	add	r7, sp, #8
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005890:	2b20      	cmp	r3, #32
 8005892:	d17b      	bne.n	800598c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_UART_Transmit+0x26>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e074      	b.n	800598e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2221      	movs	r2, #33	@ 0x21
 80058b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b4:	f7fb ff3c 	bl	8001730 <HAL_GetTick>
 80058b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d2:	d108      	bne.n	80058e6 <HAL_UART_Transmit+0x6c>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e003      	b.n	80058ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058ee:	e030      	b.n	8005952 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2200      	movs	r2, #0
 80058f8:	2180      	movs	r1, #128	@ 0x80
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 ffc8 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e03d      	b.n	800598e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10b      	bne.n	8005930 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005926:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	3302      	adds	r3, #2
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e007      	b.n	8005940 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	781a      	ldrb	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3301      	adds	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1c8      	bne.n	80058f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	2140      	movs	r1, #64	@ 0x40
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 ff91 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e006      	b.n	800598e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b08a      	sub	sp, #40	@ 0x28
 800599a:	af02      	add	r7, sp, #8
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	f040 80b5 	bne.w	8005b1c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_UART_Receive+0x28>
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e0ad      	b.n	8005b1e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2222      	movs	r2, #34	@ 0x22
 80059ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059d8:	f7fb feaa 	bl	8001730 <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	88fa      	ldrh	r2, [r7, #6]
 80059e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f6:	d10e      	bne.n	8005a16 <HAL_UART_Receive+0x80>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_UART_Receive+0x76>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a0a:	e02d      	b.n	8005a68 <HAL_UART_Receive+0xd2>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	22ff      	movs	r2, #255	@ 0xff
 8005a10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a14:	e028      	b.n	8005a68 <HAL_UART_Receive+0xd2>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <HAL_UART_Receive+0xa4>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <HAL_UART_Receive+0x9a>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	22ff      	movs	r2, #255	@ 0xff
 8005a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a2e:	e01b      	b.n	8005a68 <HAL_UART_Receive+0xd2>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	227f      	movs	r2, #127	@ 0x7f
 8005a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a38:	e016      	b.n	8005a68 <HAL_UART_Receive+0xd2>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a42:	d10d      	bne.n	8005a60 <HAL_UART_Receive+0xca>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_UART_Receive+0xc0>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	227f      	movs	r2, #127	@ 0x7f
 8005a50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a54:	e008      	b.n	8005a68 <HAL_UART_Receive+0xd2>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	223f      	movs	r2, #63	@ 0x3f
 8005a5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a5e:	e003      	b.n	8005a68 <HAL_UART_Receive+0xd2>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a6e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a78:	d108      	bne.n	8005a8c <HAL_UART_Receive+0xf6>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e003      	b.n	8005a94 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a94:	e036      	b.n	8005b04 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2120      	movs	r1, #32
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fef5 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e032      	b.n	8005b1e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10c      	bne.n	8005ad8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	8a7b      	ldrh	r3, [r7, #18]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e00c      	b.n	8005af2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	8a7b      	ldrh	r3, [r7, #18]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1c2      	bne.n	8005a96 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e000      	b.n	8005b1e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
  }
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b2c:	b092      	sub	sp, #72	@ 0x48
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4bbe      	ldr	r3, [pc, #760]	@ (8005e50 <UART_SetConfig+0x328>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4ab3      	ldr	r2, [pc, #716]	@ (8005e54 <UART_SetConfig+0x32c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b90:	4313      	orrs	r3, r2
 8005b92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	4baf      	ldr	r3, [pc, #700]	@ (8005e58 <UART_SetConfig+0x330>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	f023 010f 	bic.w	r1, r3, #15
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4aa6      	ldr	r2, [pc, #664]	@ (8005e5c <UART_SetConfig+0x334>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d177      	bne.n	8005cb8 <UART_SetConfig+0x190>
 8005bc8:	4ba5      	ldr	r3, [pc, #660]	@ (8005e60 <UART_SetConfig+0x338>)
 8005bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bd0:	2b28      	cmp	r3, #40	@ 0x28
 8005bd2:	d86d      	bhi.n	8005cb0 <UART_SetConfig+0x188>
 8005bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <UART_SetConfig+0xb4>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c81 	.word	0x08005c81
 8005be0:	08005cb1 	.word	0x08005cb1
 8005be4:	08005cb1 	.word	0x08005cb1
 8005be8:	08005cb1 	.word	0x08005cb1
 8005bec:	08005cb1 	.word	0x08005cb1
 8005bf0:	08005cb1 	.word	0x08005cb1
 8005bf4:	08005cb1 	.word	0x08005cb1
 8005bf8:	08005cb1 	.word	0x08005cb1
 8005bfc:	08005c89 	.word	0x08005c89
 8005c00:	08005cb1 	.word	0x08005cb1
 8005c04:	08005cb1 	.word	0x08005cb1
 8005c08:	08005cb1 	.word	0x08005cb1
 8005c0c:	08005cb1 	.word	0x08005cb1
 8005c10:	08005cb1 	.word	0x08005cb1
 8005c14:	08005cb1 	.word	0x08005cb1
 8005c18:	08005cb1 	.word	0x08005cb1
 8005c1c:	08005c91 	.word	0x08005c91
 8005c20:	08005cb1 	.word	0x08005cb1
 8005c24:	08005cb1 	.word	0x08005cb1
 8005c28:	08005cb1 	.word	0x08005cb1
 8005c2c:	08005cb1 	.word	0x08005cb1
 8005c30:	08005cb1 	.word	0x08005cb1
 8005c34:	08005cb1 	.word	0x08005cb1
 8005c38:	08005cb1 	.word	0x08005cb1
 8005c3c:	08005c99 	.word	0x08005c99
 8005c40:	08005cb1 	.word	0x08005cb1
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005cb1 	.word	0x08005cb1
 8005c50:	08005cb1 	.word	0x08005cb1
 8005c54:	08005cb1 	.word	0x08005cb1
 8005c58:	08005cb1 	.word	0x08005cb1
 8005c5c:	08005ca1 	.word	0x08005ca1
 8005c60:	08005cb1 	.word	0x08005cb1
 8005c64:	08005cb1 	.word	0x08005cb1
 8005c68:	08005cb1 	.word	0x08005cb1
 8005c6c:	08005cb1 	.word	0x08005cb1
 8005c70:	08005cb1 	.word	0x08005cb1
 8005c74:	08005cb1 	.word	0x08005cb1
 8005c78:	08005cb1 	.word	0x08005cb1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e222      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e21e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005c90:	2308      	movs	r3, #8
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e21a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e216      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e212      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ca8:	2340      	movs	r3, #64	@ 0x40
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e20e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e20a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a69      	ldr	r2, [pc, #420]	@ (8005e64 <UART_SetConfig+0x33c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d130      	bne.n	8005d24 <UART_SetConfig+0x1fc>
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <UART_SetConfig+0x338>)
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d826      	bhi.n	8005d1c <UART_SetConfig+0x1f4>
 8005cce:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd4 <UART_SetConfig+0x1ac>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005ced 	.word	0x08005ced
 8005cd8:	08005cf5 	.word	0x08005cf5
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e1ec      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e1e8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e1e4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e1e0      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e1dc      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d14:	2340      	movs	r3, #64	@ 0x40
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e1d8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d1c:	2380      	movs	r3, #128	@ 0x80
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e1d4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a4f      	ldr	r2, [pc, #316]	@ (8005e68 <UART_SetConfig+0x340>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d130      	bne.n	8005d90 <UART_SetConfig+0x268>
 8005d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e60 <UART_SetConfig+0x338>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d826      	bhi.n	8005d88 <UART_SetConfig+0x260>
 8005d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0x218>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d59 	.word	0x08005d59
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d69 	.word	0x08005d69
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e1b6      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e1b2      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e1ae      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e1aa      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e1a6      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d80:	2340      	movs	r3, #64	@ 0x40
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e1a2      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d88:	2380      	movs	r3, #128	@ 0x80
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e19e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a35      	ldr	r2, [pc, #212]	@ (8005e6c <UART_SetConfig+0x344>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d130      	bne.n	8005dfc <UART_SetConfig+0x2d4>
 8005d9a:	4b31      	ldr	r3, [pc, #196]	@ (8005e60 <UART_SetConfig+0x338>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d826      	bhi.n	8005df4 <UART_SetConfig+0x2cc>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x284>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc5 	.word	0x08005dc5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e180      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e17c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e178      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e174      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005de4:	2320      	movs	r3, #32
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e170      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dec:	2340      	movs	r3, #64	@ 0x40
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e16c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e168      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <UART_SetConfig+0x348>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d142      	bne.n	8005e8c <UART_SetConfig+0x364>
 8005e06:	4b16      	ldr	r3, [pc, #88]	@ (8005e60 <UART_SetConfig+0x338>)
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d838      	bhi.n	8005e84 <UART_SetConfig+0x35c>
 8005e12:	a201      	add	r2, pc, #4	@ (adr r2, 8005e18 <UART_SetConfig+0x2f0>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e31 	.word	0x08005e31
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e41 	.word	0x08005e41
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e7d 	.word	0x08005e7d
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e14a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e146      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e142      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e13e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e50:	cfff69f3 	.word	0xcfff69f3
 8005e54:	58000c00 	.word	0x58000c00
 8005e58:	11fff4ff 	.word	0x11fff4ff
 8005e5c:	40011000 	.word	0x40011000
 8005e60:	58024400 	.word	0x58024400
 8005e64:	40004400 	.word	0x40004400
 8005e68:	40004800 	.word	0x40004800
 8005e6c:	40004c00 	.word	0x40004c00
 8005e70:	40005000 	.word	0x40005000
 8005e74:	2320      	movs	r3, #32
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e128      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e7c:	2340      	movs	r3, #64	@ 0x40
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e124      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e120      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4acb      	ldr	r2, [pc, #812]	@ (80061c0 <UART_SetConfig+0x698>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d176      	bne.n	8005f84 <UART_SetConfig+0x45c>
 8005e96:	4bcb      	ldr	r3, [pc, #812]	@ (80061c4 <UART_SetConfig+0x69c>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e9e:	2b28      	cmp	r3, #40	@ 0x28
 8005ea0:	d86c      	bhi.n	8005f7c <UART_SetConfig+0x454>
 8005ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <UART_SetConfig+0x380>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005f4d 	.word	0x08005f4d
 8005eac:	08005f7d 	.word	0x08005f7d
 8005eb0:	08005f7d 	.word	0x08005f7d
 8005eb4:	08005f7d 	.word	0x08005f7d
 8005eb8:	08005f7d 	.word	0x08005f7d
 8005ebc:	08005f7d 	.word	0x08005f7d
 8005ec0:	08005f7d 	.word	0x08005f7d
 8005ec4:	08005f7d 	.word	0x08005f7d
 8005ec8:	08005f55 	.word	0x08005f55
 8005ecc:	08005f7d 	.word	0x08005f7d
 8005ed0:	08005f7d 	.word	0x08005f7d
 8005ed4:	08005f7d 	.word	0x08005f7d
 8005ed8:	08005f7d 	.word	0x08005f7d
 8005edc:	08005f7d 	.word	0x08005f7d
 8005ee0:	08005f7d 	.word	0x08005f7d
 8005ee4:	08005f7d 	.word	0x08005f7d
 8005ee8:	08005f5d 	.word	0x08005f5d
 8005eec:	08005f7d 	.word	0x08005f7d
 8005ef0:	08005f7d 	.word	0x08005f7d
 8005ef4:	08005f7d 	.word	0x08005f7d
 8005ef8:	08005f7d 	.word	0x08005f7d
 8005efc:	08005f7d 	.word	0x08005f7d
 8005f00:	08005f7d 	.word	0x08005f7d
 8005f04:	08005f7d 	.word	0x08005f7d
 8005f08:	08005f65 	.word	0x08005f65
 8005f0c:	08005f7d 	.word	0x08005f7d
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	08005f7d 	.word	0x08005f7d
 8005f18:	08005f7d 	.word	0x08005f7d
 8005f1c:	08005f7d 	.word	0x08005f7d
 8005f20:	08005f7d 	.word	0x08005f7d
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f7d 	.word	0x08005f7d
 8005f30:	08005f7d 	.word	0x08005f7d
 8005f34:	08005f7d 	.word	0x08005f7d
 8005f38:	08005f7d 	.word	0x08005f7d
 8005f3c:	08005f7d 	.word	0x08005f7d
 8005f40:	08005f7d 	.word	0x08005f7d
 8005f44:	08005f7d 	.word	0x08005f7d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e0bc      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e0b8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e0b4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e0b0      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e0ac      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e0a8      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f7c:	2380      	movs	r3, #128	@ 0x80
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e0a4      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a8f      	ldr	r2, [pc, #572]	@ (80061c8 <UART_SetConfig+0x6a0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d130      	bne.n	8005ff0 <UART_SetConfig+0x4c8>
 8005f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80061c4 <UART_SetConfig+0x69c>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d826      	bhi.n	8005fe8 <UART_SetConfig+0x4c0>
 8005f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <UART_SetConfig+0x478>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fb9 	.word	0x08005fb9
 8005fa4:	08005fc1 	.word	0x08005fc1
 8005fa8:	08005fc9 	.word	0x08005fc9
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e086      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e082      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e07e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e07a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e076      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fe0:	2340      	movs	r3, #64	@ 0x40
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e072      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005fe8:	2380      	movs	r3, #128	@ 0x80
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e06e      	b.n	80060ce <UART_SetConfig+0x5a6>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a75      	ldr	r2, [pc, #468]	@ (80061cc <UART_SetConfig+0x6a4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d130      	bne.n	800605c <UART_SetConfig+0x534>
 8005ffa:	4b72      	ldr	r3, [pc, #456]	@ (80061c4 <UART_SetConfig+0x69c>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b05      	cmp	r3, #5
 8006004:	d826      	bhi.n	8006054 <UART_SetConfig+0x52c>
 8006006:	a201      	add	r2, pc, #4	@ (adr r2, 800600c <UART_SetConfig+0x4e4>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006025 	.word	0x08006025
 8006010:	0800602d 	.word	0x0800602d
 8006014:	08006035 	.word	0x08006035
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	2300      	movs	r3, #0
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e050      	b.n	80060ce <UART_SetConfig+0x5a6>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e04c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e048      	b.n	80060ce <UART_SetConfig+0x5a6>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e044      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006044:	2320      	movs	r3, #32
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e040      	b.n	80060ce <UART_SetConfig+0x5a6>
 800604c:	2340      	movs	r3, #64	@ 0x40
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e03c      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e038      	b.n	80060ce <UART_SetConfig+0x5a6>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a5b      	ldr	r2, [pc, #364]	@ (80061d0 <UART_SetConfig+0x6a8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d130      	bne.n	80060c8 <UART_SetConfig+0x5a0>
 8006066:	4b57      	ldr	r3, [pc, #348]	@ (80061c4 <UART_SetConfig+0x69c>)
 8006068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	2b05      	cmp	r3, #5
 8006070:	d826      	bhi.n	80060c0 <UART_SetConfig+0x598>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <UART_SetConfig+0x550>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006091 	.word	0x08006091
 800607c:	08006099 	.word	0x08006099
 8006080:	080060a1 	.word	0x080060a1
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	2302      	movs	r3, #2
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e01a      	b.n	80060ce <UART_SetConfig+0x5a6>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e016      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e012      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e00e      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060b0:	2320      	movs	r3, #32
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e00a      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060b8:	2340      	movs	r3, #64	@ 0x40
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e006      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060c0:	2380      	movs	r3, #128	@ 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e002      	b.n	80060ce <UART_SetConfig+0x5a6>
 80060c8:	2380      	movs	r3, #128	@ 0x80
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a3f      	ldr	r2, [pc, #252]	@ (80061d0 <UART_SetConfig+0x6a8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	f040 80f8 	bne.w	80062ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060de:	2b20      	cmp	r3, #32
 80060e0:	dc46      	bgt.n	8006170 <UART_SetConfig+0x648>
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	f2c0 8082 	blt.w	80061ec <UART_SetConfig+0x6c4>
 80060e8:	3b02      	subs	r3, #2
 80060ea:	2b1e      	cmp	r3, #30
 80060ec:	d87e      	bhi.n	80061ec <UART_SetConfig+0x6c4>
 80060ee:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <UART_SetConfig+0x5cc>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006177 	.word	0x08006177
 80060f8:	080061ed 	.word	0x080061ed
 80060fc:	0800617f 	.word	0x0800617f
 8006100:	080061ed 	.word	0x080061ed
 8006104:	080061ed 	.word	0x080061ed
 8006108:	080061ed 	.word	0x080061ed
 800610c:	0800618f 	.word	0x0800618f
 8006110:	080061ed 	.word	0x080061ed
 8006114:	080061ed 	.word	0x080061ed
 8006118:	080061ed 	.word	0x080061ed
 800611c:	080061ed 	.word	0x080061ed
 8006120:	080061ed 	.word	0x080061ed
 8006124:	080061ed 	.word	0x080061ed
 8006128:	080061ed 	.word	0x080061ed
 800612c:	0800619f 	.word	0x0800619f
 8006130:	080061ed 	.word	0x080061ed
 8006134:	080061ed 	.word	0x080061ed
 8006138:	080061ed 	.word	0x080061ed
 800613c:	080061ed 	.word	0x080061ed
 8006140:	080061ed 	.word	0x080061ed
 8006144:	080061ed 	.word	0x080061ed
 8006148:	080061ed 	.word	0x080061ed
 800614c:	080061ed 	.word	0x080061ed
 8006150:	080061ed 	.word	0x080061ed
 8006154:	080061ed 	.word	0x080061ed
 8006158:	080061ed 	.word	0x080061ed
 800615c:	080061ed 	.word	0x080061ed
 8006160:	080061ed 	.word	0x080061ed
 8006164:	080061ed 	.word	0x080061ed
 8006168:	080061ed 	.word	0x080061ed
 800616c:	080061df 	.word	0x080061df
 8006170:	2b40      	cmp	r3, #64	@ 0x40
 8006172:	d037      	beq.n	80061e4 <UART_SetConfig+0x6bc>
 8006174:	e03a      	b.n	80061ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006176:	f7fe f897 	bl	80042a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800617a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800617c:	e03c      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800617e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe f8a6 	bl	80042d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618c:	e034      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800618e:	f107 0318 	add.w	r3, r7, #24
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe f9f2 	bl	800457c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619c:	e02c      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800619e:	4b09      	ldr	r3, [pc, #36]	@ (80061c4 <UART_SetConfig+0x69c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061aa:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <UART_SetConfig+0x69c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	08db      	lsrs	r3, r3, #3
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	4a07      	ldr	r2, [pc, #28]	@ (80061d4 <UART_SetConfig+0x6ac>)
 80061b6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061bc:	e01c      	b.n	80061f8 <UART_SetConfig+0x6d0>
 80061be:	bf00      	nop
 80061c0:	40011400 	.word	0x40011400
 80061c4:	58024400 	.word	0x58024400
 80061c8:	40007800 	.word	0x40007800
 80061cc:	40007c00 	.word	0x40007c00
 80061d0:	58000c00 	.word	0x58000c00
 80061d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80061d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006450 <UART_SetConfig+0x928>)
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	e00c      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061de:	4b9d      	ldr	r3, [pc, #628]	@ (8006454 <UART_SetConfig+0x92c>)
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e2:	e009      	b.n	80061f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ea:	e005      	b.n	80061f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 81de 	beq.w	80065bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	4a94      	ldr	r2, [pc, #592]	@ (8006458 <UART_SetConfig+0x930>)
 8006206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800620a:	461a      	mov	r2, r3
 800620c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	4413      	add	r3, r2
 800621e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006220:	429a      	cmp	r2, r3
 8006222:	d305      	bcc.n	8006230 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800622a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800622c:	429a      	cmp	r2, r3
 800622e:	d903      	bls.n	8006238 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006236:	e1c1      	b.n	80065bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623a:	2200      	movs	r2, #0
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	60fa      	str	r2, [r7, #12]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	4a84      	ldr	r2, [pc, #528]	@ (8006458 <UART_SetConfig+0x930>)
 8006246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800624a:	b29b      	uxth	r3, r3
 800624c:	2200      	movs	r2, #0
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800625a:	f7fa f845 	bl	80002e8 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	020b      	lsls	r3, r1, #8
 8006270:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006274:	0202      	lsls	r2, r0, #8
 8006276:	6979      	ldr	r1, [r7, #20]
 8006278:	6849      	ldr	r1, [r1, #4]
 800627a:	0849      	lsrs	r1, r1, #1
 800627c:	2000      	movs	r0, #0
 800627e:	460c      	mov	r4, r1
 8006280:	4605      	mov	r5, r0
 8006282:	eb12 0804 	adds.w	r8, r2, r4
 8006286:	eb43 0905 	adc.w	r9, r3, r5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	469a      	mov	sl, r3
 8006292:	4693      	mov	fp, r2
 8006294:	4652      	mov	r2, sl
 8006296:	465b      	mov	r3, fp
 8006298:	4640      	mov	r0, r8
 800629a:	4649      	mov	r1, r9
 800629c:	f7fa f824 	bl	80002e8 <__aeabi_uldivmod>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4613      	mov	r3, r2
 80062a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ae:	d308      	bcc.n	80062c2 <UART_SetConfig+0x79a>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062b6:	d204      	bcs.n	80062c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062be:	60da      	str	r2, [r3, #12]
 80062c0:	e17c      	b.n	80065bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062c8:	e178      	b.n	80065bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062d2:	f040 80c5 	bne.w	8006460 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80062d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062da:	2b20      	cmp	r3, #32
 80062dc:	dc48      	bgt.n	8006370 <UART_SetConfig+0x848>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db7b      	blt.n	80063da <UART_SetConfig+0x8b2>
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d879      	bhi.n	80063da <UART_SetConfig+0x8b2>
 80062e6:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <UART_SetConfig+0x7c4>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006377 	.word	0x08006377
 80062f0:	0800637f 	.word	0x0800637f
 80062f4:	080063db 	.word	0x080063db
 80062f8:	080063db 	.word	0x080063db
 80062fc:	08006387 	.word	0x08006387
 8006300:	080063db 	.word	0x080063db
 8006304:	080063db 	.word	0x080063db
 8006308:	080063db 	.word	0x080063db
 800630c:	08006397 	.word	0x08006397
 8006310:	080063db 	.word	0x080063db
 8006314:	080063db 	.word	0x080063db
 8006318:	080063db 	.word	0x080063db
 800631c:	080063db 	.word	0x080063db
 8006320:	080063db 	.word	0x080063db
 8006324:	080063db 	.word	0x080063db
 8006328:	080063db 	.word	0x080063db
 800632c:	080063a7 	.word	0x080063a7
 8006330:	080063db 	.word	0x080063db
 8006334:	080063db 	.word	0x080063db
 8006338:	080063db 	.word	0x080063db
 800633c:	080063db 	.word	0x080063db
 8006340:	080063db 	.word	0x080063db
 8006344:	080063db 	.word	0x080063db
 8006348:	080063db 	.word	0x080063db
 800634c:	080063db 	.word	0x080063db
 8006350:	080063db 	.word	0x080063db
 8006354:	080063db 	.word	0x080063db
 8006358:	080063db 	.word	0x080063db
 800635c:	080063db 	.word	0x080063db
 8006360:	080063db 	.word	0x080063db
 8006364:	080063db 	.word	0x080063db
 8006368:	080063db 	.word	0x080063db
 800636c:	080063cd 	.word	0x080063cd
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d02e      	beq.n	80063d2 <UART_SetConfig+0x8aa>
 8006374:	e031      	b.n	80063da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006376:	f7fc fd61 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 800637a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800637c:	e033      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637e:	f7fc fd73 	bl	8002e68 <HAL_RCC_GetPCLK2Freq>
 8006382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006384:	e02f      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800638a:	4618      	mov	r0, r3
 800638c:	f7fd ffa2 	bl	80042d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006394:	e027      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006396:	f107 0318 	add.w	r3, r7, #24
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe f8ee 	bl	800457c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a4:	e01f      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063a6:	4b2d      	ldr	r3, [pc, #180]	@ (800645c <UART_SetConfig+0x934>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063b2:	4b2a      	ldr	r3, [pc, #168]	@ (800645c <UART_SetConfig+0x934>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	08db      	lsrs	r3, r3, #3
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	4a24      	ldr	r2, [pc, #144]	@ (8006450 <UART_SetConfig+0x928>)
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063c4:	e00f      	b.n	80063e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063c6:	4b22      	ldr	r3, [pc, #136]	@ (8006450 <UART_SetConfig+0x928>)
 80063c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ca:	e00c      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063cc:	4b21      	ldr	r3, [pc, #132]	@ (8006454 <UART_SetConfig+0x92c>)
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d0:	e009      	b.n	80063e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d8:	e005      	b.n	80063e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80e7 	beq.w	80065bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f2:	4a19      	ldr	r2, [pc, #100]	@ (8006458 <UART_SetConfig+0x930>)
 80063f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f8:	461a      	mov	r2, r3
 80063fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006400:	005a      	lsls	r2, r3, #1
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	441a      	add	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006412:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	2b0f      	cmp	r3, #15
 8006418:	d916      	bls.n	8006448 <UART_SetConfig+0x920>
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006420:	d212      	bcs.n	8006448 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	b29b      	uxth	r3, r3
 8006426:	f023 030f 	bic.w	r3, r3, #15
 800642a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	b29b      	uxth	r3, r3
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	b29a      	uxth	r2, r3
 8006438:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800643a:	4313      	orrs	r3, r2
 800643c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	e0b9      	b.n	80065bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800644e:	e0b5      	b.n	80065bc <UART_SetConfig+0xa94>
 8006450:	03d09000 	.word	0x03d09000
 8006454:	003d0900 	.word	0x003d0900
 8006458:	08006ac4 	.word	0x08006ac4
 800645c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006460:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006464:	2b20      	cmp	r3, #32
 8006466:	dc49      	bgt.n	80064fc <UART_SetConfig+0x9d4>
 8006468:	2b00      	cmp	r3, #0
 800646a:	db7c      	blt.n	8006566 <UART_SetConfig+0xa3e>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d87a      	bhi.n	8006566 <UART_SetConfig+0xa3e>
 8006470:	a201      	add	r2, pc, #4	@ (adr r2, 8006478 <UART_SetConfig+0x950>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	08006503 	.word	0x08006503
 800647c:	0800650b 	.word	0x0800650b
 8006480:	08006567 	.word	0x08006567
 8006484:	08006567 	.word	0x08006567
 8006488:	08006513 	.word	0x08006513
 800648c:	08006567 	.word	0x08006567
 8006490:	08006567 	.word	0x08006567
 8006494:	08006567 	.word	0x08006567
 8006498:	08006523 	.word	0x08006523
 800649c:	08006567 	.word	0x08006567
 80064a0:	08006567 	.word	0x08006567
 80064a4:	08006567 	.word	0x08006567
 80064a8:	08006567 	.word	0x08006567
 80064ac:	08006567 	.word	0x08006567
 80064b0:	08006567 	.word	0x08006567
 80064b4:	08006567 	.word	0x08006567
 80064b8:	08006533 	.word	0x08006533
 80064bc:	08006567 	.word	0x08006567
 80064c0:	08006567 	.word	0x08006567
 80064c4:	08006567 	.word	0x08006567
 80064c8:	08006567 	.word	0x08006567
 80064cc:	08006567 	.word	0x08006567
 80064d0:	08006567 	.word	0x08006567
 80064d4:	08006567 	.word	0x08006567
 80064d8:	08006567 	.word	0x08006567
 80064dc:	08006567 	.word	0x08006567
 80064e0:	08006567 	.word	0x08006567
 80064e4:	08006567 	.word	0x08006567
 80064e8:	08006567 	.word	0x08006567
 80064ec:	08006567 	.word	0x08006567
 80064f0:	08006567 	.word	0x08006567
 80064f4:	08006567 	.word	0x08006567
 80064f8:	08006559 	.word	0x08006559
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	d02e      	beq.n	800655e <UART_SetConfig+0xa36>
 8006500:	e031      	b.n	8006566 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006502:	f7fc fc9b 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8006506:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006508:	e033      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800650a:	f7fc fcad 	bl	8002e68 <HAL_RCC_GetPCLK2Freq>
 800650e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006510:	e02f      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006516:	4618      	mov	r0, r3
 8006518:	f7fd fedc 	bl	80042d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006520:	e027      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006522:	f107 0318 	add.w	r3, r7, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe f828 	bl	800457c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006530:	e01f      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006532:	4b2d      	ldr	r3, [pc, #180]	@ (80065e8 <UART_SetConfig+0xac0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800653e:	4b2a      	ldr	r3, [pc, #168]	@ (80065e8 <UART_SetConfig+0xac0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	08db      	lsrs	r3, r3, #3
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	4a28      	ldr	r2, [pc, #160]	@ (80065ec <UART_SetConfig+0xac4>)
 800654a:	fa22 f303 	lsr.w	r3, r2, r3
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006550:	e00f      	b.n	8006572 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006552:	4b26      	ldr	r3, [pc, #152]	@ (80065ec <UART_SetConfig+0xac4>)
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006556:	e00c      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006558:	4b25      	ldr	r3, [pc, #148]	@ (80065f0 <UART_SetConfig+0xac8>)
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655c:	e009      	b.n	8006572 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006564:	e005      	b.n	8006572 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006570:	bf00      	nop
    }

    if (pclk != 0U)
 8006572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d021      	beq.n	80065bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657c:	4a1d      	ldr	r2, [pc, #116]	@ (80065f4 <UART_SetConfig+0xacc>)
 800657e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006582:	461a      	mov	r2, r3
 8006584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006586:	fbb3 f2f2 	udiv	r2, r3, r2
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	441a      	add	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d909      	bls.n	80065b6 <UART_SetConfig+0xa8e>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a8:	d205      	bcs.n	80065b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60da      	str	r2, [r3, #12]
 80065b4:	e002      	b.n	80065bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2201      	movs	r2, #1
 80065c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2200      	movs	r2, #0
 80065d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3748      	adds	r7, #72	@ 0x48
 80065e0:	46bd      	mov	sp, r7
 80065e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
 80065ec:	03d09000 	.word	0x03d09000
 80065f0:	003d0900 	.word	0x003d0900
 80065f4:	08006ac4 	.word	0x08006ac4

080065f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01a      	beq.n	800670e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066f6:	d10a      	bne.n	800670e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b098      	sub	sp, #96	@ 0x60
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800674c:	f7fa fff0 	bl	8001730 <HAL_GetTick>
 8006750:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d12f      	bne.n	80067c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006760:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006768:	2200      	movs	r2, #0
 800676a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f88e 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d022      	beq.n	80067c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006798:	647b      	str	r3, [r7, #68]	@ 0x44
 800679a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800679e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e6      	bne.n	800677a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e063      	b.n	8006888 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d149      	bne.n	8006862 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d6:	2200      	movs	r2, #0
 80067d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f857 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d03c      	beq.n	8006862 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	623b      	str	r3, [r7, #32]
   return(result);
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006806:	633b      	str	r3, [r7, #48]	@ 0x30
 8006808:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800680c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	60fb      	str	r3, [r7, #12]
   return(result);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800683a:	61fa      	str	r2, [r7, #28]
 800683c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	69b9      	ldr	r1, [r7, #24]
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	617b      	str	r3, [r7, #20]
   return(result);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e012      	b.n	8006888 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3758      	adds	r7, #88	@ 0x58
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a0:	e04f      	b.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a8:	d04b      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068aa:	f7fa ff41 	bl	8001730 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e04e      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d037      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b80      	cmp	r3, #128	@ 0x80
 80068d6:	d034      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b40      	cmp	r3, #64	@ 0x40
 80068dc:	d031      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d110      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2208      	movs	r2, #8
 80068f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f839 	bl	800696c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2208      	movs	r2, #8
 80068fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e029      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691c:	d111      	bne.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f81f 	bl	800696c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e00f      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4013      	ands	r3, r2
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	429a      	cmp	r2, r3
 800695e:	d0a0      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b095      	sub	sp, #84	@ 0x54
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006992:	643b      	str	r3, [r7, #64]	@ 0x40
 8006994:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e6      	bne.n	8006974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a34 <UART_EndRxTransfer+0xc8>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d118      	bne.n	8006a14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f023 0310 	bic.w	r3, r3, #16
 80069f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6979      	ldr	r1, [r7, #20]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e6      	bne.n	80069e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a28:	bf00      	nop
 8006a2a:	3754      	adds	r7, #84	@ 0x54
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	effffffe 	.word	0xeffffffe

08006a38 <memset>:
 8006a38:	4402      	add	r2, r0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d100      	bne.n	8006a42 <memset+0xa>
 8006a40:	4770      	bx	lr
 8006a42:	f803 1b01 	strb.w	r1, [r3], #1
 8006a46:	e7f9      	b.n	8006a3c <memset+0x4>

08006a48 <__libc_init_array>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006a80 <__libc_init_array+0x38>)
 8006a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8006a84 <__libc_init_array+0x3c>)
 8006a4e:	1b64      	subs	r4, r4, r5
 8006a50:	10a4      	asrs	r4, r4, #2
 8006a52:	2600      	movs	r6, #0
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d109      	bne.n	8006a6c <__libc_init_array+0x24>
 8006a58:	4d0b      	ldr	r5, [pc, #44]	@ (8006a88 <__libc_init_array+0x40>)
 8006a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8006a8c <__libc_init_array+0x44>)
 8006a5c:	f000 f818 	bl	8006a90 <_init>
 8006a60:	1b64      	subs	r4, r4, r5
 8006a62:	10a4      	asrs	r4, r4, #2
 8006a64:	2600      	movs	r6, #0
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	d105      	bne.n	8006a76 <__libc_init_array+0x2e>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a70:	4798      	blx	r3
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7ee      	b.n	8006a54 <__libc_init_array+0xc>
 8006a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7a:	4798      	blx	r3
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	e7f2      	b.n	8006a66 <__libc_init_array+0x1e>
 8006a80:	08006ae4 	.word	0x08006ae4
 8006a84:	08006ae4 	.word	0x08006ae4
 8006a88:	08006ae4 	.word	0x08006ae4
 8006a8c:	08006ae8 	.word	0x08006ae8

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
