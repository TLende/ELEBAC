
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006c54  08006c54  00007c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006c94  08006c94  00007c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000840  24000000  08006c98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000097c  24000840  080074d8  00008840  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240011bc  080074d8  000091bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008840  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a58  00000000  00000000  0000886e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002744  00000000  00000000  0001c2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d08  00000000  00000000  0001ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009f7  00000000  00000000  0001f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000377ed  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001264b  00000000  00000000  000578fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e326  00000000  00000000  00069f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c826d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003558  00000000  00000000  001c82b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001cb808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000840 	.word	0x24000840
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006c3c 	.word	0x08006c3c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000844 	.word	0x24000844
 80002d4:	08006c3c 	.word	0x08006c3c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <Read_Register>:

//pointer
uint8_t* Buffer=&write_data[0];


void Read_Register(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <Read_Register+0x50>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f931 	bl	8000874 <Read_Status_Register>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <Read_Register+0x54>)
 8000618:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800061a:	2064      	movs	r0, #100	@ 0x64
 800061c:	f000 fae4 	bl	8000be8 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <Read_Register+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f925 	bl	8000874 <Read_Status_Register>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <Read_Register+0x5c>)
 8000630:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000632:	2064      	movs	r0, #100	@ 0x64
 8000634:	f000 fad8 	bl	8000be8 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <Read_Register+0x60>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f919 	bl	8000874 <Read_Status_Register>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <Read_Register+0x64>)
 8000648:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f000 facc 	bl	8000be8 <delay_ns>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	24000808 	.word	0x24000808
 8000658:	2400085c 	.word	0x2400085c
 800065c:	24000809 	.word	0x24000809
 8000660:	2400085d 	.word	0x2400085d
 8000664:	2400080a 	.word	0x2400080a
 8000668:	2400085e 	.word	0x2400085e

0800066c <Write_Data>:

void Write_Data(uint8_t* data, uint16_t lenght){
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <Write_Data+0x8c>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d106      	bne.n	800068e <Write_Data+0x22>
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <Write_Data+0x90>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <Write_Data+0x22>
		Block_Erase(0);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fa5f 	bl	8000b4c <Block_Erase>
	}
	uint16_t count=0;
 800068e:	2300      	movs	r3, #0
 8000690:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000692:	e027      	b.n	80006e4 <Write_Data+0x78>
		*Buffer=*data;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <Write_Data+0x94>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	701a      	strb	r2, [r3, #0]
		Buffer++;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <Write_Data+0x94>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <Write_Data+0x94>)
 80006a6:	6013      	str	r3, [r2, #0]
		data++;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <Write_Data+0x90>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Write_Data+0x90>)
 80006b8:	801a      	strh	r2, [r3, #0]
		count++;
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	3301      	adds	r3, #1
 80006be:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=50){
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <Write_Data+0x90>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	2b31      	cmp	r3, #49	@ 0x31
 80006c6:	d90d      	bls.n	80006e4 <Write_Data+0x78>
			Write_Data_Buffer(0, &write_data[0], 2048);
 80006c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006cc:	490d      	ldr	r1, [pc, #52]	@ (8000704 <Write_Data+0x98>)
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f960 	bl	8000994 <Write_Data_Buffer>
			Write_to_page();
 80006d4:	f000 f818 	bl	8000708 <Write_to_page>
			Buffer_Index=0;
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <Write_Data+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	801a      	strh	r2, [r3, #0]
			Buffer=&write_data[0];
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <Write_Data+0x94>)
 80006e0:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <Write_Data+0x98>)
 80006e2:	601a      	str	r2, [r3, #0]
	while(count<lenght){
 80006e4:	89fa      	ldrh	r2, [r7, #14]
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3d3      	bcc.n	8000694 <Write_Data+0x28>
		}
	}
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001062 	.word	0x24001062
 80006fc:	24001060 	.word	0x24001060
 8000700:	24000800 	.word	0x24000800
 8000704:	24000000 	.word	0x24000000

08000708 <Write_to_page>:

void Write_to_page(void){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <Write_to_page+0x2c>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4909      	ldr	r1, [pc, #36]	@ (8000738 <Write_to_page+0x30>)
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f93d 	bl	8000994 <Write_Data_Buffer>
	Write_Data_Flash(Page_Index);
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <Write_to_page+0x34>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f976 	bl	8000a10 <Write_Data_Flash>
	Page_Index++;
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <Write_to_page+0x34>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b03      	ldr	r3, [pc, #12]	@ (800073c <Write_to_page+0x34>)
 800072e:	801a      	strh	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24001060 	.word	0x24001060
 8000738:	24000000 	.word	0x24000000
 800073c:	24001062 	.word	0x24001062

08000740 <Read_Data>:

void Read_Data(uint16_t page, uint8_t* data){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	80fb      	strh	r3, [r7, #6]
	Select_Page_Read(page);
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f992 	bl	8000a78 <Select_Page_Read>
	Read_Data_Buffer(data, 2048);
 8000754:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000758:	6838      	ldr	r0, [r7, #0]
 800075a:	f000 f9c1 	bl	8000ae0 <Read_Data_Buffer>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <W25N_WaitForReady>:
uint8_t OP_Program_Ex = 0x10;
uint8_t OP_Page_Data_Read = 0x13;
uint8_t OP_Read_Data = 0x03;
uint8_t OP_Fast_Read = 0x0B;

void W25N_WaitForReady() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 800076c:	2064      	movs	r0, #100	@ 0x64
 800076e:	f000 fa3b 	bl	8000be8 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000772:	e002      	b.n	800077a <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8000774:	2064      	movs	r0, #100	@ 0x64
 8000776:	f000 fa37 	bl	8000be8 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <W25N_WaitForReady+0x2c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f878 	bl	8000874 <Read_Status_Register>
 8000784:	4603      	mov	r3, r0
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f2      	bne.n	8000774 <W25N_WaitForReady+0xc>
    }
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2400080a 	.word	0x2400080a

08000798 <Write_Enable>:

void Write_Enable(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	csLOW();
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <Write_Enable+0x30>)
 80007a2:	f001 fbf9 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 80007a6:	2364      	movs	r3, #100	@ 0x64
 80007a8:	2201      	movs	r2, #1
 80007aa:	4908      	ldr	r1, [pc, #32]	@ (80007cc <Write_Enable+0x34>)
 80007ac:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <Write_Enable+0x38>)
 80007ae:	f004 fb97 	bl	8004ee0 <HAL_SPI_Transmit>
	csHIGH();
 80007b2:	2201      	movs	r2, #1
 80007b4:	2110      	movs	r1, #16
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <Write_Enable+0x30>)
 80007b8:	f001 fbee 	bl	8001f98 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 80007bc:	2064      	movs	r0, #100	@ 0x64
 80007be:	f000 fa13 	bl	8000be8 <delay_ns>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58020000 	.word	0x58020000
 80007cc:	2400080b 	.word	0x2400080b
 80007d0:	24001084 	.word	0x24001084

080007d4 <Flash_Init>:
	HAL_SPI_Transmit(&Flash, &OP_Write_Disable, 1, 100);
	csHIGH();
	delay_ns(DELAY_NS);
}

void Flash_Init(uint8_t BUF){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e2:	f001 f887 	bl	80018f4 <HAL_Delay>
	if(BUF){
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d012      	beq.n	8000812 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <Flash_Init+0x98>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f83f 	bl	8000874 <Read_Status_Register>
 80007f6:	4603      	mov	r3, r0
 80007f8:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <Flash_Init+0x98>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f864 	bl	80008d8 <Write_Status_Register>
 8000810:	e011      	b.n	8000836 <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <Flash_Init+0x98>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f82c 	bl	8000874 <Read_Status_Register>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	f023 0308 	bic.w	r3, r3, #8
 8000826:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <Flash_Init+0x98>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f851 	bl	80008d8 <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <Flash_Init+0x9c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f81a 	bl	8000874 <Read_Status_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000844:	7b7b      	ldrb	r3, [r7, #13]
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000852:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <Flash_Init+0x9c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	7b7a      	ldrb	r2, [r7, #13]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f83b 	bl	80008d8 <Write_Status_Register>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	24000809 	.word	0x24000809
 8000870:	24000808 	.word	0x24000808

08000874 <Read_Status_Register>:

uint8_t Read_Status_Register(uint8_t SR){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <Read_Status_Register+0x50>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <Read_Status_Register+0x54>)
 8000884:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <Read_Status_Register+0x54>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	7053      	strb	r3, [r2, #1]
	csLOW();
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	480e      	ldr	r0, [pc, #56]	@ (80008cc <Read_Status_Register+0x58>)
 8000892:	f001 fb81 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000896:	2364      	movs	r3, #100	@ 0x64
 8000898:	2202      	movs	r2, #2
 800089a:	490b      	ldr	r1, [pc, #44]	@ (80008c8 <Read_Status_Register+0x54>)
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <Read_Status_Register+0x5c>)
 800089e:	f004 fb1f 	bl	8004ee0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 80008a2:	2364      	movs	r3, #100	@ 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	490b      	ldr	r1, [pc, #44]	@ (80008d4 <Read_Status_Register+0x60>)
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <Read_Status_Register+0x5c>)
 80008aa:	f004 fd07 	bl	80052bc <HAL_SPI_Receive>
	csHIGH();
 80008ae:	2201      	movs	r2, #1
 80008b0:	2110      	movs	r1, #16
 80008b2:	4806      	ldr	r0, [pc, #24]	@ (80008cc <Read_Status_Register+0x58>)
 80008b4:	f001 fb70 	bl	8001f98 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <Read_Status_Register+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000806 	.word	0x24000806
 80008c8:	24001064 	.word	0x24001064
 80008cc:	58020000 	.word	0x58020000
 80008d0:	24001084 	.word	0x24001084
 80008d4:	2400106c 	.word	0x2400106c

080008d8 <Write_Status_Register>:

void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	4613      	mov	r3, r2
 80008e6:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <Write_Status_Register+0x4c>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <Write_Status_Register+0x50>)
 80008ee:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <Write_Status_Register+0x50>)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 80008f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000928 <Write_Status_Register+0x50>)
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	7093      	strb	r3, [r2, #2]
	csLOW();
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	480a      	ldr	r0, [pc, #40]	@ (800092c <Write_Status_Register+0x54>)
 8000902:	f001 fb49 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	2203      	movs	r2, #3
 800090a:	4907      	ldr	r1, [pc, #28]	@ (8000928 <Write_Status_Register+0x50>)
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <Write_Status_Register+0x58>)
 800090e:	f004 fae7 	bl	8004ee0 <HAL_SPI_Transmit>
	csHIGH();
 8000912:	2201      	movs	r2, #1
 8000914:	2110      	movs	r1, #16
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <Write_Status_Register+0x54>)
 8000918:	f001 fb3e 	bl	8001f98 <HAL_GPIO_WritePin>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000807 	.word	0x24000807
 8000928:	24001064 	.word	0x24001064
 800092c:	58020000 	.word	0x58020000
 8000930:	24001084 	.word	0x24001084

08000934 <Read_ID>:

uint32_t Read_ID(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2100      	movs	r1, #0
 800093e:	460a      	mov	r2, r1
 8000940:	801a      	strh	r2, [r3, #0]
 8000942:	460a      	mov	r2, r1
 8000944:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000946:	2200      	movs	r2, #0
 8000948:	2110      	movs	r1, #16
 800094a:	480f      	ldr	r0, [pc, #60]	@ (8000988 <Read_ID+0x54>)
 800094c:	f001 fb24 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	2202      	movs	r2, #2
 8000954:	490d      	ldr	r1, [pc, #52]	@ (800098c <Read_ID+0x58>)
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <Read_ID+0x5c>)
 8000958:	f004 fac2 	bl	8004ee0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 800095c:	1d39      	adds	r1, r7, #4
 800095e:	2364      	movs	r3, #100	@ 0x64
 8000960:	2203      	movs	r2, #3
 8000962:	480b      	ldr	r0, [pc, #44]	@ (8000990 <Read_ID+0x5c>)
 8000964:	f004 fcaa 	bl	80052bc <HAL_SPI_Receive>
	csHIGH();
 8000968:	2201      	movs	r2, #1
 800096a:	2110      	movs	r1, #16
 800096c:	4806      	ldr	r0, [pc, #24]	@ (8000988 <Read_ID+0x54>)
 800096e:	f001 fb13 	bl	8001f98 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	041a      	lsls	r2, r3, #16
 8000976:	797b      	ldrb	r3, [r7, #5]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	79b9      	ldrb	r1, [r7, #6]
 800097c:	430b      	orrs	r3, r1
 800097e:	4313      	orrs	r3, r2
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	58020000 	.word	0x58020000
 800098c:	24000804 	.word	0x24000804
 8000990:	24001084 	.word	0x24001084

08000994 <Write_Data_Buffer>:

void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	80fb      	strh	r3, [r7, #6]
 80009a0:	4613      	mov	r3, r2
 80009a2:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 80009a4:	f7ff fef8 	bl	8000798 <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <Write_Data_Buffer+0x6c>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <Write_Data_Buffer+0x70>)
 80009ae:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <Write_Data_Buffer+0x70>)
 80009ba:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <Write_Data_Buffer+0x70>)
 80009c2:	709a      	strb	r2, [r3, #2]
	csLOW();
 80009c4:	2200      	movs	r2, #0
 80009c6:	2110      	movs	r1, #16
 80009c8:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <Write_Data_Buffer+0x74>)
 80009ca:	f001 fae5 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 80009ce:	2364      	movs	r3, #100	@ 0x64
 80009d0:	2203      	movs	r2, #3
 80009d2:	490c      	ldr	r1, [pc, #48]	@ (8000a04 <Write_Data_Buffer+0x70>)
 80009d4:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <Write_Data_Buffer+0x78>)
 80009d6:	f004 fa83 	bl	8004ee0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 80009da:	88ba      	ldrh	r2, [r7, #4]
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	480a      	ldr	r0, [pc, #40]	@ (8000a0c <Write_Data_Buffer+0x78>)
 80009e4:	f004 fa7c 	bl	8004ee0 <HAL_SPI_Transmit>
	csHIGH();
 80009e8:	2201      	movs	r2, #1
 80009ea:	2110      	movs	r1, #16
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <Write_Data_Buffer+0x74>)
 80009ee:	f001 fad3 	bl	8001f98 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 80009f2:	2064      	movs	r0, #100	@ 0x64
 80009f4:	f000 f8f8 	bl	8000be8 <delay_ns>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2400080d 	.word	0x2400080d
 8000a04:	24001064 	.word	0x24001064
 8000a08:	58020000 	.word	0x58020000
 8000a0c:	24001084 	.word	0x24001084

08000a10 <Write_Data_Flash>:

void Write_Data_Flash(uint16_t Page_Addr){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <Write_Data_Flash+0x58>)
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <Write_Data_Flash+0x5c>)
 8000a20:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <Write_Data_Flash+0x5c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	0a1b      	lsrs	r3, r3, #8
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <Write_Data_Flash+0x5c>)
 8000a32:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <Write_Data_Flash+0x5c>)
 8000a3a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2110      	movs	r1, #16
 8000a40:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <Write_Data_Flash+0x60>)
 8000a42:	f001 faa9 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000a46:	2364      	movs	r3, #100	@ 0x64
 8000a48:	2204      	movs	r2, #4
 8000a4a:	4908      	ldr	r1, [pc, #32]	@ (8000a6c <Write_Data_Flash+0x5c>)
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <Write_Data_Flash+0x64>)
 8000a4e:	f004 fa47 	bl	8004ee0 <HAL_SPI_Transmit>
	csHIGH();
 8000a52:	2201      	movs	r2, #1
 8000a54:	2110      	movs	r1, #16
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <Write_Data_Flash+0x60>)
 8000a58:	f001 fa9e 	bl	8001f98 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000a5c:	f7ff fe84 	bl	8000768 <W25N_WaitForReady>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2400080e 	.word	0x2400080e
 8000a6c:	24001064 	.word	0x24001064
 8000a70:	58020000 	.word	0x58020000
 8000a74:	24001084 	.word	0x24001084

08000a78 <Select_Page_Read>:

void Select_Page_Read(uint16_t Page_Addr){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <Select_Page_Read+0x58>)
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <Select_Page_Read+0x5c>)
 8000a88:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <Select_Page_Read+0x5c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <Select_Page_Read+0x5c>)
 8000a9a:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <Select_Page_Read+0x5c>)
 8000aa2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	480b      	ldr	r0, [pc, #44]	@ (8000ad8 <Select_Page_Read+0x60>)
 8000aaa:	f001 fa75 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000aae:	2364      	movs	r3, #100	@ 0x64
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	4908      	ldr	r1, [pc, #32]	@ (8000ad4 <Select_Page_Read+0x5c>)
 8000ab4:	4809      	ldr	r0, [pc, #36]	@ (8000adc <Select_Page_Read+0x64>)
 8000ab6:	f004 fa13 	bl	8004ee0 <HAL_SPI_Transmit>
	csHIGH();
 8000aba:	2201      	movs	r2, #1
 8000abc:	2110      	movs	r1, #16
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <Select_Page_Read+0x60>)
 8000ac0:	f001 fa6a 	bl	8001f98 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000ac4:	f7ff fe50 	bl	8000768 <W25N_WaitForReady>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2400080f 	.word	0x2400080f
 8000ad4:	24001064 	.word	0x24001064
 8000ad8:	58020000 	.word	0x58020000
 8000adc:	24001084 	.word	0x24001084

08000ae0 <Read_Data_Buffer>:

void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
	Tx_Buffer[0]=OP_Read_Data;
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <Read_Data_Buffer+0x5c>)
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <Read_Data_Buffer+0x60>)
 8000af2:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <Read_Data_Buffer+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <Read_Data_Buffer+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <Read_Data_Buffer+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b06:	2200      	movs	r2, #0
 8000b08:	2110      	movs	r1, #16
 8000b0a:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <Read_Data_Buffer+0x64>)
 8000b0c:	f001 fa44 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000b10:	2364      	movs	r3, #100	@ 0x64
 8000b12:	2204      	movs	r2, #4
 8000b14:	490a      	ldr	r1, [pc, #40]	@ (8000b40 <Read_Data_Buffer+0x60>)
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <Read_Data_Buffer+0x68>)
 8000b18:	f004 f9e2 	bl	8004ee0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
 8000b1c:	887a      	ldrh	r2, [r7, #2]
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <Read_Data_Buffer+0x68>)
 8000b26:	f004 fbc9 	bl	80052bc <HAL_SPI_Receive>
	csHIGH();
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <Read_Data_Buffer+0x64>)
 8000b30:	f001 fa32 	bl	8001f98 <HAL_GPIO_WritePin>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000810 	.word	0x24000810
 8000b40:	24001064 	.word	0x24001064
 8000b44:	58020000 	.word	0x58020000
 8000b48:	24001084 	.word	0x24001084

08000b4c <Block_Erase>:

void Block_Erase(uint16_t Page_Addr){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000b56:	f7ff fe1f 	bl	8000798 <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <Block_Erase+0x5c>)
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <Block_Erase+0x60>)
 8000b60:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000b62:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <Block_Erase+0x60>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <Block_Erase+0x60>)
 8000b72:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <Block_Erase+0x60>)
 8000b7a:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <Block_Erase+0x64>)
 8000b82:	f001 fa09 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000b86:	2364      	movs	r3, #100	@ 0x64
 8000b88:	2204      	movs	r2, #4
 8000b8a:	4908      	ldr	r1, [pc, #32]	@ (8000bac <Block_Erase+0x60>)
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <Block_Erase+0x68>)
 8000b8e:	f004 f9a7 	bl	8004ee0 <HAL_SPI_Transmit>
	csHIGH();
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <Block_Erase+0x64>)
 8000b98:	f001 f9fe 	bl	8001f98 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000b9c:	f7ff fde4 	bl	8000768 <W25N_WaitForReady>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400080c 	.word	0x2400080c
 8000bac:	24001064 	.word	0x24001064
 8000bb0:	58020000 	.word	0x58020000
 8000bb4:	24001084 	.word	0x24001084

08000bb8 <DWT_Init>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void DWT_Init(void) {
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <DWT_Init+0x28>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	@ (8000be0 <DWT_Init+0x28>)
 8000bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bc6:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <DWT_Init+0x2c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <DWT_Init+0x2c>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000edf0 	.word	0xe000edf0
 8000be4:	e0001000 	.word	0xe0001000

08000be8 <delay_ns>:

void delay_ns(uint32_t ns) {
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <delay_ns+0x48>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	0a5b      	lsrs	r3, r3, #9
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <delay_ns+0x4c>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	09db      	lsrs	r3, r3, #7
 8000bfe:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <delay_ns+0x50>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	fb02 f303 	mul.w	r3, r2, r3
 8000c0e:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000c10:	bf00      	nop
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <delay_ns+0x50>)
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f8      	bhi.n	8000c12 <delay_ns+0x2a>
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	24000814 	.word	0x24000814
 8000c34:	00044b83 	.word	0x00044b83
 8000c38:	e0001000 	.word	0xe0001000

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c40:	f000 fdc6 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f89a 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c48:	f000 f96a 	bl	8000f20 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c4c:	f000 f912 	bl	8000e74 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 fbcb 	bl	80013ec <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fbc8 	bl	80013ec <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f000 fbc5 	bl	80013ec <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c62:	2101      	movs	r1, #1
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fc61 	bl	800152c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d60 <main+0x124>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c70:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c72:	4b3b      	ldr	r3, [pc, #236]	@ (8000d60 <main+0x124>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c78:	4b39      	ldr	r3, [pc, #228]	@ (8000d60 <main+0x124>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c7e:	4b38      	ldr	r3, [pc, #224]	@ (8000d60 <main+0x124>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c84:	4b36      	ldr	r3, [pc, #216]	@ (8000d60 <main+0x124>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c8a:	4935      	ldr	r1, [pc, #212]	@ (8000d60 <main+0x124>)
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 fcdd 	bl	800164c <BSP_COM_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <main+0x60>
  {
    Error_Handler();
 8000c98:	f000 f9c8 	bl	800102c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DWT_Init();
 8000c9c:	f7ff ff8c 	bl	8000bb8 <DWT_Init>
  Flash_Init(0);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fd97 	bl	80007d4 <Flash_Init>
  ID=Read_ID();
 8000ca6:	f7ff fe45 	bl	8000934 <Read_ID>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a2d      	ldr	r2, [pc, #180]	@ (8000d64 <main+0x128>)
 8000cae:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  Read_Register();
 8000cb0:	f7ff fca8 	bl	8000604 <Read_Register>
	  UART_Status=HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000cb4:	2364      	movs	r3, #100	@ 0x64
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	492b      	ldr	r1, [pc, #172]	@ (8000d68 <main+0x12c>)
 8000cba:	482c      	ldr	r0, [pc, #176]	@ (8000d6c <main+0x130>)
 8000cbc:	f004 ff41 	bl	8005b42 <HAL_UART_Receive>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <main+0x134>)
 8000cc6:	701a      	strb	r2, [r3, #0]
	  if(UART_Status==0){
 8000cc8:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <main+0x134>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d118      	bne.n	8000d02 <main+0xc6>
		  UART_Status=HAL_UART_Receive(&hcom_uart[COM1], &Rx_buffer[0],8, 100);
 8000cd0:	2364      	movs	r3, #100	@ 0x64
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	4927      	ldr	r1, [pc, #156]	@ (8000d74 <main+0x138>)
 8000cd6:	4825      	ldr	r0, [pc, #148]	@ (8000d6c <main+0x130>)
 8000cd8:	f004 ff33 	bl	8005b42 <HAL_UART_Receive>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b23      	ldr	r3, [pc, #140]	@ (8000d70 <main+0x134>)
 8000ce2:	701a      	strb	r2, [r3, #0]
		  while(UART_Status!=0){
 8000ce4:	e009      	b.n	8000cfa <main+0xbe>
			  UART_Status=HAL_UART_Receive(&hcom_uart[COM1], &Rx_buffer[0],8, 100);
 8000ce6:	2364      	movs	r3, #100	@ 0x64
 8000ce8:	2208      	movs	r2, #8
 8000cea:	4922      	ldr	r1, [pc, #136]	@ (8000d74 <main+0x138>)
 8000cec:	481f      	ldr	r0, [pc, #124]	@ (8000d6c <main+0x130>)
 8000cee:	f004 ff28 	bl	8005b42 <HAL_UART_Receive>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <main+0x134>)
 8000cf8:	701a      	strb	r2, [r3, #0]
		  while(UART_Status!=0){
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <main+0x134>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f1      	bne.n	8000ce6 <main+0xaa>
		  }
	  }

	  //Read
	  if(command==0x31){
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <main+0x12c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b31      	cmp	r3, #49	@ 0x31
 8000d08:	d11a      	bne.n	8000d40 <main+0x104>
		  Read_Data(0, &Read_data[0]);
 8000d0a:	491b      	ldr	r1, [pc, #108]	@ (8000d78 <main+0x13c>)
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fd17 	bl	8000740 <Read_Data>
		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d1a:	4917      	ldr	r1, [pc, #92]	@ (8000d78 <main+0x13c>)
 8000d1c:	4813      	ldr	r0, [pc, #76]	@ (8000d6c <main+0x130>)
 8000d1e:	f004 fe82 	bl	8005a26 <HAL_UART_Transmit>
		  Read_Data(1, &Read_data[0]);
 8000d22:	4915      	ldr	r1, [pc, #84]	@ (8000d78 <main+0x13c>)
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fd0b 	bl	8000740 <Read_Data>
		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d32:	4911      	ldr	r1, [pc, #68]	@ (8000d78 <main+0x13c>)
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <main+0x130>)
 8000d36:	f004 fe76 	bl	8005a26 <HAL_UART_Transmit>
		  command = 0;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <main+0x12c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
	  }

	  //Write
	  if(command==0x32){
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <main+0x12c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b32      	cmp	r3, #50	@ 0x32
 8000d46:	d1b3      	bne.n	8000cb0 <main+0x74>
		  Write_Data(&Rx_buffer[0], sizeof(Rx_buffer));
 8000d48:	2108      	movs	r1, #8
 8000d4a:	480a      	ldr	r0, [pc, #40]	@ (8000d74 <main+0x138>)
 8000d4c:	f7ff fc8e 	bl	800066c <Write_Data>
		  BSP_LED_Toggle(LED_RED);
 8000d50:	2002      	movs	r0, #2
 8000d52:	f000 fbc1 	bl	80014d8 <BSP_LED_Toggle>
		  command=0;
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <main+0x12c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 8000d5c:	e7a8      	b.n	8000cb0 <main+0x74>
 8000d5e:	bf00      	nop
 8000d60:	24001074 	.word	0x24001074
 8000d64:	2400110c 	.word	0x2400110c
 8000d68:	24000811 	.word	0x24000811
 8000d6c:	24001124 	.word	0x24001124
 8000d70:	24000812 	.word	0x24000812
 8000d74:	24001110 	.word	0x24001110
 8000d78:	24000860 	.word	0x24000860

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09c      	sub	sp, #112	@ 0x70
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d86:	224c      	movs	r2, #76	@ 0x4c
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f005 ff2a 	bl	8006be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2220      	movs	r2, #32
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f005 ff24 	bl	8006be4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f001 f92f 	bl	8002000 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <SystemClock_Config+0xf0>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a30      	ldr	r2, [pc, #192]	@ (8000e6c <SystemClock_Config+0xf0>)
 8000dac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <SystemClock_Config+0xf0>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <SystemClock_Config+0xf4>)
 8000dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e70 <SystemClock_Config+0xf4>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <SystemClock_Config+0xf4>)
 8000dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd4:	bf00      	nop
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <SystemClock_Config+0xf0>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000de2:	d1f8      	bne.n	8000dd6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dec:	2340      	movs	r3, #64	@ 0x40
 8000dee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000dfc:	233c      	movs	r3, #60	@ 0x3c
 8000dfe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e04:	2305      	movs	r3, #5
 8000e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 f929 	bl	8002074 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e28:	f000 f900 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	233f      	movs	r3, #63	@ 0x3f
 8000e2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2303      	movs	r3, #3
 8000e32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e3c:	2340      	movs	r3, #64	@ 0x40
 8000e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e40:	2340      	movs	r3, #64	@ 0x40
 8000e42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e4a:	2340      	movs	r3, #64	@ 0x40
 8000e4c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2104      	movs	r1, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fd68 	bl	8002928 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000e5e:	f000 f8e5 	bl	800102c <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3770      	adds	r7, #112	@ 0x70
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	58024800 	.word	0x58024800
 8000e70:	58000400 	.word	0x58000400

08000e74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e78:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000e7a:	4a28      	ldr	r2, [pc, #160]	@ (8000f1c <MX_SPI1_Init+0xa8>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000e80:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000e8e:	2207      	movs	r2, #7
 8000e90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ea0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ea4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ea8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000eac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eba:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <MX_SPI1_Init+0xa4>)
 8000f06:	f003 fec7 	bl	8004c98 <HAL_SPI_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f10:	f000 f88c 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24001084 	.word	0x24001084
 8000f1c:	40013000 	.word	0x40013000

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	4a38      	ldr	r2, [pc, #224]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f46:	4b36      	ldr	r3, [pc, #216]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f54:	4b32      	ldr	r3, [pc, #200]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	4a31      	ldr	r2, [pc, #196]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f64:	4b2e      	ldr	r3, [pc, #184]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	4a29      	ldr	r2, [pc, #164]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f82:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	4a22      	ldr	r2, [pc, #136]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2110      	movs	r1, #16
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <MX_GPIO_Init+0x104>)
 8000fd2:	f000 ffe1 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4813      	ldr	r0, [pc, #76]	@ (8001028 <MX_GPIO_Init+0x108>)
 8000fdc:	f000 ffdc 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480b      	ldr	r0, [pc, #44]	@ (8001024 <MX_GPIO_Init+0x104>)
 8000ff8:	f000 fe1e 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_GPIO_Init+0x108>)
 8001014:	f000 fe10 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	@ 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	58024400 	.word	0x58024400
 8001024:	58020000 	.word	0x58020000
 8001028:	58021000 	.word	0x58021000

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_MspInit+0x30>)
 8001040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_MspInit+0x30>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_MspInit+0x30>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	58024400 	.word	0x58024400

0800106c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0bc      	sub	sp, #240	@ 0xf0
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	22c0      	movs	r2, #192	@ 0xc0
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fda9 	bl	8006be4 <memset>
  if(hspi->Instance==SPI1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a38      	ldr	r2, [pc, #224]	@ (8001178 <HAL_SPI_MspInit+0x10c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d168      	bne.n	800116e <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800109c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 ffc5 	bl	8003040 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80010bc:	f7ff ffb6 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c0:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <HAL_SPI_MspInit+0x110>)
 80010c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c6:	4a2d      	ldr	r2, [pc, #180]	@ (800117c <HAL_SPI_MspInit+0x110>)
 80010c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010d0:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_SPI_MspInit+0x110>)
 80010d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b27      	ldr	r3, [pc, #156]	@ (800117c <HAL_SPI_MspInit+0x110>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e4:	4a25      	ldr	r2, [pc, #148]	@ (800117c <HAL_SPI_MspInit+0x110>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ee:	4b23      	ldr	r3, [pc, #140]	@ (800117c <HAL_SPI_MspInit+0x110>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <HAL_SPI_MspInit+0x110>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001102:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <HAL_SPI_MspInit+0x110>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <HAL_SPI_MspInit+0x110>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800111a:	2360      	movs	r3, #96	@ 0x60
 800111c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001132:	2305      	movs	r3, #5
 8001134:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800113c:	4619      	mov	r1, r3
 800113e:	4810      	ldr	r0, [pc, #64]	@ (8001180 <HAL_SPI_MspInit+0x114>)
 8001140:	f000 fd7a 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001144:	2320      	movs	r3, #32
 8001146:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115c:	2305      	movs	r3, #5
 800115e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001166:	4619      	mov	r1, r3
 8001168:	4806      	ldr	r0, [pc, #24]	@ (8001184 <HAL_SPI_MspInit+0x118>)
 800116a:	f000 fd65 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	37f0      	adds	r7, #240	@ 0xf0
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013000 	.word	0x40013000
 800117c:	58024400 	.word	0x58024400
 8001180:	58020000 	.word	0x58020000
 8001184:	58020400 	.word	0x58020400

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <MemManage_Handler+0x4>

080011a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <UsageFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Time++;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <SysTick_Handler+0x30>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <SysTick_Handler+0x30>)
 80011ea:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 fb62 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	if(Time>=1000){
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <SysTick_Handler+0x30>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011f8:	d305      	bcc.n	8001206 <SysTick_Handler+0x2a>
  		Print_SR=1;
 80011fa:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Handler+0x34>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
  		Time=0;
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <SysTick_Handler+0x30>)
 8001202:	2200      	movs	r2, #0
 8001204:	801a      	strh	r2, [r3, #0]
  	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2400111a 	.word	0x2400111a
 8001210:	24001118 	.word	0x24001118

08001214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001218:	2000      	movs	r0, #0
 800121a:	f000 f9f9 	bl	8001610 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001228:	4b43      	ldr	r3, [pc, #268]	@ (8001338 <SystemInit+0x114>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122e:	4a42      	ldr	r2, [pc, #264]	@ (8001338 <SystemInit+0x114>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001238:	4b40      	ldr	r3, [pc, #256]	@ (800133c <SystemInit+0x118>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	2b06      	cmp	r3, #6
 8001242:	d807      	bhi.n	8001254 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001244:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <SystemInit+0x118>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 030f 	bic.w	r3, r3, #15
 800124c:	4a3b      	ldr	r2, [pc, #236]	@ (800133c <SystemInit+0x118>)
 800124e:	f043 0307 	orr.w	r3, r3, #7
 8001252:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001254:	4b3a      	ldr	r3, [pc, #232]	@ (8001340 <SystemInit+0x11c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a39      	ldr	r2, [pc, #228]	@ (8001340 <SystemInit+0x11c>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001260:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <SystemInit+0x11c>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001266:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <SystemInit+0x11c>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4935      	ldr	r1, [pc, #212]	@ (8001340 <SystemInit+0x11c>)
 800126c:	4b35      	ldr	r3, [pc, #212]	@ (8001344 <SystemInit+0x120>)
 800126e:	4013      	ands	r3, r2
 8001270:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001272:	4b32      	ldr	r3, [pc, #200]	@ (800133c <SystemInit+0x118>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800127e:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <SystemInit+0x118>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	4a2d      	ldr	r2, [pc, #180]	@ (800133c <SystemInit+0x118>)
 8001288:	f043 0307 	orr.w	r3, r3, #7
 800128c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <SystemInit+0x11c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001294:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <SystemInit+0x11c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800129a:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <SystemInit+0x11c>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012a0:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <SystemInit+0x11c>)
 80012a2:	4a29      	ldr	r2, [pc, #164]	@ (8001348 <SystemInit+0x124>)
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <SystemInit+0x11c>)
 80012a8:	4a28      	ldr	r2, [pc, #160]	@ (800134c <SystemInit+0x128>)
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012ac:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <SystemInit+0x11c>)
 80012ae:	4a28      	ldr	r2, [pc, #160]	@ (8001350 <SystemInit+0x12c>)
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012b2:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <SystemInit+0x11c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <SystemInit+0x11c>)
 80012ba:	4a25      	ldr	r2, [pc, #148]	@ (8001350 <SystemInit+0x12c>)
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <SystemInit+0x11c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <SystemInit+0x11c>)
 80012c6:	4a22      	ldr	r2, [pc, #136]	@ (8001350 <SystemInit+0x12c>)
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <SystemInit+0x11c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <SystemInit+0x11c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001340 <SystemInit+0x11c>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <SystemInit+0x11c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <SystemInit+0x130>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <SystemInit+0x134>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ee:	d202      	bcs.n	80012f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <SystemInit+0x138>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <SystemInit+0x11c>)
 80012f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d113      	bne.n	800132c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <SystemInit+0x11c>)
 8001306:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800130a:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <SystemInit+0x11c>)
 800130c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001310:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <SystemInit+0x13c>)
 8001316:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800131a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <SystemInit+0x11c>)
 800131e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001322:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <SystemInit+0x11c>)
 8001324:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001328:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	52002000 	.word	0x52002000
 8001340:	58024400 	.word	0x58024400
 8001344:	eaf6ed7f 	.word	0xeaf6ed7f
 8001348:	02020200 	.word	0x02020200
 800134c:	01ff0000 	.word	0x01ff0000
 8001350:	01010280 	.word	0x01010280
 8001354:	5c001000 	.word	0x5c001000
 8001358:	ffff0000 	.word	0xffff0000
 800135c:	51008108 	.word	0x51008108
 8001360:	52004000 	.word	0x52004000

08001364 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <ExitRun0Mode+0x2c>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <ExitRun0Mode+0x2c>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001374:	bf00      	nop
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <ExitRun0Mode+0x2c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f9      	beq.n	8001376 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	58024800 	.word	0x58024800

08001394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80013d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001398:	f7ff ffe4 	bl	8001364 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff ff42 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f005 fc15 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff fc37 	bl	8000c3c <main>
  bx  lr
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d8:	24000840 	.word	0x24000840
  ldr r2, =_sidata
 80013dc:	08006c98 	.word	0x08006c98
  ldr r2, =_sbss
 80013e0:	24000840 	.word	0x24000840
  ldr r4, =_ebss
 80013e4:	240011bc 	.word	0x240011bc

080013e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC3_IRQHandler>
	...

080013ec <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	@ 0x30
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d009      	beq.n	8001414 <BSP_LED_Init+0x28>
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d006      	beq.n	8001414 <BSP_LED_Init+0x28>
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d003      	beq.n	8001414 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800140c:	f06f 0301 	mvn.w	r3, #1
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001412:	e055      	b.n	80014c0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800141a:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <BSP_LED_Init+0xe0>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001420:	4a2a      	ldr	r2, [pc, #168]	@ (80014cc <BSP_LED_Init+0xe0>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <BSP_LED_Init+0xe0>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	e021      	b.n	800147e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10f      	bne.n	8001460 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <BSP_LED_Init+0xe0>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	4a21      	ldr	r2, [pc, #132]	@ (80014cc <BSP_LED_Init+0xe0>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <BSP_LED_Init+0xe0>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	e00e      	b.n	800147e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <BSP_LED_Init+0xe0>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001466:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <BSP_LED_Init+0xe0>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <BSP_LED_Init+0xe0>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4a13      	ldr	r2, [pc, #76]	@ (80014d0 <BSP_LED_Init+0xe4>)
 8001482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001486:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <BSP_LED_Init+0xe8>)
 8001498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149c:	f107 0218 	add.w	r2, r7, #24
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fbc8 	bl	8001c38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <BSP_LED_Init+0xe8>)
 80014ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <BSP_LED_Init+0xe4>)
 80014b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f000 fd6c 	bl	8001f98 <HAL_GPIO_WritePin>
  }

  return ret;
 80014c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3730      	adds	r7, #48	@ 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	58024400 	.word	0x58024400
 80014d0:	08006c64 	.word	0x08006c64
 80014d4:	24000820 	.word	0x24000820

080014d8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <BSP_LED_Toggle+0x28>
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d006      	beq.n	8001500 <BSP_LED_Toggle+0x28>
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d003      	beq.n	8001500 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014f8:	f06f 0301 	mvn.w	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e00b      	b.n	8001518 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	4a08      	ldr	r2, [pc, #32]	@ (8001524 <BSP_LED_Toggle+0x4c>)
 8001504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4907      	ldr	r1, [pc, #28]	@ (8001528 <BSP_LED_Toggle+0x50>)
 800150c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001510:	4619      	mov	r1, r3
 8001512:	4610      	mov	r0, r2
 8001514:	f000 fd59 	bl	8001fca <HAL_GPIO_TogglePin>
  }

  return ret;
 8001518:	68fb      	ldr	r3, [r7, #12]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24000820 	.word	0x24000820
 8001528:	08006c64 	.word	0x08006c64

0800152c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	460a      	mov	r2, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800153c:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <BSP_PB_Init+0xcc>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	4a2d      	ldr	r2, [pc, #180]	@ (80015f8 <BSP_PB_Init+0xcc>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <BSP_PB_Init+0xcc>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800155a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001560:	2302      	movs	r3, #2
 8001562:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <BSP_PB_Init+0xd0>)
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	f107 020c 	add.w	r2, r7, #12
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fb59 	bl	8001c38 <HAL_GPIO_Init>
 8001586:	e031      	b.n	80015ec <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001588:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800158c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4a1a      	ldr	r2, [pc, #104]	@ (80015fc <BSP_PB_Init+0xd0>)
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	f107 020c 	add.w	r2, r7, #12
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fb4b 	bl	8001c38 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <BSP_PB_Init+0xd4>)
 80015a8:	441a      	add	r2, r3
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4915      	ldr	r1, [pc, #84]	@ (8001604 <BSP_PB_Init+0xd8>)
 80015ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f000 fafb 	bl	8001bb0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <BSP_PB_Init+0xd4>)
 80015c0:	1898      	adds	r0, r3, r2
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <BSP_PB_Init+0xdc>)
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	461a      	mov	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	f000 fad0 	bl	8001b72 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80015d2:	2028      	movs	r0, #40	@ 0x28
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <BSP_PB_Init+0xe0>)
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	f000 fa93 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80015e4:	2328      	movs	r3, #40	@ 0x28
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 faa9 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58024400 	.word	0x58024400
 80015fc:	2400082c 	.word	0x2400082c
 8001600:	2400111c 	.word	0x2400111c
 8001604:	08006c6c 	.word	0x08006c6c
 8001608:	24000830 	.word	0x24000830
 800160c:	24000834 	.word	0x24000834

08001610 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <BSP_PB_IRQHandler+0x20>)
 8001620:	4413      	add	r3, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fad8 	bl	8001bd8 <HAL_EXTI_IRQHandler>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2400111c 	.word	0x2400111c

08001634 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001662:	f06f 0301 	mvn.w	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e018      	b.n	800169c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2294      	movs	r2, #148	@ 0x94
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <BSP_COM_Init+0x5c>)
 8001674:	4413      	add	r3, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f852 	bl	8001720 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2294      	movs	r2, #148	@ 0x94
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <BSP_COM_Init+0x5c>)
 8001686:	4413      	add	r3, r2
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f80e 	bl	80016ac <MX_USART3_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001696:	f06f 0303 	mvn.w	r3, #3
 800169a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24001124 	.word	0x24001124

080016ac <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <MX_USART3_Init+0x60>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	220c      	movs	r2, #12
 80016ca:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	895b      	ldrh	r3, [r3, #10]
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	891b      	ldrh	r3, [r3, #8]
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	899b      	ldrh	r3, [r3, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016f8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f004 f939 	bl	8005972 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2400081c 	.word	0x2400081c

08001710 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff ff8d 	bl	8001634 <BSP_PB_Callback>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001728:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <COM1_MspInit+0xa8>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	4a26      	ldr	r2, [pc, #152]	@ (80017c8 <COM1_MspInit+0xa8>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001738:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <COM1_MspInit+0xa8>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <COM1_MspInit+0xa8>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	4a1e      	ldr	r2, [pc, #120]	@ (80017c8 <COM1_MspInit+0xa8>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <COM1_MspInit+0xa8>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <COM1_MspInit+0xa8>)
 8001766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800176a:	4a17      	ldr	r2, [pc, #92]	@ (80017c8 <COM1_MspInit+0xa8>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001770:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <COM1_MspInit+0xa8>)
 8001776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001782:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001786:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001790:	2301      	movs	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001794:	2307      	movs	r3, #7
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480b      	ldr	r0, [pc, #44]	@ (80017cc <COM1_MspInit+0xac>)
 80017a0:	f000 fa4a 	bl	8001c38 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80017a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017a8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80017ae:	2307      	movs	r3, #7
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <COM1_MspInit+0xac>)
 80017ba:	f000 fa3d 	bl	8001c38 <HAL_GPIO_Init>
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	@ 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58020c00 	.word	0x58020c00

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d6:	2003      	movs	r0, #3
 80017d8:	f000 f98c 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017dc:	f001 fa5a 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_Init+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	4913      	ldr	r1, [pc, #76]	@ (800183c <HAL_Init+0x6c>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_Init+0x68>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <HAL_Init+0x6c>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_Init+0x70>)
 8001812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001814:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <HAL_Init+0x74>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f814 	bl	8001848 <HAL_InitTick>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e002      	b.n	8001830 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800182a:	f7ff fc05 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58024400 	.word	0x58024400
 800183c:	08006c54 	.word	0x08006c54
 8001840:	24000818 	.word	0x24000818
 8001844:	24000814 	.word	0x24000814

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_InitTick+0x60>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e021      	b.n	80018a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_InitTick+0x64>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_InitTick+0x60>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f971 	bl	8001b5a <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f93b 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_InitTick+0x68>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2400083c 	.word	0x2400083c
 80018ac:	24000814 	.word	0x24000814
 80018b0:	24000838 	.word	0x24000838

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2400083c 	.word	0x2400083c
 80018d8:	240011b8 	.word	0x240011b8

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	240011b8 	.word	0x240011b8

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2400083c 	.word	0x2400083c

0800193c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_GetREVID+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0c1b      	lsrs	r3, r3, #16
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	5c001000 	.word	0x5c001000

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <__NVIC_SetPriorityGrouping+0x40>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	4313      	orrs	r3, r2
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <__NVIC_SetPriorityGrouping+0x40>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00
 8001998:	05fa0000 	.word	0x05fa0000

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	@ (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	@ (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff29 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff40 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff90 	bl	8001a48 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5f 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff33 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa4 	bl	8001ab0 <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001b72:	b480      	push	{r7}
 8001b74:	b087      	sub	sp, #28
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00a      	b.n	8001ba4 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001b8e:	7afb      	ldrb	r3, [r7, #11]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d103      	bne.n	8001b9c <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8001ba0:	bf00      	nop
  }

  return status;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e003      	b.n	8001bcc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001bca:	2300      	movs	r3, #0
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	011a      	lsls	r2, r3, #4
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_EXTI_IRQHandler+0x5c>)
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4798      	blx	r3
    }
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	58000088 	.word	0x58000088

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	@ 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c46:	4b89      	ldr	r3, [pc, #548]	@ (8001e6c <HAL_GPIO_Init+0x234>)
 8001c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c4a:	e194      	b.n	8001f76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8186 	beq.w	8001f70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d005      	beq.n	8001c7c <HAL_GPIO_Init+0x44>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d130      	bne.n	8001cde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 0201 	and.w	r2, r3, #1
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d017      	beq.n	8001d1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d123      	bne.n	8001d6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	69b9      	ldr	r1, [r7, #24]
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80e0 	beq.w	8001f70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <HAL_GPIO_Init+0x238>)
 8001db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001db6:	4a2e      	ldr	r2, [pc, #184]	@ (8001e70 <HAL_GPIO_Init+0x238>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <HAL_GPIO_Init+0x238>)
 8001dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a29      	ldr	r2, [pc, #164]	@ (8001e74 <HAL_GPIO_Init+0x23c>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <HAL_GPIO_Init+0x240>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d052      	beq.n	8001ea0 <HAL_GPIO_Init+0x268>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e7c <HAL_GPIO_Init+0x244>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d031      	beq.n	8001e66 <HAL_GPIO_Init+0x22e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <HAL_GPIO_Init+0x248>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02b      	beq.n	8001e62 <HAL_GPIO_Init+0x22a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e84 <HAL_GPIO_Init+0x24c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d025      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_GPIO_Init+0x250>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01f      	beq.n	8001e5a <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <HAL_GPIO_Init+0x254>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d019      	beq.n	8001e56 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a1a      	ldr	r2, [pc, #104]	@ (8001e90 <HAL_GPIO_Init+0x258>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_GPIO_Init+0x21a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	@ (8001e94 <HAL_GPIO_Init+0x25c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <HAL_GPIO_Init+0x216>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a18      	ldr	r2, [pc, #96]	@ (8001e98 <HAL_GPIO_Init+0x260>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <HAL_GPIO_Init+0x212>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	@ (8001e9c <HAL_GPIO_Init+0x264>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_GPIO_Init+0x20e>
 8001e42:	2309      	movs	r3, #9
 8001e44:	e02d      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e46:	230a      	movs	r3, #10
 8001e48:	e02b      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	e029      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e027      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e025      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e56:	2305      	movs	r3, #5
 8001e58:	e023      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e01f      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e01d      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e01b      	b.n	8001ea2 <HAL_GPIO_Init+0x26a>
 8001e6a:	bf00      	nop
 8001e6c:	58000080 	.word	0x58000080
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58000400 	.word	0x58000400
 8001e78:	58020000 	.word	0x58020000
 8001e7c:	58020400 	.word	0x58020400
 8001e80:	58020800 	.word	0x58020800
 8001e84:	58020c00 	.word	0x58020c00
 8001e88:	58021000 	.word	0x58021000
 8001e8c:	58021400 	.word	0x58021400
 8001e90:	58021800 	.word	0x58021800
 8001e94:	58021c00 	.word	0x58021c00
 8001e98:	58022000 	.word	0x58022000
 8001e9c:	58022400 	.word	0x58022400
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	f002 0203 	and.w	r2, r2, #3
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb2:	4938      	ldr	r1, [pc, #224]	@ (8001f94 <HAL_GPIO_Init+0x35c>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ee6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f ae63 	bne.w	8001c4c <HAL_GPIO_Init+0x14>
  }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	@ 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	58000400 	.word	0x58000400

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	041a      	lsls	r2, r3, #16
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	400b      	ands	r3, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_PWREx_ConfigSupply+0x70>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d00a      	beq.n	800202a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_PWREx_ConfigSupply+0x70>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e01f      	b.n	8002066 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e01d      	b.n	8002066 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_PWREx_ConfigSupply+0x70>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	490f      	ldr	r1, [pc, #60]	@ (8002070 <HAL_PWREx_ConfigSupply+0x70>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4313      	orrs	r3, r2
 8002038:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800203a:	f7ff fc4f 	bl	80018dc <HAL_GetTick>
 800203e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002040:	e009      	b.n	8002056 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002042:	f7ff fc4b 	bl	80018dc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002050:	d901      	bls.n	8002056 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e007      	b.n	8002066 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_PWREx_ConfigSupply+0x70>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002062:	d1ee      	bne.n	8002042 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	58024800 	.word	0x58024800

08002074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	@ 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f000 bc48 	b.w	8002918 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8088 	beq.w	80021a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	4b99      	ldr	r3, [pc, #612]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a0:	4b96      	ldr	r3, [pc, #600]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d007      	beq.n	80020bc <HAL_RCC_OscConfig+0x48>
 80020ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ae:	2b18      	cmp	r3, #24
 80020b0:	d111      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
 80020b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	4b8f      	ldr	r3, [pc, #572]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d06d      	beq.n	80021a4 <HAL_RCC_OscConfig+0x130>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d169      	bne.n	80021a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f000 bc21 	b.w	8002918 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x7a>
 80020e0:	4b86      	ldr	r3, [pc, #536]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a85      	ldr	r2, [pc, #532]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e02e      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x9c>
 80020f6:	4b81      	ldr	r3, [pc, #516]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a80      	ldr	r2, [pc, #512]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b7e      	ldr	r3, [pc, #504]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7d      	ldr	r2, [pc, #500]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0xc0>
 800211a:	4b78      	ldr	r3, [pc, #480]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a77      	ldr	r2, [pc, #476]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b75      	ldr	r3, [pc, #468]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a74      	ldr	r2, [pc, #464]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002134:	4b71      	ldr	r3, [pc, #452]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a70      	ldr	r2, [pc, #448]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b6e      	ldr	r3, [pc, #440]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff fbc2 	bl	80018dc <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fbbe 	bl	80018dc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	@ 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e3d4      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800216e:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xe8>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff fbae 	bl	80018dc <HAL_GetTick>
 8002180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fbaa 	bl	80018dc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e3c0      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002196:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x110>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80ca 	beq.w	8002348 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b4:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021be:	4b4f      	ldr	r3, [pc, #316]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_RCC_OscConfig+0x166>
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	2b18      	cmp	r3, #24
 80021ce:	d156      	bne.n	800227e <HAL_RCC_OscConfig+0x20a>
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d151      	bne.n	800227e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021da:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x17e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e392      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021f2:	4b42      	ldr	r3, [pc, #264]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0219 	bic.w	r2, r3, #25
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	493f      	ldr	r1, [pc, #252]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff fb6a 	bl	80018dc <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff fb66 	bl	80018dc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e37c      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800221e:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	f7ff fb87 	bl	800193c <HAL_GetREVID>
 800222e:	4603      	mov	r3, r0
 8002230:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002234:	4293      	cmp	r3, r2
 8002236:	d817      	bhi.n	8002268 <HAL_RCC_OscConfig+0x1f4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b40      	cmp	r3, #64	@ 0x40
 800223e:	d108      	bne.n	8002252 <HAL_RCC_OscConfig+0x1de>
 8002240:	4b2e      	ldr	r3, [pc, #184]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002248:	4a2c      	ldr	r2, [pc, #176]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 800224a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800224e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002250:	e07a      	b.n	8002348 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	031b      	lsls	r3, r3, #12
 8002260:	4926      	ldr	r1, [pc, #152]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002266:	e06f      	b.n	8002348 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	4921      	ldr	r1, [pc, #132]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227c:	e064      	b.n	8002348 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d047      	beq.n	8002316 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002286:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0219 	bic.w	r2, r3, #25
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	491a      	ldr	r1, [pc, #104]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fb20 	bl	80018dc <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fb1c 	bl	80018dc <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e332      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b2:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	f7ff fb3d 	bl	800193c <HAL_GetREVID>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d819      	bhi.n	8002300 <HAL_RCC_OscConfig+0x28c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b40      	cmp	r3, #64	@ 0x40
 80022d2:	d108      	bne.n	80022e6 <HAL_RCC_OscConfig+0x272>
 80022d4:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80022dc:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80022de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e2:	6053      	str	r3, [r2, #4]
 80022e4:	e030      	b.n	8002348 <HAL_RCC_OscConfig+0x2d4>
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	031b      	lsls	r3, r3, #12
 80022f4:	4901      	ldr	r1, [pc, #4]	@ (80022fc <HAL_RCC_OscConfig+0x288>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
 80022fa:	e025      	b.n	8002348 <HAL_RCC_OscConfig+0x2d4>
 80022fc:	58024400 	.word	0x58024400
 8002300:	4b9a      	ldr	r3, [pc, #616]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	4997      	ldr	r1, [pc, #604]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e018      	b.n	8002348 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b95      	ldr	r3, [pc, #596]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a94      	ldr	r2, [pc, #592]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7ff fadb 	bl	80018dc <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff fad7 	bl	80018dc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e2ed      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800233c:	4b8b      	ldr	r3, [pc, #556]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a9 	beq.w	80024a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b85      	ldr	r3, [pc, #532]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800235e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002360:	4b82      	ldr	r3, [pc, #520]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d007      	beq.n	800237c <HAL_RCC_OscConfig+0x308>
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b18      	cmp	r3, #24
 8002370:	d13a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x374>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d135      	bne.n	80023e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800237c:	4b7b      	ldr	r3, [pc, #492]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_OscConfig+0x320>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b80      	cmp	r3, #128	@ 0x80
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e2c1      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002394:	f7ff fad2 	bl	800193c <HAL_GetREVID>
 8002398:	4603      	mov	r3, r0
 800239a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800239e:	4293      	cmp	r3, r2
 80023a0:	d817      	bhi.n	80023d2 <HAL_RCC_OscConfig+0x35e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d108      	bne.n	80023bc <HAL_RCC_OscConfig+0x348>
 80023aa:	4b70      	ldr	r3, [pc, #448]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80023b2:	4a6e      	ldr	r2, [pc, #440]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80023b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023ba:	e075      	b.n	80024a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023bc:	4b6b      	ldr	r3, [pc, #428]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	069b      	lsls	r3, r3, #26
 80023ca:	4968      	ldr	r1, [pc, #416]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023d0:	e06a      	b.n	80024a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023d2:	4b66      	ldr	r3, [pc, #408]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	4962      	ldr	r1, [pc, #392]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023e6:	e05f      	b.n	80024a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d042      	beq.n	8002476 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023f0:	4b5e      	ldr	r3, [pc, #376]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a5d      	ldr	r2, [pc, #372]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80023f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fa6e 	bl	80018dc <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002404:	f7ff fa6a 	bl	80018dc <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e280      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002416:	4b55      	ldr	r3, [pc, #340]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002422:	f7ff fa8b 	bl	800193c <HAL_GetREVID>
 8002426:	4603      	mov	r3, r0
 8002428:	f241 0203 	movw	r2, #4099	@ 0x1003
 800242c:	4293      	cmp	r3, r2
 800242e:	d817      	bhi.n	8002460 <HAL_RCC_OscConfig+0x3ec>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	2b20      	cmp	r3, #32
 8002436:	d108      	bne.n	800244a <HAL_RCC_OscConfig+0x3d6>
 8002438:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002440:	4a4a      	ldr	r2, [pc, #296]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002442:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002446:	6053      	str	r3, [r2, #4]
 8002448:	e02e      	b.n	80024a8 <HAL_RCC_OscConfig+0x434>
 800244a:	4b48      	ldr	r3, [pc, #288]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	069b      	lsls	r3, r3, #26
 8002458:	4944      	ldr	r1, [pc, #272]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
 800245e:	e023      	b.n	80024a8 <HAL_RCC_OscConfig+0x434>
 8002460:	4b42      	ldr	r3, [pc, #264]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	493f      	ldr	r1, [pc, #252]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002470:	4313      	orrs	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
 8002474:	e018      	b.n	80024a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002476:	4b3d      	ldr	r3, [pc, #244]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3c      	ldr	r2, [pc, #240]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800247c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7ff fa2b 	bl	80018dc <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800248a:	f7ff fa27 	bl	80018dc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e23d      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800249c:	4b33      	ldr	r3, [pc, #204]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d036      	beq.n	8002522 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d019      	beq.n	80024f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024bc:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c0:	4a2a      	ldr	r2, [pc, #168]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7ff fa08 	bl	80018dc <HAL_GetTick>
 80024cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff fa04 	bl	80018dc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e21a      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024e2:	4b22      	ldr	r3, [pc, #136]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x45c>
 80024ee:	e018      	b.n	8002522 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f0:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7ff f9ee 	bl	80018dc <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7ff f9ea 	bl	80018dc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e200      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002516:	4b15      	ldr	r3, [pc, #84]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d039      	beq.n	80025a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d01c      	beq.n	8002570 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002536:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a0c      	ldr	r2, [pc, #48]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800253c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002540:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002542:	f7ff f9cb 	bl	80018dc <HAL_GetTick>
 8002546:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254a:	f7ff f9c7 	bl	80018dc <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e1dd      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <HAL_RCC_OscConfig+0x4f8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x4d6>
 8002568:	e01b      	b.n	80025a2 <HAL_RCC_OscConfig+0x52e>
 800256a:	bf00      	nop
 800256c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002570:	4b9b      	ldr	r3, [pc, #620]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a9a      	ldr	r2, [pc, #616]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800257a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800257c:	f7ff f9ae 	bl	80018dc <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002584:	f7ff f9aa 	bl	80018dc <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1c0      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002596:	4b92      	ldr	r3, [pc, #584]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8081 	beq.w	80026b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025b0:	4b8c      	ldr	r3, [pc, #560]	@ (80027e4 <HAL_RCC_OscConfig+0x770>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a8b      	ldr	r2, [pc, #556]	@ (80027e4 <HAL_RCC_OscConfig+0x770>)
 80025b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025bc:	f7ff f98e 	bl	80018dc <HAL_GetTick>
 80025c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7ff f98a 	bl	80018dc <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1a0      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025d6:	4b83      	ldr	r3, [pc, #524]	@ (80027e4 <HAL_RCC_OscConfig+0x770>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d106      	bne.n	80025f8 <HAL_RCC_OscConfig+0x584>
 80025ea:	4b7d      	ldr	r3, [pc, #500]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	4a7c      	ldr	r2, [pc, #496]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f6:	e02d      	b.n	8002654 <HAL_RCC_OscConfig+0x5e0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10c      	bne.n	800261a <HAL_RCC_OscConfig+0x5a6>
 8002600:	4b77      	ldr	r3, [pc, #476]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	4a76      	ldr	r2, [pc, #472]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	@ 0x70
 800260c:	4b74      	ldr	r3, [pc, #464]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	4a73      	ldr	r2, [pc, #460]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	@ 0x70
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x5e0>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b05      	cmp	r3, #5
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x5c8>
 8002622:	4b6f      	ldr	r3, [pc, #444]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	4a6e      	ldr	r2, [pc, #440]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6713      	str	r3, [r2, #112]	@ 0x70
 800262e:	4b6c      	ldr	r3, [pc, #432]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002632:	4a6b      	ldr	r2, [pc, #428]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	@ 0x70
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0x5e0>
 800263c:	4b68      	ldr	r3, [pc, #416]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002640:	4a67      	ldr	r2, [pc, #412]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	@ 0x70
 8002648:	4b65      	ldr	r3, [pc, #404]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264c:	4a64      	ldr	r2, [pc, #400]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7ff f93e 	bl	80018dc <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7ff f93a 	bl	80018dc <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e14e      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800267a:	4b59      	ldr	r3, [pc, #356]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ee      	beq.n	8002664 <HAL_RCC_OscConfig+0x5f0>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff f928 	bl	80018dc <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7ff f924 	bl	80018dc <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e138      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026a6:	4b4e      	ldr	r3, [pc, #312]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ee      	bne.n	8002690 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 812d 	beq.w	8002916 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026bc:	4b48      	ldr	r3, [pc, #288]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026c4:	2b18      	cmp	r3, #24
 80026c6:	f000 80bd 	beq.w	8002844 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	f040 809e 	bne.w	8002810 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a41      	ldr	r2, [pc, #260]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80026da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7ff f8fc 	bl	80018dc <HAL_GetTick>
 80026e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7ff f8f8 	bl	80018dc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e10e      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026fa:	4b39      	ldr	r3, [pc, #228]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002706:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800270a:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <HAL_RCC_OscConfig+0x774>)
 800270c:	4013      	ands	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002716:	0112      	lsls	r2, r2, #4
 8002718:	430a      	orrs	r2, r1
 800271a:	4931      	ldr	r1, [pc, #196]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	3b01      	subs	r3, #1
 8002726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272e:	3b01      	subs	r3, #1
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	b29b      	uxth	r3, r3
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273a:	3b01      	subs	r3, #1
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002748:	3b01      	subs	r3, #1
 800274a:	061b      	lsls	r3, r3, #24
 800274c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002750:	4923      	ldr	r1, [pc, #140]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002752:	4313      	orrs	r3, r2
 8002754:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	4a21      	ldr	r2, [pc, #132]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002762:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002766:	4b21      	ldr	r3, [pc, #132]	@ (80027ec <HAL_RCC_OscConfig+0x778>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800276e:	00d2      	lsls	r2, r2, #3
 8002770:	491b      	ldr	r1, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002772:	4313      	orrs	r3, r2
 8002774:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002776:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277a:	f023 020c 	bic.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4917      	ldr	r1, [pc, #92]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002784:	4313      	orrs	r3, r2
 8002786:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002788:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	f023 0202 	bic.w	r2, r3, #2
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	4912      	ldr	r1, [pc, #72]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 8002796:	4313      	orrs	r3, r2
 8002798:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	4a07      	ldr	r2, [pc, #28]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ca:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7ff f881 	bl	80018dc <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027dc:	e011      	b.n	8002802 <HAL_RCC_OscConfig+0x78e>
 80027de:	bf00      	nop
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58024800 	.word	0x58024800
 80027e8:	fffffc0c 	.word	0xfffffc0c
 80027ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7ff f874 	bl	80018dc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e08a      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002802:	4b47      	ldr	r3, [pc, #284]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x77c>
 800280e:	e082      	b.n	8002916 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b43      	ldr	r3, [pc, #268]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a42      	ldr	r2, [pc, #264]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 8002816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff f85e 	bl	80018dc <HAL_GetTick>
 8002820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff f85a 	bl	80018dc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e070      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002836:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x7b0>
 8002842:	e068      	b.n	8002916 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800284a:	4b35      	ldr	r3, [pc, #212]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	2b01      	cmp	r3, #1
 8002856:	d031      	beq.n	80028bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d12a      	bne.n	80028bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d122      	bne.n	80028bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d11a      	bne.n	80028bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0a5b      	lsrs	r3, r3, #9
 800288a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002892:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d111      	bne.n	80028bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	0e1b      	lsrs	r3, r3, #24
 80028ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e02b      	b.n	8002918 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 80028c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c4:	08db      	lsrs	r3, r3, #3
 80028c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d01f      	beq.n	8002916 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028d6:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028e2:	f7fe fffb 	bl	80018dc <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028e8:	bf00      	nop
 80028ea:	f7fe fff7 	bl	80018dc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d0f9      	beq.n	80028ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_RCC_OscConfig+0x8b0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002902:	00d2      	lsls	r2, r2, #3
 8002904:	4906      	ldr	r1, [pc, #24]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 8002906:	4313      	orrs	r3, r2
 8002908:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800290a:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <HAL_RCC_OscConfig+0x8ac>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3730      	adds	r7, #48	@ 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58024400 	.word	0x58024400
 8002924:	ffff0007 	.word	0xffff0007

08002928 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e19c      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b87      	ldr	r3, [pc, #540]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	4985      	ldr	r1, [pc, #532]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b83      	ldr	r3, [pc, #524]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e184      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d010      	beq.n	800299a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002984:	429a      	cmp	r2, r3
 8002986:	d908      	bls.n	800299a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002988:	4b78      	ldr	r3, [pc, #480]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	4975      	ldr	r1, [pc, #468]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002996:	4313      	orrs	r3, r2
 8002998:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	4b70      	ldr	r3, [pc, #448]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d908      	bls.n	80029c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	496a      	ldr	r1, [pc, #424]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d010      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	4b64      	ldr	r3, [pc, #400]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d908      	bls.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029e4:	4b61      	ldr	r3, [pc, #388]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	495e      	ldr	r1, [pc, #376]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	4b59      	ldr	r3, [pc, #356]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d908      	bls.n	8002a24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a12:	4b56      	ldr	r3, [pc, #344]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4953      	ldr	r1, [pc, #332]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	4b4d      	ldr	r3, [pc, #308]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d908      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f023 020f 	bic.w	r2, r3, #15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4947      	ldr	r1, [pc, #284]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d055      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a5e:	4b43      	ldr	r3, [pc, #268]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4940      	ldr	r1, [pc, #256]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a78:	4b3c      	ldr	r3, [pc, #240]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d121      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0f6      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a90:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d115      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0ea      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aa8:	4b30      	ldr	r3, [pc, #192]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0de      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0d6      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac8:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f023 0207 	bic.w	r2, r3, #7
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4925      	ldr	r1, [pc, #148]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ada:	f7fe feff 	bl	80018dc <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae2:	f7fe fefb 	bl	80018dc <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0be      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d1eb      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d208      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	490e      	ldr	r1, [pc, #56]	@ (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d214      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	4906      	ldr	r1, [pc, #24]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <HAL_RCC_ClockConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e086      	b.n	8002c76 <HAL_RCC_ClockConfig+0x34e>
 8002b68:	52002000 	.word	0x52002000
 8002b6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	4b3f      	ldr	r3, [pc, #252]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d208      	bcs.n	8002b9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	4939      	ldr	r1, [pc, #228]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d010      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	4b34      	ldr	r3, [pc, #208]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d208      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bba:	4b31      	ldr	r3, [pc, #196]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	492e      	ldr	r1, [pc, #184]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	4b28      	ldr	r3, [pc, #160]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d208      	bcs.n	8002bfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002be8:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	4922      	ldr	r1, [pc, #136]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d208      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4917      	ldr	r1, [pc, #92]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c28:	f000 f834 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	4912      	ldr	r1, [pc, #72]	@ (8002c84 <HAL_RCC_ClockConfig+0x35c>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
 8002c44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <HAL_RCC_ClockConfig+0x358>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <HAL_RCC_ClockConfig+0x35c>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <HAL_RCC_ClockConfig+0x360>)
 8002c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <HAL_RCC_ClockConfig+0x364>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_RCC_ClockConfig+0x368>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fdec 	bl	8001848 <HAL_InitTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	58024400 	.word	0x58024400
 8002c84:	08006c54 	.word	0x08006c54
 8002c88:	24000818 	.word	0x24000818
 8002c8c:	24000814 	.word	0x24000814
 8002c90:	24000838 	.word	0x24000838

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9a:	4bb3      	ldr	r3, [pc, #716]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ca2:	2b18      	cmp	r3, #24
 8002ca4:	f200 8155 	bhi.w	8002f52 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002d15 	.word	0x08002d15
 8002cb4:	08002f53 	.word	0x08002f53
 8002cb8:	08002f53 	.word	0x08002f53
 8002cbc:	08002f53 	.word	0x08002f53
 8002cc0:	08002f53 	.word	0x08002f53
 8002cc4:	08002f53 	.word	0x08002f53
 8002cc8:	08002f53 	.word	0x08002f53
 8002ccc:	08002f53 	.word	0x08002f53
 8002cd0:	08002d3b 	.word	0x08002d3b
 8002cd4:	08002f53 	.word	0x08002f53
 8002cd8:	08002f53 	.word	0x08002f53
 8002cdc:	08002f53 	.word	0x08002f53
 8002ce0:	08002f53 	.word	0x08002f53
 8002ce4:	08002f53 	.word	0x08002f53
 8002ce8:	08002f53 	.word	0x08002f53
 8002cec:	08002f53 	.word	0x08002f53
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002f53 	.word	0x08002f53
 8002cf8:	08002f53 	.word	0x08002f53
 8002cfc:	08002f53 	.word	0x08002f53
 8002d00:	08002f53 	.word	0x08002f53
 8002d04:	08002f53 	.word	0x08002f53
 8002d08:	08002f53 	.word	0x08002f53
 8002d0c:	08002f53 	.word	0x08002f53
 8002d10:	08002d47 	.word	0x08002d47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d14:	4b94      	ldr	r3, [pc, #592]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d20:	4b91      	ldr	r3, [pc, #580]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	08db      	lsrs	r3, r3, #3
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	4a90      	ldr	r2, [pc, #576]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d32:	e111      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d34:	4b8d      	ldr	r3, [pc, #564]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d36:	61bb      	str	r3, [r7, #24]
      break;
 8002d38:	e10e      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d3c:	61bb      	str	r3, [r7, #24]
      break;
 8002d3e:	e10b      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d40:	4b8c      	ldr	r3, [pc, #560]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d42:	61bb      	str	r3, [r7, #24]
      break;
 8002d44:	e108      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d46:	4b88      	ldr	r3, [pc, #544]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d50:	4b85      	ldr	r3, [pc, #532]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d5c:	4b82      	ldr	r3, [pc, #520]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d66:	4b80      	ldr	r3, [pc, #512]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6a:	08db      	lsrs	r3, r3, #3
 8002d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80e1 	beq.w	8002f4c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	f000 8083 	beq.w	8002e98 <HAL_RCC_GetSysClockFreq+0x204>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	f200 80a1 	bhi.w	8002edc <HAL_RCC_GetSysClockFreq+0x248>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x114>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d056      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002da6:	e099      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002da8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d02d      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002db4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dde:	4b62      	ldr	r3, [pc, #392]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002df2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e0e:	e087      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e22:	4b51      	ldr	r3, [pc, #324]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e52:	e065      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e66:	4b40      	ldr	r3, [pc, #256]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e96:	e043      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ebe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eda:	e021      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eee:	4b1e      	ldr	r3, [pc, #120]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f02:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	0a5b      	lsrs	r3, r3, #9
 8002f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f44:	ee17 3a90 	vmov	r3, s15
 8002f48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f4a:	e005      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
      break;
 8002f50:	e002      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f52:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f54:	61bb      	str	r3, [r7, #24]
      break;
 8002f56:	bf00      	nop
  }

  return sysclockfreq;
 8002f58:	69bb      	ldr	r3, [r7, #24]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	@ 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	03d09000 	.word	0x03d09000
 8002f70:	003d0900 	.word	0x003d0900
 8002f74:	007a1200 	.word	0x007a1200
 8002f78:	46000000 	.word	0x46000000
 8002f7c:	4c742400 	.word	0x4c742400
 8002f80:	4a742400 	.word	0x4a742400
 8002f84:	4af42400 	.word	0x4af42400

08002f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f8e:	f7ff fe81 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002f92:	4602      	mov	r2, r0
 8002f94:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	490f      	ldr	r1, [pc, #60]	@ (8002fdc <HAL_RCC_GetHCLKFreq+0x54>)
 8002fa0:	5ccb      	ldrb	r3, [r1, r3]
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fac:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	4a09      	ldr	r2, [pc, #36]	@ (8002fdc <HAL_RCC_GetHCLKFreq+0x54>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a07      	ldr	r2, [pc, #28]	@ (8002fe0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fc6:	4a07      	ldr	r2, [pc, #28]	@ (8002fe4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fcc:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	08006c54 	.word	0x08006c54
 8002fe0:	24000818 	.word	0x24000818
 8002fe4:	24000814 	.word	0x24000814

08002fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fec:	f7ff ffcc 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4904      	ldr	r1, [pc, #16]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	58024400 	.word	0x58024400
 8003010:	08006c54 	.word	0x08006c54

08003014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003018:	f7ff ffb6 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4904      	ldr	r1, [pc, #16]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x28>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	58024400 	.word	0x58024400
 800303c:	08006c54 	.word	0x08006c54

08003040 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003044:	b0ca      	sub	sp, #296	@ 0x128
 8003046:	af00      	add	r7, sp, #0
 8003048:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003064:	2500      	movs	r5, #0
 8003066:	ea54 0305 	orrs.w	r3, r4, r5
 800306a:	d049      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003070:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003072:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003076:	d02f      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003078:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800307c:	d828      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800307e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003082:	d01a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003084:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003088:	d822      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800308e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003092:	d007      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003094:	e01c      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003096:	4bb8      	ldr	r3, [pc, #736]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	4ab7      	ldr	r2, [pc, #732]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030a2:	e01a      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a8:	3308      	adds	r3, #8
 80030aa:	2102      	movs	r1, #2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 fc8f 	bl	80049d0 <RCCEx_PLL2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030b8:	e00f      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030be:	3328      	adds	r3, #40	@ 0x28
 80030c0:	2102      	movs	r1, #2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 fd36 	bl	8004b34 <RCCEx_PLL3_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030d6:	e000      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80030d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030e2:	4ba5      	ldr	r3, [pc, #660]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030f0:	4aa1      	ldr	r2, [pc, #644]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80030f6:	e003      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800310c:	f04f 0900 	mov.w	r9, #0
 8003110:	ea58 0309 	orrs.w	r3, r8, r9
 8003114:	d047      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	2b04      	cmp	r3, #4
 800311e:	d82a      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003120:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800313d 	.word	0x0800313d
 800312c:	0800314b 	.word	0x0800314b
 8003130:	08003161 	.word	0x08003161
 8003134:	0800317f 	.word	0x0800317f
 8003138:	0800317f 	.word	0x0800317f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800313c:	4b8e      	ldr	r3, [pc, #568]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	4a8d      	ldr	r2, [pc, #564]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003148:	e01a      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800314a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314e:	3308      	adds	r3, #8
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fc3c 	bl	80049d0 <RCCEx_PLL2_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800315e:	e00f      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	3328      	adds	r3, #40	@ 0x28
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f001 fce3 	bl	8004b34 <RCCEx_PLL3_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003174:	e004      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317c:	e000      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800317e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003188:	4b7b      	ldr	r3, [pc, #492]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318c:	f023 0107 	bic.w	r1, r3, #7
 8003190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	4a78      	ldr	r2, [pc, #480]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003198:	430b      	orrs	r3, r1
 800319a:	6513      	str	r3, [r2, #80]	@ 0x50
 800319c:	e003      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80031b2:	f04f 0b00 	mov.w	fp, #0
 80031b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80031ba:	d04c      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c6:	d030      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031cc:	d829      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80031d0:	d02d      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80031d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031d4:	d825      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031d6:	2b80      	cmp	r3, #128	@ 0x80
 80031d8:	d018      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031da:	2b80      	cmp	r3, #128	@ 0x80
 80031dc:	d821      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80031e2:	2b40      	cmp	r3, #64	@ 0x40
 80031e4:	d007      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80031e6:	e01c      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e8:	4b63      	ldr	r3, [pc, #396]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	4a62      	ldr	r2, [pc, #392]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031f4:	e01c      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	3308      	adds	r3, #8
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 fbe6 	bl	80049d0 <RCCEx_PLL2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800320a:	e011      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003210:	3328      	adds	r3, #40	@ 0x28
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fc8d 	bl	8004b34 <RCCEx_PLL3_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003220:	e006      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003228:	e002      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800322e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003238:	4b4f      	ldr	r3, [pc, #316]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800323a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	4a4c      	ldr	r2, [pc, #304]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003248:	430b      	orrs	r3, r1
 800324a:	6513      	str	r3, [r2, #80]	@ 0x50
 800324c:	e003      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003262:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800326c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003270:	460b      	mov	r3, r1
 8003272:	4313      	orrs	r3, r2
 8003274:	d053      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800327e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003282:	d035      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003284:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003288:	d82e      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800328a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800328e:	d031      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003290:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003294:	d828      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800329a:	d01a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800329c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a0:	d822      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80032a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032aa:	d007      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80032ac:	e01c      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ae:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	4a31      	ldr	r2, [pc, #196]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ba:	e01c      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c0:	3308      	adds	r3, #8
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fb83 	bl	80049d0 <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032d0:	e011      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d6:	3328      	adds	r3, #40	@ 0x28
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 fc2a 	bl	8004b34 <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032e6:	e006      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800330e:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6593      	str	r3, [r2, #88]	@ 0x58
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800332a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003334:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d056      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800334a:	d038      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800334c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003350:	d831      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003352:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003356:	d034      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800335c:	d82b      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800335e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003362:	d01d      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003368:	d825      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800336e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003374:	e01f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003376:	bf00      	nop
 8003378:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337c:	4ba2      	ldr	r3, [pc, #648]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	4aa1      	ldr	r2, [pc, #644]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003388:	e01c      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338e:	3308      	adds	r3, #8
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f001 fb1c 	bl	80049d0 <RCCEx_PLL2_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800339e:	e011      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a4:	3328      	adds	r3, #40	@ 0x28
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fbc3 	bl	8004b34 <RCCEx_PLL3_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b4:	e006      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033be:	bf00      	nop
 80033c0:	e000      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033dc:	4a8a      	ldr	r2, [pc, #552]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033de:	430b      	orrs	r3, r1
 80033e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e2:	e003      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80033f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003402:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003406:	460b      	mov	r3, r1
 8003408:	4313      	orrs	r3, r2
 800340a:	d03a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	2b30      	cmp	r3, #48	@ 0x30
 8003414:	d01f      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003416:	2b30      	cmp	r3, #48	@ 0x30
 8003418:	d819      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800341a:	2b20      	cmp	r3, #32
 800341c:	d00c      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800341e:	2b20      	cmp	r3, #32
 8003420:	d815      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003426:	2b10      	cmp	r3, #16
 8003428:	d111      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342a:	4b77      	ldr	r3, [pc, #476]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	4a76      	ldr	r2, [pc, #472]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003436:	e011      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	3308      	adds	r3, #8
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f001 fac5 	bl	80049d0 <RCCEx_PLL2_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800344c:	e006      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003454:	e002      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800345a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003464:	4b68      	ldr	r3, [pc, #416]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003468:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	4a65      	ldr	r2, [pc, #404]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003474:	430b      	orrs	r3, r1
 8003476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003478:	e003      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800348e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003498:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800349c:	460b      	mov	r3, r1
 800349e:	4313      	orrs	r3, r2
 80034a0:	d051      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ac:	d035      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80034ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034b2:	d82e      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034b8:	d031      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80034ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034be:	d828      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c4:	d01a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ca:	d822      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80034d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d4:	d007      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80034d6:	e01c      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034e4:	e01c      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ea:	3308      	adds	r3, #8
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 fa6e 	bl	80049d0 <RCCEx_PLL2_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034fa:	e011      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003500:	3328      	adds	r3, #40	@ 0x28
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fb15 	bl	8004b34 <RCCEx_PLL3_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003510:	e006      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003518:	e002      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800351e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003528:	4b37      	ldr	r3, [pc, #220]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800352a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003536:	4a34      	ldr	r2, [pc, #208]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003538:	430b      	orrs	r3, r1
 800353a:	6513      	str	r3, [r2, #80]	@ 0x50
 800353c:	e003      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003552:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800355c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003560:	460b      	mov	r3, r1
 8003562:	4313      	orrs	r3, r2
 8003564:	d056      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003570:	d033      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003572:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003576:	d82c      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800357c:	d02f      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800357e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003582:	d826      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003584:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003588:	d02b      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800358a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800358e:	d820      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003594:	d012      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800359a:	d81a      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d022      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a4:	d115      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	3308      	adds	r3, #8
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 fa0e 	bl	80049d0 <RCCEx_PLL2_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035ba:	e015      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	3328      	adds	r3, #40	@ 0x28
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fab5 	bl	8004b34 <RCCEx_PLL3_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035d0:	e00a      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035d8:	e006      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10d      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035fe:	4a02      	ldr	r2, [pc, #8]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003600:	430b      	orrs	r3, r1
 8003602:	6513      	str	r3, [r2, #80]	@ 0x50
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800362a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800362e:	460b      	mov	r3, r1
 8003630:	4313      	orrs	r3, r2
 8003632:	d055      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800363c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003640:	d033      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003646:	d82c      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800364c:	d02f      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003652:	d826      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003654:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003658:	d02b      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800365a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800365e:	d820      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003664:	d012      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800366a:	d81a      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d022      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003674:	d115      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	3308      	adds	r3, #8
 800367c:	2101      	movs	r1, #1
 800367e:	4618      	mov	r0, r3
 8003680:	f001 f9a6 	bl	80049d0 <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800368a:	e015      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	3328      	adds	r3, #40	@ 0x28
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fa4d 	bl	8004b34 <RCCEx_PLL3_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036a0:	e00a      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036a8:	e006      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036aa:	bf00      	nop
 80036ac:	e004      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036c0:	4ba3      	ldr	r3, [pc, #652]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036d0:	4a9f      	ldr	r2, [pc, #636]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d2:	430b      	orrs	r3, r1
 80036d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d6:	e003      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80036ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80036f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036fa:	460b      	mov	r3, r1
 80036fc:	4313      	orrs	r3, r2
 80036fe:	d037      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800370a:	d00e      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800370c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003710:	d816      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800371a:	d111      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371c:	4b8c      	ldr	r3, [pc, #560]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	4a8b      	ldr	r2, [pc, #556]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003728:	e00f      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	3308      	adds	r3, #8
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f001 f94c 	bl	80049d0 <RCCEx_PLL2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800373e:	e004      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003752:	4b7f      	ldr	r3, [pc, #508]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003756:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003760:	4a7b      	ldr	r2, [pc, #492]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003762:	430b      	orrs	r3, r1
 8003764:	6513      	str	r3, [r2, #80]	@ 0x50
 8003766:	e003      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800377c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003786:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d039      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003796:	2b03      	cmp	r3, #3
 8003798:	d81c      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800379a:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037dd 	.word	0x080037dd
 80037a4:	080037b1 	.word	0x080037b1
 80037a8:	080037bf 	.word	0x080037bf
 80037ac:	080037dd 	.word	0x080037dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b0:	4b67      	ldr	r3, [pc, #412]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	4a66      	ldr	r2, [pc, #408]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037bc:	e00f      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	3308      	adds	r3, #8
 80037c4:	2102      	movs	r1, #2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 f902 	bl	80049d0 <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037d2:	e004      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037da:	e000      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80037dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	f023 0103 	bic.w	r1, r3, #3
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f4:	4a56      	ldr	r2, [pc, #344]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037f6:	430b      	orrs	r3, r1
 80037f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037fa:	e003      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800381a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800381e:	460b      	mov	r3, r1
 8003820:	4313      	orrs	r3, r2
 8003822:	f000 809f 	beq.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003826:	4b4b      	ldr	r3, [pc, #300]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a4a      	ldr	r2, [pc, #296]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003832:	f7fe f853 	bl	80018dc <HAL_GetTick>
 8003836:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800383a:	e00b      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383c:	f7fe f84e 	bl	80018dc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	@ 0x64
 800384a:	d903      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003852:	e005      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003854:	4b3f      	ldr	r3, [pc, #252]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ed      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003864:	2b00      	cmp	r3, #0
 8003866:	d179      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003868:	4b39      	ldr	r3, [pc, #228]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800386a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003874:	4053      	eors	r3, r2
 8003876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387a:	2b00      	cmp	r3, #0
 800387c:	d015      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800387e:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003886:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800388a:	4b31      	ldr	r3, [pc, #196]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a30      	ldr	r2, [pc, #192]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003896:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a2d      	ldr	r2, [pc, #180]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b6:	d118      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe f810 	bl	80018dc <HAL_GetTick>
 80038bc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038c0:	e00d      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe f80b 	bl	80018dc <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80038cc:	1ad2      	subs	r2, r2, r3
 80038ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d903      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80038dc:	e005      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038de:	4b1c      	ldr	r3, [pc, #112]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0eb      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80038ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d129      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003902:	d10e      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003904:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003914:	091a      	lsrs	r2, r3, #4
 8003916:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003918:	4013      	ands	r3, r2
 800391a:	4a0d      	ldr	r2, [pc, #52]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6113      	str	r3, [r2, #16]
 8003920:	e005      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003922:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	4a0a      	ldr	r2, [pc, #40]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003928:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800392c:	6113      	str	r3, [r2, #16]
 800392e:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003930:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393e:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003940:	430b      	orrs	r3, r1
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
 8003944:	e00e      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800394e:	e009      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003950:	58024400 	.word	0x58024400
 8003954:	58024800 	.word	0x58024800
 8003958:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 0301 	and.w	r3, r2, #1
 8003970:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800397a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	f000 8089 	beq.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800398c:	2b28      	cmp	r3, #40	@ 0x28
 800398e:	d86b      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003990:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	08003a71 	.word	0x08003a71
 800399c:	08003a69 	.word	0x08003a69
 80039a0:	08003a69 	.word	0x08003a69
 80039a4:	08003a69 	.word	0x08003a69
 80039a8:	08003a69 	.word	0x08003a69
 80039ac:	08003a69 	.word	0x08003a69
 80039b0:	08003a69 	.word	0x08003a69
 80039b4:	08003a69 	.word	0x08003a69
 80039b8:	08003a3d 	.word	0x08003a3d
 80039bc:	08003a69 	.word	0x08003a69
 80039c0:	08003a69 	.word	0x08003a69
 80039c4:	08003a69 	.word	0x08003a69
 80039c8:	08003a69 	.word	0x08003a69
 80039cc:	08003a69 	.word	0x08003a69
 80039d0:	08003a69 	.word	0x08003a69
 80039d4:	08003a69 	.word	0x08003a69
 80039d8:	08003a53 	.word	0x08003a53
 80039dc:	08003a69 	.word	0x08003a69
 80039e0:	08003a69 	.word	0x08003a69
 80039e4:	08003a69 	.word	0x08003a69
 80039e8:	08003a69 	.word	0x08003a69
 80039ec:	08003a69 	.word	0x08003a69
 80039f0:	08003a69 	.word	0x08003a69
 80039f4:	08003a69 	.word	0x08003a69
 80039f8:	08003a71 	.word	0x08003a71
 80039fc:	08003a69 	.word	0x08003a69
 8003a00:	08003a69 	.word	0x08003a69
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003a69 	.word	0x08003a69
 8003a0c:	08003a69 	.word	0x08003a69
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a69 	.word	0x08003a69
 8003a24:	08003a69 	.word	0x08003a69
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a69 	.word	0x08003a69
 8003a38:	08003a71 	.word	0x08003a71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	3308      	adds	r3, #8
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 ffc3 	bl	80049d0 <RCCEx_PLL2_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a56:	3328      	adds	r3, #40	@ 0x28
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f86a 	bl	8004b34 <RCCEx_PLL3_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a7a:	4bbf      	ldr	r3, [pc, #764]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a88:	4abb      	ldr	r2, [pc, #748]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f002 0302 	and.w	r3, r2, #2
 8003aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003aae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d041      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d824      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003b15 	.word	0x08003b15
 8003acc:	08003ae1 	.word	0x08003ae1
 8003ad0:	08003af7 	.word	0x08003af7
 8003ad4:	08003b15 	.word	0x08003b15
 8003ad8:	08003b15 	.word	0x08003b15
 8003adc:	08003b15 	.word	0x08003b15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 ff71 	bl	80049d0 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003af4:	e00f      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	3328      	adds	r3, #40	@ 0x28
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f818 	bl	8004b34 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b0a:	e004      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b12:	e000      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b1e:	4b96      	ldr	r3, [pc, #600]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	f023 0107 	bic.w	r1, r3, #7
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b2c:	4a92      	ldr	r2, [pc, #584]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b32:	e003      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f002 0304 	and.w	r3, r2, #4
 8003b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	d044      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d825      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b68:	a201      	add	r2, pc, #4	@ (adr r2, 8003b70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003bbd 	.word	0x08003bbd
 8003b74:	08003b89 	.word	0x08003b89
 8003b78:	08003b9f 	.word	0x08003b9f
 8003b7c:	08003bbd 	.word	0x08003bbd
 8003b80:	08003bbd 	.word	0x08003bbd
 8003b84:	08003bbd 	.word	0x08003bbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	2101      	movs	r1, #1
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 ff1d 	bl	80049d0 <RCCEx_PLL2_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b9c:	e00f      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	3328      	adds	r3, #40	@ 0x28
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 ffc4 	bl	8004b34 <RCCEx_PLL3_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bb2:	e004      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bba:	e000      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bca:	f023 0107 	bic.w	r1, r3, #7
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd6:	4a68      	ldr	r2, [pc, #416]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bdc:	e003      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f002 0320 	and.w	r3, r2, #32
 8003bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c00:	460b      	mov	r3, r1
 8003c02:	4313      	orrs	r3, r2
 8003c04:	d055      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c12:	d033      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c18:	d82c      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1e:	d02f      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c24:	d826      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c2a:	d02b      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003c2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c30:	d820      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c36:	d012      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c3c:	d81a      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d022      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c46:	d115      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 febd 	bl	80049d0 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e015      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 ff64 	bl	8004b34 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c72:	e00a      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7a:	e006      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c80:	bf00      	nop
 8003c82:	e002      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c92:	4b39      	ldr	r3, [pc, #228]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca2:	4a35      	ldr	r2, [pc, #212]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003cc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d058      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003cde:	d033      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ce0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ce4:	d82c      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cea:	d02f      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf0:	d826      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cf6:	d02b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003cf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cfc:	d820      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d02:	d012      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d08:	d81a      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d022      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d115      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d18:	3308      	adds	r3, #8
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fe57 	bl	80049d0 <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	3328      	adds	r3, #40	@ 0x28
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fefe 	bl	8004b34 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d46:	e006      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d4c:	bf00      	nop
 8003d4e:	e002      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10e      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d5e:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d6e:	4a02      	ldr	r2, [pc, #8]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4313      	orrs	r3, r2
 8003da2:	d055      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003dac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003db0:	d033      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003db2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003db6:	d82c      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbc:	d02f      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc2:	d826      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003dc8:	d02b      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003dca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003dce:	d820      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd4:	d012      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dda:	d81a      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d022      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de4:	d115      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	3308      	adds	r3, #8
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fdee 	bl	80049d0 <RCCEx_PLL2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dfa:	e015      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	3328      	adds	r3, #40	@ 0x28
 8003e02:	2102      	movs	r1, #2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fe95 	bl	8004b34 <RCCEx_PLL3_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e10:	e00a      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e1a:	bf00      	nop
 8003e1c:	e004      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e1e:	bf00      	nop
 8003e20:	e002      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10b      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e30:	4ba1      	ldr	r3, [pc, #644]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e40:	4a9d      	ldr	r2, [pc, #628]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f002 0308 	and.w	r3, r2, #8
 8003e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d01e      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	3328      	adds	r3, #40	@ 0x28
 8003e84:	2102      	movs	r1, #2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fe54 	bl	8004b34 <RCCEx_PLL3_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e98:	4b87      	ldr	r3, [pc, #540]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea8:	4a83      	ldr	r2, [pc, #524]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f002 0310 	and.w	r3, r2, #16
 8003eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ec4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	d01e      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	3328      	adds	r3, #40	@ 0x28
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fe25 	bl	8004b34 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ef6:	4b70      	ldr	r3, [pc, #448]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f06:	4a6c      	ldr	r2, [pc, #432]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d03e      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f38:	d022      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f3e:	d81b      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f48:	d00b      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003f4a:	e015      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	3308      	adds	r3, #8
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fd3b 	bl	80049d0 <RCCEx_PLL2_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f60:	e00f      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f66:	3328      	adds	r3, #40	@ 0x28
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fde2 	bl	8004b34 <RCCEx_PLL3_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f76:	e004      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f7e:	e000      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f9a:	4a47      	ldr	r2, [pc, #284]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fb8:	2300      	movs	r3, #0
 8003fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	d03b      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd2:	d01f      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003fd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd8:	d818      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fde:	d003      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fe4:	d007      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003fe6:	e011      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4b33      	ldr	r3, [pc, #204]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a32      	ldr	r2, [pc, #200]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ff4:	e00f      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	3328      	adds	r3, #40	@ 0x28
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fd98 	bl	8004b34 <RCCEx_PLL3_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800400a:	e004      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401e:	4b26      	ldr	r3, [pc, #152]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	4a22      	ldr	r2, [pc, #136]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6553      	str	r3, [r2, #84]	@ 0x54
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800403a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800404a:	673b      	str	r3, [r7, #112]	@ 0x70
 800404c:	2300      	movs	r3, #0
 800404e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004050:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d034      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800406a:	e011      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a11      	ldr	r2, [pc, #68]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004078:	e00e      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	3308      	adds	r3, #8
 8004080:	2102      	movs	r1, #2
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fca4 	bl	80049d0 <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800408e:	e003      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10d      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ae:	4a02      	ldr	r2, [pc, #8]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b0:	430b      	orrs	r3, r1
 80040b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80040b6:	bf00      	nop
 80040b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80040d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040d2:	2300      	movs	r3, #0
 80040d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80040da:	460b      	mov	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	d00c      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e4:	3328      	adds	r3, #40	@ 0x28
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fd23 	bl	8004b34 <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004106:	663b      	str	r3, [r7, #96]	@ 0x60
 8004108:	2300      	movs	r3, #0
 800410a:	667b      	str	r3, [r7, #100]	@ 0x64
 800410c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004110:	460b      	mov	r3, r1
 8004112:	4313      	orrs	r3, r2
 8004114:	d038      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004122:	d018      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004128:	d811      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800412a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412e:	d014      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004134:	d80b      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d011      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800413a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413e:	d106      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4bc3      	ldr	r3, [pc, #780]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4ac2      	ldr	r2, [pc, #776]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800414c:	e008      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004154:	e004      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004156:	bf00      	nop
 8004158:	e002      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800415e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004168:	4bb9      	ldr	r3, [pc, #740]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004178:	4ab5      	ldr	r2, [pc, #724]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800417a:	430b      	orrs	r3, r1
 800417c:	6553      	str	r3, [r2, #84]	@ 0x54
 800417e:	e003      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004194:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004196:	2300      	movs	r3, #0
 8004198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800419a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041a4:	4baa      	ldr	r3, [pc, #680]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b2:	4aa7      	ldr	r2, [pc, #668]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80041c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80041c6:	2300      	movs	r3, #0
 80041c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80041ce:	460b      	mov	r3, r1
 80041d0:	4313      	orrs	r3, r2
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041d4:	4b9e      	ldr	r3, [pc, #632]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041e4:	4a9a      	ldr	r2, [pc, #616]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f8:	2300      	movs	r3, #0
 80041fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004206:	4b92      	ldr	r3, [pc, #584]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004214:	4a8e      	ldr	r2, [pc, #568]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004216:	430b      	orrs	r3, r1
 8004218:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004226:	643b      	str	r3, [r7, #64]	@ 0x40
 8004228:	2300      	movs	r3, #0
 800422a:	647b      	str	r3, [r7, #68]	@ 0x44
 800422c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004230:	460b      	mov	r3, r1
 8004232:	4313      	orrs	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004236:	4b86      	ldr	r3, [pc, #536]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	4a85      	ldr	r2, [pc, #532]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800423c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004240:	6113      	str	r3, [r2, #16]
 8004242:	4b83      	ldr	r3, [pc, #524]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004244:	6919      	ldr	r1, [r3, #16]
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800424e:	4a80      	ldr	r2, [pc, #512]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004250:	430b      	orrs	r3, r1
 8004252:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004262:	2300      	movs	r3, #0
 8004264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004266:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004270:	4b77      	ldr	r3, [pc, #476]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004274:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427e:	4a74      	ldr	r2, [pc, #464]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004280:	430b      	orrs	r3, r1
 8004282:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004290:	633b      	str	r3, [r7, #48]	@ 0x30
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
 8004296:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b0:	4a67      	ldr	r2, [pc, #412]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b2:	430b      	orrs	r3, r1
 80042b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	2100      	movs	r1, #0
 80042c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042cc:	460b      	mov	r3, r1
 80042ce:	4313      	orrs	r3, r2
 80042d0:	d011      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	3308      	adds	r3, #8
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fb78 	bl	80049d0 <RCCEx_PLL2_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	2100      	movs	r1, #0
 8004300:	6239      	str	r1, [r7, #32]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
 8004308:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800430c:	460b      	mov	r3, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	d011      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	3308      	adds	r3, #8
 8004318:	2101      	movs	r1, #1
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fb58 	bl	80049d0 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	2100      	movs	r1, #0
 8004340:	61b9      	str	r1, [r7, #24]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d011      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	3308      	adds	r3, #8
 8004358:	2102      	movs	r1, #2
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fb38 	bl	80049d0 <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	2100      	movs	r1, #0
 8004380:	6139      	str	r1, [r7, #16]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800438c:	460b      	mov	r3, r1
 800438e:	4313      	orrs	r3, r2
 8004390:	d011      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	3328      	adds	r3, #40	@ 0x28
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fbca 	bl	8004b34 <RCCEx_PLL3_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	2100      	movs	r1, #0
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d011      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3328      	adds	r3, #40	@ 0x28
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fbaa 	bl	8004b34 <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	2100      	movs	r1, #0
 8004400:	6039      	str	r1, [r7, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	e9d7 1200 	ldrd	r1, r2, [r7]
 800440c:	460b      	mov	r3, r1
 800440e:	4313      	orrs	r3, r2
 8004410:	d011      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	3328      	adds	r3, #40	@ 0x28
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fb8a 	bl	8004b34 <RCCEx_PLL3_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004436:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
}
 8004444:	4618      	mov	r0, r3
 8004446:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800444a:	46bd      	mov	sp, r7
 800444c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004450:	58024400 	.word	0x58024400

08004454 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004458:	f7fe fd96 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4904      	ldr	r1, [pc, #16]	@ (800447c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	58024400 	.word	0x58024400
 800447c:	08006c54 	.word	0x08006c54

08004480 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	@ 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004488:	4ba1      	ldr	r3, [pc, #644]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004492:	4b9f      	ldr	r3, [pc, #636]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	0b1b      	lsrs	r3, r3, #12
 8004498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800449c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800449e:	4b9c      	ldr	r3, [pc, #624]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80044aa:	4b99      	ldr	r3, [pc, #612]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ae:	08db      	lsrs	r3, r3, #3
 80044b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8111 	beq.w	80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f000 8083 	beq.w	80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	f200 80a1 	bhi.w	8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d056      	beq.n	8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044ea:	e099      	b.n	8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ec:	4b88      	ldr	r3, [pc, #544]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02d      	beq.n	8004554 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044f8:	4b85      	ldr	r3, [pc, #532]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	08db      	lsrs	r3, r3, #3
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	4a84      	ldr	r2, [pc, #528]	@ (8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004522:	4b7b      	ldr	r3, [pc, #492]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004532:	ed97 6a03 	vldr	s12, [r7, #12]
 8004536:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800453a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004552:	e087      	b.n	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800471c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004566:	4b6a      	ldr	r3, [pc, #424]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	ed97 6a03 	vldr	s12, [r7, #12]
 800457a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800457e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800458a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004596:	e065      	b.n	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b59      	ldr	r3, [pc, #356]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045da:	e043      	b.n	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b48      	ldr	r3, [pc, #288]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461e:	e021      	b.n	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b37      	ldr	r3, [pc, #220]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004664:	4b2a      	ldr	r3, [pc, #168]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	0a5b      	lsrs	r3, r3, #9
 800466a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800467a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800467e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800468a:	ee17 2a90 	vmov	r2, s15
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004692:	4b1f      	ldr	r3, [pc, #124]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b8:	ee17 2a90 	vmov	r2, s15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80046c0:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	0e1b      	lsrs	r3, r3, #24
 80046c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046da:	edd7 6a07 	vldr	s13, [r7, #28]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 2a90 	vmov	r2, s15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046ee:	e008      	b.n	8004702 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
}
 8004702:	bf00      	nop
 8004704:	3724      	adds	r7, #36	@ 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	03d09000 	.word	0x03d09000
 8004718:	46000000 	.word	0x46000000
 800471c:	4c742400 	.word	0x4c742400
 8004720:	4a742400 	.word	0x4a742400
 8004724:	4af42400 	.word	0x4af42400

08004728 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	@ 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004730:	4ba1      	ldr	r3, [pc, #644]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800473a:	4b9f      	ldr	r3, [pc, #636]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	0d1b      	lsrs	r3, r3, #20
 8004740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004744:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004746:	4b9c      	ldr	r3, [pc, #624]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004752:	4b99      	ldr	r3, [pc, #612]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8111 	beq.w	8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	f000 8083 	beq.w	8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b02      	cmp	r3, #2
 8004782:	f200 80a1 	bhi.w	80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d056      	beq.n	8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004792:	e099      	b.n	80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004794:	4b88      	ldr	r3, [pc, #544]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02d      	beq.n	80047fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047a0:	4b85      	ldr	r3, [pc, #532]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	08db      	lsrs	r3, r3, #3
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	4a84      	ldr	r2, [pc, #528]	@ (80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ca:	4b7b      	ldr	r3, [pc, #492]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047da:	ed97 6a03 	vldr	s12, [r7, #12]
 80047de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047fa:	e087      	b.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b6a      	ldr	r3, [pc, #424]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004822:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800483e:	e065      	b.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b59      	ldr	r3, [pc, #356]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a03 	vldr	s12, [r7, #12]
 8004866:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004882:	e043      	b.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b48      	ldr	r3, [pc, #288]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c6:	e021      	b.n	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800490c:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	0a5b      	lsrs	r3, r3, #9
 8004912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004926:	edd7 6a07 	vldr	s13, [r7, #28]
 800492a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004932:	ee17 2a90 	vmov	r2, s15
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800493a:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004954:	edd7 6a07 	vldr	s13, [r7, #28]
 8004958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004960:	ee17 2a90 	vmov	r2, s15
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004968:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800497e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004982:	edd7 6a07 	vldr	s13, [r7, #28]
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	ee17 2a90 	vmov	r2, s15
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004996:	e008      	b.n	80049aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
}
 80049aa:	bf00      	nop
 80049ac:	3724      	adds	r7, #36	@ 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400
 80049bc:	03d09000 	.word	0x03d09000
 80049c0:	46000000 	.word	0x46000000
 80049c4:	4c742400 	.word	0x4c742400
 80049c8:	4a742400 	.word	0x4a742400
 80049cc:	4af42400 	.word	0x4af42400

080049d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049de:	4b53      	ldr	r3, [pc, #332]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d101      	bne.n	80049ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e099      	b.n	8004b22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049ee:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a4e      	ldr	r2, [pc, #312]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 80049f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fa:	f7fc ff6f 	bl	80018dc <HAL_GetTick>
 80049fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a00:	e008      	b.n	8004a14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a02:	f7fc ff6b 	bl	80018dc <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e086      	b.n	8004b22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a14:	4b45      	ldr	r3, [pc, #276]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a20:	4b42      	ldr	r3, [pc, #264]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	031b      	lsls	r3, r3, #12
 8004a2e:	493f      	ldr	r1, [pc, #252]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a64:	4931      	ldr	r1, [pc, #196]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a6a:	4b30      	ldr	r3, [pc, #192]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	492d      	ldr	r1, [pc, #180]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	f023 0220 	bic.w	r2, r3, #32
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	4928      	ldr	r1, [pc, #160]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a8e:	4b27      	ldr	r3, [pc, #156]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	4a26      	ldr	r2, [pc, #152]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a94:	f023 0310 	bic.w	r3, r3, #16
 8004a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a9a:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a9e:	4b24      	ldr	r3, [pc, #144]	@ (8004b30 <RCCEx_PLL2_Config+0x160>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	69d2      	ldr	r2, [r2, #28]
 8004aa6:	00d2      	lsls	r2, r2, #3
 8004aa8:	4920      	ldr	r1, [pc, #128]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aae:	4b1f      	ldr	r3, [pc, #124]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ab4:	f043 0310 	orr.w	r3, r3, #16
 8004ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	4a19      	ldr	r2, [pc, #100]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004acc:	e00f      	b.n	8004aee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d106      	bne.n	8004ae2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ad4:	4b15      	ldr	r3, [pc, #84]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	4a14      	ldr	r2, [pc, #80]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ade:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ae0:	e005      	b.n	8004aee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ae2:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	4a11      	ldr	r2, [pc, #68]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004aee:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a0e      	ldr	r2, [pc, #56]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004af4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afa:	f7fc feef 	bl	80018dc <HAL_GetTick>
 8004afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b00:	e008      	b.n	8004b14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b02:	f7fc feeb 	bl	80018dc <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e006      	b.n	8004b22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <RCCEx_PLL2_Config+0x15c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	ffff0007 	.word	0xffff0007

08004b34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b42:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d101      	bne.n	8004b52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e099      	b.n	8004c86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b52:	4b4f      	ldr	r3, [pc, #316]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a4e      	ldr	r2, [pc, #312]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fc febd 	bl	80018dc <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b66:	f7fc feb9 	bl	80018dc <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e086      	b.n	8004c86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b78:	4b45      	ldr	r3, [pc, #276]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b84:	4b42      	ldr	r3, [pc, #264]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	051b      	lsls	r3, r3, #20
 8004b92:	493f      	ldr	r1, [pc, #252]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	025b      	lsls	r3, r3, #9
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bc8:	4931      	ldr	r1, [pc, #196]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bce:	4b30      	ldr	r3, [pc, #192]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	492d      	ldr	r1, [pc, #180]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	4928      	ldr	r1, [pc, #160]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bf2:	4b27      	ldr	r3, [pc, #156]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	4a26      	ldr	r2, [pc, #152]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bfe:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c02:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <RCCEx_PLL3_Config+0x160>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	69d2      	ldr	r2, [r2, #28]
 8004c0a:	00d2      	lsls	r2, r2, #3
 8004c0c:	4920      	ldr	r1, [pc, #128]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c12:	4b1f      	ldr	r3, [pc, #124]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c24:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c30:	e00f      	b.n	8004c52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d106      	bne.n	8004c46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c38:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3c:	4a14      	ldr	r2, [pc, #80]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c44:	e005      	b.n	8004c52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c46:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	4a11      	ldr	r2, [pc, #68]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c52:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a0e      	ldr	r2, [pc, #56]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5e:	f7fc fe3d 	bl	80018dc <HAL_GetTick>
 8004c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c64:	e008      	b.n	8004c78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c66:	f7fc fe39 	bl	80018dc <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c78:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <RCCEx_PLL3_Config+0x15c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	58024400 	.word	0x58024400
 8004c94:	ffff0007 	.word	0xffff0007

08004c98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e10f      	b.n	8004eca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a87      	ldr	r2, [pc, #540]	@ (8004ed4 <HAL_SPI_Init+0x23c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <HAL_SPI_Init+0x42>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a86      	ldr	r2, [pc, #536]	@ (8004ed8 <HAL_SPI_Init+0x240>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00a      	beq.n	8004cda <HAL_SPI_Init+0x42>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a84      	ldr	r2, [pc, #528]	@ (8004edc <HAL_SPI_Init+0x244>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d005      	beq.n	8004cda <HAL_SPI_Init+0x42>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b0f      	cmp	r3, #15
 8004cd4:	d901      	bls.n	8004cda <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0f7      	b.n	8004eca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fe2e 	bl	800593c <SPI_GetPacketSize>
 8004ce0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7b      	ldr	r2, [pc, #492]	@ (8004ed4 <HAL_SPI_Init+0x23c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00c      	beq.n	8004d06 <HAL_SPI_Init+0x6e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a79      	ldr	r2, [pc, #484]	@ (8004ed8 <HAL_SPI_Init+0x240>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <HAL_SPI_Init+0x6e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a78      	ldr	r2, [pc, #480]	@ (8004edc <HAL_SPI_Init+0x244>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d002      	beq.n	8004d06 <HAL_SPI_Init+0x6e>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d811      	bhi.n	8004d2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d0a:	4a72      	ldr	r2, [pc, #456]	@ (8004ed4 <HAL_SPI_Init+0x23c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a70      	ldr	r2, [pc, #448]	@ (8004ed8 <HAL_SPI_Init+0x240>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_SPI_Init+0x8c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8004edc <HAL_SPI_Init+0x244>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d104      	bne.n	8004d2e <HAL_SPI_Init+0x96>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d901      	bls.n	8004d2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0cd      	b.n	8004eca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc f992 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004d6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d74:	d119      	bne.n	8004daa <HAL_SPI_Init+0x112>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d7e:	d103      	bne.n	8004d88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10c      	bne.n	8004daa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d98:	d107      	bne.n	8004daa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004da8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00f      	beq.n	8004dd6 <HAL_SPI_Init+0x13e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d90b      	bls.n	8004dd6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e007      	b.n	8004de6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004de4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	431a      	orrs	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df8:	ea42 0103 	orr.w	r1, r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e46:	ea42 0103 	orr.w	r1, r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d113      	bne.n	8004e86 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40013000 	.word	0x40013000
 8004ed8:	40003800 	.word	0x40003800
 8004edc:	40003c00 	.word	0x40003c00

08004ee0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3320      	adds	r3, #32
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ef8:	f7fc fcf0 	bl	80018dc <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d001      	beq.n	8004f0e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e1d1      	b.n	80052b2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_SPI_Transmit+0x3a>
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e1c9      	b.n	80052b2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_SPI_Transmit+0x4c>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e1c2      	b.n	80052b2 <HAL_SPI_Transmit+0x3d2>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2203      	movs	r2, #3
 8004f38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	88fa      	ldrh	r2, [r7, #6]
 8004f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004f84:	d108      	bne.n	8004f98 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e009      	b.n	8004fac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004faa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4b96      	ldr	r3, [pc, #600]	@ (800520c <HAL_SPI_Transmit+0x32c>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	88f9      	ldrh	r1, [r7, #6]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd8:	d107      	bne.n	8004fea <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	d947      	bls.n	8005082 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ff2:	e03f      	b.n	8005074 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d114      	bne.n	800502c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800502a:	e023      	b.n	8005074 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502c:	f7fc fc56 	bl	80018dc <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d803      	bhi.n	8005044 <HAL_SPI_Transmit+0x164>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d102      	bne.n	800504a <HAL_SPI_Transmit+0x16a>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d114      	bne.n	8005074 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fba8 	bl	80057a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005056:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e11e      	b.n	80052b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1b9      	bne.n	8004ff4 <HAL_SPI_Transmit+0x114>
 8005080:	e0f1      	b.n	8005266 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b07      	cmp	r3, #7
 8005088:	f240 80e6 	bls.w	8005258 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800508c:	e05d      	b.n	800514a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d132      	bne.n	8005102 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d918      	bls.n	80050da <HAL_SPI_Transmit+0x1fa>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d014      	beq.n	80050da <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b02      	subs	r3, #2
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80050d8:	e037      	b.n	800514a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005100:	e023      	b.n	800514a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005102:	f7fc fbeb 	bl	80018dc <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d803      	bhi.n	800511a <HAL_SPI_Transmit+0x23a>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d102      	bne.n	8005120 <HAL_SPI_Transmit+0x240>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d114      	bne.n	800514a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fb3d 	bl	80057a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0b3      	b.n	80052b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d19b      	bne.n	800508e <HAL_SPI_Transmit+0x1ae>
 8005156:	e086      	b.n	8005266 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d154      	bne.n	8005210 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d918      	bls.n	80051a4 <HAL_SPI_Transmit+0x2c4>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005176:	2b40      	cmp	r3, #64	@ 0x40
 8005178:	d914      	bls.n	80051a4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b04      	subs	r3, #4
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80051a2:	e059      	b.n	8005258 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d917      	bls.n	80051e0 <HAL_SPI_Transmit+0x300>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c6:	1c9a      	adds	r2, r3, #2
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b02      	subs	r3, #2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80051de:	e03b      	b.n	8005258 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3320      	adds	r3, #32
 80051ea:	7812      	ldrb	r2, [r2, #0]
 80051ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800520a:	e025      	b.n	8005258 <HAL_SPI_Transmit+0x378>
 800520c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005210:	f7fc fb64 	bl	80018dc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d803      	bhi.n	8005228 <HAL_SPI_Transmit+0x348>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d102      	bne.n	800522e <HAL_SPI_Transmit+0x34e>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d114      	bne.n	8005258 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fab6 	bl	80057a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800523a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e02c      	b.n	80052b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f af79 	bne.w	8005158 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2200      	movs	r2, #0
 800526e:	2108      	movs	r1, #8
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fb35 	bl	80058e0 <SPI_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fa87 	bl	80057a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop

080052bc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3301      	adds	r3, #1
 80052d6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3330      	adds	r3, #48	@ 0x30
 80052de:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e0:	f7fc fafc 	bl	80018dc <HAL_GetTick>
 80052e4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d001      	beq.n	80052f6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80052f2:	2302      	movs	r3, #2
 80052f4:	e250      	b.n	8005798 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_Receive+0x46>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e248      	b.n	8005798 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_SPI_Receive+0x58>
 8005310:	2302      	movs	r3, #2
 8005312:	e241      	b.n	8005798 <HAL_SPI_Receive+0x4dc>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2204      	movs	r2, #4
 8005320:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	88fa      	ldrh	r2, [r7, #6]
 8005336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800536c:	d108      	bne.n	8005380 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e009      	b.n	8005394 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005392:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	4b95      	ldr	r3, [pc, #596]	@ (80055f0 <HAL_SPI_Receive+0x334>)
 800539c:	4013      	ands	r3, r2
 800539e:	88f9      	ldrh	r1, [r7, #6]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	430b      	orrs	r3, r1
 80053a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c0:	d107      	bne.n	80053d2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d96c      	bls.n	80054b4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80053da:	e064      	b.n	80054a6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d114      	bne.n	800541c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800541a:	e044      	b.n	80054a6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005422:	b29b      	uxth	r3, r3
 8005424:	8bfa      	ldrh	r2, [r7, #30]
 8005426:	429a      	cmp	r2, r3
 8005428:	d919      	bls.n	800545e <HAL_SPI_Receive+0x1a2>
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d014      	beq.n	800545e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800543c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800543e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800545c:	e023      	b.n	80054a6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545e:	f7fc fa3d 	bl	80018dc <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d803      	bhi.n	8005476 <HAL_SPI_Receive+0x1ba>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d102      	bne.n	800547c <HAL_SPI_Receive+0x1c0>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d114      	bne.n	80054a6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f98f 	bl	80057a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005488:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e178      	b.n	8005798 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d194      	bne.n	80053dc <HAL_SPI_Receive+0x120>
 80054b2:	e15e      	b.n	8005772 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b07      	cmp	r3, #7
 80054ba:	f240 8153 	bls.w	8005764 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80054be:	e08f      	b.n	80055e0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d114      	bne.n	8005500 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	8812      	ldrh	r2, [r2, #0]
 80054de:	b292      	uxth	r2, r2
 80054e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80054fe:	e06f      	b.n	80055e0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005506:	b29b      	uxth	r3, r3
 8005508:	8bfa      	ldrh	r2, [r7, #30]
 800550a:	429a      	cmp	r2, r3
 800550c:	d924      	bls.n	8005558 <HAL_SPI_Receive+0x29c>
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01f      	beq.n	8005558 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	8812      	ldrh	r2, [r2, #0]
 8005520:	b292      	uxth	r2, r2
 8005522:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005528:	1c9a      	adds	r2, r3, #2
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	b292      	uxth	r2, r2
 8005538:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b02      	subs	r3, #2
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005556:	e043      	b.n	80055e0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d119      	bne.n	8005598 <HAL_SPI_Receive+0x2dc>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d014      	beq.n	8005598 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	8812      	ldrh	r2, [r2, #0]
 8005576:	b292      	uxth	r2, r2
 8005578:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005596:	e023      	b.n	80055e0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005598:	f7fc f9a0 	bl	80018dc <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d803      	bhi.n	80055b0 <HAL_SPI_Receive+0x2f4>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Receive+0x2fa>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d114      	bne.n	80055e0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f8f2 	bl	80057a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e0db      	b.n	8005798 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f47f af69 	bne.w	80054c0 <HAL_SPI_Receive+0x204>
 80055ee:	e0c0      	b.n	8005772 <HAL_SPI_Receive+0x4b6>
 80055f0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d117      	bne.n	800563a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005616:	7812      	ldrb	r2, [r2, #0]
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005638:	e094      	b.n	8005764 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005640:	b29b      	uxth	r3, r3
 8005642:	8bfa      	ldrh	r2, [r7, #30]
 8005644:	429a      	cmp	r2, r3
 8005646:	d946      	bls.n	80056d6 <HAL_SPI_Receive+0x41a>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d041      	beq.n	80056d6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b04      	subs	r3, #4
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80056d4:	e046      	b.n	8005764 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d81c      	bhi.n	800571c <HAL_SPI_Receive+0x460>
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d017      	beq.n	800571c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800571a:	e023      	b.n	8005764 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571c:	f7fc f8de 	bl	80018dc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d803      	bhi.n	8005734 <HAL_SPI_Receive+0x478>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d102      	bne.n	800573a <HAL_SPI_Receive+0x47e>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d114      	bne.n	8005764 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f830 	bl	80057a0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005746:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e019      	b.n	8005798 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	f47f af41 	bne.w	80055f4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f814 	bl	80057a0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005796:	2300      	movs	r3, #0
  }
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0208 	orr.w	r2, r2, #8
 80057be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0210 	orr.w	r2, r2, #16
 80057ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6919      	ldr	r1, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b3c      	ldr	r3, [pc, #240]	@ (80058dc <SPI_CloseTransfer+0x13c>)
 80057ec:	400b      	ands	r3, r1
 80057ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80057fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b04      	cmp	r3, #4
 800580a:	d014      	beq.n	8005836 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00f      	beq.n	8005836 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800581c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0220 	orr.w	r2, r2, #32
 8005834:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d014      	beq.n	800586c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00f      	beq.n	800586c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005852:	f043 0204 	orr.w	r2, r3, #4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800586a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587c:	f043 0201 	orr.w	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005894:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058a6:	f043 0208 	orr.w	r2, r3, #8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	fffffc90 	.word	0xfffffc90

080058e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80058f0:	e010      	b.n	8005914 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f2:	f7fb fff3 	bl	80018dc <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d803      	bhi.n	800590a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d102      	bne.n	8005910 <SPI_WaitOnFlagUntilTimeout+0x30>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e00f      	b.n	8005934 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	461a      	mov	r2, r3
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	429a      	cmp	r2, r3
 8005930:	d0df      	beq.n	80058f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	3307      	adds	r3, #7
 800595a:	08db      	lsrs	r3, r3, #3
 800595c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	fb02 f303 	mul.w	r3, r2, r3
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e042      	b.n	8005a0a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f83b 	bl	8005a12 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2224      	movs	r2, #36	@ 0x24
 80059a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fef1 	bl	80067a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f986 	bl	8005cd4 <UART_SetConfig>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e01b      	b.n	8005a0a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 ff70 	bl	80068e8 <UART_CheckIdleState>
 8005a08:	4603      	mov	r3, r0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b08a      	sub	sp, #40	@ 0x28
 8005a2a:	af02      	add	r7, sp, #8
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d17b      	bne.n	8005b38 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_UART_Transmit+0x26>
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e074      	b.n	8005b3a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2221      	movs	r2, #33	@ 0x21
 8005a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a60:	f7fb ff3c 	bl	80018dc <HAL_GetTick>
 8005a64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	88fa      	ldrh	r2, [r7, #6]
 8005a6a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7e:	d108      	bne.n	8005a92 <HAL_UART_Transmit+0x6c>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e003      	b.n	8005a9a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a9a:	e030      	b.n	8005afe <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2180      	movs	r1, #128	@ 0x80
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 ffc8 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e03d      	b.n	8005b3a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	e007      	b.n	8005aec <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1c8      	bne.n	8005a9c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2140      	movs	r1, #64	@ 0x40
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 ff91 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e006      	b.n	8005b3a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	@ 0x28
 8005b46:	af02      	add	r7, sp, #8
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	f040 80b5 	bne.w	8005cc8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_UART_Receive+0x28>
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0ad      	b.n	8005cca <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2222      	movs	r2, #34	@ 0x22
 8005b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b84:	f7fb feaa 	bl	80018dc <HAL_GetTick>
 8005b88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	88fa      	ldrh	r2, [r7, #6]
 8005b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba2:	d10e      	bne.n	8005bc2 <HAL_UART_Receive+0x80>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <HAL_UART_Receive+0x76>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005bb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005bb6:	e02d      	b.n	8005c14 <HAL_UART_Receive+0xd2>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	22ff      	movs	r2, #255	@ 0xff
 8005bbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005bc0:	e028      	b.n	8005c14 <HAL_UART_Receive+0xd2>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <HAL_UART_Receive+0xa4>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <HAL_UART_Receive+0x9a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	22ff      	movs	r2, #255	@ 0xff
 8005bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005bda:	e01b      	b.n	8005c14 <HAL_UART_Receive+0xd2>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	227f      	movs	r2, #127	@ 0x7f
 8005be0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005be4:	e016      	b.n	8005c14 <HAL_UART_Receive+0xd2>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bee:	d10d      	bne.n	8005c0c <HAL_UART_Receive+0xca>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <HAL_UART_Receive+0xc0>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	227f      	movs	r2, #127	@ 0x7f
 8005bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005c00:	e008      	b.n	8005c14 <HAL_UART_Receive+0xd2>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	223f      	movs	r2, #63	@ 0x3f
 8005c06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005c0a:	e003      	b.n	8005c14 <HAL_UART_Receive+0xd2>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c1a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c24:	d108      	bne.n	8005c38 <HAL_UART_Receive+0xf6>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e003      	b.n	8005c40 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c40:	e036      	b.n	8005cb0 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2120      	movs	r1, #32
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fef5 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e032      	b.n	8005cca <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10c      	bne.n	8005c84 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	8a7b      	ldrh	r3, [r7, #18]
 8005c74:	4013      	ands	r3, r2
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	3302      	adds	r3, #2
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	e00c      	b.n	8005c9e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	8a7b      	ldrh	r3, [r7, #18]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	4013      	ands	r3, r2
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1c2      	bne.n	8005c42 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e000      	b.n	8005cca <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd8:	b092      	sub	sp, #72	@ 0x48
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4bbe      	ldr	r3, [pc, #760]	@ (8005ffc <UART_SetConfig+0x328>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4ab3      	ldr	r2, [pc, #716]	@ (8006000 <UART_SetConfig+0x32c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	4baf      	ldr	r3, [pc, #700]	@ (8006004 <UART_SetConfig+0x330>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5a:	f023 010f 	bic.w	r1, r3, #15
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4aa6      	ldr	r2, [pc, #664]	@ (8006008 <UART_SetConfig+0x334>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d177      	bne.n	8005e64 <UART_SetConfig+0x190>
 8005d74:	4ba5      	ldr	r3, [pc, #660]	@ (800600c <UART_SetConfig+0x338>)
 8005d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d7c:	2b28      	cmp	r3, #40	@ 0x28
 8005d7e:	d86d      	bhi.n	8005e5c <UART_SetConfig+0x188>
 8005d80:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <UART_SetConfig+0xb4>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005e2d 	.word	0x08005e2d
 8005d8c:	08005e5d 	.word	0x08005e5d
 8005d90:	08005e5d 	.word	0x08005e5d
 8005d94:	08005e5d 	.word	0x08005e5d
 8005d98:	08005e5d 	.word	0x08005e5d
 8005d9c:	08005e5d 	.word	0x08005e5d
 8005da0:	08005e5d 	.word	0x08005e5d
 8005da4:	08005e5d 	.word	0x08005e5d
 8005da8:	08005e35 	.word	0x08005e35
 8005dac:	08005e5d 	.word	0x08005e5d
 8005db0:	08005e5d 	.word	0x08005e5d
 8005db4:	08005e5d 	.word	0x08005e5d
 8005db8:	08005e5d 	.word	0x08005e5d
 8005dbc:	08005e5d 	.word	0x08005e5d
 8005dc0:	08005e5d 	.word	0x08005e5d
 8005dc4:	08005e5d 	.word	0x08005e5d
 8005dc8:	08005e3d 	.word	0x08005e3d
 8005dcc:	08005e5d 	.word	0x08005e5d
 8005dd0:	08005e5d 	.word	0x08005e5d
 8005dd4:	08005e5d 	.word	0x08005e5d
 8005dd8:	08005e5d 	.word	0x08005e5d
 8005ddc:	08005e5d 	.word	0x08005e5d
 8005de0:	08005e5d 	.word	0x08005e5d
 8005de4:	08005e5d 	.word	0x08005e5d
 8005de8:	08005e45 	.word	0x08005e45
 8005dec:	08005e5d 	.word	0x08005e5d
 8005df0:	08005e5d 	.word	0x08005e5d
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005e5d 	.word	0x08005e5d
 8005dfc:	08005e5d 	.word	0x08005e5d
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e4d 	.word	0x08005e4d
 8005e0c:	08005e5d 	.word	0x08005e5d
 8005e10:	08005e5d 	.word	0x08005e5d
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e5d 	.word	0x08005e5d
 8005e1c:	08005e5d 	.word	0x08005e5d
 8005e20:	08005e5d 	.word	0x08005e5d
 8005e24:	08005e5d 	.word	0x08005e5d
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e222      	b.n	800627a <UART_SetConfig+0x5a6>
 8005e34:	2304      	movs	r3, #4
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e21e      	b.n	800627a <UART_SetConfig+0x5a6>
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e21a      	b.n	800627a <UART_SetConfig+0x5a6>
 8005e44:	2310      	movs	r3, #16
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e216      	b.n	800627a <UART_SetConfig+0x5a6>
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e212      	b.n	800627a <UART_SetConfig+0x5a6>
 8005e54:	2340      	movs	r3, #64	@ 0x40
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e20e      	b.n	800627a <UART_SetConfig+0x5a6>
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e20a      	b.n	800627a <UART_SetConfig+0x5a6>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a69      	ldr	r2, [pc, #420]	@ (8006010 <UART_SetConfig+0x33c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d130      	bne.n	8005ed0 <UART_SetConfig+0x1fc>
 8005e6e:	4b67      	ldr	r3, [pc, #412]	@ (800600c <UART_SetConfig+0x338>)
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d826      	bhi.n	8005ec8 <UART_SetConfig+0x1f4>
 8005e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <UART_SetConfig+0x1ac>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005e99 	.word	0x08005e99
 8005e84:	08005ea1 	.word	0x08005ea1
 8005e88:	08005ea9 	.word	0x08005ea9
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08005eb9 	.word	0x08005eb9
 8005e94:	08005ec1 	.word	0x08005ec1
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e1ec      	b.n	800627a <UART_SetConfig+0x5a6>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e1e8      	b.n	800627a <UART_SetConfig+0x5a6>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e1e4      	b.n	800627a <UART_SetConfig+0x5a6>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e1e0      	b.n	800627a <UART_SetConfig+0x5a6>
 8005eb8:	2320      	movs	r3, #32
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e1dc      	b.n	800627a <UART_SetConfig+0x5a6>
 8005ec0:	2340      	movs	r3, #64	@ 0x40
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e1d8      	b.n	800627a <UART_SetConfig+0x5a6>
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e1d4      	b.n	800627a <UART_SetConfig+0x5a6>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a4f      	ldr	r2, [pc, #316]	@ (8006014 <UART_SetConfig+0x340>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d130      	bne.n	8005f3c <UART_SetConfig+0x268>
 8005eda:	4b4c      	ldr	r3, [pc, #304]	@ (800600c <UART_SetConfig+0x338>)
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	d826      	bhi.n	8005f34 <UART_SetConfig+0x260>
 8005ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <UART_SetConfig+0x218>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005f05 	.word	0x08005f05
 8005ef0:	08005f0d 	.word	0x08005f0d
 8005ef4:	08005f15 	.word	0x08005f15
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e1b6      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e1b2      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e1ae      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e1aa      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f24:	2320      	movs	r3, #32
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e1a6      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f2c:	2340      	movs	r3, #64	@ 0x40
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e1a2      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f34:	2380      	movs	r3, #128	@ 0x80
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e19e      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a35      	ldr	r2, [pc, #212]	@ (8006018 <UART_SetConfig+0x344>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d130      	bne.n	8005fa8 <UART_SetConfig+0x2d4>
 8005f46:	4b31      	ldr	r3, [pc, #196]	@ (800600c <UART_SetConfig+0x338>)
 8005f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d826      	bhi.n	8005fa0 <UART_SetConfig+0x2cc>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0x284>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f71 	.word	0x08005f71
 8005f5c:	08005f79 	.word	0x08005f79
 8005f60:	08005f81 	.word	0x08005f81
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f91 	.word	0x08005f91
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e180      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e17c      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e178      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e174      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f90:	2320      	movs	r3, #32
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e170      	b.n	800627a <UART_SetConfig+0x5a6>
 8005f98:	2340      	movs	r3, #64	@ 0x40
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e16c      	b.n	800627a <UART_SetConfig+0x5a6>
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e168      	b.n	800627a <UART_SetConfig+0x5a6>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1b      	ldr	r2, [pc, #108]	@ (800601c <UART_SetConfig+0x348>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d142      	bne.n	8006038 <UART_SetConfig+0x364>
 8005fb2:	4b16      	ldr	r3, [pc, #88]	@ (800600c <UART_SetConfig+0x338>)
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d838      	bhi.n	8006030 <UART_SetConfig+0x35c>
 8005fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc4 <UART_SetConfig+0x2f0>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08006021 	.word	0x08006021
 8005fd8:	08006029 	.word	0x08006029
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e14a      	b.n	800627a <UART_SetConfig+0x5a6>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e146      	b.n	800627a <UART_SetConfig+0x5a6>
 8005fec:	2308      	movs	r3, #8
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e142      	b.n	800627a <UART_SetConfig+0x5a6>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e13e      	b.n	800627a <UART_SetConfig+0x5a6>
 8005ffc:	cfff69f3 	.word	0xcfff69f3
 8006000:	58000c00 	.word	0x58000c00
 8006004:	11fff4ff 	.word	0x11fff4ff
 8006008:	40011000 	.word	0x40011000
 800600c:	58024400 	.word	0x58024400
 8006010:	40004400 	.word	0x40004400
 8006014:	40004800 	.word	0x40004800
 8006018:	40004c00 	.word	0x40004c00
 800601c:	40005000 	.word	0x40005000
 8006020:	2320      	movs	r3, #32
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e128      	b.n	800627a <UART_SetConfig+0x5a6>
 8006028:	2340      	movs	r3, #64	@ 0x40
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602e:	e124      	b.n	800627a <UART_SetConfig+0x5a6>
 8006030:	2380      	movs	r3, #128	@ 0x80
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006036:	e120      	b.n	800627a <UART_SetConfig+0x5a6>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4acb      	ldr	r2, [pc, #812]	@ (800636c <UART_SetConfig+0x698>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d176      	bne.n	8006130 <UART_SetConfig+0x45c>
 8006042:	4bcb      	ldr	r3, [pc, #812]	@ (8006370 <UART_SetConfig+0x69c>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800604a:	2b28      	cmp	r3, #40	@ 0x28
 800604c:	d86c      	bhi.n	8006128 <UART_SetConfig+0x454>
 800604e:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <UART_SetConfig+0x380>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	080060f9 	.word	0x080060f9
 8006058:	08006129 	.word	0x08006129
 800605c:	08006129 	.word	0x08006129
 8006060:	08006129 	.word	0x08006129
 8006064:	08006129 	.word	0x08006129
 8006068:	08006129 	.word	0x08006129
 800606c:	08006129 	.word	0x08006129
 8006070:	08006129 	.word	0x08006129
 8006074:	08006101 	.word	0x08006101
 8006078:	08006129 	.word	0x08006129
 800607c:	08006129 	.word	0x08006129
 8006080:	08006129 	.word	0x08006129
 8006084:	08006129 	.word	0x08006129
 8006088:	08006129 	.word	0x08006129
 800608c:	08006129 	.word	0x08006129
 8006090:	08006129 	.word	0x08006129
 8006094:	08006109 	.word	0x08006109
 8006098:	08006129 	.word	0x08006129
 800609c:	08006129 	.word	0x08006129
 80060a0:	08006129 	.word	0x08006129
 80060a4:	08006129 	.word	0x08006129
 80060a8:	08006129 	.word	0x08006129
 80060ac:	08006129 	.word	0x08006129
 80060b0:	08006129 	.word	0x08006129
 80060b4:	08006111 	.word	0x08006111
 80060b8:	08006129 	.word	0x08006129
 80060bc:	08006129 	.word	0x08006129
 80060c0:	08006129 	.word	0x08006129
 80060c4:	08006129 	.word	0x08006129
 80060c8:	08006129 	.word	0x08006129
 80060cc:	08006129 	.word	0x08006129
 80060d0:	08006129 	.word	0x08006129
 80060d4:	08006119 	.word	0x08006119
 80060d8:	08006129 	.word	0x08006129
 80060dc:	08006129 	.word	0x08006129
 80060e0:	08006129 	.word	0x08006129
 80060e4:	08006129 	.word	0x08006129
 80060e8:	08006129 	.word	0x08006129
 80060ec:	08006129 	.word	0x08006129
 80060f0:	08006129 	.word	0x08006129
 80060f4:	08006121 	.word	0x08006121
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e0bc      	b.n	800627a <UART_SetConfig+0x5a6>
 8006100:	2304      	movs	r3, #4
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e0b8      	b.n	800627a <UART_SetConfig+0x5a6>
 8006108:	2308      	movs	r3, #8
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e0b4      	b.n	800627a <UART_SetConfig+0x5a6>
 8006110:	2310      	movs	r3, #16
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e0b0      	b.n	800627a <UART_SetConfig+0x5a6>
 8006118:	2320      	movs	r3, #32
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e0ac      	b.n	800627a <UART_SetConfig+0x5a6>
 8006120:	2340      	movs	r3, #64	@ 0x40
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e0a8      	b.n	800627a <UART_SetConfig+0x5a6>
 8006128:	2380      	movs	r3, #128	@ 0x80
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e0a4      	b.n	800627a <UART_SetConfig+0x5a6>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a8f      	ldr	r2, [pc, #572]	@ (8006374 <UART_SetConfig+0x6a0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d130      	bne.n	800619c <UART_SetConfig+0x4c8>
 800613a:	4b8d      	ldr	r3, [pc, #564]	@ (8006370 <UART_SetConfig+0x69c>)
 800613c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	2b05      	cmp	r3, #5
 8006144:	d826      	bhi.n	8006194 <UART_SetConfig+0x4c0>
 8006146:	a201      	add	r2, pc, #4	@ (adr r2, 800614c <UART_SetConfig+0x478>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	08006165 	.word	0x08006165
 8006150:	0800616d 	.word	0x0800616d
 8006154:	08006175 	.word	0x08006175
 8006158:	0800617d 	.word	0x0800617d
 800615c:	08006185 	.word	0x08006185
 8006160:	0800618d 	.word	0x0800618d
 8006164:	2300      	movs	r3, #0
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e086      	b.n	800627a <UART_SetConfig+0x5a6>
 800616c:	2304      	movs	r3, #4
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e082      	b.n	800627a <UART_SetConfig+0x5a6>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e07e      	b.n	800627a <UART_SetConfig+0x5a6>
 800617c:	2310      	movs	r3, #16
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e07a      	b.n	800627a <UART_SetConfig+0x5a6>
 8006184:	2320      	movs	r3, #32
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e076      	b.n	800627a <UART_SetConfig+0x5a6>
 800618c:	2340      	movs	r3, #64	@ 0x40
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e072      	b.n	800627a <UART_SetConfig+0x5a6>
 8006194:	2380      	movs	r3, #128	@ 0x80
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e06e      	b.n	800627a <UART_SetConfig+0x5a6>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a75      	ldr	r2, [pc, #468]	@ (8006378 <UART_SetConfig+0x6a4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d130      	bne.n	8006208 <UART_SetConfig+0x534>
 80061a6:	4b72      	ldr	r3, [pc, #456]	@ (8006370 <UART_SetConfig+0x69c>)
 80061a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	2b05      	cmp	r3, #5
 80061b0:	d826      	bhi.n	8006200 <UART_SetConfig+0x52c>
 80061b2:	a201      	add	r2, pc, #4	@ (adr r2, 80061b8 <UART_SetConfig+0x4e4>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061d1 	.word	0x080061d1
 80061bc:	080061d9 	.word	0x080061d9
 80061c0:	080061e1 	.word	0x080061e1
 80061c4:	080061e9 	.word	0x080061e9
 80061c8:	080061f1 	.word	0x080061f1
 80061cc:	080061f9 	.word	0x080061f9
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d6:	e050      	b.n	800627a <UART_SetConfig+0x5a6>
 80061d8:	2304      	movs	r3, #4
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e04c      	b.n	800627a <UART_SetConfig+0x5a6>
 80061e0:	2308      	movs	r3, #8
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e048      	b.n	800627a <UART_SetConfig+0x5a6>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e044      	b.n	800627a <UART_SetConfig+0x5a6>
 80061f0:	2320      	movs	r3, #32
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e040      	b.n	800627a <UART_SetConfig+0x5a6>
 80061f8:	2340      	movs	r3, #64	@ 0x40
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e03c      	b.n	800627a <UART_SetConfig+0x5a6>
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e038      	b.n	800627a <UART_SetConfig+0x5a6>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a5b      	ldr	r2, [pc, #364]	@ (800637c <UART_SetConfig+0x6a8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d130      	bne.n	8006274 <UART_SetConfig+0x5a0>
 8006212:	4b57      	ldr	r3, [pc, #348]	@ (8006370 <UART_SetConfig+0x69c>)
 8006214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b05      	cmp	r3, #5
 800621c:	d826      	bhi.n	800626c <UART_SetConfig+0x598>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <UART_SetConfig+0x550>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	0800623d 	.word	0x0800623d
 8006228:	08006245 	.word	0x08006245
 800622c:	0800624d 	.word	0x0800624d
 8006230:	08006255 	.word	0x08006255
 8006234:	0800625d 	.word	0x0800625d
 8006238:	08006265 	.word	0x08006265
 800623c:	2302      	movs	r3, #2
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e01a      	b.n	800627a <UART_SetConfig+0x5a6>
 8006244:	2304      	movs	r3, #4
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e016      	b.n	800627a <UART_SetConfig+0x5a6>
 800624c:	2308      	movs	r3, #8
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e012      	b.n	800627a <UART_SetConfig+0x5a6>
 8006254:	2310      	movs	r3, #16
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e00e      	b.n	800627a <UART_SetConfig+0x5a6>
 800625c:	2320      	movs	r3, #32
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e00a      	b.n	800627a <UART_SetConfig+0x5a6>
 8006264:	2340      	movs	r3, #64	@ 0x40
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e006      	b.n	800627a <UART_SetConfig+0x5a6>
 800626c:	2380      	movs	r3, #128	@ 0x80
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e002      	b.n	800627a <UART_SetConfig+0x5a6>
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a3f      	ldr	r2, [pc, #252]	@ (800637c <UART_SetConfig+0x6a8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	f040 80f8 	bne.w	8006476 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006286:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800628a:	2b20      	cmp	r3, #32
 800628c:	dc46      	bgt.n	800631c <UART_SetConfig+0x648>
 800628e:	2b02      	cmp	r3, #2
 8006290:	f2c0 8082 	blt.w	8006398 <UART_SetConfig+0x6c4>
 8006294:	3b02      	subs	r3, #2
 8006296:	2b1e      	cmp	r3, #30
 8006298:	d87e      	bhi.n	8006398 <UART_SetConfig+0x6c4>
 800629a:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <UART_SetConfig+0x5cc>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	08006323 	.word	0x08006323
 80062a4:	08006399 	.word	0x08006399
 80062a8:	0800632b 	.word	0x0800632b
 80062ac:	08006399 	.word	0x08006399
 80062b0:	08006399 	.word	0x08006399
 80062b4:	08006399 	.word	0x08006399
 80062b8:	0800633b 	.word	0x0800633b
 80062bc:	08006399 	.word	0x08006399
 80062c0:	08006399 	.word	0x08006399
 80062c4:	08006399 	.word	0x08006399
 80062c8:	08006399 	.word	0x08006399
 80062cc:	08006399 	.word	0x08006399
 80062d0:	08006399 	.word	0x08006399
 80062d4:	08006399 	.word	0x08006399
 80062d8:	0800634b 	.word	0x0800634b
 80062dc:	08006399 	.word	0x08006399
 80062e0:	08006399 	.word	0x08006399
 80062e4:	08006399 	.word	0x08006399
 80062e8:	08006399 	.word	0x08006399
 80062ec:	08006399 	.word	0x08006399
 80062f0:	08006399 	.word	0x08006399
 80062f4:	08006399 	.word	0x08006399
 80062f8:	08006399 	.word	0x08006399
 80062fc:	08006399 	.word	0x08006399
 8006300:	08006399 	.word	0x08006399
 8006304:	08006399 	.word	0x08006399
 8006308:	08006399 	.word	0x08006399
 800630c:	08006399 	.word	0x08006399
 8006310:	08006399 	.word	0x08006399
 8006314:	08006399 	.word	0x08006399
 8006318:	0800638b 	.word	0x0800638b
 800631c:	2b40      	cmp	r3, #64	@ 0x40
 800631e:	d037      	beq.n	8006390 <UART_SetConfig+0x6bc>
 8006320:	e03a      	b.n	8006398 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006322:	f7fe f897 	bl	8004454 <HAL_RCCEx_GetD3PCLK1Freq>
 8006326:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006328:	e03c      	b.n	80063a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe f8a6 	bl	8004480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006338:	e034      	b.n	80063a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800633a:	f107 0318 	add.w	r3, r7, #24
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe f9f2 	bl	8004728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006348:	e02c      	b.n	80063a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800634a:	4b09      	ldr	r3, [pc, #36]	@ (8006370 <UART_SetConfig+0x69c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006356:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <UART_SetConfig+0x69c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	08db      	lsrs	r3, r3, #3
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	4a07      	ldr	r2, [pc, #28]	@ (8006380 <UART_SetConfig+0x6ac>)
 8006362:	fa22 f303 	lsr.w	r3, r2, r3
 8006366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006368:	e01c      	b.n	80063a4 <UART_SetConfig+0x6d0>
 800636a:	bf00      	nop
 800636c:	40011400 	.word	0x40011400
 8006370:	58024400 	.word	0x58024400
 8006374:	40007800 	.word	0x40007800
 8006378:	40007c00 	.word	0x40007c00
 800637c:	58000c00 	.word	0x58000c00
 8006380:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006384:	4b9d      	ldr	r3, [pc, #628]	@ (80065fc <UART_SetConfig+0x928>)
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006388:	e00c      	b.n	80063a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800638a:	4b9d      	ldr	r3, [pc, #628]	@ (8006600 <UART_SetConfig+0x92c>)
 800638c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638e:	e009      	b.n	80063a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006396:	e005      	b.n	80063a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 81de 	beq.w	8006768 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	4a94      	ldr	r2, [pc, #592]	@ (8006604 <UART_SetConfig+0x930>)
 80063b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80063be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4613      	mov	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d305      	bcc.n	80063dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d8:	429a      	cmp	r2, r3
 80063da:	d903      	bls.n	80063e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063e2:	e1c1      	b.n	8006768 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e6:	2200      	movs	r2, #0
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	60fa      	str	r2, [r7, #12]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f0:	4a84      	ldr	r2, [pc, #528]	@ (8006604 <UART_SetConfig+0x930>)
 80063f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006406:	f7f9 ff67 	bl	80002d8 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	020b      	lsls	r3, r1, #8
 800641c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006420:	0202      	lsls	r2, r0, #8
 8006422:	6979      	ldr	r1, [r7, #20]
 8006424:	6849      	ldr	r1, [r1, #4]
 8006426:	0849      	lsrs	r1, r1, #1
 8006428:	2000      	movs	r0, #0
 800642a:	460c      	mov	r4, r1
 800642c:	4605      	mov	r5, r0
 800642e:	eb12 0804 	adds.w	r8, r2, r4
 8006432:	eb43 0905 	adc.w	r9, r3, r5
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	469a      	mov	sl, r3
 800643e:	4693      	mov	fp, r2
 8006440:	4652      	mov	r2, sl
 8006442:	465b      	mov	r3, fp
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	f7f9 ff46 	bl	80002d8 <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4613      	mov	r3, r2
 8006452:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800645a:	d308      	bcc.n	800646e <UART_SetConfig+0x79a>
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006462:	d204      	bcs.n	800646e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	e17c      	b.n	8006768 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006474:	e178      	b.n	8006768 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800647e:	f040 80c5 	bne.w	800660c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006482:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006486:	2b20      	cmp	r3, #32
 8006488:	dc48      	bgt.n	800651c <UART_SetConfig+0x848>
 800648a:	2b00      	cmp	r3, #0
 800648c:	db7b      	blt.n	8006586 <UART_SetConfig+0x8b2>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d879      	bhi.n	8006586 <UART_SetConfig+0x8b2>
 8006492:	a201      	add	r2, pc, #4	@ (adr r2, 8006498 <UART_SetConfig+0x7c4>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	08006523 	.word	0x08006523
 800649c:	0800652b 	.word	0x0800652b
 80064a0:	08006587 	.word	0x08006587
 80064a4:	08006587 	.word	0x08006587
 80064a8:	08006533 	.word	0x08006533
 80064ac:	08006587 	.word	0x08006587
 80064b0:	08006587 	.word	0x08006587
 80064b4:	08006587 	.word	0x08006587
 80064b8:	08006543 	.word	0x08006543
 80064bc:	08006587 	.word	0x08006587
 80064c0:	08006587 	.word	0x08006587
 80064c4:	08006587 	.word	0x08006587
 80064c8:	08006587 	.word	0x08006587
 80064cc:	08006587 	.word	0x08006587
 80064d0:	08006587 	.word	0x08006587
 80064d4:	08006587 	.word	0x08006587
 80064d8:	08006553 	.word	0x08006553
 80064dc:	08006587 	.word	0x08006587
 80064e0:	08006587 	.word	0x08006587
 80064e4:	08006587 	.word	0x08006587
 80064e8:	08006587 	.word	0x08006587
 80064ec:	08006587 	.word	0x08006587
 80064f0:	08006587 	.word	0x08006587
 80064f4:	08006587 	.word	0x08006587
 80064f8:	08006587 	.word	0x08006587
 80064fc:	08006587 	.word	0x08006587
 8006500:	08006587 	.word	0x08006587
 8006504:	08006587 	.word	0x08006587
 8006508:	08006587 	.word	0x08006587
 800650c:	08006587 	.word	0x08006587
 8006510:	08006587 	.word	0x08006587
 8006514:	08006587 	.word	0x08006587
 8006518:	08006579 	.word	0x08006579
 800651c:	2b40      	cmp	r3, #64	@ 0x40
 800651e:	d02e      	beq.n	800657e <UART_SetConfig+0x8aa>
 8006520:	e031      	b.n	8006586 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006522:	f7fc fd61 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8006526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006528:	e033      	b.n	8006592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800652a:	f7fc fd73 	bl	8003014 <HAL_RCC_GetPCLK2Freq>
 800652e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006530:	e02f      	b.n	8006592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006536:	4618      	mov	r0, r3
 8006538:	f7fd ffa2 	bl	8004480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006540:	e027      	b.n	8006592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006542:	f107 0318 	add.w	r3, r7, #24
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe f8ee 	bl	8004728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006550:	e01f      	b.n	8006592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006552:	4b2d      	ldr	r3, [pc, #180]	@ (8006608 <UART_SetConfig+0x934>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800655e:	4b2a      	ldr	r3, [pc, #168]	@ (8006608 <UART_SetConfig+0x934>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	08db      	lsrs	r3, r3, #3
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	4a24      	ldr	r2, [pc, #144]	@ (80065fc <UART_SetConfig+0x928>)
 800656a:	fa22 f303 	lsr.w	r3, r2, r3
 800656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006570:	e00f      	b.n	8006592 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006572:	4b22      	ldr	r3, [pc, #136]	@ (80065fc <UART_SetConfig+0x928>)
 8006574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006576:	e00c      	b.n	8006592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006578:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <UART_SetConfig+0x92c>)
 800657a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800657c:	e009      	b.n	8006592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006584:	e005      	b.n	8006592 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006590:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80e7 	beq.w	8006768 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659e:	4a19      	ldr	r2, [pc, #100]	@ (8006604 <UART_SetConfig+0x930>)
 80065a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a4:	461a      	mov	r2, r3
 80065a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ac:	005a      	lsls	r2, r3, #1
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	441a      	add	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80065be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	2b0f      	cmp	r3, #15
 80065c4:	d916      	bls.n	80065f4 <UART_SetConfig+0x920>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065cc:	d212      	bcs.n	80065f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f023 030f 	bic.w	r3, r3, #15
 80065d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065e6:	4313      	orrs	r3, r2
 80065e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	e0b9      	b.n	8006768 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065fa:	e0b5      	b.n	8006768 <UART_SetConfig+0xa94>
 80065fc:	03d09000 	.word	0x03d09000
 8006600:	003d0900 	.word	0x003d0900
 8006604:	08006c70 	.word	0x08006c70
 8006608:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800660c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006610:	2b20      	cmp	r3, #32
 8006612:	dc49      	bgt.n	80066a8 <UART_SetConfig+0x9d4>
 8006614:	2b00      	cmp	r3, #0
 8006616:	db7c      	blt.n	8006712 <UART_SetConfig+0xa3e>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d87a      	bhi.n	8006712 <UART_SetConfig+0xa3e>
 800661c:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <UART_SetConfig+0x950>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	080066af 	.word	0x080066af
 8006628:	080066b7 	.word	0x080066b7
 800662c:	08006713 	.word	0x08006713
 8006630:	08006713 	.word	0x08006713
 8006634:	080066bf 	.word	0x080066bf
 8006638:	08006713 	.word	0x08006713
 800663c:	08006713 	.word	0x08006713
 8006640:	08006713 	.word	0x08006713
 8006644:	080066cf 	.word	0x080066cf
 8006648:	08006713 	.word	0x08006713
 800664c:	08006713 	.word	0x08006713
 8006650:	08006713 	.word	0x08006713
 8006654:	08006713 	.word	0x08006713
 8006658:	08006713 	.word	0x08006713
 800665c:	08006713 	.word	0x08006713
 8006660:	08006713 	.word	0x08006713
 8006664:	080066df 	.word	0x080066df
 8006668:	08006713 	.word	0x08006713
 800666c:	08006713 	.word	0x08006713
 8006670:	08006713 	.word	0x08006713
 8006674:	08006713 	.word	0x08006713
 8006678:	08006713 	.word	0x08006713
 800667c:	08006713 	.word	0x08006713
 8006680:	08006713 	.word	0x08006713
 8006684:	08006713 	.word	0x08006713
 8006688:	08006713 	.word	0x08006713
 800668c:	08006713 	.word	0x08006713
 8006690:	08006713 	.word	0x08006713
 8006694:	08006713 	.word	0x08006713
 8006698:	08006713 	.word	0x08006713
 800669c:	08006713 	.word	0x08006713
 80066a0:	08006713 	.word	0x08006713
 80066a4:	08006705 	.word	0x08006705
 80066a8:	2b40      	cmp	r3, #64	@ 0x40
 80066aa:	d02e      	beq.n	800670a <UART_SetConfig+0xa36>
 80066ac:	e031      	b.n	8006712 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ae:	f7fc fc9b 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 80066b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066b4:	e033      	b.n	800671e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b6:	f7fc fcad 	bl	8003014 <HAL_RCC_GetPCLK2Freq>
 80066ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066bc:	e02f      	b.n	800671e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fd fedc 	bl	8004480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066cc:	e027      	b.n	800671e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ce:	f107 0318 	add.w	r3, r7, #24
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe f828 	bl	8004728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066dc:	e01f      	b.n	800671e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066de:	4b2d      	ldr	r3, [pc, #180]	@ (8006794 <UART_SetConfig+0xac0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006794 <UART_SetConfig+0xac0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	08db      	lsrs	r3, r3, #3
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	4a28      	ldr	r2, [pc, #160]	@ (8006798 <UART_SetConfig+0xac4>)
 80066f6:	fa22 f303 	lsr.w	r3, r2, r3
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066fc:	e00f      	b.n	800671e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80066fe:	4b26      	ldr	r3, [pc, #152]	@ (8006798 <UART_SetConfig+0xac4>)
 8006700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006702:	e00c      	b.n	800671e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006704:	4b25      	ldr	r3, [pc, #148]	@ (800679c <UART_SetConfig+0xac8>)
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006708:	e009      	b.n	800671e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006710:	e005      	b.n	800671e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800671c:	bf00      	nop
    }

    if (pclk != 0U)
 800671e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d021      	beq.n	8006768 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006728:	4a1d      	ldr	r2, [pc, #116]	@ (80067a0 <UART_SetConfig+0xacc>)
 800672a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800672e:	461a      	mov	r2, r3
 8006730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006732:	fbb3 f2f2 	udiv	r2, r3, r2
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	441a      	add	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d909      	bls.n	8006762 <UART_SetConfig+0xa8e>
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006754:	d205      	bcs.n	8006762 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	b29a      	uxth	r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60da      	str	r2, [r3, #12]
 8006760:	e002      	b.n	8006768 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2201      	movs	r2, #1
 800676c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2201      	movs	r2, #1
 8006774:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2200      	movs	r2, #0
 800677c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006784:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006788:	4618      	mov	r0, r3
 800678a:	3748      	adds	r7, #72	@ 0x48
 800678c:	46bd      	mov	sp, r7
 800678e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006792:	bf00      	nop
 8006794:	58024400 	.word	0x58024400
 8006798:	03d09000 	.word	0x03d09000
 800679c:	003d0900 	.word	0x003d0900
 80067a0:	08006c70 	.word	0x08006c70

080067a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01a      	beq.n	80068ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068a2:	d10a      	bne.n	80068ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	605a      	str	r2, [r3, #4]
  }
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b098      	sub	sp, #96	@ 0x60
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068f8:	f7fa fff0 	bl	80018dc <HAL_GetTick>
 80068fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b08      	cmp	r3, #8
 800690a:	d12f      	bne.n	800696c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006914:	2200      	movs	r2, #0
 8006916:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f88e 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d022      	beq.n	800696c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800693a:	653b      	str	r3, [r7, #80]	@ 0x50
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006944:	647b      	str	r3, [r7, #68]	@ 0x44
 8006946:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800694a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e6      	bne.n	8006926 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e063      	b.n	8006a34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b04      	cmp	r3, #4
 8006978:	d149      	bne.n	8006a0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800697a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006982:	2200      	movs	r2, #0
 8006984:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f857 	bl	8006a3c <UART_WaitOnFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d03c      	beq.n	8006a0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	623b      	str	r3, [r7, #32]
   return(result);
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e6      	bne.n	8006994 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069e6:	61fa      	str	r2, [r7, #28]
 80069e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	69b9      	ldr	r1, [r7, #24]
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	617b      	str	r3, [r7, #20]
   return(result);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e012      	b.n	8006a34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3758      	adds	r7, #88	@ 0x58
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4c:	e04f      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a54:	d04b      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a56:	f7fa ff41 	bl	80018dc <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e04e      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d037      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b80      	cmp	r3, #128	@ 0x80
 8006a82:	d034      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d031      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d110      	bne.n	8006aba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f839 	bl	8006b18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e029      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ac8:	d111      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f81f 	bl	8006b18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e00f      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	bf0c      	ite	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	2300      	movne	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d0a0      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b095      	sub	sp, #84	@ 0x54
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	4b1e      	ldr	r3, [pc, #120]	@ (8006be0 <UART_EndRxTransfer+0xc8>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d118      	bne.n	8006bc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e6      	bne.n	8006b8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006bd4:	bf00      	nop
 8006bd6:	3754      	adds	r7, #84	@ 0x54
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	effffffe 	.word	0xeffffffe

08006be4 <memset>:
 8006be4:	4402      	add	r2, r0
 8006be6:	4603      	mov	r3, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8006c2c <__libc_init_array+0x38>)
 8006bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8006c30 <__libc_init_array+0x3c>)
 8006bfa:	1b64      	subs	r4, r4, r5
 8006bfc:	10a4      	asrs	r4, r4, #2
 8006bfe:	2600      	movs	r6, #0
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4d0b      	ldr	r5, [pc, #44]	@ (8006c34 <__libc_init_array+0x40>)
 8006c06:	4c0c      	ldr	r4, [pc, #48]	@ (8006c38 <__libc_init_array+0x44>)
 8006c08:	f000 f818 	bl	8006c3c <_init>
 8006c0c:	1b64      	subs	r4, r4, r5
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	2600      	movs	r6, #0
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	4798      	blx	r3
 8006c1e:	3601      	adds	r6, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	4798      	blx	r3
 8006c28:	3601      	adds	r6, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	08006c90 	.word	0x08006c90
 8006c30:	08006c90 	.word	0x08006c90
 8006c34:	08006c90 	.word	0x08006c90
 8006c38:	08006c94 	.word	0x08006c94

08006c3c <_init>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr

08006c48 <_fini>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr
