
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008e80  08008e80  00009e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008fec  08008fec  00009fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ff4  08008ff4  00009ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008ff8  08008ff8  00009ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00001068  24000000  08008ffc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  24001068  0800a064  0000b068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001410  0800a064  0000b410  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018565  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ba5  00000000  00000000  000235fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001060  00000000  00000000  000261a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c9d  00000000  00000000  00027200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003975a  00000000  00000000  00027e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015a8a  00000000  00000000  000615f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169c2f  00000000  00000000  00077081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e0cb0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a78  00000000  00000000  001e0cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001e576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001068 	.word	0x24001068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e68 	.word	0x08008e68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400106c 	.word	0x2400106c
 80002dc:	08008e68 	.word	0x08008e68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART3_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f001 fef2 	bl	80024ea <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 ffcc 	bl	80016a8 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240010dc 	.word	0x240010dc
 800071c:	24001094 	.word	0x24001094
 8000720:	24001100 	.word	0x24001100

08000724 <Flash_Init>:


/*Initialize flash IC
BUF=1-> Buffer Read
BUF=0-> Continuous Read*/
void Flash_Init(uint8_t BUF){
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	W25N_WaitForReady();
 800072e:	f000 fcc5 	bl	80010bc <W25N_WaitForReady>
	//HAL_Delay(1000);
	//Retrive data from register 2 and set BUF=1
	if(BUF){
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d012      	beq.n	800075e <Flash_Init+0x3a>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000738:	4b62      	ldr	r3, [pc, #392]	@ (80008c4 <Flash_Init+0x1a0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fad1 	bl	8000ce4 <Read_Status_Register>
 8000742:	4603      	mov	r3, r0
 8000744:	76bb      	strb	r3, [r7, #26]
		data|=0x08;
 8000746:	7ebb      	ldrb	r3, [r7, #26]
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	76bb      	strb	r3, [r7, #26]
		Write_Status_Register(SR_2_Addr, data);
 800074e:	4b5d      	ldr	r3, [pc, #372]	@ (80008c4 <Flash_Init+0x1a0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	7eba      	ldrb	r2, [r7, #26]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 faf4 	bl	8000d44 <Write_Status_Register>
 800075c:	e011      	b.n	8000782 <Flash_Init+0x5e>
	}
	//Retrive data from register 2 and set BUF=0
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 800075e:	4b59      	ldr	r3, [pc, #356]	@ (80008c4 <Flash_Init+0x1a0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fabe 	bl	8000ce4 <Read_Status_Register>
 8000768:	4603      	mov	r3, r0
 800076a:	76fb      	strb	r3, [r7, #27]
		data&=0xF7;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	f023 0308 	bic.w	r3, r3, #8
 8000772:	76fb      	strb	r3, [r7, #27]
		Write_Status_Register(SR_2_Addr, data);
 8000774:	4b53      	ldr	r3, [pc, #332]	@ (80008c4 <Flash_Init+0x1a0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	7efa      	ldrb	r2, [r7, #27]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fae1 	bl	8000d44 <Write_Status_Register>
	}
	/*Retrive data from register 1 and set WP-E=1, BP3=0, BP2=0, BP1=0, BP0 and TP=0.
	This unlocks every block for writing and activates write protect switch*/
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000782:	4b51      	ldr	r3, [pc, #324]	@ (80008c8 <Flash_Init+0x1a4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 faac 	bl	8000ce4 <Read_Status_Register>
 800078c:	4603      	mov	r3, r0
 800078e:	767b      	strb	r3, [r7, #25]
	data|=0x02;
 8000790:	7e7b      	ldrb	r3, [r7, #25]
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	767b      	strb	r3, [r7, #25]
	data&=0x83;
 8000798:	7e7b      	ldrb	r3, [r7, #25]
 800079a:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 800079e:	767b      	strb	r3, [r7, #25]
	Write_Status_Register(SR_1_Addr, data);
 80007a0:	4b49      	ldr	r3, [pc, #292]	@ (80008c8 <Flash_Init+0x1a4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	7e7a      	ldrb	r2, [r7, #25]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 facb 	bl	8000d44 <Write_Status_Register>

	//Reading the flash chip to find next available page

	//Temp variables
	uint8_t Page_Data[16]={[0 ... 15] = 0x00};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
	uint16_t Page_Bit=0x0000;
 80007bc:	2300      	movs	r3, #0
 80007be:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t Temp_Page=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

	/*While loop running through first page of each block. When the first 16 bytes = 0xFF,
	go back to previous block (Temp_Page -= 64) and exit while loop.*/
	while(Page_Bit!=0xFFFF){
 80007c4:	e031      	b.n	800082a <Flash_Init+0x106>
		Page_Bit = 0x0000;
 80007c6:	2300      	movs	r3, #0
 80007c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 80007ca:	f107 0108 	add.w	r1, r7, #8
 80007ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007d0:	2210      	movs	r2, #16
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f93a 	bl	8000a4c <Read_Data>

		for(int i = 0; i < 16; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e013      	b.n	8000806 <Flash_Init+0xe2>
			if(Page_Data[i]==0xFF){
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d109      	bne.n	8000800 <Flash_Init+0xdc>
				Page_Bit |= 0x01 << i;
 80007ec:	2201      	movs	r2, #1
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3301      	adds	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	dde8      	ble.n	80007de <Flash_Init+0xba>
			}
		}

		if(!(Page_Bit==0xFFFF)){
 800080c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d003      	beq.n	800081e <Flash_Init+0xfa>
			Temp_Page += 64;
 8000816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000818:	3340      	adds	r3, #64	@ 0x40
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800081c:	e005      	b.n	800082a <Flash_Init+0x106>
		}

		else{
			if(Temp_Page == 0){
 800081e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <Flash_Init+0x112>
				break;
			}
			else{
				Temp_Page -= 64;
 8000824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000826:	3b40      	subs	r3, #64	@ 0x40
 8000828:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 800082a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800082c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000830:	4293      	cmp	r3, r2
 8000832:	d1c8      	bne.n	80007c6 <Flash_Init+0xa2>
 8000834:	e000      	b.n	8000838 <Flash_Init+0x114>
				break;
 8000836:	bf00      	nop
			}
		}
	}
	Page_Bit=0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	/*While loop running through every page of the block. When the first 16 bytes = 0xFF,
	exit while loop. This page will be the first available page on flash IC.*/
	while(Page_Bit!=0xFFFF){
 800083c:	e02a      	b.n	8000894 <Flash_Init+0x170>
		Page_Bit = 0x0000;
 800083e:	2300      	movs	r3, #0
 8000840:	84fb      	strh	r3, [r7, #38]	@ 0x26

		Read_Data(Temp_Page, &Page_Data[0], sizeof(Page_Data));
 8000842:	f107 0108 	add.w	r1, r7, #8
 8000846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000848:	2210      	movs	r2, #16
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f8fe 	bl	8000a4c <Read_Data>

		for(int i = 0; i < 16; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e013      	b.n	800087e <Flash_Init+0x15a>
			if(Page_Data[i]==0xFF){
 8000856:	f107 0208 	add.w	r2, r7, #8
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2bff      	cmp	r3, #255	@ 0xff
 8000862:	d109      	bne.n	8000878 <Flash_Init+0x154>
				Page_Bit |= 0x01 << i;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	b21a      	sxth	r2, r3
 800086e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000872:	4313      	orrs	r3, r2
 8000874:	b21b      	sxth	r3, r3
 8000876:	84fb      	strh	r3, [r7, #38]	@ 0x26
		for(int i = 0; i < 16; i++){
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	3301      	adds	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	dde8      	ble.n	8000856 <Flash_Init+0x132>
			}
		}
		if(Page_Bit!=0xFFFF){
 8000884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088a:	4293      	cmp	r3, r2
 800088c:	d002      	beq.n	8000894 <Flash_Init+0x170>
			Temp_Page++;
 800088e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000890:	3301      	adds	r3, #1
 8000892:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(Page_Bit!=0xFFFF){
 8000894:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089a:	4293      	cmp	r3, r2
 800089c:	d1cf      	bne.n	800083e <Flash_Init+0x11a>
		}

	}
	//Update global variables
	Page_Index=Temp_Page;
 800089e:	4a0b      	ldr	r2, [pc, #44]	@ (80008cc <Flash_Init+0x1a8>)
 80008a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008a2:	8013      	strh	r3, [r2, #0]
	Block_Mem=(Page_Index/64);
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <Flash_Init+0x1a8>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	099b      	lsrs	r3, r3, #6
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <Flash_Init+0x1ac>)
 80008ae:	801a      	strh	r2, [r3, #0]
	USART3_Printf("Current page is: %u\r\n", Page_Index);
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <Flash_Init+0x1a8>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <Flash_Init+0x1b0>)
 80008b8:	f000 fbda 	bl	8001070 <USART3_Printf>
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24001005 	.word	0x24001005
 80008c8:	24001004 	.word	0x24001004
 80008cc:	24001090 	.word	0x24001090
 80008d0:	240010ae 	.word	0x240010ae
 80008d4:	08008e80 	.word	0x08008e80

080008d8 <Read_Register>:

//Read all status registers
void Read_Register(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <Read_Register+0x50>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f9ff 	bl	8000ce4 <Read_Status_Register>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <Read_Register+0x54>)
 80008ec:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 80008ee:	2064      	movs	r0, #100	@ 0x64
 80008f0:	f000 fb94 	bl	800101c <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <Read_Register+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f9f3 	bl	8000ce4 <Read_Status_Register>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <Read_Register+0x5c>)
 8000904:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000906:	2064      	movs	r0, #100	@ 0x64
 8000908:	f000 fb88 	bl	800101c <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <Read_Register+0x60>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f9e7 	bl	8000ce4 <Read_Status_Register>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <Read_Register+0x64>)
 800091c:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800091e:	2064      	movs	r0, #100	@ 0x64
 8000920:	f000 fb7c 	bl	800101c <delay_ns>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24001004 	.word	0x24001004
 800092c:	240010b1 	.word	0x240010b1
 8000930:	24001005 	.word	0x24001005
 8000934:	240010b2 	.word	0x240010b2
 8000938:	24001006 	.word	0x24001006
 800093c:	240010b3 	.word	0x240010b3

08000940 <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <Write_Data+0x74>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d106      	bne.n	8000962 <Write_Data+0x22>
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <Write_Data+0x78>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <Write_Data+0x22>
		Block_Erase(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fb29 	bl	8000fb4 <Block_Erase>
	}
	uint16_t count=0;
 8000962:	2300      	movs	r3, #0
 8000964:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 8000966:	e01c      	b.n	80009a2 <Write_Data+0x62>
		*Buffer_p=*data;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <Write_Data+0x7c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	701a      	strb	r2, [r3, #0]
		Buffer_p++;
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <Write_Data+0x7c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <Write_Data+0x7c>)
 800097a:	6013      	str	r3, [r2, #0]
		data++;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3301      	adds	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <Write_Data+0x78>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <Write_Data+0x78>)
 800098c:	801a      	strh	r2, [r3, #0]
		count++;
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	3301      	adds	r3, #1
 8000992:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <Write_Data+0x78>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800099c:	d301      	bcc.n	80009a2 <Write_Data+0x62>
			Write_to_page();
 800099e:	f000 f80f 	bl	80009c0 <Write_to_page>
	while(count<lenght){
 80009a2:	89fa      	ldrh	r2, [r7, #14]
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3de      	bcc.n	8000968 <Write_Data+0x28>
		}
	}
}
 80009aa:	bf00      	nop
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24001090 	.word	0x24001090
 80009b8:	240010ac 	.word	0x240010ac
 80009bc:	24000000 	.word	0x24000000

080009c0 <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if(Buffer_flip==0){
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <Write_to_page+0x74>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10f      	bne.n	80009ec <Write_to_page+0x2c>
		Buffer_flip=1;
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <Write_to_page+0x74>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_1[0];
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <Write_to_page+0x78>)
 80009d4:	4a19      	ldr	r2, [pc, #100]	@ (8000a3c <Write_to_page+0x7c>)
 80009d6:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <Write_to_page+0x80>)
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_0[0], sizeof(write_data_0));
 80009de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009e2:	4918      	ldr	r1, [pc, #96]	@ (8000a44 <Write_to_page+0x84>)
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 fa0f 	bl	8000e08 <Write_Data_Buffer>
 80009ea:	e00e      	b.n	8000a0a <Write_to_page+0x4a>
	}
	else{
		Buffer_flip=0;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <Write_to_page+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <Write_to_page+0x78>)
 80009f4:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <Write_to_page+0x84>)
 80009f6:	601a      	str	r2, [r3, #0]
		Buffer_Index=0;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <Write_to_page+0x80>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	801a      	strh	r2, [r3, #0]
		Write_Data_Buffer(0, &write_data_1[0], sizeof(write_data_1));
 80009fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a02:	490e      	ldr	r1, [pc, #56]	@ (8000a3c <Write_to_page+0x7c>)
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 f9ff 	bl	8000e08 <Write_Data_Buffer>
	}
	Write_Data_Flash(Page_Index);
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <Write_to_page+0x88>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fa36 	bl	8000e80 <Write_Data_Flash>
	Page_Index++;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <Write_to_page+0x88>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <Write_to_page+0x88>)
 8000a1e:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <Write_to_page+0x80>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
	Automatic_Block_Managment(Page_Index);
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <Write_to_page+0x88>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f824 	bl	8000a78 <Automatic_Block_Managment>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	240010b0 	.word	0x240010b0
 8000a38:	24000000 	.word	0x24000000
 8000a3c:	24000804 	.word	0x24000804
 8000a40:	240010ac 	.word	0x240010ac
 8000a44:	24000004 	.word	0x24000004
 8000a48:	24001090 	.word	0x24001090

08000a4c <Read_Data>:

//Read data from page and transfer to data
void Read_Data(uint16_t page, uint8_t* data, uint16_t len){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	80fb      	strh	r3, [r7, #6]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	80bb      	strh	r3, [r7, #4]
	Select_Page_Read(page);
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fa42 	bl	8000ee8 <Select_Page_Read>
	Read_Data_Buffer(data, len);
 8000a64:	88bb      	ldrh	r3, [r7, #4]
 8000a66:	4619      	mov	r1, r3
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f000 fa6f 	bl	8000f4c <Read_Data_Buffer>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <Automatic_Block_Managment>:

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <Automatic_Block_Managment+0x38>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	89fa      	ldrh	r2, [r7, #14]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d007      	beq.n	8000aa2 <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fa8d 	bl	8000fb4 <Block_Erase>
		Block_Mem=Block;
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <Automatic_Block_Managment+0x38>)
 8000a9c:	89fb      	ldrh	r3, [r7, #14]
 8000a9e:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 8000aa0:	e002      	b.n	8000aa8 <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 8000aa2:	4a03      	ldr	r2, [pc, #12]	@ (8000ab0 <Automatic_Block_Managment+0x38>)
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	8013      	strh	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240010ae 	.word	0x240010ae

08000ab4 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	USART3_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 8000aba:	4824      	ldr	r0, [pc, #144]	@ (8000b4c <Chip_Erase+0x98>)
 8000abc:	f000 fad8 	bl	8001070 <USART3_Printf>
	HAL_UART_Receive(&huart3, &command, 1, HAL_MAX_DELAY);
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4922      	ldr	r1, [pc, #136]	@ (8000b50 <Chip_Erase+0x9c>)
 8000ac8:	4822      	ldr	r0, [pc, #136]	@ (8000b54 <Chip_Erase+0xa0>)
 8000aca:	f006 fbbe 	bl	800724a <HAL_UART_Receive>
	//ASCII for Y
	if(command == 0x59){
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <Chip_Erase+0x9c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b59      	cmp	r3, #89	@ 0x59
 8000ad4:	d132      	bne.n	8000b3c <Chip_Erase+0x88>
		USART3_Printf("Sletter minne ...\r\n");
 8000ad6:	4820      	ldr	r0, [pc, #128]	@ (8000b58 <Chip_Erase+0xa4>)
 8000ad8:	f000 faca 	bl	8001070 <USART3_Printf>
		for(int i = 0; i <= 1024; i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	e009      	b.n	8000af6 <Chip_Erase+0x42>
			Block_Erase(i*64);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	019b      	lsls	r3, r3, #6
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fa62 	bl	8000fb4 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000afc:	ddf1      	ble.n	8000ae2 <Chip_Erase+0x2e>
		}
		Buffer_Index=0;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <Chip_Erase+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 8000b04:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <Chip_Erase+0xac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <Chip_Erase+0xb0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	801a      	strh	r2, [r3, #0]
		Buffer_flip=0;
 8000b10:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <Chip_Erase+0xb4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		Buffer_p=&write_data_0[0];
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Chip_Erase+0xb8>)
 8000b18:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <Chip_Erase+0xbc>)
 8000b1a:	601a      	str	r2, [r3, #0]
		memset(write_data_0, 0xFF, sizeof(write_data_0));
 8000b1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b20:	21ff      	movs	r1, #255	@ 0xff
 8000b22:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <Chip_Erase+0xbc>)
 8000b24:	f007 fd22 	bl	800856c <memset>
		memset(write_data_1, 0xFF, sizeof(write_data_1));
 8000b28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b2c:	21ff      	movs	r1, #255	@ 0xff
 8000b2e:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <Chip_Erase+0xc0>)
 8000b30:	f007 fd1c 	bl	800856c <memset>
		USART3_Printf("Ferdig\r\n");
 8000b34:	4810      	ldr	r0, [pc, #64]	@ (8000b78 <Chip_Erase+0xc4>)
 8000b36:	f000 fa9b 	bl	8001070 <USART3_Printf>
	}
	else{
		USART3_Printf("Sletter IKKE minne\r\n");
	}
}
 8000b3a:	e002      	b.n	8000b42 <Chip_Erase+0x8e>
		USART3_Printf("Sletter IKKE minne\r\n");
 8000b3c:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <Chip_Erase+0xc8>)
 8000b3e:	f000 fa97 	bl	8001070 <USART3_Printf>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	08008e98 	.word	0x08008e98
 8000b50:	240010a4 	.word	0x240010a4
 8000b54:	24001228 	.word	0x24001228
 8000b58:	08008ecc 	.word	0x08008ecc
 8000b5c:	240010ac 	.word	0x240010ac
 8000b60:	24001090 	.word	0x24001090
 8000b64:	240010ae 	.word	0x240010ae
 8000b68:	240010b0 	.word	0x240010b0
 8000b6c:	24000000 	.word	0x24000000
 8000b70:	24000004 	.word	0x24000004
 8000b74:	24000804 	.word	0x24000804
 8000b78:	08008ee0 	.word	0x08008ee0
 8000b7c:	08008eec 	.word	0x08008eec

08000b80 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual COM PORT
void Read_Data_Cont(uint16_t len){
 8000b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b84:	b089      	sub	sp, #36	@ 0x24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	80fb      	strh	r3, [r7, #6]
 8000b8c:	466b      	mov	r3, sp
 8000b8e:	461e      	mov	r6, r3
	Select_Page_Read(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f9a9 	bl	8000ee8 <Select_Page_Read>
	uint8_t Data_Buffer[len];
 8000b96:	88f9      	ldrh	r1, [r7, #6]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	b28b      	uxth	r3, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	4691      	mov	r9, r2
 8000ba6:	f04f 0200 	mov.w	r2, #0
 8000baa:	f04f 0300 	mov.w	r3, #0
 8000bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bba:	b28b      	uxth	r3, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	4615      	mov	r5, r2
 8000bc2:	f04f 0200 	mov.w	r2, #0
 8000bc6:	f04f 0300 	mov.w	r3, #0
 8000bca:	00eb      	lsls	r3, r5, #3
 8000bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bd0:	00e2      	lsls	r2, r4, #3
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	3307      	adds	r3, #7
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	ebad 0d03 	sub.w	sp, sp, r3
 8000bde:	466b      	mov	r3, sp
 8000be0:	3300      	adds	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000be6:	2203      	movs	r2, #3
 8000be8:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2110      	movs	r1, #16
 8000c00:	4825      	ldr	r0, [pc, #148]	@ (8000c98 <Read_Data_Cont+0x118>)
 8000c02:	f002 fd71 	bl	80036e8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer,4,100);
 8000c06:	2364      	movs	r3, #100	@ 0x64
 8000c08:	2204      	movs	r2, #4
 8000c0a:	4922      	ldr	r1, [pc, #136]	@ (8000c94 <Read_Data_Cont+0x114>)
 8000c0c:	4823      	ldr	r0, [pc, #140]	@ (8000c9c <Read_Data_Cont+0x11c>)
 8000c0e:	f005 fcf5 	bl	80065fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	68f9      	ldr	r1, [r7, #12]
 8000c1a:	4820      	ldr	r0, [pc, #128]	@ (8000c9c <Read_Data_Cont+0x11c>)
 8000c1c:	f005 fedc 	bl	80069d8 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3303      	adds	r3, #3
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	330b      	adds	r3, #11
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c38:	e018      	b.n	8000c6c <Read_Data_Cont+0xec>
		USART3_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000c3a:	8bf9      	ldrh	r1, [r7, #30]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <Read_Data_Cont+0x120>)
 8000c42:	f000 fa15 	bl	8001070 <USART3_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000c46:	88fa      	ldrh	r2, [r7, #6]
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	4813      	ldr	r0, [pc, #76]	@ (8000c9c <Read_Data_Cont+0x11c>)
 8000c50:	f005 fec2 	bl	80069d8 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3303      	adds	r3, #3
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	330b      	adds	r3, #11
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xF0)&&(Data_Buffer[15]==0x0F)){
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c72:	d103      	bne.n	8000c7c <Read_Data_Cont+0xfc>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	7bdb      	ldrb	r3, [r3, #15]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d0de      	beq.n	8000c3a <Read_Data_Cont+0xba>
	}
	csHIGH();
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <Read_Data_Cont+0x118>)
 8000c82:	f002 fd31 	bl	80036e8 <HAL_GPIO_WritePin>
 8000c86:	46b5      	mov	sp, r6
}
 8000c88:	bf00      	nop
 8000c8a:	3724      	adds	r7, #36	@ 0x24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c92:	bf00      	nop
 8000c94:	24001084 	.word	0x24001084
 8000c98:	58020000 	.word	0x58020000
 8000c9c:	240011a0 	.word	0x240011a0
 8000ca0:	08008f04 	.word	0x08008f04

08000ca4 <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	SPI.Tx_Buffer[0] = OP_Write_Enable;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <Write_Enable+0x34>)
 8000caa:	2206      	movs	r2, #6
 8000cac:	701a      	strb	r2, [r3, #0]
	csLOW();
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	480a      	ldr	r0, [pc, #40]	@ (8000cdc <Write_Enable+0x38>)
 8000cb4:	f002 fd18 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer, 1, 100);
 8000cb8:	2364      	movs	r3, #100	@ 0x64
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4906      	ldr	r1, [pc, #24]	@ (8000cd8 <Write_Enable+0x34>)
 8000cbe:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <Write_Enable+0x3c>)
 8000cc0:	f005 fc9c 	bl	80065fc <HAL_SPI_Transmit>
	csHIGH();
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <Write_Enable+0x38>)
 8000cca:	f002 fd0d 	bl	80036e8 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000cce:	2064      	movs	r0, #100	@ 0x64
 8000cd0:	f000 f9a4 	bl	800101c <delay_ns>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	24001084 	.word	0x24001084
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240011a0 	.word	0x240011a0

08000ce4 <Read_Status_Register>:
	delay_ns(DELAY_NS);
}

/*Read status register.
SR->Select register address to read*/
uint8_t Read_Status_Register(uint8_t SR){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	SPI.Tx_Buffer[0]=OP_Read_Register;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <Read_Status_Register+0x50>)
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <Read_Status_Register+0x50>)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <Read_Status_Register+0x54>)
 8000d00:	f002 fcf2 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer, 2, 100);
 8000d04:	2364      	movs	r3, #100	@ 0x64
 8000d06:	2202      	movs	r2, #2
 8000d08:	490a      	ldr	r1, [pc, #40]	@ (8000d34 <Read_Status_Register+0x50>)
 8000d0a:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <Read_Status_Register+0x58>)
 8000d0c:	f005 fc76 	bl	80065fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, SPI.Rx_Buffer, 1, 100);
 8000d10:	2364      	movs	r3, #100	@ 0x64
 8000d12:	2201      	movs	r2, #1
 8000d14:	490a      	ldr	r1, [pc, #40]	@ (8000d40 <Read_Status_Register+0x5c>)
 8000d16:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <Read_Status_Register+0x58>)
 8000d18:	f005 fe5e 	bl	80069d8 <HAL_SPI_Receive>
	csHIGH();
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <Read_Status_Register+0x54>)
 8000d22:	f002 fce1 	bl	80036e8 <HAL_GPIO_WritePin>
	return SPI.Rx_Buffer[0];
 8000d26:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <Read_Status_Register+0x50>)
 8000d28:	795b      	ldrb	r3, [r3, #5]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24001084 	.word	0x24001084
 8000d38:	58020000 	.word	0x58020000
 8000d3c:	240011a0 	.word	0x240011a0
 8000d40:	24001089 	.word	0x24001089

08000d44 <Write_Status_Register>:

/*Write to status register
SR->register address to write
REG_DATA->Register data to write to register*/
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Write_Register;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <Write_Status_Register+0x50>)
 8000d56:	221f      	movs	r2, #31
 8000d58:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=SR;
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <Write_Status_Register+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	7053      	strb	r3, [r2, #1]
	SPI.Tx_Buffer[2]=REG_DATA;
 8000d60:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <Write_Status_Register+0x50>)
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000d66:	2200      	movs	r2, #0
 8000d68:	2110      	movs	r1, #16
 8000d6a:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <Write_Status_Register+0x54>)
 8000d6c:	f002 fcbc 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer, 3, 100);
 8000d70:	2364      	movs	r3, #100	@ 0x64
 8000d72:	2203      	movs	r2, #3
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <Write_Status_Register+0x50>)
 8000d76:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <Write_Status_Register+0x58>)
 8000d78:	f005 fc40 	bl	80065fc <HAL_SPI_Transmit>
	csHIGH();
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <Write_Status_Register+0x54>)
 8000d82:	f002 fcb1 	bl	80036e8 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000d86:	2064      	movs	r0, #100	@ 0x64
 8000d88:	f000 f948 	bl	800101c <delay_ns>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24001084 	.word	0x24001084
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	240011a0 	.word	0x240011a0

08000da0 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	uint8_t Buffer[3];
	SPI.Tx_Buffer[0] = OP_JEDEC_ID;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <Read_ID+0x5c>)
 8000da8:	229f      	movs	r2, #159	@ 0x9f
 8000daa:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1] = 0x00;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <Read_ID+0x5c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	705a      	strb	r2, [r3, #1]
	csLOW();
 8000db2:	2200      	movs	r2, #0
 8000db4:	2110      	movs	r1, #16
 8000db6:	4812      	ldr	r0, [pc, #72]	@ (8000e00 <Read_ID+0x60>)
 8000db8:	f002 fc96 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer, 2, 100);
 8000dbc:	2364      	movs	r3, #100	@ 0x64
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	490e      	ldr	r1, [pc, #56]	@ (8000dfc <Read_ID+0x5c>)
 8000dc2:	4810      	ldr	r0, [pc, #64]	@ (8000e04 <Read_ID+0x64>)
 8000dc4:	f005 fc1a 	bl	80065fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 4, 100);
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	2204      	movs	r2, #4
 8000dce:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <Read_ID+0x64>)
 8000dd0:	f005 fe02 	bl	80069d8 <HAL_SPI_Receive>
	csHIGH();
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <Read_ID+0x60>)
 8000dda:	f002 fc85 	bl	80036e8 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000dde:	2064      	movs	r0, #100	@ 0x64
 8000de0:	f000 f91c 	bl	800101c <delay_ns>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000de4:	793b      	ldrb	r3, [r7, #4]
 8000de6:	041a      	lsls	r2, r3, #16
 8000de8:	797b      	ldrb	r3, [r7, #5]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	79b9      	ldrb	r1, [r7, #6]
 8000dee:	430b      	orrs	r3, r1
 8000df0:	4313      	orrs	r3, r2
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24001084 	.word	0x24001084
 8000e00:	58020000 	.word	0x58020000
 8000e04:	240011a0 	.word	0x240011a0

08000e08 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	80fb      	strh	r3, [r7, #6]
 8000e14:	4613      	mov	r3, r2
 8000e16:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000e18:	f7ff ff44 	bl	8000ca4 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Load_Program_Data;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <Write_Data_Buffer+0x6c>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <Write_Data_Buffer+0x6c>)
 8000e2c:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <Write_Data_Buffer+0x6c>)
 8000e34:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	480f      	ldr	r0, [pc, #60]	@ (8000e78 <Write_Data_Buffer+0x70>)
 8000e3c:	f002 fc54 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer, 3, 100);
 8000e40:	2364      	movs	r3, #100	@ 0x64
 8000e42:	2203      	movs	r2, #3
 8000e44:	490b      	ldr	r1, [pc, #44]	@ (8000e74 <Write_Data_Buffer+0x6c>)
 8000e46:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <Write_Data_Buffer+0x74>)
 8000e48:	f005 fbd8 	bl	80065fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000e4c:	88ba      	ldrh	r2, [r7, #4]
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	6839      	ldr	r1, [r7, #0]
 8000e54:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <Write_Data_Buffer+0x74>)
 8000e56:	f005 fbd1 	bl	80065fc <HAL_SPI_Transmit>
	csHIGH();
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <Write_Data_Buffer+0x70>)
 8000e60:	f002 fc42 	bl	80036e8 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000e64:	2064      	movs	r0, #100	@ 0x64
 8000e66:	f000 f8d9 	bl	800101c <delay_ns>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24001084 	.word	0x24001084
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	240011a0 	.word	0x240011a0

08000e80 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000e8a:	f7ff ff0b 	bl	8000ca4 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Program_Ex;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <Write_Data_Flash+0x5c>)
 8000e90:	2210      	movs	r2, #16
 8000e92:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <Write_Data_Flash+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <Write_Data_Flash+0x5c>)
 8000ea4:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <Write_Data_Flash+0x5c>)
 8000eac:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <Write_Data_Flash+0x60>)
 8000eb4:	f002 fc18 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer, 4, 100);
 8000eb8:	2364      	movs	r3, #100	@ 0x64
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <Write_Data_Flash+0x5c>)
 8000ebe:	4809      	ldr	r0, [pc, #36]	@ (8000ee4 <Write_Data_Flash+0x64>)
 8000ec0:	f005 fb9c 	bl	80065fc <HAL_SPI_Transmit>
	csHIGH();
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <Write_Data_Flash+0x60>)
 8000eca:	f002 fc0d 	bl	80036e8 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000ece:	f000 f8f5 	bl	80010bc <W25N_WaitForReady>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24001084 	.word	0x24001084
 8000ee0:	58020000 	.word	0x58020000
 8000ee4:	240011a0 	.word	0x240011a0

08000ee8 <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
	SPI.Tx_Buffer[0]=OP_Page_Data_Read;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <Select_Page_Read+0x58>)
 8000ef4:	2213      	movs	r2, #19
 8000ef6:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <Select_Page_Read+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <Select_Page_Read+0x58>)
 8000f08:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <Select_Page_Read+0x58>)
 8000f10:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f12:	2200      	movs	r2, #0
 8000f14:	2110      	movs	r1, #16
 8000f16:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <Select_Page_Read+0x5c>)
 8000f18:	f002 fbe6 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer,4,100);
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4907      	ldr	r1, [pc, #28]	@ (8000f40 <Select_Page_Read+0x58>)
 8000f22:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <Select_Page_Read+0x60>)
 8000f24:	f005 fb6a 	bl	80065fc <HAL_SPI_Transmit>
	csHIGH();
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <Select_Page_Read+0x5c>)
 8000f2e:	f002 fbdb 	bl	80036e8 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000f32:	f000 f8c3 	bl	80010bc <W25N_WaitForReady>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24001084 	.word	0x24001084
 8000f44:	58020000 	.word	0x58020000
 8000f48:	240011a0 	.word	0x240011a0

08000f4c <Read_Data_Buffer>:

/*Read data from selected page
NB: First use Select_Page_Read to select page*/
void Read_Data_Buffer(uint8_t *Data, uint16_t len){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
	SPI.Tx_Buffer[0]=OP_Read_Data;
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <Read_Data_Buffer+0x5c>)
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <Read_Data_Buffer+0x5c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=0x00;
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <Read_Data_Buffer+0x5c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=0x00;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <Read_Data_Buffer+0x5c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	480d      	ldr	r0, [pc, #52]	@ (8000fac <Read_Data_Buffer+0x60>)
 8000f76:	f002 fbb7 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer,4,100);
 8000f7a:	2364      	movs	r3, #100	@ 0x64
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	490a      	ldr	r1, [pc, #40]	@ (8000fa8 <Read_Data_Buffer+0x5c>)
 8000f80:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <Read_Data_Buffer+0x64>)
 8000f82:	f005 fb3b 	bl	80065fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data, len, HAL_MAX_DELAY);
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <Read_Data_Buffer+0x64>)
 8000f90:	f005 fd22 	bl	80069d8 <HAL_SPI_Receive>
	csHIGH();
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <Read_Data_Buffer+0x60>)
 8000f9a:	f002 fba5 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	24001084 	.word	0x24001084
 8000fac:	58020000 	.word	0x58020000
 8000fb0:	240011a0 	.word	0x240011a0

08000fb4 <Block_Erase>:

/*Erase Block where page is located
Page_Addr-> Address to page, where the block which includes page is erased*/
void Block_Erase(uint16_t Page_Addr){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000fbe:	f7ff fe71 	bl	8000ca4 <Write_Enable>
	SPI.Tx_Buffer[0]=OP_Block_Erase;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <Block_Erase+0x5c>)
 8000fc4:	22d8      	movs	r2, #216	@ 0xd8
 8000fc6:	701a      	strb	r2, [r3, #0]
	SPI.Tx_Buffer[1]=0x00;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <Block_Erase+0x5c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]
	SPI.Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <Block_Erase+0x5c>)
 8000fd8:	709a      	strb	r2, [r3, #2]
	SPI.Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <Block_Erase+0x5c>)
 8000fe0:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <Block_Erase+0x60>)
 8000fe8:	f002 fb7e 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, SPI.Tx_Buffer, 4, 100);
 8000fec:	2364      	movs	r3, #100	@ 0x64
 8000fee:	2204      	movs	r2, #4
 8000ff0:	4907      	ldr	r1, [pc, #28]	@ (8001010 <Block_Erase+0x5c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	@ (8001018 <Block_Erase+0x64>)
 8000ff4:	f005 fb02 	bl	80065fc <HAL_SPI_Transmit>
	csHIGH();
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <Block_Erase+0x60>)
 8000ffe:	f002 fb73 	bl	80036e8 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8001002:	f000 f85b 	bl	80010bc <W25N_WaitForReady>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24001084 	.word	0x24001084
 8001014:	58020000 	.word	0x58020000
 8001018:	240011a0 	.word	0x240011a0

0800101c <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <delay_ns+0x48>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	0a5b      	lsrs	r3, r3, #9
 800102a:	4a0f      	ldr	r2, [pc, #60]	@ (8001068 <delay_ns+0x4c>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	09db      	lsrs	r3, r3, #7
 8001032:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8001034:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <delay_ns+0x50>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8001044:	bf00      	nop
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <delay_ns+0x50>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f8      	bhi.n	8001046 <delay_ns+0x2a>
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	24001008 	.word	0x24001008
 8001068:	00044b83 	.word	0x00044b83
 800106c:	e0001000 	.word	0xe0001000

08001070 <USART3_Printf>:

void USART3_Printf(const char *format, ...) {
 8001070:	b40f      	push	{r0, r1, r2, r3}
 8001072:	b580      	push	{r7, lr}
 8001074:	b0a2      	sub	sp, #136	@ 0x88
 8001076:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8001078:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800107c:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800107e:	f107 0008 	add.w	r0, r7, #8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	f007 fa61 	bl	8008550 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f924 	bl	80002e0 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 0108 	add.w	r1, r7, #8
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <USART3_Printf+0x48>)
 80010a6:	f006 f842 	bl	800712e <HAL_UART_Transmit>
}
 80010aa:	bf00      	nop
 80010ac:	3788      	adds	r7, #136	@ 0x88
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b4:	b004      	add	sp, #16
 80010b6:	4770      	bx	lr
 80010b8:	24001228 	.word	0x24001228

080010bc <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 80010c0:	2064      	movs	r0, #100	@ 0x64
 80010c2:	f7ff ffab 	bl	800101c <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80010c6:	e002      	b.n	80010ce <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 80010c8:	2064      	movs	r0, #100	@ 0x64
 80010ca:	f7ff ffa7 	bl	800101c <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <W25N_WaitForReady+0x2c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fe06 	bl	8000ce4 <Read_Status_Register>
 80010d8:	4603      	mov	r3, r0
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f2      	bne.n	80010c8 <W25N_WaitForReady+0xc>
    }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24001006 	.word	0x24001006

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 fe44 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f860 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fa06 	bl	8001508 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010fc:	f000 f962 	bl	80013c4 <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8001100:	f000 f8d6 	bl	80012b0 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8001104:	f000 f9b4 	bl	8001470 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001108:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <main+0xb4>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a24      	ldr	r2, [pc, #144]	@ (80011a0 <main+0xb4>)
 800110e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001112:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8001114:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <main+0xb8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <main+0xb8>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff faff 	bl	8000724 <Flash_Init>
  ID=Read_ID();
 8001126:	f7ff fe3b 	bl	8000da0 <Read_ID>
 800112a:	4603      	mov	r3, r0
 800112c:	4a1e      	ldr	r2, [pc, #120]	@ (80011a8 <main+0xbc>)
 800112e:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  Read_Register();
 8001130:	f7ff fbd2 	bl	80008d8 <Read_Register>
	  HAL_UART_Receive(&huart3, &command,1, 100);
 8001134:	2364      	movs	r3, #100	@ 0x64
 8001136:	2201      	movs	r2, #1
 8001138:	491c      	ldr	r1, [pc, #112]	@ (80011ac <main+0xc0>)
 800113a:	481d      	ldr	r0, [pc, #116]	@ (80011b0 <main+0xc4>)
 800113c:	f006 f885 	bl	800724a <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <main+0xc0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b31      	cmp	r3, #49	@ 0x31
 8001146:	d105      	bne.n	8001154 <main+0x68>
		  Read_Data_Cont(16);
 8001148:	2010      	movs	r0, #16
 800114a:	f7ff fd19 	bl	8000b80 <Read_Data_Cont>
		  command = 0;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <main+0xc0>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <main+0xc0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b32      	cmp	r3, #50	@ 0x32
 800115a:	d109      	bne.n	8001170 <main+0x84>
		  Start_Flight_Recording=1;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <main+0xc8>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8001162:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001166:	f7ff faa9 	bl	80006bc <CAN_SendMessage>
		  command=0;
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <main+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8001170:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <main+0xc0>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b33      	cmp	r3, #51	@ 0x33
 8001176:	d109      	bne.n	800118c <main+0xa0>
		  Start_Flight_Recording=0;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <main+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 800117e:	f240 1001 	movw	r0, #257	@ 0x101
 8001182:	f7ff fa9b 	bl	80006bc <CAN_SendMessage>
		  command=0;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <main+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <main+0xc0>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b34      	cmp	r3, #52	@ 0x34
 8001192:	d1cd      	bne.n	8001130 <main+0x44>
		  Chip_Erase();
 8001194:	f7ff fc8e 	bl	8000ab4 <Chip_Erase>
		  command=0;
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <main+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 800119e:	e7c7      	b.n	8001130 <main+0x44>
 80011a0:	e000edf0 	.word	0xe000edf0
 80011a4:	e0001000 	.word	0xe0001000
 80011a8:	240010a8 	.word	0x240010a8
 80011ac:	240010a4 	.word	0x240010a4
 80011b0:	24001228 	.word	0x24001228
 80011b4:	2400108e 	.word	0x2400108e

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09c      	sub	sp, #112	@ 0x70
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c2:	224c      	movs	r2, #76	@ 0x4c
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f007 f9d0 	bl	800856c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2220      	movs	r2, #32
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f007 f9ca 	bl	800856c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011d8:	2002      	movs	r0, #2
 80011da:	f002 fa9f 	bl	800371c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <SystemClock_Config+0xf0>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a30      	ldr	r2, [pc, #192]	@ (80012a8 <SystemClock_Config+0xf0>)
 80011e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b2e      	ldr	r3, [pc, #184]	@ (80012a8 <SystemClock_Config+0xf0>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <SystemClock_Config+0xf4>)
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	4a2b      	ldr	r2, [pc, #172]	@ (80012ac <SystemClock_Config+0xf4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001204:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <SystemClock_Config+0xf4>)
 8001206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001210:	bf00      	nop
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <SystemClock_Config+0xf0>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800121a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800121e:	d1f8      	bne.n	8001212 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001224:	2301      	movs	r3, #1
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	2340      	movs	r3, #64	@ 0x40
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001238:	233c      	movs	r3, #60	@ 0x3c
 800123a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001240:	230a      	movs	r3, #10
 8001242:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001248:	230c      	movs	r3, #12
 800124a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800124c:	2300      	movs	r3, #0
 800124e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fa99 	bl	8003790 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001264:	f000 fa20 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	233f      	movs	r3, #63	@ 0x3f
 800126a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2303      	movs	r3, #3
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001274:	2308      	movs	r3, #8
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001278:	2340      	movs	r3, #64	@ 0x40
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800127c:	2340      	movs	r3, #64	@ 0x40
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001284:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001286:	2340      	movs	r3, #64	@ 0x40
 8001288:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fed8 	bl	8004044 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800129a:	f000 fa05 	bl	80016a8 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3770      	adds	r7, #112	@ 0x70
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	58024800 	.word	0x58024800
 80012ac:	58000400 	.word	0x58000400

080012b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 80012b6:	4b40      	ldr	r3, [pc, #256]	@ (80013b8 <MX_FDCAN1_Init+0x108>)
 80012b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012bc:	4a3e      	ldr	r2, [pc, #248]	@ (80013b8 <MX_FDCAN1_Init+0x108>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80012c6:	4b3c      	ldr	r3, [pc, #240]	@ (80013b8 <MX_FDCAN1_Init+0x108>)
 80012c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012d4:	4b39      	ldr	r3, [pc, #228]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012d6:	4a3a      	ldr	r2, [pc, #232]	@ (80013c0 <MX_FDCAN1_Init+0x110>)
 80012d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012e0:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012e6:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012ec:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012f2:	4b32      	ldr	r3, [pc, #200]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80012fe:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001300:	2202      	movs	r2, #2
 8001302:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001304:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001306:	2205      	movs	r2, #5
 8001308:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800130a:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800130c:	2202      	movs	r2, #2
 800130e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001312:	2201      	movs	r2, #1
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001316:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001318:	2203      	movs	r2, #3
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800131e:	2204      	movs	r2, #4
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001324:	2203      	movs	r2, #3
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800132a:	2200      	movs	r2, #0
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800132e:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001330:	2200      	movs	r2, #0
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001334:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001336:	2200      	movs	r2, #0
 8001338:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800133c:	2240      	movs	r2, #64	@ 0x40
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001340:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001342:	2204      	movs	r2, #4
 8001344:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001348:	2200      	movs	r2, #0
 800134a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800134e:	2204      	movs	r2, #4
 8001350:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001354:	2200      	movs	r2, #0
 8001356:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800135a:	2204      	movs	r2, #4
 800135c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001360:	2200      	movs	r2, #0
 8001362:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001366:	2200      	movs	r2, #0
 8001368:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800136c:	2202      	movs	r2, #2
 800136e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001372:	2200      	movs	r2, #0
 8001374:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 8001378:	2204      	movs	r2, #4
 800137a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800137c:	480f      	ldr	r0, [pc, #60]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800137e:	f000 feab 	bl	80020d8 <HAL_FDCAN_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 8001388:	f000 f98e 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800138c:	480b      	ldr	r0, [pc, #44]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 800138e:	f001 f881 	bl	8002494 <HAL_FDCAN_Start>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_FDCAN1_Init+0xec>
      Error_Handler();
 8001398:	f000 f986 	bl	80016a8 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800139c:	2200      	movs	r2, #0
 800139e:	2101      	movs	r1, #1
 80013a0:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_FDCAN1_Init+0x10c>)
 80013a2:	f001 fa69 	bl	8002878 <HAL_FDCAN_ActivateNotification>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 80013ac:	f000 f97c 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400
 80013bc:	24001100 	.word	0x24001100
 80013c0:	4000a000 	.word	0x4000a000

080013c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c8:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013ca:	4a28      	ldr	r2, [pc, #160]	@ (800146c <MX_SPI1_Init+0xa8>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d6:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013de:	2207      	movs	r2, #7
 80013e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_SPI1_Init+0xa4>)
 80013f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001418:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <MX_SPI1_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_SPI1_Init+0xa4>)
 8001456:	f004 ffad 	bl	80063b4 <HAL_SPI_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001460:	f000 f922 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	240011a0 	.word	0x240011a0
 800146c:	40013000 	.word	0x40013000

08001470 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001476:	4a23      	ldr	r2, [pc, #140]	@ (8001504 <MX_USART3_UART_Init+0x94>)
 8001478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b8:	4811      	ldr	r0, [pc, #68]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014ba:	f005 fde8 	bl	800708e <HAL_UART_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014c4:	f000 f8f0 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c8:	2100      	movs	r1, #0
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014cc:	f006 ff47 	bl	800835e <HAL_UARTEx_SetTxFifoThreshold>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014d6:	f000 f8e7 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014de:	f006 ff7c 	bl	80083da <HAL_UARTEx_SetRxFifoThreshold>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014e8:	f000 f8de 	bl	80016a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_USART3_UART_Init+0x90>)
 80014ee:	f006 fefd 	bl	80082ec <HAL_UARTEx_DisableFifoMode>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f000 f8d6 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	24001228 	.word	0x24001228
 8001504:	40004800 	.word	0x40004800

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	@ 0x30
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	4b5d      	ldr	r3, [pc, #372]	@ (8001694 <MX_GPIO_Init+0x18c>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	4a5b      	ldr	r2, [pc, #364]	@ (8001694 <MX_GPIO_Init+0x18c>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152e:	4b59      	ldr	r3, [pc, #356]	@ (8001694 <MX_GPIO_Init+0x18c>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153c:	4b55      	ldr	r3, [pc, #340]	@ (8001694 <MX_GPIO_Init+0x18c>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	4a54      	ldr	r2, [pc, #336]	@ (8001694 <MX_GPIO_Init+0x18c>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154c:	4b51      	ldr	r3, [pc, #324]	@ (8001694 <MX_GPIO_Init+0x18c>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b4e      	ldr	r3, [pc, #312]	@ (8001694 <MX_GPIO_Init+0x18c>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001560:	4a4c      	ldr	r2, [pc, #304]	@ (8001694 <MX_GPIO_Init+0x18c>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156a:	4b4a      	ldr	r3, [pc, #296]	@ (8001694 <MX_GPIO_Init+0x18c>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b46      	ldr	r3, [pc, #280]	@ (8001694 <MX_GPIO_Init+0x18c>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157e:	4a45      	ldr	r2, [pc, #276]	@ (8001694 <MX_GPIO_Init+0x18c>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001588:	4b42      	ldr	r3, [pc, #264]	@ (8001694 <MX_GPIO_Init+0x18c>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <MX_GPIO_Init+0x18c>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159c:	4a3d      	ldr	r2, [pc, #244]	@ (8001694 <MX_GPIO_Init+0x18c>)
 800159e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <MX_GPIO_Init+0x18c>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b4:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <MX_GPIO_Init+0x18c>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ba:	4a36      	ldr	r2, [pc, #216]	@ (8001694 <MX_GPIO_Init+0x18c>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c4:	4b33      	ldr	r3, [pc, #204]	@ (8001694 <MX_GPIO_Init+0x18c>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <MX_GPIO_Init+0x18c>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001694 <MX_GPIO_Init+0x18c>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001694 <MX_GPIO_Init+0x18c>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2110      	movs	r1, #16
 80015f4:	4828      	ldr	r0, [pc, #160]	@ (8001698 <MX_GPIO_Init+0x190>)
 80015f6:	f002 f877 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001600:	4826      	ldr	r0, [pc, #152]	@ (800169c <MX_GPIO_Init+0x194>)
 8001602:	f002 f871 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	4825      	ldr	r0, [pc, #148]	@ (80016a0 <MX_GPIO_Init+0x198>)
 800160c:	f002 f86c 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2E1_GPIO_Port, LD2E1_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2102      	movs	r1, #2
 8001614:	4823      	ldr	r0, [pc, #140]	@ (80016a4 <MX_GPIO_Init+0x19c>)
 8001616:	f002 f867 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 800161a:	2310      	movs	r3, #16
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4819      	ldr	r0, [pc, #100]	@ (8001698 <MX_GPIO_Init+0x190>)
 8001632:	f001 fea9 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001636:	f244 0381 	movw	r3, #16513	@ 0x4081
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4813      	ldr	r0, [pc, #76]	@ (800169c <MX_GPIO_Init+0x194>)
 8001650:	f001 fe9a 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <MX_GPIO_Init+0x198>)
 800166c:	f001 fe8c 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2E1_Pin */
  GPIO_InitStruct.Pin = LD2E1_Pin;
 8001670:	2302      	movs	r3, #2
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2E1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_GPIO_Init+0x19c>)
 8001688:	f001 fe7e 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	@ 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	58024400 	.word	0x58024400
 8001698:	58020000 	.word	0x58020000
 800169c:	58020400 	.word	0x58020400
 80016a0:	58021800 	.word	0x58021800
 80016a4:	58021000 	.word	0x58021000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <Error_Handler+0x10>)
 80016ae:	f000 fef1 	bl	8002494 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	24001100 	.word	0x24001100

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_MspInit+0x30>)
 80016c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <HAL_MspInit+0x30>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_MspInit+0x30>)
 80016d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	58024400 	.word	0x58024400

080016f0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0ba      	sub	sp, #232	@ 0xe8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	22c0      	movs	r2, #192	@ 0xc0
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f006 ff2b 	bl	800856c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a33      	ldr	r2, [pc, #204]	@ (80017e8 <HAL_FDCAN_MspInit+0xf8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d15e      	bne.n	80017de <HAL_FDCAN_MspInit+0xee>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001720:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001730:	230a      	movs	r3, #10
 8001732:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001738:	2314      	movs	r3, #20
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800173c:	2302      	movs	r3, #2
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001740:	23c0      	movs	r3, #192	@ 0xc0
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001744:	2320      	movs	r3, #32
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800174c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001750:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4618      	mov	r0, r3
 800175a:	f002 ffff 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001764:	f7ff ffa0 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001768:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_FDCAN_MspInit+0xfc>)
 800176a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800176e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <HAL_FDCAN_MspInit+0xfc>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001774:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <HAL_FDCAN_MspInit+0xfc>)
 800177a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800177e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_FDCAN_MspInit+0xfc>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <HAL_FDCAN_MspInit+0xfc>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_FDCAN_MspInit+0xfc>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017a4:	2303      	movs	r3, #3
 80017a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80017bc:	2309      	movs	r3, #9
 80017be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <HAL_FDCAN_MspInit+0x100>)
 80017ca:	f001 fddd 	bl	8003388 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2013      	movs	r0, #19
 80017d4:	f000 fc4b 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80017d8:	2013      	movs	r0, #19
 80017da:	f000 fc62 	bl	80020a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80017de:	bf00      	nop
 80017e0:	37e8      	adds	r7, #232	@ 0xe8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	4000a000 	.word	0x4000a000
 80017ec:	58024400 	.word	0x58024400
 80017f0:	58020c00 	.word	0x58020c00

080017f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0bc      	sub	sp, #240	@ 0xf0
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800180c:	f107 0318 	add.w	r3, r7, #24
 8001810:	22c0      	movs	r2, #192	@ 0xc0
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f006 fea9 	bl	800856c <memset>
  if(hspi->Instance==SPI1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a38      	ldr	r2, [pc, #224]	@ (8001900 <HAL_SPI_MspInit+0x10c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d168      	bne.n	80018f6 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001824:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001830:	2300      	movs	r3, #0
 8001832:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001834:	f107 0318 	add.w	r3, r7, #24
 8001838:	4618      	mov	r0, r3
 800183a:	f002 ff8f 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001844:	f7ff ff30 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001848:	4b2e      	ldr	r3, [pc, #184]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 800184a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800184e:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001854:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 800185a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186c:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	4a1e      	ldr	r2, [pc, #120]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_SPI_MspInit+0x110>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018a2:	2360      	movs	r3, #96	@ 0x60
 80018a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ba:	2305      	movs	r3, #5
 80018bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018c4:	4619      	mov	r1, r3
 80018c6:	4810      	ldr	r0, [pc, #64]	@ (8001908 <HAL_SPI_MspInit+0x114>)
 80018c8:	f001 fd5e 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018cc:	2320      	movs	r3, #32
 80018ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018e4:	2305      	movs	r3, #5
 80018e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018ee:	4619      	mov	r1, r3
 80018f0:	4806      	ldr	r0, [pc, #24]	@ (800190c <HAL_SPI_MspInit+0x118>)
 80018f2:	f001 fd49 	bl	8003388 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018f6:	bf00      	nop
 80018f8:	37f0      	adds	r7, #240	@ 0xf0
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40013000 	.word	0x40013000
 8001904:	58024400 	.word	0x58024400
 8001908:	58020000 	.word	0x58020000
 800190c:	58020400 	.word	0x58020400

08001910 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0ba      	sub	sp, #232	@ 0xe8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	22c0      	movs	r2, #192	@ 0xc0
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f006 fe1b 	bl	800856c <memset>
  if(huart->Instance==USART3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a27      	ldr	r2, [pc, #156]	@ (80019d8 <HAL_UART_MspInit+0xc8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d146      	bne.n	80019ce <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001940:	f04f 0202 	mov.w	r2, #2
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4618      	mov	r0, r3
 8001958:	f002 ff00 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001962:	f7ff fea1 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_UART_MspInit+0xcc>)
 8001968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800196c:	4a1b      	ldr	r2, [pc, #108]	@ (80019dc <HAL_UART_MspInit+0xcc>)
 800196e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001972:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <HAL_UART_MspInit+0xcc>)
 8001978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800197c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_UART_MspInit+0xcc>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198a:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <HAL_UART_MspInit+0xcc>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_UART_MspInit+0xcc>)
 8001996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019bc:	2307      	movs	r3, #7
 80019be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <HAL_UART_MspInit+0xd0>)
 80019ca:	f001 fcdd 	bl	8003388 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80019ce:	bf00      	nop
 80019d0:	37e8      	adds	r7, #232	@ 0xe8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004800 	.word	0x40004800
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58020c00 	.word	0x58020c00

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <NMI_Handler+0x4>

080019ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <MemManage_Handler+0x4>

080019fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	GPIOG->ODR^=GPIO_PIN_0;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <SysTick_Handler+0x34>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <SysTick_Handler+0x34>)
 8001a42:	f083 0301 	eor.w	r3, r3, #1
 8001a46:	6153      	str	r3, [r2, #20]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 fa0a 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <SysTick_Handler+0x38>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <SysTick_Handler+0x28>
	  CLK_SIM++;
 8001a54:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <SysTick_Handler+0x3c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a06      	ldr	r2, [pc, #24]	@ (8001a74 <SysTick_Handler+0x3c>)
 8001a5c:	6013      	str	r3, [r2, #0]
  }
  else{
	  CLK_SIM=0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5e:	e002      	b.n	8001a66 <SysTick_Handler+0x2e>
	  CLK_SIM=0;
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <SysTick_Handler+0x3c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	58021800 	.word	0x58021800
 8001a70:	2400108e 	.word	0x2400108e
 8001a74:	240012bc 	.word	0x240012bc

08001a78 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <FDCAN1_IT0_IRQHandler+0x10>)
 8001a7e:	f000 ff75 	bl	800296c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	24001100 	.word	0x24001100

08001a8c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001a96:	e03f      	b.n	8001b18 <HAL_FDCAN_RxFifo0Callback+0x8c>
		uint8_t Temp[16];

		//Start byte
		Temp[0]=0xF0;
 8001a98:	23f0      	movs	r3, #240	@ 0xf0
 8001a9a:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 8001aaa:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 8001ab0:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001ab2:	785b      	ldrb	r3, [r3, #1]
 8001ab4:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001ab8:	789b      	ldrb	r3, [r3, #2]
 8001aba:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 8001abc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001abe:	78db      	ldrb	r3, [r3, #3]
 8001ac0:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001aca:	795b      	ldrb	r3, [r3, #5]
 8001acc:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001ad0:	799b      	ldrb	r3, [r3, #6]
 8001ad2:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001ad6:	79db      	ldrb	r3, [r3, #7]
 8001ad8:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0e1b      	lsrs	r3, r3, #24
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	75bb      	strb	r3, [r7, #22]

		//Stop bytez
		Temp[15]=0x0F;
 8001b00:	230f      	movs	r3, #15
 8001b02:	75fb      	strb	r3, [r7, #23]

		//Write to flash
		if(Start_Flight_Recording==1){
 8001b04:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_FDCAN_RxFifo0Callback+0x8c>
			Write_Data(Temp, sizeof(Temp));
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	2110      	movs	r1, #16
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe ff14 	bl	8000940 <Write_Data>
	while(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001b18:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8001b1a:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001b1c:	2140      	movs	r1, #64	@ 0x40
 8001b1e:	4809      	ldr	r0, [pc, #36]	@ (8001b44 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b20:	f000 fd3e 	bl	80025a0 <HAL_FDCAN_GetRxMessage>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0b6      	beq.n	8001a98 <HAL_FDCAN_RxFifo0Callback+0xc>
		}
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	240010b4 	.word	0x240010b4
 8001b38:	2400109c 	.word	0x2400109c
 8001b3c:	240012bc 	.word	0x240012bc
 8001b40:	2400108e 	.word	0x2400108e
 8001b44:	24001100 	.word	0x24001100

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f006 fd00 	bl	800857c <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	24080000 	.word	0x24080000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	240012c0 	.word	0x240012c0
 8001bb0:	24001410 	.word	0x24001410

08001bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <SystemInit+0x114>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a42      	ldr	r2, [pc, #264]	@ (8001cc8 <SystemInit+0x114>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc8:	4b40      	ldr	r3, [pc, #256]	@ (8001ccc <SystemInit+0x118>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	2b06      	cmp	r3, #6
 8001bd2:	d807      	bhi.n	8001be4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ccc <SystemInit+0x118>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ccc <SystemInit+0x118>)
 8001bde:	f043 0307 	orr.w	r3, r3, #7
 8001be2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001be4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd0 <SystemInit+0x11c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a39      	ldr	r2, [pc, #228]	@ (8001cd0 <SystemInit+0x11c>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bf0:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <SystemInit+0x11c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bf6:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <SystemInit+0x11c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4935      	ldr	r1, [pc, #212]	@ (8001cd0 <SystemInit+0x11c>)
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <SystemInit+0x120>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c02:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <SystemInit+0x118>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ccc <SystemInit+0x118>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 030f 	bic.w	r3, r3, #15
 8001c16:	4a2d      	ldr	r2, [pc, #180]	@ (8001ccc <SystemInit+0x118>)
 8001c18:	f043 0307 	orr.w	r3, r3, #7
 8001c1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <SystemInit+0x11c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c24:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <SystemInit+0x11c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <SystemInit+0x11c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c30:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <SystemInit+0x11c>)
 8001c32:	4a29      	ldr	r2, [pc, #164]	@ (8001cd8 <SystemInit+0x124>)
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <SystemInit+0x11c>)
 8001c38:	4a28      	ldr	r2, [pc, #160]	@ (8001cdc <SystemInit+0x128>)
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c3c:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <SystemInit+0x11c>)
 8001c3e:	4a28      	ldr	r2, [pc, #160]	@ (8001ce0 <SystemInit+0x12c>)
 8001c40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c42:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <SystemInit+0x11c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c48:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <SystemInit+0x11c>)
 8001c4a:	4a25      	ldr	r2, [pc, #148]	@ (8001ce0 <SystemInit+0x12c>)
 8001c4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <SystemInit+0x11c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <SystemInit+0x11c>)
 8001c56:	4a22      	ldr	r2, [pc, #136]	@ (8001ce0 <SystemInit+0x12c>)
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <SystemInit+0x11c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <SystemInit+0x11c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd0 <SystemInit+0x11c>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <SystemInit+0x11c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <SystemInit+0x130>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <SystemInit+0x134>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c7e:	d202      	bcs.n	8001c86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <SystemInit+0x138>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <SystemInit+0x11c>)
 8001c88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d113      	bne.n	8001cbc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <SystemInit+0x11c>)
 8001c96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <SystemInit+0x11c>)
 8001c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <SystemInit+0x13c>)
 8001ca6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001caa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <SystemInit+0x11c>)
 8001cae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cb2:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <SystemInit+0x11c>)
 8001cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cb8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00
 8001ccc:	52002000 	.word	0x52002000
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cd8:	02020200 	.word	0x02020200
 8001cdc:	01ff0000 	.word	0x01ff0000
 8001ce0:	01010280 	.word	0x01010280
 8001ce4:	5c001000 	.word	0x5c001000
 8001ce8:	ffff0000 	.word	0xffff0000
 8001cec:	51008108 	.word	0x51008108
 8001cf0:	52004000 	.word	0x52004000

08001cf4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <ExitRun0Mode+0x2c>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <ExitRun0Mode+0x2c>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001d04:	bf00      	nop
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <ExitRun0Mode+0x2c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f9      	beq.n	8001d06 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	58024800 	.word	0x58024800

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001d60 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001d28:	f7ff ffe4 	bl	8001cf4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d2c:	f7ff ff42 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d32:	490d      	ldr	r1, [pc, #52]	@ (8001d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d48:	4c0a      	ldr	r4, [pc, #40]	@ (8001d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d56:	f006 fc17 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff f9c7 	bl	80010ec <main>
  bx  lr
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d68:	24001068 	.word	0x24001068
  ldr r2, =_sidata
 8001d6c:	08008ffc 	.word	0x08008ffc
  ldr r2, =_sbss
 8001d70:	24001068 	.word	0x24001068
  ldr r4, =_ebss
 8001d74:	24001410 	.word	0x24001410

08001d78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC3_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d82:	2003      	movs	r0, #3
 8001d84:	f000 f968 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d88:	f002 fb12 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_Init+0x68>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	4913      	ldr	r1, [pc, #76]	@ (8001de8 <HAL_Init+0x6c>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001da6:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <HAL_Init+0x68>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	4a0e      	ldr	r2, [pc, #56]	@ (8001de8 <HAL_Init+0x6c>)
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <HAL_Init+0x70>)
 8001dbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <HAL_Init+0x74>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 f814 	bl	8001df4 <HAL_InitTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e002      	b.n	8001ddc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd6:	f7ff fc71 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58024400 	.word	0x58024400
 8001de8:	08008f70 	.word	0x08008f70
 8001dec:	2400100c 	.word	0x2400100c
 8001df0:	24001008 	.word	0x24001008

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_InitTick+0x60>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e021      	b.n	8001e4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e08:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <HAL_InitTick+0x64>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <HAL_InitTick+0x60>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f94d 	bl	80020be <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00e      	b.n	8001e4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d80a      	bhi.n	8001e4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f000 f917 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e40:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <HAL_InitTick+0x68>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	24001014 	.word	0x24001014
 8001e58:	24001008 	.word	0x24001008
 8001e5c:	24001010 	.word	0x24001010

08001e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_IncTick+0x20>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x24>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <HAL_IncTick+0x24>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	24001014 	.word	0x24001014
 8001e84:	240012c4 	.word	0x240012c4

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	240012c4 	.word	0x240012c4

08001ea0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_GetREVID+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0c1b      	lsrs	r3, r3, #16
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	5c001000 	.word	0x5c001000

08001eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00
 8001efc:	05fa0000 	.word	0x05fa0000

08001f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f04:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <__NVIC_GetPriorityGrouping+0x18>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	f003 0307 	and.w	r3, r3, #7
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0b      	blt.n	8001f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4907      	ldr	r1, [pc, #28]	@ (8001f54 <__NVIC_EnableIRQ+0x38>)
 8001f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	@ (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	@ 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff29 	bl	8001eb8 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff40 	bl	8001f00 <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff90 	bl	8001fac <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5f 	bl	8001f58 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff33 	bl	8001f1c <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa4 	bl	8002014 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b098      	sub	sp, #96	@ 0x60
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80020e0:	4a84      	ldr	r2, [pc, #528]	@ (80022f4 <HAL_FDCAN_Init+0x21c>)
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	4611      	mov	r1, r2
 80020e8:	224c      	movs	r2, #76	@ 0x4c
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fa72 	bl	80085d4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1c6      	b.n	8002488 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7e      	ldr	r2, [pc, #504]	@ (80022f8 <HAL_FDCAN_Init+0x220>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d106      	bne.n	8002112 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fae2 	bl	80016f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0210 	bic.w	r2, r2, #16
 800213a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800213c:	f7ff fea4 	bl	8001e88 <HAL_GetTick>
 8002140:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002142:	e014      	b.n	800216e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002144:	f7ff fea0 	bl	8001e88 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b0a      	cmp	r3, #10
 8002150:	d90d      	bls.n	800216e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2203      	movs	r2, #3
 8002166:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e18c      	b.n	8002488 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b08      	cmp	r3, #8
 800217a:	d0e3      	beq.n	8002144 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218c:	f7ff fe7c 	bl	8001e88 <HAL_GetTick>
 8002190:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002192:	e014      	b.n	80021be <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002194:	f7ff fe78 	bl	8001e88 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b0a      	cmp	r3, #10
 80021a0:	d90d      	bls.n	80021be <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e164      	b.n	8002488 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0e3      	beq.n	8002194 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0202 	orr.w	r2, r2, #2
 80021da:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7c1b      	ldrb	r3, [r3, #16]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021f2:	619a      	str	r2, [r3, #24]
 80021f4:	e007      	b.n	8002206 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002204:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7c5b      	ldrb	r3, [r3, #17]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	e007      	b.n	8002230 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800222e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7c9b      	ldrb	r3, [r3, #18]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d108      	bne.n	800224a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002246:	619a      	str	r2, [r3, #24]
 8002248:	e007      	b.n	800225a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002258:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800227e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0210 	bic.w	r2, r2, #16
 800228e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d108      	bne.n	80022aa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0204 	orr.w	r2, r2, #4
 80022a6:	619a      	str	r2, [r3, #24]
 80022a8:	e030      	b.n	800230c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d02c      	beq.n	800230c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d020      	beq.n	80022fc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0210 	orr.w	r2, r2, #16
 80022d8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d114      	bne.n	800230c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0220 	orr.w	r2, r2, #32
 80022f0:	619a      	str	r2, [r3, #24]
 80022f2:	e00b      	b.n	800230c <HAL_FDCAN_Init+0x234>
 80022f4:	08008f24 	.word	0x08008f24
 80022f8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0220 	orr.w	r2, r2, #32
 800230a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	3b01      	subs	r3, #1
 8002312:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	3b01      	subs	r3, #1
 800231a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800231c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002324:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	3b01      	subs	r3, #1
 800232e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002334:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002336:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002340:	d115      	bne.n	800236e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	3b01      	subs	r3, #1
 800234e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002350:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	3b01      	subs	r3, #1
 8002358:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800235a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	3b01      	subs	r3, #1
 8002364:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800236a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800236c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	4413      	add	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d011      	beq.n	80023be <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80023a2:	f023 0107 	bic.w	r1, r3, #7
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3360      	adds	r3, #96	@ 0x60
 80023ae:	443b      	add	r3, r7
 80023b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d011      	beq.n	80023ea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80023ce:	f023 0107 	bic.w	r1, r3, #7
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3360      	adds	r3, #96	@ 0x60
 80023da:	443b      	add	r3, r7
 80023dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80023fa:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	3360      	adds	r3, #96	@ 0x60
 8002406:	443b      	add	r3, r7
 8002408:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800240c:	011a      	lsls	r2, r3, #4
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241c:	2b00      	cmp	r3, #0
 800241e:	d012      	beq.n	8002446 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002428:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	3360      	adds	r3, #96	@ 0x60
 8002434:	443b      	add	r3, r7
 8002436:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800243a:	021a      	lsls	r2, r3, #8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <HAL_FDCAN_Init+0x3b8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d107      	bne.n	8002460 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f022 0203 	bic.w	r2, r2, #3
 800245e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fd81 	bl	8002f80 <FDCAN_CalcultateRamBlockAddresses>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002484:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8002488:	4618      	mov	r0, r3
 800248a:	3760      	adds	r7, #96	@ 0x60
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	4000a000 	.word	0x4000a000

08002494 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d111      	bne.n	80024cc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e008      	b.n	80024de <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d141      	bne.n	8002586 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800250a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e038      	b.n	8002598 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800252e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800253c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e026      	b.n	8002598 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002552:	0c1b      	lsrs	r3, r3, #16
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fe93 	bl	800328c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2101      	movs	r1, #1
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002576:	2201      	movs	r2, #1
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e008      	b.n	8002598 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800258c:	f043 0208 	orr.w	r2, r3, #8
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b08b      	sub	sp, #44	@ 0x2c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80025b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80025ba:	7efb      	ldrb	r3, [r7, #27]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	f040 8149 	bne.w	8002854 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b40      	cmp	r3, #64	@ 0x40
 80025c6:	d14c      	bne.n	8002662 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80025d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025de:	f043 0220 	orr.w	r2, r3, #32
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e13c      	b.n	8002866 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002602:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e12a      	b.n	8002866 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800261c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002620:	d10a      	bne.n	8002638 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800262a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800262e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002632:	d101      	bne.n	8002638 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002634:	2301      	movs	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002654:	69f9      	ldr	r1, [r7, #28]
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002660:	e068      	b.n	8002734 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b41      	cmp	r3, #65	@ 0x41
 8002666:	d14c      	bne.n	8002702 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002670:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800267e:	f043 0220 	orr.w	r2, r3, #32
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0ec      	b.n	8002866 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0da      	b.n	8002866 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80026b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d10a      	bne.n	80026d8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80026ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026d2:	d101      	bne.n	80026d8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80026d4:	2301      	movs	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f4:	69f9      	ldr	r1, [r7, #28]
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002700:	e018      	b.n	8002734 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	d309      	bcc.n	8002720 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002712:	f043 0220 	orr.w	r2, r3, #32
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0a2      	b.n	8002866 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e005      	b.n	8002764 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	3304      	adds	r3, #4
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b29a      	uxth	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e1b      	lsrs	r3, r3, #24
 80027b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0fda      	lsrs	r2, r3, #31
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	3304      	adds	r3, #4
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	e00a      	b.n	80027f0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	441a      	add	r2, r3
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	440b      	add	r3, r1
 80027e6:	7812      	ldrb	r2, [r2, #0]
 80027e8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	3301      	adds	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d3ec      	bcc.n	80027da <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b40      	cmp	r3, #64	@ 0x40
 8002804:	d105      	bne.n	8002812 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8002810:	e01e      	b.n	8002850 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b41      	cmp	r3, #65	@ 0x41
 8002816:	d105      	bne.n	8002824 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8002822:	e015      	b.n	8002850 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b1f      	cmp	r3, #31
 8002828:	d808      	bhi.n	800283c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800283a:	e009      	b.n	8002850 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e008      	b.n	8002866 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800285a:	f043 0208 	orr.w	r2, r3, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	372c      	adds	r7, #44	@ 0x2c
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	08008f80 	.word	0x08008f80

08002878 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800288a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d002      	beq.n	8002898 <HAL_FDCAN_ActivateNotification+0x20>
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d155      	bne.n	8002944 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028b6:	e014      	b.n	80028e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d108      	bne.n	80028da <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0202 	orr.w	r2, r2, #2
 80028d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028d8:	e003      	b.n	80028e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2203      	movs	r2, #3
 80028e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	430a      	orrs	r2, r1
 800291a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <HAL_FDCAN_ActivateNotification+0xec>)
 8002928:	4013      	ands	r3, r2
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	430b      	orrs	r3, r1
 8002930:	6553      	str	r3, [r2, #84]	@ 0x54
 8002932:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	0f9b      	lsrs	r3, r3, #30
 800293a:	490b      	ldr	r1, [pc, #44]	@ (8002968 <HAL_FDCAN_ActivateNotification+0xf0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e008      	b.n	8002956 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800294a:	f043 0202 	orr.w	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	3fcfffff 	.word	0x3fcfffff
 8002968:	4000a800 	.word	0x4000a800

0800296c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b096      	sub	sp, #88	@ 0x58
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002974:	4b9a      	ldr	r3, [pc, #616]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	079b      	lsls	r3, r3, #30
 800297a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800297c:	4b98      	ldr	r3, [pc, #608]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	079b      	lsls	r3, r3, #30
 8002982:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002984:	4013      	ands	r3, r2
 8002986:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002992:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800299c:	4013      	ands	r3, r2
 800299e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029b4:	4013      	ands	r3, r2
 80029b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029cc:	4013      	ands	r3, r2
 80029ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80029da:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029e4:	4013      	ands	r3, r2
 80029e6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ee:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80029f2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029fc:	4013      	ands	r3, r2
 80029fe:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a30:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a32:	4b6b      	ldr	r3, [pc, #428]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fa54 	bl	8002ee6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a40:	0a9b      	lsrs	r3, r3, #10
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01d      	beq.n	8002a86 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4c:	0a9b      	lsrs	r3, r3, #10
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d017      	beq.n	8002a86 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a76:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a78:	4b59      	ldr	r3, [pc, #356]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002a7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fa07 	bl	8002e94 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a92:	4b54      	ldr	r3, [pc, #336]	@ (8002be4 <HAL_FDCAN_IRQHandler+0x278>)
 8002a94:	400b      	ands	r3, r1
 8002a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a98:	4a51      	ldr	r2, [pc, #324]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9c:	0f9b      	lsrs	r3, r3, #30
 8002a9e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002aa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f9c0 	bl	8002e28 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8002be4 <HAL_FDCAN_IRQHandler+0x278>)
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aba:	4a49      	ldr	r2, [pc, #292]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002abe:	0f9b      	lsrs	r3, r3, #30
 8002ac0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002ac2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f9ba 	bl	8002e3e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ad6:	4b43      	ldr	r3, [pc, #268]	@ (8002be4 <HAL_FDCAN_IRQHandler+0x278>)
 8002ad8:	400b      	ands	r3, r1
 8002ada:	6513      	str	r3, [r2, #80]	@ 0x50
 8002adc:	4a40      	ldr	r2, [pc, #256]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae0:	0f9b      	lsrs	r3, r3, #30
 8002ae2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002ae4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe ffd0 	bl	8001a8c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002af8:	4b3a      	ldr	r3, [pc, #232]	@ (8002be4 <HAL_FDCAN_IRQHandler+0x278>)
 8002afa:	400b      	ands	r3, r1
 8002afc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002afe:	4a38      	ldr	r2, [pc, #224]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b02:	0f9b      	lsrs	r3, r3, #30
 8002b04:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002b06:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f9a3 	bl	8002e54 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b10:	0adb      	lsrs	r3, r3, #11
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1c:	0adb      	lsrs	r3, r3, #11
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b30:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f997 	bl	8002e6a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b3e:	0a5b      	lsrs	r3, r3, #9
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01d      	beq.n	8002b84 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d017      	beq.n	8002b84 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b5c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b68:	4013      	ands	r3, r2
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b74:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b76:	4b1a      	ldr	r3, [pc, #104]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002b7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f97d 	bl	8002e7e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b86:	0cdb      	lsrs	r3, r3, #19
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b92:	0cdb      	lsrs	r3, r3, #19
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ba4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f97c 	bl	8002eaa <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bd4:	4b02      	ldr	r3, [pc, #8]	@ (8002be0 <HAL_FDCAN_IRQHandler+0x274>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	e004      	b.n	8002be8 <HAL_FDCAN_IRQHandler+0x27c>
 8002bde:	bf00      	nop
 8002be0:	4000a800 	.word	0x4000a800
 8002be4:	3fcfffff 	.word	0x3fcfffff
 8002be8:	f000 f969 	bl	8002ebe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bee:	0c9b      	lsrs	r3, r3, #18
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d010      	beq.n	8002c1a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002c0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c0e:	4b83      	ldr	r3, [pc, #524]	@ (8002e1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f95c 	bl	8002ed2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1c:	0c5b      	lsrs	r3, r3, #17
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c28:	0c5b      	lsrs	r3, r3, #17
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00f      	beq.n	8002c52 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c3c:	4b77      	ldr	r3, [pc, #476]	@ (8002e1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c5e:	4b70      	ldr	r3, [pc, #448]	@ (8002e20 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002c60:	400b      	ands	r3, r1
 8002c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c64:	4a6d      	ldr	r2, [pc, #436]	@ (8002e1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c68:	0f9b      	lsrs	r3, r3, #30
 8002c6a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002c6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f94d 	bl	8002f0e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d011      	beq.n	8002c9e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002c80:	4b67      	ldr	r3, [pc, #412]	@ (8002e20 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002c82:	400b      	ands	r3, r1
 8002c84:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c86:	4a65      	ldr	r2, [pc, #404]	@ (8002e1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8a:	0f9b      	lsrs	r3, r3, #30
 8002c8c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a60      	ldr	r2, [pc, #384]	@ (8002e24 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	f040 80ac 	bne.w	8002e02 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a4 	beq.w	8002e02 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cce:	4013      	ands	r3, r2
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfe:	4013      	ands	r3, r2
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8002d0c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	4013      	ands	r3, r2
 8002d18:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8002d24:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d4e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002d50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8e6 	bl	8002f24 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d64:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f8e6 	bl	8002f3a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01a      	beq.n	8002db0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d014      	beq.n	8002db0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d9c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2240      	movs	r2, #64	@ 0x40
 8002da4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8d0 	bl	8002f50 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002dbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f8d1 	bl	8002f68 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f874 	bl	8002efa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002e12:	bf00      	nop
 8002e14:	3758      	adds	r7, #88	@ 0x58
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	4000a800 	.word	0x4000a800
 8002e20:	3fcfffff 	.word	0x3fcfffff
 8002e24:	4000a000 	.word	0x4000a000

08002e28 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f96:	4ba7      	ldr	r3, [pc, #668]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	0091      	lsls	r1, r2, #2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	041a      	lsls	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fd6:	4b97      	ldr	r3, [pc, #604]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	0091      	lsls	r1, r2, #2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	041a      	lsls	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4413      	add	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003018:	4b86      	ldr	r3, [pc, #536]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800301a:	4013      	ands	r3, r2
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	0091      	lsls	r1, r2, #2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	430b      	orrs	r3, r1
 8003026:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003032:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	041a      	lsls	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4413      	add	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003060:	4b74      	ldr	r3, [pc, #464]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003062:	4013      	ands	r3, r2
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	0091      	lsls	r1, r2, #2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	430b      	orrs	r3, r1
 800306e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800307a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003082:	041a      	lsls	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80030a8:	4b62      	ldr	r3, [pc, #392]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	0091      	lsls	r1, r2, #2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	4413      	add	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030d4:	4b57      	ldr	r3, [pc, #348]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	0091      	lsls	r1, r2, #2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030ee:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	041a      	lsls	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003118:	4013      	ands	r3, r2
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	0091      	lsls	r1, r2, #2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	430b      	orrs	r3, r1
 8003124:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003130:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	041a      	lsls	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800314c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003154:	061a      	lsls	r2, r3, #24
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003166:	4413      	add	r3, r2
 8003168:	009a      	lsls	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	441a      	add	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	441a      	add	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	4a04      	ldr	r2, [pc, #16]	@ (800323c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d915      	bls.n	800325c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003230:	e006      	b.n	8003240 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003232:	bf00      	nop
 8003234:	ffff0003 	.word	0xffff0003
 8003238:	10002b00 	.word	0x10002b00
 800323c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2203      	movs	r2, #3
 8003254:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e010      	b.n	800327e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e005      	b.n	8003270 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	429a      	cmp	r2, r3
 800327a:	d3f3      	bcc.n	8003264 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	@ 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80032aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	e00a      	b.n	80032ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80032c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80032c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80032c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80032de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80032e4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	3304      	adds	r3, #4
 8003310:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	3304      	adds	r3, #4
 800331c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e020      	b.n	8003366 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3303      	adds	r3, #3
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3302      	adds	r3, #2
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	440b      	add	r3, r1
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800333c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	440b      	add	r3, r1
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800334a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	440a      	add	r2, r1
 8003352:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003354:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	3304      	adds	r3, #4
 800335e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3304      	adds	r3, #4
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4a06      	ldr	r2, [pc, #24]	@ (8003384 <FDCAN_CopyMessageToRAM+0xf8>)
 800336c:	5cd3      	ldrb	r3, [r2, r3]
 800336e:	461a      	mov	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	4293      	cmp	r3, r2
 8003374:	d3d6      	bcc.n	8003324 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	3724      	adds	r7, #36	@ 0x24
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	08008f80 	.word	0x08008f80

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003396:	4b89      	ldr	r3, [pc, #548]	@ (80035bc <HAL_GPIO_Init+0x234>)
 8003398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800339a:	e194      	b.n	80036c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2101      	movs	r1, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8186 	beq.w	80036c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d005      	beq.n	80033cc <HAL_GPIO_Init+0x44>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d130      	bne.n	800342e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003402:	2201      	movs	r2, #1
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 0201 	and.w	r2, r3, #1
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b03      	cmp	r3, #3
 8003438:	d017      	beq.n	800346a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d123      	bne.n	80034be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	08da      	lsrs	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3208      	adds	r2, #8
 800347e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	69b9      	ldr	r1, [r7, #24]
 80034ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2203      	movs	r2, #3
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0203 	and.w	r2, r3, #3
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80e0 	beq.w	80036c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003500:	4b2f      	ldr	r3, [pc, #188]	@ (80035c0 <HAL_GPIO_Init+0x238>)
 8003502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003506:	4a2e      	ldr	r2, [pc, #184]	@ (80035c0 <HAL_GPIO_Init+0x238>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003510:	4b2b      	ldr	r3, [pc, #172]	@ (80035c0 <HAL_GPIO_Init+0x238>)
 8003512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <HAL_GPIO_Init+0x23c>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a20      	ldr	r2, [pc, #128]	@ (80035c8 <HAL_GPIO_Init+0x240>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d052      	beq.n	80035f0 <HAL_GPIO_Init+0x268>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1f      	ldr	r2, [pc, #124]	@ (80035cc <HAL_GPIO_Init+0x244>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_GPIO_Init+0x22e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1e      	ldr	r2, [pc, #120]	@ (80035d0 <HAL_GPIO_Init+0x248>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02b      	beq.n	80035b2 <HAL_GPIO_Init+0x22a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <HAL_GPIO_Init+0x24c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d025      	beq.n	80035ae <HAL_GPIO_Init+0x226>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <HAL_GPIO_Init+0x250>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <HAL_GPIO_Init+0x222>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_GPIO_Init+0x254>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_Init+0x21e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1a      	ldr	r2, [pc, #104]	@ (80035e0 <HAL_GPIO_Init+0x258>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x21a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <HAL_GPIO_Init+0x25c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x216>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <HAL_GPIO_Init+0x260>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x212>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <HAL_GPIO_Init+0x264>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x20e>
 8003592:	2309      	movs	r3, #9
 8003594:	e02d      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 8003596:	230a      	movs	r3, #10
 8003598:	e02b      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 800359a:	2308      	movs	r3, #8
 800359c:	e029      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 800359e:	2307      	movs	r3, #7
 80035a0:	e027      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e025      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e023      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e021      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e01f      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e01d      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e01b      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035ba:	bf00      	nop
 80035bc:	58000080 	.word	0x58000080
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58000400 	.word	0x58000400
 80035c8:	58020000 	.word	0x58020000
 80035cc:	58020400 	.word	0x58020400
 80035d0:	58020800 	.word	0x58020800
 80035d4:	58020c00 	.word	0x58020c00
 80035d8:	58021000 	.word	0x58021000
 80035dc:	58021400 	.word	0x58021400
 80035e0:	58021800 	.word	0x58021800
 80035e4:	58021c00 	.word	0x58021c00
 80035e8:	58022000 	.word	0x58022000
 80035ec:	58022400 	.word	0x58022400
 80035f0:	2300      	movs	r3, #0
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	f002 0203 	and.w	r2, r2, #3
 80035f8:	0092      	lsls	r2, r2, #2
 80035fa:	4093      	lsls	r3, r2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003602:	4938      	ldr	r1, [pc, #224]	@ (80036e4 <HAL_GPIO_Init+0x35c>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3301      	adds	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f ae63 	bne.w	800339c <HAL_GPIO_Init+0x14>
  }
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	3724      	adds	r7, #36	@ 0x24
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	58000400 	.word	0x58000400

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003724:	4b19      	ldr	r3, [pc, #100]	@ (800378c <HAL_PWREx_ConfigSupply+0x70>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d00a      	beq.n	8003746 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003730:	4b16      	ldr	r3, [pc, #88]	@ (800378c <HAL_PWREx_ConfigSupply+0x70>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	d001      	beq.n	8003742 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e01f      	b.n	8003782 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e01d      	b.n	8003782 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003746:	4b11      	ldr	r3, [pc, #68]	@ (800378c <HAL_PWREx_ConfigSupply+0x70>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	490f      	ldr	r1, [pc, #60]	@ (800378c <HAL_PWREx_ConfigSupply+0x70>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4313      	orrs	r3, r2
 8003754:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003756:	f7fe fb97 	bl	8001e88 <HAL_GetTick>
 800375a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800375c:	e009      	b.n	8003772 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800375e:	f7fe fb93 	bl	8001e88 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800376c:	d901      	bls.n	8003772 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_PWREx_ConfigSupply+0x70>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800377a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800377e:	d1ee      	bne.n	800375e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	58024800 	.word	0x58024800

08003790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	@ 0x30
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f000 bc48 	b.w	8004034 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8088 	beq.w	80038c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b2:	4b99      	ldr	r3, [pc, #612]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037bc:	4b96      	ldr	r3, [pc, #600]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d007      	beq.n	80037d8 <HAL_RCC_OscConfig+0x48>
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	2b18      	cmp	r3, #24
 80037cc:	d111      	bne.n	80037f2 <HAL_RCC_OscConfig+0x62>
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d10c      	bne.n	80037f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d06d      	beq.n	80038c0 <HAL_RCC_OscConfig+0x130>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d169      	bne.n	80038c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f000 bc21 	b.w	8004034 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x7a>
 80037fc:	4b86      	ldr	r3, [pc, #536]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a85      	ldr	r2, [pc, #532]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e02e      	b.n	8003868 <HAL_RCC_OscConfig+0xd8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x9c>
 8003812:	4b81      	ldr	r3, [pc, #516]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a80      	ldr	r2, [pc, #512]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b7e      	ldr	r3, [pc, #504]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7d      	ldr	r2, [pc, #500]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003824:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e01d      	b.n	8003868 <HAL_RCC_OscConfig+0xd8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0xc0>
 8003836:	4b78      	ldr	r3, [pc, #480]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a77      	ldr	r2, [pc, #476]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b75      	ldr	r3, [pc, #468]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a74      	ldr	r2, [pc, #464]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0xd8>
 8003850:	4b71      	ldr	r3, [pc, #452]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a70      	ldr	r2, [pc, #448]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b6e      	ldr	r3, [pc, #440]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6d      	ldr	r2, [pc, #436]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe fb0a 	bl	8001e88 <HAL_GetTick>
 8003874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fb06 	bl	8001e88 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	@ 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e3d4      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800388a:	4b63      	ldr	r3, [pc, #396]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0xe8>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe faf6 	bl	8001e88 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe faf2 	bl	8001e88 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	@ 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e3c0      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038b2:	4b59      	ldr	r3, [pc, #356]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x110>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80ca 	beq.w	8003a64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d0:	4b51      	ldr	r3, [pc, #324]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038da:	4b4f      	ldr	r3, [pc, #316]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_RCC_OscConfig+0x166>
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	2b18      	cmp	r3, #24
 80038ea:	d156      	bne.n	800399a <HAL_RCC_OscConfig+0x20a>
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d151      	bne.n	800399a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f6:	4b48      	ldr	r3, [pc, #288]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_RCC_OscConfig+0x17e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e392      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800390e:	4b42      	ldr	r3, [pc, #264]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 0219 	bic.w	r2, r3, #25
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	493f      	ldr	r1, [pc, #252]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fab2 	bl	8001e88 <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fe faae 	bl	8001e88 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e37c      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800393a:	4b37      	ldr	r3, [pc, #220]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	f7fe faab 	bl	8001ea0 <HAL_GetREVID>
 800394a:	4603      	mov	r3, r0
 800394c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003950:	4293      	cmp	r3, r2
 8003952:	d817      	bhi.n	8003984 <HAL_RCC_OscConfig+0x1f4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d108      	bne.n	800396e <HAL_RCC_OscConfig+0x1de>
 800395c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003964:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800396a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800396c:	e07a      	b.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	031b      	lsls	r3, r3, #12
 800397c:	4926      	ldr	r1, [pc, #152]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003982:	e06f      	b.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	4921      	ldr	r1, [pc, #132]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003998:	e064      	b.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d047      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 0219 	bic.w	r2, r3, #25
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	491a      	ldr	r1, [pc, #104]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fe fa68 	bl	8001e88 <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fe fa64 	bl	8001e88 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e332      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ce:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	f7fe fa61 	bl	8001ea0 <HAL_GetREVID>
 80039de:	4603      	mov	r3, r0
 80039e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d819      	bhi.n	8003a1c <HAL_RCC_OscConfig+0x28c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b40      	cmp	r3, #64	@ 0x40
 80039ee:	d108      	bne.n	8003a02 <HAL_RCC_OscConfig+0x272>
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039f8:	4a07      	ldr	r2, [pc, #28]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fe:	6053      	str	r3, [r2, #4]
 8003a00:	e030      	b.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	031b      	lsls	r3, r3, #12
 8003a10:	4901      	ldr	r1, [pc, #4]	@ (8003a18 <HAL_RCC_OscConfig+0x288>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	604b      	str	r3, [r1, #4]
 8003a16:	e025      	b.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	4b9a      	ldr	r3, [pc, #616]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	4997      	ldr	r1, [pc, #604]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
 8003a30:	e018      	b.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a32:	4b95      	ldr	r3, [pc, #596]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a94      	ldr	r2, [pc, #592]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fe fa23 	bl	8001e88 <HAL_GetTick>
 8003a42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fe fa1f 	bl	8001e88 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e2ed      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a58:	4b8b      	ldr	r3, [pc, #556]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a9 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a72:	4b85      	ldr	r3, [pc, #532]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a7c:	4b82      	ldr	r3, [pc, #520]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d007      	beq.n	8003a98 <HAL_RCC_OscConfig+0x308>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b18      	cmp	r3, #24
 8003a8c:	d13a      	bne.n	8003b04 <HAL_RCC_OscConfig+0x374>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d135      	bne.n	8003b04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a98:	4b7b      	ldr	r3, [pc, #492]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x320>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b80      	cmp	r3, #128	@ 0x80
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e2c1      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ab0:	f7fe f9f6 	bl	8001ea0 <HAL_GetREVID>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d817      	bhi.n	8003aee <HAL_RCC_OscConfig+0x35e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d108      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x348>
 8003ac6:	4b70      	ldr	r3, [pc, #448]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ace:	4a6e      	ldr	r2, [pc, #440]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003ad0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ad4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad6:	e075      	b.n	8003bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	069b      	lsls	r3, r3, #26
 8003ae6:	4968      	ldr	r1, [pc, #416]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aec:	e06a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003aee:	4b66      	ldr	r3, [pc, #408]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	4962      	ldr	r1, [pc, #392]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b02:	e05f      	b.n	8003bc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d042      	beq.n	8003b92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe f9b6 	bl	8001e88 <HAL_GetTick>
 8003b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b20:	f7fe f9b2 	bl	8001e88 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e280      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b32:	4b55      	ldr	r3, [pc, #340]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b3e:	f7fe f9af 	bl	8001ea0 <HAL_GetREVID>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d817      	bhi.n	8003b7c <HAL_RCC_OscConfig+0x3ec>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d108      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3d6>
 8003b54:	4b4c      	ldr	r3, [pc, #304]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b62:	6053      	str	r3, [r2, #4]
 8003b64:	e02e      	b.n	8003bc4 <HAL_RCC_OscConfig+0x434>
 8003b66:	4b48      	ldr	r3, [pc, #288]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	069b      	lsls	r3, r3, #26
 8003b74:	4944      	ldr	r1, [pc, #272]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
 8003b7a:	e023      	b.n	8003bc4 <HAL_RCC_OscConfig+0x434>
 8003b7c:	4b42      	ldr	r3, [pc, #264]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	493f      	ldr	r1, [pc, #252]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
 8003b90:	e018      	b.n	8003bc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b92:	4b3d      	ldr	r3, [pc, #244]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a3c      	ldr	r2, [pc, #240]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f973 	bl	8001e88 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ba6:	f7fe f96f 	bl	8001e88 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e23d      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bb8:	4b33      	ldr	r3, [pc, #204]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d036      	beq.n	8003c3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d019      	beq.n	8003c0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fe f950 	bl	8001e88 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fe f94c 	bl	8001e88 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e21a      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bfe:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x45c>
 8003c0a:	e018      	b.n	8003c3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c10:	4a1d      	ldr	r2, [pc, #116]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fe f936 	bl	8001e88 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fe f932 	bl	8001e88 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e200      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d039      	beq.n	8003cbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a0c      	ldr	r2, [pc, #48]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003c58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f913 	bl	8001e88 <HAL_GetTick>
 8003c62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c66:	f7fe f90f 	bl	8001e88 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e1dd      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c78:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <HAL_RCC_OscConfig+0x4f8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x4d6>
 8003c84:	e01b      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
 8003c86:	bf00      	nop
 8003c88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c8c:	4b9b      	ldr	r3, [pc, #620]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a9a      	ldr	r2, [pc, #616]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c98:	f7fe f8f6 	bl	8001e88 <HAL_GetTick>
 8003c9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca0:	f7fe f8f2 	bl	8001e88 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e1c0      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cb2:	4b92      	ldr	r3, [pc, #584]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8081 	beq.w	8003dce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8003f00 <HAL_RCC_OscConfig+0x770>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a8b      	ldr	r2, [pc, #556]	@ (8003f00 <HAL_RCC_OscConfig+0x770>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd8:	f7fe f8d6 	bl	8001e88 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fe f8d2 	bl	8001e88 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	@ 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1a0      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf2:	4b83      	ldr	r3, [pc, #524]	@ (8003f00 <HAL_RCC_OscConfig+0x770>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d106      	bne.n	8003d14 <HAL_RCC_OscConfig+0x584>
 8003d06:	4b7d      	ldr	r3, [pc, #500]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d12:	e02d      	b.n	8003d70 <HAL_RCC_OscConfig+0x5e0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5a6>
 8003d1c:	4b77      	ldr	r3, [pc, #476]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d20:	4a76      	ldr	r2, [pc, #472]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d28:	4b74      	ldr	r3, [pc, #464]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	4a73      	ldr	r2, [pc, #460]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d34:	e01c      	b.n	8003d70 <HAL_RCC_OscConfig+0x5e0>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c8>
 8003d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d42:	4a6e      	ldr	r2, [pc, #440]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4e:	4a6b      	ldr	r2, [pc, #428]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0x5e0>
 8003d58:	4b68      	ldr	r3, [pc, #416]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	4a67      	ldr	r2, [pc, #412]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d64:	4b65      	ldr	r3, [pc, #404]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	4a64      	ldr	r2, [pc, #400]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	f023 0304 	bic.w	r3, r3, #4
 8003d6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d015      	beq.n	8003da4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fe f886 	bl	8001e88 <HAL_GetTick>
 8003d7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fe f882 	bl	8001e88 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e14e      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d96:	4b59      	ldr	r3, [pc, #356]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ee      	beq.n	8003d80 <HAL_RCC_OscConfig+0x5f0>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fe f870 	bl	8001e88 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7fe f86c 	bl	8001e88 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e138      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ee      	bne.n	8003dac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 812d 	beq.w	8004032 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003dd8:	4b48      	ldr	r3, [pc, #288]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003de0:	2b18      	cmp	r3, #24
 8003de2:	f000 80bd 	beq.w	8003f60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	f040 809e 	bne.w	8003f2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df0:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a41      	ldr	r2, [pc, #260]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe f844 	bl	8001e88 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe f840 	bl	8001e88 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e10e      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e16:	4b39      	ldr	r3, [pc, #228]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e22:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e26:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <HAL_RCC_OscConfig+0x774>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	430a      	orrs	r2, r1
 8003e36:	4931      	ldr	r1, [pc, #196]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	3b01      	subs	r3, #1
 8003e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	025b      	lsls	r3, r3, #9
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	3b01      	subs	r3, #1
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e64:	3b01      	subs	r3, #1
 8003e66:	061b      	lsls	r3, r3, #24
 8003e68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e6c:	4923      	ldr	r1, [pc, #140]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e72:	4b22      	ldr	r3, [pc, #136]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	4a21      	ldr	r2, [pc, #132]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e82:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <HAL_RCC_OscConfig+0x778>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e8a:	00d2      	lsls	r2, r2, #3
 8003e8c:	491b      	ldr	r1, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e92:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	f023 020c 	bic.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	4917      	ldr	r1, [pc, #92]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	f023 0202 	bic.w	r2, r3, #2
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	4912      	ldr	r1, [pc, #72]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003eb6:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	4a10      	ldr	r2, [pc, #64]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ece:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003eda:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	4a07      	ldr	r2, [pc, #28]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee6:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a04      	ldr	r2, [pc, #16]	@ (8003efc <HAL_RCC_OscConfig+0x76c>)
 8003eec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd ffc9 	bl	8001e88 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ef8:	e011      	b.n	8003f1e <HAL_RCC_OscConfig+0x78e>
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400
 8003f00:	58024800 	.word	0x58024800
 8003f04:	fffffc0c 	.word	0xfffffc0c
 8003f08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd ffbc 	bl	8001e88 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e08a      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x77c>
 8003f2a:	e082      	b.n	8004032 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b43      	ldr	r3, [pc, #268]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a42      	ldr	r2, [pc, #264]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fd ffa6 	bl	8001e88 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd ffa2 	bl	8001e88 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e070      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f52:	4b3a      	ldr	r3, [pc, #232]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x7b0>
 8003f5e:	e068      	b.n	8004032 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f60:	4b36      	ldr	r3, [pc, #216]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f66:	4b35      	ldr	r3, [pc, #212]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d031      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f003 0203 	and.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d12a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d122      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	0a5b      	lsrs	r3, r3, #9
 8003fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	0c1b      	lsrs	r3, r3, #16
 8003fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d108      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	0e1b      	lsrs	r3, r3, #24
 8003fca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e02b      	b.n	8004034 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fdc:	4b17      	ldr	r3, [pc, #92]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe0:	08db      	lsrs	r3, r3, #3
 8003fe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fe6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d01f      	beq.n	8004032 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ff2:	4b12      	ldr	r3, [pc, #72]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4a11      	ldr	r2, [pc, #68]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ffe:	f7fd ff43 	bl	8001e88 <HAL_GetTick>
 8004002:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004004:	bf00      	nop
 8004006:	f7fd ff3f 	bl	8001e88 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	4293      	cmp	r3, r2
 8004010:	d0f9      	beq.n	8004006 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004012:	4b0a      	ldr	r3, [pc, #40]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8004014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004016:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <HAL_RCC_OscConfig+0x8b0>)
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800401e:	00d2      	lsls	r2, r2, #3
 8004020:	4906      	ldr	r1, [pc, #24]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8004022:	4313      	orrs	r3, r2
 8004024:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	4a04      	ldr	r2, [pc, #16]	@ (800403c <HAL_RCC_OscConfig+0x8ac>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3730      	adds	r7, #48	@ 0x30
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	58024400 	.word	0x58024400
 8004040:	ffff0007 	.word	0xffff0007

08004044 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e19c      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b8a      	ldr	r3, [pc, #552]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d910      	bls.n	8004088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b87      	ldr	r3, [pc, #540]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 020f 	bic.w	r2, r3, #15
 800406e:	4985      	ldr	r1, [pc, #532]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b83      	ldr	r3, [pc, #524]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e184      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	4b7b      	ldr	r3, [pc, #492]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d908      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040a4:	4b78      	ldr	r3, [pc, #480]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	4975      	ldr	r1, [pc, #468]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	4b70      	ldr	r3, [pc, #448]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d908      	bls.n	80040e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	496a      	ldr	r1, [pc, #424]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	4b64      	ldr	r3, [pc, #400]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d908      	bls.n	8004112 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004100:	4b61      	ldr	r3, [pc, #388]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	495e      	ldr	r1, [pc, #376]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 800410e:	4313      	orrs	r3, r2
 8004110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	4b59      	ldr	r3, [pc, #356]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800412a:	429a      	cmp	r2, r3
 800412c:	d908      	bls.n	8004140 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800412e:	4b56      	ldr	r3, [pc, #344]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4953      	ldr	r1, [pc, #332]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 800413c:	4313      	orrs	r3, r2
 800413e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	4b4d      	ldr	r3, [pc, #308]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	429a      	cmp	r2, r3
 800415a:	d908      	bls.n	800416e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b4a      	ldr	r3, [pc, #296]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f023 020f 	bic.w	r2, r3, #15
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4947      	ldr	r1, [pc, #284]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 800416a:	4313      	orrs	r3, r2
 800416c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d055      	beq.n	8004226 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800417a:	4b43      	ldr	r3, [pc, #268]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	4940      	ldr	r1, [pc, #256]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004188:	4313      	orrs	r3, r2
 800418a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004194:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d121      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0f6      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ac:	4b36      	ldr	r3, [pc, #216]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d115      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0ea      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041c4:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0de      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0d6      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e4:	4b28      	ldr	r3, [pc, #160]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f023 0207 	bic.w	r2, r3, #7
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4925      	ldr	r1, [pc, #148]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fd fe47 	bl	8001e88 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fe:	f7fd fe43 	bl	8001e88 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0be      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004214:	4b1c      	ldr	r3, [pc, #112]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	429a      	cmp	r2, r3
 8004224:	d1eb      	bne.n	80041fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	4b14      	ldr	r3, [pc, #80]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	429a      	cmp	r2, r3
 8004240:	d208      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004242:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	490e      	ldr	r1, [pc, #56]	@ (8004288 <HAL_RCC_ClockConfig+0x244>)
 8004250:	4313      	orrs	r3, r2
 8004252:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d214      	bcs.n	800428c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	4906      	ldr	r1, [pc, #24]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b04      	ldr	r3, [pc, #16]	@ (8004284 <HAL_RCC_ClockConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e086      	b.n	8004392 <HAL_RCC_ClockConfig+0x34e>
 8004284:	52002000 	.word	0x52002000
 8004288:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	4b3f      	ldr	r3, [pc, #252]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d208      	bcs.n	80042ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042a8:	4b3c      	ldr	r3, [pc, #240]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	4939      	ldr	r1, [pc, #228]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d010      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	4b34      	ldr	r3, [pc, #208]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d208      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042d6:	4b31      	ldr	r3, [pc, #196]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	492e      	ldr	r1, [pc, #184]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d010      	beq.n	8004316 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	4b28      	ldr	r3, [pc, #160]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004300:	429a      	cmp	r2, r3
 8004302:	d208      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004304:	4b25      	ldr	r3, [pc, #148]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	4922      	ldr	r1, [pc, #136]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 8004312:	4313      	orrs	r3, r2
 8004314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d010      	beq.n	8004344 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800432e:	429a      	cmp	r2, r3
 8004330:	d208      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004332:	4b1a      	ldr	r3, [pc, #104]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	4917      	ldr	r1, [pc, #92]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 8004340:	4313      	orrs	r3, r2
 8004342:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004344:	f000 f834 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b14      	ldr	r3, [pc, #80]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	4912      	ldr	r1, [pc, #72]	@ (80043a0 <HAL_RCC_ClockConfig+0x35c>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <HAL_RCC_ClockConfig+0x358>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	4a0d      	ldr	r2, [pc, #52]	@ (80043a0 <HAL_RCC_ClockConfig+0x35c>)
 800436c:	5cd3      	ldrb	r3, [r2, r3]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <HAL_RCC_ClockConfig+0x360>)
 800437a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800437c:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <HAL_RCC_ClockConfig+0x364>)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_RCC_ClockConfig+0x368>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fd34 	bl	8001df4 <HAL_InitTick>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58024400 	.word	0x58024400
 80043a0:	08008f70 	.word	0x08008f70
 80043a4:	2400100c 	.word	0x2400100c
 80043a8:	24001008 	.word	0x24001008
 80043ac:	24001010 	.word	0x24001010

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	@ 0x24
 80043b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b6:	4bb3      	ldr	r3, [pc, #716]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043be:	2b18      	cmp	r3, #24
 80043c0:	f200 8155 	bhi.w	800466e <HAL_RCC_GetSysClockFreq+0x2be>
 80043c4:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004431 	.word	0x08004431
 80043d0:	0800466f 	.word	0x0800466f
 80043d4:	0800466f 	.word	0x0800466f
 80043d8:	0800466f 	.word	0x0800466f
 80043dc:	0800466f 	.word	0x0800466f
 80043e0:	0800466f 	.word	0x0800466f
 80043e4:	0800466f 	.word	0x0800466f
 80043e8:	0800466f 	.word	0x0800466f
 80043ec:	08004457 	.word	0x08004457
 80043f0:	0800466f 	.word	0x0800466f
 80043f4:	0800466f 	.word	0x0800466f
 80043f8:	0800466f 	.word	0x0800466f
 80043fc:	0800466f 	.word	0x0800466f
 8004400:	0800466f 	.word	0x0800466f
 8004404:	0800466f 	.word	0x0800466f
 8004408:	0800466f 	.word	0x0800466f
 800440c:	0800445d 	.word	0x0800445d
 8004410:	0800466f 	.word	0x0800466f
 8004414:	0800466f 	.word	0x0800466f
 8004418:	0800466f 	.word	0x0800466f
 800441c:	0800466f 	.word	0x0800466f
 8004420:	0800466f 	.word	0x0800466f
 8004424:	0800466f 	.word	0x0800466f
 8004428:	0800466f 	.word	0x0800466f
 800442c:	08004463 	.word	0x08004463
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004430:	4b94      	ldr	r3, [pc, #592]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800443c:	4b91      	ldr	r3, [pc, #580]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	4a90      	ldr	r2, [pc, #576]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800444e:	e111      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004450:	4b8d      	ldr	r3, [pc, #564]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004452:	61bb      	str	r3, [r7, #24]
      break;
 8004454:	e10e      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004456:	4b8d      	ldr	r3, [pc, #564]	@ (800468c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004458:	61bb      	str	r3, [r7, #24]
      break;
 800445a:	e10b      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800445c:	4b8c      	ldr	r3, [pc, #560]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800445e:	61bb      	str	r3, [r7, #24]
      break;
 8004460:	e108      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004462:	4b88      	ldr	r3, [pc, #544]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800446c:	4b85      	ldr	r3, [pc, #532]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004476:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004478:	4b82      	ldr	r3, [pc, #520]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004482:	4b80      	ldr	r3, [pc, #512]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	08db      	lsrs	r3, r3, #3
 8004488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80e1 	beq.w	8004668 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f000 8083 	beq.w	80045b4 <HAL_RCC_GetSysClockFreq+0x204>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f200 80a1 	bhi.w	80045f8 <HAL_RCC_GetSysClockFreq+0x248>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x114>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d056      	beq.n	8004570 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044c2:	e099      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02d      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	08db      	lsrs	r3, r3, #3
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	4a6b      	ldr	r2, [pc, #428]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	ee07 3a90 	vmov	s15, r3
 80044e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fa:	4b62      	ldr	r3, [pc, #392]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450a:	ed97 6a02 	vldr	s12, [r7, #8]
 800450e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800452a:	e087      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004698 <HAL_RCC_GetSysClockFreq+0x2e8>
 800453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453e:	4b51      	ldr	r3, [pc, #324]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004552:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800456e:	e065      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800469c <HAL_RCC_GetSysClockFreq+0x2ec>
 800457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004582:	4b40      	ldr	r3, [pc, #256]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004592:	ed97 6a02 	vldr	s12, [r7, #8]
 8004596:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004694 <HAL_RCC_GetSysClockFreq+0x2e4>
 800459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045b2:	e043      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004694 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045f6:	e021      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800469c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b1e      	ldr	r3, [pc, #120]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a02 	vldr	s12, [r7, #8]
 800461e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800463a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800463c:	4b11      	ldr	r3, [pc, #68]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	0a5b      	lsrs	r3, r3, #9
 8004642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004646:	3301      	adds	r3, #1
 8004648:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004654:	edd7 6a07 	vldr	s13, [r7, #28]
 8004658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004660:	ee17 3a90 	vmov	r3, s15
 8004664:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004666:	e005      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
      break;
 800466c:	e002      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800466e:	4b07      	ldr	r3, [pc, #28]	@ (800468c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004670:	61bb      	str	r3, [r7, #24]
      break;
 8004672:	bf00      	nop
  }

  return sysclockfreq;
 8004674:	69bb      	ldr	r3, [r7, #24]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3724      	adds	r7, #36	@ 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	58024400 	.word	0x58024400
 8004688:	03d09000 	.word	0x03d09000
 800468c:	003d0900 	.word	0x003d0900
 8004690:	007a1200 	.word	0x007a1200
 8004694:	46000000 	.word	0x46000000
 8004698:	4c742400 	.word	0x4c742400
 800469c:	4a742400 	.word	0x4a742400
 80046a0:	4af42400 	.word	0x4af42400

080046a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046aa:	f7ff fe81 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490f      	ldr	r1, [pc, #60]	@ (80046f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	4a09      	ldr	r2, [pc, #36]	@ (80046f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80046d2:	5cd3      	ldrb	r3, [r2, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a07      	ldr	r2, [pc, #28]	@ (80046fc <HAL_RCC_GetHCLKFreq+0x58>)
 80046e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046e2:	4a07      	ldr	r2, [pc, #28]	@ (8004700 <HAL_RCC_GetHCLKFreq+0x5c>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046e8:	4b04      	ldr	r3, [pc, #16]	@ (80046fc <HAL_RCC_GetHCLKFreq+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	58024400 	.word	0x58024400
 80046f8:	08008f70 	.word	0x08008f70
 80046fc:	2400100c 	.word	0x2400100c
 8004700:	24001008 	.word	0x24001008

08004704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004708:	f7ff ffcc 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4904      	ldr	r1, [pc, #16]	@ (800472c <HAL_RCC_GetPCLK1Freq+0x28>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	58024400 	.word	0x58024400
 800472c:	08008f70 	.word	0x08008f70

08004730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004734:	f7ff ffb6 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4904      	ldr	r1, [pc, #16]	@ (8004758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	58024400 	.word	0x58024400
 8004758:	08008f70 	.word	0x08008f70

0800475c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b0ca      	sub	sp, #296	@ 0x128
 8004762:	af00      	add	r7, sp, #0
 8004764:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004768:	2300      	movs	r3, #0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800476e:	2300      	movs	r3, #0
 8004770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004780:	2500      	movs	r5, #0
 8004782:	ea54 0305 	orrs.w	r3, r4, r5
 8004786:	d049      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800478e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004792:	d02f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004794:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004798:	d828      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800479a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800479e:	d01a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a4:	d822      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ae:	d007      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047b0:	e01c      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b2:	4bb8      	ldr	r3, [pc, #736]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b6:	4ab7      	ldr	r2, [pc, #732]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047be:	e01a      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	3308      	adds	r3, #8
 80047c6:	2102      	movs	r1, #2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 fc8f 	bl	80060ec <RCCEx_PLL2_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047d4:	e00f      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	3328      	adds	r3, #40	@ 0x28
 80047dc:	2102      	movs	r1, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fd36 	bl	8006250 <RCCEx_PLL3_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047ea:	e004      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80047f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047fe:	4ba5      	ldr	r3, [pc, #660]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004802:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800480c:	4aa1      	ldr	r2, [pc, #644]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800480e:	430b      	orrs	r3, r1
 8004810:	6513      	str	r3, [r2, #80]	@ 0x50
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004828:	f04f 0900 	mov.w	r9, #0
 800482c:	ea58 0309 	orrs.w	r3, r8, r9
 8004830:	d047      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004838:	2b04      	cmp	r3, #4
 800483a:	d82a      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800483c:	a201      	add	r2, pc, #4	@ (adr r2, 8004844 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004859 	.word	0x08004859
 8004848:	08004867 	.word	0x08004867
 800484c:	0800487d 	.word	0x0800487d
 8004850:	0800489b 	.word	0x0800489b
 8004854:	0800489b 	.word	0x0800489b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004858:	4b8e      	ldr	r3, [pc, #568]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	4a8d      	ldr	r2, [pc, #564]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004864:	e01a      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	3308      	adds	r3, #8
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fc3c 	bl	80060ec <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800487a:	e00f      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	3328      	adds	r3, #40	@ 0x28
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fce3 	bl	8006250 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004890:	e004      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004898:	e000      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800489a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a8:	f023 0107 	bic.w	r1, r3, #7
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	4a78      	ldr	r2, [pc, #480]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80048ce:	f04f 0b00 	mov.w	fp, #0
 80048d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80048d6:	d04c      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e2:	d030      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80048e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e8:	d829      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80048ec:	d02d      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80048ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80048f0:	d825      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048f2:	2b80      	cmp	r3, #128	@ 0x80
 80048f4:	d018      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80048f6:	2b80      	cmp	r3, #128	@ 0x80
 80048f8:	d821      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d007      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004902:	e01c      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004904:	4b63      	ldr	r3, [pc, #396]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	4a62      	ldr	r2, [pc, #392]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800490a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004910:	e01c      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	3308      	adds	r3, #8
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fbe6 	bl	80060ec <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004926:	e011      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	3328      	adds	r3, #40	@ 0x28
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f001 fc8d 	bl	8006250 <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004944:	e002      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800494a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004954:	4b4f      	ldr	r3, [pc, #316]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004958:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004962:	4a4c      	ldr	r2, [pc, #304]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004964:	430b      	orrs	r3, r1
 8004966:	6513      	str	r3, [r2, #80]	@ 0x50
 8004968:	e003      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800497e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004982:	2300      	movs	r3, #0
 8004984:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004988:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800498c:	460b      	mov	r3, r1
 800498e:	4313      	orrs	r3, r2
 8004990:	d053      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800499a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800499e:	d035      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049a4:	d82e      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049aa:	d031      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80049ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049b0:	d828      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b6:	d01a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 80049b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049bc:	d822      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80049c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049c6:	d007      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80049c8:	e01c      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ca:	4b32      	ldr	r3, [pc, #200]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	4a31      	ldr	r2, [pc, #196]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049d6:	e01c      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	3308      	adds	r3, #8
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fb83 	bl	80060ec <RCCEx_PLL2_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049ec:	e011      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	3328      	adds	r3, #40	@ 0x28
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 fc2a 	bl	8006250 <RCCEx_PLL3_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a02:	e006      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a0a:	e002      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a0c:	bf00      	nop
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d056      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a66:	d038      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a6c:	d831      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a72:	d034      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004a74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a78:	d82b      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a7e:	d01d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004a80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a84:	d825      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004a8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a90:	e01f      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4ba2      	ldr	r3, [pc, #648]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	4aa1      	ldr	r2, [pc, #644]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004aa4:	e01c      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	3308      	adds	r3, #8
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 fb1c 	bl	80060ec <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004aba:	e011      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac0:	3328      	adds	r3, #40	@ 0x28
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 fbc3 	bl	8006250 <RCCEx_PLL3_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ad8:	e002      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004af8:	4a8a      	ldr	r2, [pc, #552]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d03a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2e:	2b30      	cmp	r3, #48	@ 0x30
 8004b30:	d01f      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b32:	2b30      	cmp	r3, #48	@ 0x30
 8004b34:	d819      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d00c      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d815      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d019      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d111      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b46:	4b77      	ldr	r3, [pc, #476]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	4a76      	ldr	r2, [pc, #472]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b52:	e011      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b58:	3308      	adds	r3, #8
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 fac5 	bl	80060ec <RCCEx_PLL2_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b68:	e006      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b70:	e002      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b80:	4b68      	ldr	r3, [pc, #416]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8e:	4a65      	ldr	r2, [pc, #404]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004baa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	d051      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bc8:	d035      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004bca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bce:	d82e      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bd4:	d031      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004bd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bda:	d828      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be0:	d01a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be6:	d822      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf0:	d007      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004bf2:	e01c      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c00:	e01c      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	3308      	adds	r3, #8
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 fa6e 	bl	80060ec <RCCEx_PLL2_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c16:	e011      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	3328      	adds	r3, #40	@ 0x28
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fb15 	bl	8006250 <RCCEx_PLL3_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c2c:	e006      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c34:	e002      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c44:	4b37      	ldr	r3, [pc, #220]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c52:	4a34      	ldr	r2, [pc, #208]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c58:	e003      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	d056      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c8c:	d033      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c92:	d82c      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c98:	d02f      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004c9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c9e:	d826      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ca0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ca4:	d02b      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ca6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004caa:	d820      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb0:	d012      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004cb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb6:	d81a      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d022      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc0:	d115      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	2101      	movs	r1, #1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 fa0e 	bl	80060ec <RCCEx_PLL2_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cd6:	e015      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cdc:	3328      	adds	r3, #40	@ 0x28
 8004cde:	2101      	movs	r1, #1
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 fab5 	bl	8006250 <RCCEx_PLL3_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cec:	e00a      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cf4:	e006      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e004      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d1a:	4a02      	ldr	r2, [pc, #8]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d20:	e006      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d22:	bf00      	nop
 8004d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	d055      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5c:	d033      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d62:	d82c      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d68:	d02f      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6e:	d826      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d74:	d02b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004d76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d7a:	d820      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d80:	d012      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d86:	d81a      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d022      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d90:	d115      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	3308      	adds	r3, #8
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f9a6 	bl	80060ec <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004da6:	e015      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dac:	3328      	adds	r3, #40	@ 0x28
 8004dae:	2101      	movs	r1, #1
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 fa4d 	bl	8006250 <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc4:	e006      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dc6:	bf00      	nop
 8004dc8:	e004      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dca:	bf00      	nop
 8004dcc:	e002      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ddc:	4ba3      	ldr	r3, [pc, #652]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dec:	4a9f      	ldr	r2, [pc, #636]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d037      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e26:	d00e      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e2c:	d816      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e36:	d111      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e38:	4b8c      	ldr	r3, [pc, #560]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	4a8b      	ldr	r2, [pc, #556]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e44:	e00f      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f94c 	bl	80060ec <RCCEx_PLL2_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e5a:	e004      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e62:	e000      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e72:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7c:	4a7b      	ldr	r2, [pc, #492]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e82:	e003      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ea2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	d039      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d81c      	bhi.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ef9 	.word	0x08004ef9
 8004ec0:	08004ecd 	.word	0x08004ecd
 8004ec4:	08004edb 	.word	0x08004edb
 8004ec8:	08004ef9 	.word	0x08004ef9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ecc:	4b67      	ldr	r3, [pc, #412]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	4a66      	ldr	r2, [pc, #408]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ed8:	e00f      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	3308      	adds	r3, #8
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 f902 	bl	80060ec <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004eee:	e004      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ef6:	e000      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f02:	4b5a      	ldr	r3, [pc, #360]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f06:	f023 0103 	bic.w	r1, r3, #3
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f10:	4a56      	ldr	r2, [pc, #344]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f12:	430b      	orrs	r3, r1
 8004f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f16:	e003      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f36:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f000 809f 	beq.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f42:	4b4b      	ldr	r3, [pc, #300]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a4a      	ldr	r2, [pc, #296]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f4e:	f7fc ff9b 	bl	8001e88 <HAL_GetTick>
 8004f52:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f56:	e00b      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f58:	f7fc ff96 	bl	8001e88 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b64      	cmp	r3, #100	@ 0x64
 8004f66:	d903      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f6e:	e005      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f70:	4b3f      	ldr	r3, [pc, #252]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0ed      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d179      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f84:	4b39      	ldr	r3, [pc, #228]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f90:	4053      	eors	r3, r2
 8004f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d015      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f9a:	4b34      	ldr	r3, [pc, #208]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fa6:	4b31      	ldr	r3, [pc, #196]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	4a30      	ldr	r2, [pc, #192]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fbc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fc4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd2:	d118      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fc ff58 	bl	8001e88 <HAL_GetTick>
 8004fd8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fdc:	e00d      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fc ff53 	bl	8001e88 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fe8:	1ad2      	subs	r2, r2, r3
 8004fea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d903      	bls.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004ff8:	e005      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0eb      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500a:	2b00      	cmp	r3, #0
 800500c:	d129      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800500e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005012:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800501e:	d10e      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005020:	4b12      	ldr	r3, [pc, #72]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005030:	091a      	lsrs	r2, r3, #4
 8005032:	4b10      	ldr	r3, [pc, #64]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005034:	4013      	ands	r3, r2
 8005036:	4a0d      	ldr	r2, [pc, #52]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005038:	430b      	orrs	r3, r1
 800503a:	6113      	str	r3, [r2, #16]
 800503c:	e005      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800503e:	4b0b      	ldr	r3, [pc, #44]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	4a0a      	ldr	r2, [pc, #40]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005044:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005048:	6113      	str	r3, [r2, #16]
 800504a:	4b08      	ldr	r3, [pc, #32]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800504c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505a:	4a04      	ldr	r2, [pc, #16]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800505c:	430b      	orrs	r3, r1
 800505e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005060:	e00e      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800506a:	e009      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800506c:	58024400 	.word	0x58024400
 8005070:	58024800 	.word	0x58024800
 8005074:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f002 0301 	and.w	r3, r2, #1
 800508c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005090:	2300      	movs	r3, #0
 8005092:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005096:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800509a:	460b      	mov	r3, r1
 800509c:	4313      	orrs	r3, r2
 800509e:	f000 8089 	beq.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050a8:	2b28      	cmp	r3, #40	@ 0x28
 80050aa:	d86b      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80050ac:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	0800518d 	.word	0x0800518d
 80050b8:	08005185 	.word	0x08005185
 80050bc:	08005185 	.word	0x08005185
 80050c0:	08005185 	.word	0x08005185
 80050c4:	08005185 	.word	0x08005185
 80050c8:	08005185 	.word	0x08005185
 80050cc:	08005185 	.word	0x08005185
 80050d0:	08005185 	.word	0x08005185
 80050d4:	08005159 	.word	0x08005159
 80050d8:	08005185 	.word	0x08005185
 80050dc:	08005185 	.word	0x08005185
 80050e0:	08005185 	.word	0x08005185
 80050e4:	08005185 	.word	0x08005185
 80050e8:	08005185 	.word	0x08005185
 80050ec:	08005185 	.word	0x08005185
 80050f0:	08005185 	.word	0x08005185
 80050f4:	0800516f 	.word	0x0800516f
 80050f8:	08005185 	.word	0x08005185
 80050fc:	08005185 	.word	0x08005185
 8005100:	08005185 	.word	0x08005185
 8005104:	08005185 	.word	0x08005185
 8005108:	08005185 	.word	0x08005185
 800510c:	08005185 	.word	0x08005185
 8005110:	08005185 	.word	0x08005185
 8005114:	0800518d 	.word	0x0800518d
 8005118:	08005185 	.word	0x08005185
 800511c:	08005185 	.word	0x08005185
 8005120:	08005185 	.word	0x08005185
 8005124:	08005185 	.word	0x08005185
 8005128:	08005185 	.word	0x08005185
 800512c:	08005185 	.word	0x08005185
 8005130:	08005185 	.word	0x08005185
 8005134:	0800518d 	.word	0x0800518d
 8005138:	08005185 	.word	0x08005185
 800513c:	08005185 	.word	0x08005185
 8005140:	08005185 	.word	0x08005185
 8005144:	08005185 	.word	0x08005185
 8005148:	08005185 	.word	0x08005185
 800514c:	08005185 	.word	0x08005185
 8005150:	08005185 	.word	0x08005185
 8005154:	0800518d 	.word	0x0800518d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515c:	3308      	adds	r3, #8
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f000 ffc3 	bl	80060ec <RCCEx_PLL2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800516c:	e00f      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	3328      	adds	r3, #40	@ 0x28
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f001 f86a 	bl	8006250 <RCCEx_PLL3_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005182:	e004      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800518a:	e000      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800518c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005196:	4bbf      	ldr	r3, [pc, #764]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051a4:	4abb      	ldr	r2, [pc, #748]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051a6:	430b      	orrs	r3, r1
 80051a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80051aa:	e003      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f002 0302 	and.w	r3, r2, #2
 80051c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051c4:	2300      	movs	r3, #0
 80051c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d041      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d824      	bhi.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005231 	.word	0x08005231
 80051e8:	080051fd 	.word	0x080051fd
 80051ec:	08005213 	.word	0x08005213
 80051f0:	08005231 	.word	0x08005231
 80051f4:	08005231 	.word	0x08005231
 80051f8:	08005231 	.word	0x08005231
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005200:	3308      	adds	r3, #8
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f000 ff71 	bl	80060ec <RCCEx_PLL2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005210:	e00f      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	3328      	adds	r3, #40	@ 0x28
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f818 	bl	8006250 <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005226:	e004      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800523a:	4b96      	ldr	r3, [pc, #600]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	f023 0107 	bic.w	r1, r3, #7
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005248:	4a92      	ldr	r2, [pc, #584]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800524a:	430b      	orrs	r3, r1
 800524c:	6553      	str	r3, [r2, #84]	@ 0x54
 800524e:	e003      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f002 0304 	and.w	r3, r2, #4
 8005264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005268:	2300      	movs	r3, #0
 800526a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800526e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005272:	460b      	mov	r3, r1
 8005274:	4313      	orrs	r3, r2
 8005276:	d044      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005280:	2b05      	cmp	r3, #5
 8005282:	d825      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005284:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052d9 	.word	0x080052d9
 8005290:	080052a5 	.word	0x080052a5
 8005294:	080052bb 	.word	0x080052bb
 8005298:	080052d9 	.word	0x080052d9
 800529c:	080052d9 	.word	0x080052d9
 80052a0:	080052d9 	.word	0x080052d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a8:	3308      	adds	r3, #8
 80052aa:	2101      	movs	r1, #1
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 ff1d 	bl	80060ec <RCCEx_PLL2_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052b8:	e00f      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	3328      	adds	r3, #40	@ 0x28
 80052c0:	2101      	movs	r1, #1
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 ffc4 	bl	8006250 <RCCEx_PLL3_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052ce:	e004      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052d6:	e000      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80052d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	f023 0107 	bic.w	r1, r3, #7
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f2:	4a68      	ldr	r2, [pc, #416]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052f4:	430b      	orrs	r3, r1
 80052f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052f8:	e003      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f002 0320 	and.w	r3, r2, #32
 800530e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005312:	2300      	movs	r3, #0
 8005314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800531c:	460b      	mov	r3, r1
 800531e:	4313      	orrs	r3, r2
 8005320:	d055      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800532e:	d033      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005330:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005334:	d82c      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d02f      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005340:	d826      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005342:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005346:	d02b      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005348:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800534c:	d820      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800534e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005352:	d012      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005358:	d81a      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d022      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800535e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005362:	d115      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005368:	3308      	adds	r3, #8
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f000 febd 	bl	80060ec <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005378:	e015      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537e:	3328      	adds	r3, #40	@ 0x28
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f000 ff64 	bl	8006250 <RCCEx_PLL3_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800538e:	e00a      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005396:	e006      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005398:	bf00      	nop
 800539a:	e004      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800539c:	bf00      	nop
 800539e:	e002      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053a0:	bf00      	nop
 80053a2:	e000      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ae:	4b39      	ldr	r3, [pc, #228]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053be:	4a35      	ldr	r2, [pc, #212]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80053c4:	e003      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80053da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053de:	2300      	movs	r3, #0
 80053e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4313      	orrs	r3, r2
 80053ec:	d058      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053fa:	d033      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80053fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005400:	d82c      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005406:	d02f      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540c:	d826      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800540e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005412:	d02b      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005414:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005418:	d820      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800541e:	d012      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005420:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005424:	d81a      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d022      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800542a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542e:	d115      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005434:	3308      	adds	r3, #8
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fe57 	bl	80060ec <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005444:	e015      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544a:	3328      	adds	r3, #40	@ 0x28
 800544c:	2102      	movs	r1, #2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fefe 	bl	8006250 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800545a:	e00a      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005462:	e006      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005464:	bf00      	nop
 8005466:	e004      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005468:	bf00      	nop
 800546a:	e002      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800546c:	bf00      	nop
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10e      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800548a:	4a02      	ldr	r2, [pc, #8]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800548c:	430b      	orrs	r3, r1
 800548e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005490:	e006      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005492:	bf00      	nop
 8005494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	d055      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054cc:	d033      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80054ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054d2:	d82c      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054d8:	d02f      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80054da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054de:	d826      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054e4:	d02b      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80054e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054ea:	d820      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054f0:	d012      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80054f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054f6:	d81a      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d022      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80054fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005500:	d115      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005506:	3308      	adds	r3, #8
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fdee 	bl	80060ec <RCCEx_PLL2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005516:	e015      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551c:	3328      	adds	r3, #40	@ 0x28
 800551e:	2102      	movs	r1, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fe95 	bl	8006250 <RCCEx_PLL3_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800552c:	e00a      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005536:	bf00      	nop
 8005538:	e004      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800554c:	4ba1      	ldr	r3, [pc, #644]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005550:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800555c:	4a9d      	ldr	r2, [pc, #628]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800555e:	430b      	orrs	r3, r1
 8005560:	6593      	str	r3, [r2, #88]	@ 0x58
 8005562:	e003      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f002 0308 	and.w	r3, r2, #8
 8005578:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800557c:	2300      	movs	r3, #0
 800557e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005582:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005586:	460b      	mov	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	d01e      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005598:	d10c      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	3328      	adds	r3, #40	@ 0x28
 80055a0:	2102      	movs	r1, #2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fe54 	bl	8006250 <RCCEx_PLL3_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055b4:	4b87      	ldr	r3, [pc, #540]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055c4:	4a83      	ldr	r2, [pc, #524]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f002 0310 	and.w	r3, r2, #16
 80055d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055e4:	460b      	mov	r3, r1
 80055e6:	4313      	orrs	r3, r2
 80055e8:	d01e      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f6:	d10c      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	3328      	adds	r3, #40	@ 0x28
 80055fe:	2102      	movs	r1, #2
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fe25 	bl	8006250 <RCCEx_PLL3_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005612:	4b70      	ldr	r3, [pc, #448]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005616:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005622:	4a6c      	ldr	r2, [pc, #432]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005624:	430b      	orrs	r3, r1
 8005626:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800563e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d03e      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005650:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005654:	d022      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800565a:	d81b      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005664:	d00b      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005666:	e015      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	3308      	adds	r3, #8
 800566e:	2100      	movs	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fd3b 	bl	80060ec <RCCEx_PLL2_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800567c:	e00f      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	3328      	adds	r3, #40	@ 0x28
 8005684:	2102      	movs	r1, #2
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fde2 	bl	8006250 <RCCEx_PLL3_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005692:	e004      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800569a:	e000      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800569c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a6:	4b4b      	ldr	r3, [pc, #300]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056b6:	4a47      	ldr	r2, [pc, #284]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80056bc:	e003      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056d4:	2300      	movs	r3, #0
 80056d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d03b      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056ee:	d01f      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80056f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056f4:	d818      	bhi.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fa:	d003      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80056fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005700:	d007      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005702:	e011      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005704:	4b33      	ldr	r3, [pc, #204]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	4a32      	ldr	r2, [pc, #200]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800570a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800570e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005710:	e00f      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	3328      	adds	r3, #40	@ 0x28
 8005718:	2101      	movs	r1, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fd98 	bl	8006250 <RCCEx_PLL3_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005726:	e004      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800572e:	e000      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10b      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800573a:	4b26      	ldr	r3, [pc, #152]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	4a22      	ldr	r2, [pc, #136]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800574c:	430b      	orrs	r3, r1
 800574e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005750:	e003      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005766:	673b      	str	r3, [r7, #112]	@ 0x70
 8005768:	2300      	movs	r3, #0
 800576a:	677b      	str	r3, [r7, #116]	@ 0x74
 800576c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005770:	460b      	mov	r3, r1
 8005772:	4313      	orrs	r3, r2
 8005774:	d034      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005784:	d007      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005786:	e011      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005788:	4b12      	ldr	r3, [pc, #72]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	4a11      	ldr	r2, [pc, #68]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005794:	e00e      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	3308      	adds	r3, #8
 800579c:	2102      	movs	r1, #2
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fca4 	bl	80060ec <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057aa:	e003      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057bc:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ca:	4a02      	ldr	r2, [pc, #8]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057cc:	430b      	orrs	r3, r1
 80057ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80057d2:	bf00      	nop
 80057d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ee:	2300      	movs	r3, #0
 80057f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057f6:	460b      	mov	r3, r1
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d00c      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005800:	3328      	adds	r3, #40	@ 0x28
 8005802:	2102      	movs	r1, #2
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fd23 	bl	8006250 <RCCEx_PLL3_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005822:	663b      	str	r3, [r7, #96]	@ 0x60
 8005824:	2300      	movs	r3, #0
 8005826:	667b      	str	r3, [r7, #100]	@ 0x64
 8005828:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d038      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800583e:	d018      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005844:	d811      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584a:	d014      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800584c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005850:	d80b      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d011      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585a:	d106      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585c:	4bc3      	ldr	r3, [pc, #780]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	4ac2      	ldr	r2, [pc, #776]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005868:	e008      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005870:	e004      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005872:	bf00      	nop
 8005874:	e002      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800587a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005884:	4bb9      	ldr	r3, [pc, #740]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005888:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005894:	4ab5      	ldr	r2, [pc, #724]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005896:	430b      	orrs	r3, r1
 8005898:	6553      	str	r3, [r2, #84]	@ 0x54
 800589a:	e003      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058b2:	2300      	movs	r3, #0
 80058b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d009      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058c0:	4baa      	ldr	r3, [pc, #680]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	4aa7      	ldr	r2, [pc, #668]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80058e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058e2:	2300      	movs	r3, #0
 80058e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80058e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058f0:	4b9e      	ldr	r3, [pc, #632]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005900:	4a9a      	ldr	r2, [pc, #616]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005902:	430b      	orrs	r3, r1
 8005904:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005914:	2300      	movs	r3, #0
 8005916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005918:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005922:	4b92      	ldr	r3, [pc, #584]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005926:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005930:	4a8e      	ldr	r2, [pc, #568]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005932:	430b      	orrs	r3, r1
 8005934:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005942:	643b      	str	r3, [r7, #64]	@ 0x40
 8005944:	2300      	movs	r3, #0
 8005946:	647b      	str	r3, [r7, #68]	@ 0x44
 8005948:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800594c:	460b      	mov	r3, r1
 800594e:	4313      	orrs	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005952:	4b86      	ldr	r3, [pc, #536]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	4a85      	ldr	r2, [pc, #532]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005958:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800595c:	6113      	str	r3, [r2, #16]
 800595e:	4b83      	ldr	r3, [pc, #524]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005960:	6919      	ldr	r1, [r3, #16]
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005966:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800596a:	4a80      	ldr	r2, [pc, #512]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800596c:	430b      	orrs	r3, r1
 800596e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800597c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005982:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800598c:	4b77      	ldr	r3, [pc, #476]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800598e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005990:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599a:	4a74      	ldr	r2, [pc, #464]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800599c:	430b      	orrs	r3, r1
 800599e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ae:	2300      	movs	r3, #0
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059b6:	460b      	mov	r3, r1
 80059b8:	4313      	orrs	r3, r2
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059bc:	4b6b      	ldr	r3, [pc, #428]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059cc:	4a67      	ldr	r2, [pc, #412]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ce:	430b      	orrs	r3, r1
 80059d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	2100      	movs	r1, #0
 80059dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d011      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	3308      	adds	r3, #8
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fb78 	bl	80060ec <RCCEx_PLL2_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	6239      	str	r1, [r7, #32]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d011      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	3308      	adds	r3, #8
 8005a34:	2101      	movs	r1, #1
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb58 	bl	80060ec <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	61b9      	str	r1, [r7, #24]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	d011      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a72:	3308      	adds	r3, #8
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb38 	bl	80060ec <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	6139      	str	r1, [r7, #16]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	d011      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	3328      	adds	r3, #40	@ 0x28
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fbca 	bl	8006250 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	2100      	movs	r1, #0
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d011      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	3328      	adds	r3, #40	@ 0x28
 8005af4:	2101      	movs	r1, #1
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fbaa 	bl	8006250 <RCCEx_PLL3_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	d011      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b32:	3328      	adds	r3, #40	@ 0x28
 8005b34:	2102      	movs	r1, #2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fb8a 	bl	8006250 <RCCEx_PLL3_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005b52:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005b66:	46bd      	mov	sp, r7
 8005b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6c:	58024400 	.word	0x58024400

08005b70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b74:	f7fe fd96 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	4904      	ldr	r1, [pc, #16]	@ (8005b98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b86:	5ccb      	ldrb	r3, [r1, r3]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	58024400 	.word	0x58024400
 8005b98:	08008f70 	.word	0x08008f70

08005b9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b089      	sub	sp, #36	@ 0x24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bae:	4b9f      	ldr	r3, [pc, #636]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb2:	0b1b      	lsrs	r3, r3, #12
 8005bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bba:	4b9c      	ldr	r3, [pc, #624]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005bc6:	4b99      	ldr	r3, [pc, #612]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8111 	beq.w	8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	f000 8083 	beq.w	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	f200 80a1 	bhi.w	8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d056      	beq.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c06:	e099      	b.n	8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c08:	4b88      	ldr	r3, [pc, #544]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d02d      	beq.n	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c14:	4b85      	ldr	r3, [pc, #532]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	08db      	lsrs	r3, r3, #3
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	4a84      	ldr	r2, [pc, #528]	@ (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c6e:	e087      	b.n	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b6a      	ldr	r3, [pc, #424]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cb2:	e065      	b.n	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b59      	ldr	r3, [pc, #356]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf6:	e043      	b.n	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0a:	4b48      	ldr	r3, [pc, #288]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d3a:	e021      	b.n	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b37      	ldr	r3, [pc, #220]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d80:	4b2a      	ldr	r3, [pc, #168]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	0a5b      	lsrs	r3, r3, #9
 8005d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da6:	ee17 2a90 	vmov	r2, s15
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dae:	4b1f      	ldr	r3, [pc, #124]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	0c1b      	lsrs	r3, r3, #16
 8005db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd4:	ee17 2a90 	vmov	r2, s15
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ddc:	4b13      	ldr	r3, [pc, #76]	@ (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	0e1b      	lsrs	r3, r3, #24
 8005de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e02:	ee17 2a90 	vmov	r2, s15
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e0a:	e008      	b.n	8005e1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	3724      	adds	r7, #36	@ 0x24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	03d09000 	.word	0x03d09000
 8005e34:	46000000 	.word	0x46000000
 8005e38:	4c742400 	.word	0x4c742400
 8005e3c:	4a742400 	.word	0x4a742400
 8005e40:	4af42400 	.word	0x4af42400

08005e44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	@ 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e56:	4b9f      	ldr	r3, [pc, #636]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	0d1b      	lsrs	r3, r3, #20
 8005e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e62:	4b9c      	ldr	r3, [pc, #624]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e6e:	4b99      	ldr	r3, [pc, #612]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8111 	beq.w	80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f000 8083 	beq.w	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	f200 80a1 	bhi.w	8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d056      	beq.n	8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eae:	e099      	b.n	8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb0:	4b88      	ldr	r3, [pc, #544]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02d      	beq.n	8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ebc:	4b85      	ldr	r3, [pc, #532]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	08db      	lsrs	r3, r3, #3
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	4a84      	ldr	r2, [pc, #528]	@ (80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b7b      	ldr	r3, [pc, #492]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f16:	e087      	b.n	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f5a:	e065      	b.n	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b59      	ldr	r3, [pc, #356]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9e:	e043      	b.n	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b48      	ldr	r3, [pc, #288]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe2:	e021      	b.n	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a03 	vldr	s12, [r7, #12]
 800600a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006026:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006028:	4b2a      	ldr	r3, [pc, #168]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	0a5b      	lsrs	r3, r3, #9
 800602e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800603e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006042:	edd7 6a07 	vldr	s13, [r7, #28]
 8006046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604e:	ee17 2a90 	vmov	r2, s15
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006056:	4b1f      	ldr	r3, [pc, #124]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	0c1b      	lsrs	r3, r3, #16
 800605c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800606c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006070:	edd7 6a07 	vldr	s13, [r7, #28]
 8006074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607c:	ee17 2a90 	vmov	r2, s15
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006084:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006088:	0e1b      	lsrs	r3, r3, #24
 800608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800609a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800609e:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060aa:	ee17 2a90 	vmov	r2, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060b2:	e008      	b.n	80060c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	609a      	str	r2, [r3, #8]
}
 80060c6:	bf00      	nop
 80060c8:	3724      	adds	r7, #36	@ 0x24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
 80060d8:	03d09000 	.word	0x03d09000
 80060dc:	46000000 	.word	0x46000000
 80060e0:	4c742400 	.word	0x4c742400
 80060e4:	4a742400 	.word	0x4a742400
 80060e8:	4af42400 	.word	0x4af42400

080060ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060fa:	4b53      	ldr	r3, [pc, #332]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b03      	cmp	r3, #3
 8006104:	d101      	bne.n	800610a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e099      	b.n	800623e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800610a:	4b4f      	ldr	r3, [pc, #316]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a4e      	ldr	r2, [pc, #312]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006110:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006116:	f7fb feb7 	bl	8001e88 <HAL_GetTick>
 800611a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800611c:	e008      	b.n	8006130 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800611e:	f7fb feb3 	bl	8001e88 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e086      	b.n	800623e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006130:	4b45      	ldr	r3, [pc, #276]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f0      	bne.n	800611e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800613c:	4b42      	ldr	r3, [pc, #264]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 800613e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006140:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	493f      	ldr	r1, [pc, #252]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 800614c:	4313      	orrs	r3, r2
 800614e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	3b01      	subs	r3, #1
 8006156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	3b01      	subs	r3, #1
 8006160:	025b      	lsls	r3, r3, #9
 8006162:	b29b      	uxth	r3, r3
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	3b01      	subs	r3, #1
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	3b01      	subs	r3, #1
 800617a:	061b      	lsls	r3, r3, #24
 800617c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006180:	4931      	ldr	r1, [pc, #196]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006182:	4313      	orrs	r3, r2
 8006184:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006186:	4b30      	ldr	r3, [pc, #192]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	492d      	ldr	r1, [pc, #180]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006194:	4313      	orrs	r3, r2
 8006196:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006198:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	f023 0220 	bic.w	r2, r3, #32
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	4928      	ldr	r1, [pc, #160]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061aa:	4b27      	ldr	r3, [pc, #156]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ae:	4a26      	ldr	r2, [pc, #152]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061b0:	f023 0310 	bic.w	r3, r3, #16
 80061b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061b6:	4b24      	ldr	r3, [pc, #144]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ba:	4b24      	ldr	r3, [pc, #144]	@ (800624c <RCCEx_PLL2_Config+0x160>)
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	69d2      	ldr	r2, [r2, #28]
 80061c2:	00d2      	lsls	r2, r2, #3
 80061c4:	4920      	ldr	r1, [pc, #128]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061d0:	f043 0310 	orr.w	r3, r3, #16
 80061d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d106      	bne.n	80061ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	4a19      	ldr	r2, [pc, #100]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061e8:	e00f      	b.n	800620a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d106      	bne.n	80061fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061f0:	4b15      	ldr	r3, [pc, #84]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	4a14      	ldr	r2, [pc, #80]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061fc:	e005      	b.n	800620a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061fe:	4b12      	ldr	r3, [pc, #72]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006202:	4a11      	ldr	r2, [pc, #68]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006204:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006208:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800620a:	4b0f      	ldr	r3, [pc, #60]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a0e      	ldr	r2, [pc, #56]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006210:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006216:	f7fb fe37 	bl	8001e88 <HAL_GetTick>
 800621a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800621c:	e008      	b.n	8006230 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800621e:	f7fb fe33 	bl	8001e88 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e006      	b.n	800623e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <RCCEx_PLL2_Config+0x15c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	58024400 	.word	0x58024400
 800624c:	ffff0007 	.word	0xffff0007

08006250 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800625e:	4b53      	ldr	r3, [pc, #332]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	2b03      	cmp	r3, #3
 8006268:	d101      	bne.n	800626e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e099      	b.n	80063a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800626e:	4b4f      	ldr	r3, [pc, #316]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a4e      	ldr	r2, [pc, #312]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627a:	f7fb fe05 	bl	8001e88 <HAL_GetTick>
 800627e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006280:	e008      	b.n	8006294 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006282:	f7fb fe01 	bl	8001e88 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e086      	b.n	80063a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006294:	4b45      	ldr	r3, [pc, #276]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f0      	bne.n	8006282 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062a0:	4b42      	ldr	r3, [pc, #264]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	051b      	lsls	r3, r3, #20
 80062ae:	493f      	ldr	r1, [pc, #252]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	025b      	lsls	r3, r3, #9
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	041b      	lsls	r3, r3, #16
 80062d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	3b01      	subs	r3, #1
 80062de:	061b      	lsls	r3, r3, #24
 80062e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062e4:	4931      	ldr	r1, [pc, #196]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062ea:	4b30      	ldr	r3, [pc, #192]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	492d      	ldr	r1, [pc, #180]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062fc:	4b2b      	ldr	r3, [pc, #172]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	4928      	ldr	r1, [pc, #160]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800630e:	4b27      	ldr	r3, [pc, #156]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	4a26      	ldr	r2, [pc, #152]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006318:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800631a:	4b24      	ldr	r3, [pc, #144]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 800631c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800631e:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <RCCEx_PLL3_Config+0x160>)
 8006320:	4013      	ands	r3, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	69d2      	ldr	r2, [r2, #28]
 8006326:	00d2      	lsls	r2, r2, #3
 8006328:	4920      	ldr	r1, [pc, #128]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 800632a:	4313      	orrs	r3, r2
 800632c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800632e:	4b1f      	ldr	r3, [pc, #124]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006332:	4a1e      	ldr	r2, [pc, #120]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006338:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006340:	4b1a      	ldr	r3, [pc, #104]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	4a19      	ldr	r2, [pc, #100]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006346:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800634a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800634c:	e00f      	b.n	800636e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d106      	bne.n	8006362 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006354:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006358:	4a14      	ldr	r2, [pc, #80]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 800635a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800635e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006360:	e005      	b.n	800636e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006362:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	4a11      	ldr	r2, [pc, #68]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006368:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800636c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800636e:	4b0f      	ldr	r3, [pc, #60]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a0e      	ldr	r2, [pc, #56]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800637a:	f7fb fd85 	bl	8001e88 <HAL_GetTick>
 800637e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006380:	e008      	b.n	8006394 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006382:	f7fb fd81 	bl	8001e88 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e006      	b.n	80063a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006394:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <RCCEx_PLL3_Config+0x15c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
 80063b0:	ffff0007 	.word	0xffff0007

080063b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e10f      	b.n	80065e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a87      	ldr	r2, [pc, #540]	@ (80065f0 <HAL_SPI_Init+0x23c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <HAL_SPI_Init+0x42>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a86      	ldr	r2, [pc, #536]	@ (80065f4 <HAL_SPI_Init+0x240>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00a      	beq.n	80063f6 <HAL_SPI_Init+0x42>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a84      	ldr	r2, [pc, #528]	@ (80065f8 <HAL_SPI_Init+0x244>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d005      	beq.n	80063f6 <HAL_SPI_Init+0x42>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b0f      	cmp	r3, #15
 80063f0:	d901      	bls.n	80063f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0f7      	b.n	80065e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fe2e 	bl	8007058 <SPI_GetPacketSize>
 80063fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a7b      	ldr	r2, [pc, #492]	@ (80065f0 <HAL_SPI_Init+0x23c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00c      	beq.n	8006422 <HAL_SPI_Init+0x6e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a79      	ldr	r2, [pc, #484]	@ (80065f4 <HAL_SPI_Init+0x240>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <HAL_SPI_Init+0x6e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a78      	ldr	r2, [pc, #480]	@ (80065f8 <HAL_SPI_Init+0x244>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d002      	beq.n	8006422 <HAL_SPI_Init+0x6e>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b08      	cmp	r3, #8
 8006420:	d811      	bhi.n	8006446 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006426:	4a72      	ldr	r2, [pc, #456]	@ (80065f0 <HAL_SPI_Init+0x23c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a70      	ldr	r2, [pc, #448]	@ (80065f4 <HAL_SPI_Init+0x240>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_SPI_Init+0x8c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6f      	ldr	r2, [pc, #444]	@ (80065f8 <HAL_SPI_Init+0x244>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d104      	bne.n	800644a <HAL_SPI_Init+0x96>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b10      	cmp	r3, #16
 8006444:	d901      	bls.n	800644a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e0cd      	b.n	80065e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fb f9c8 	bl	80017f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006486:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006490:	d119      	bne.n	80064c6 <HAL_SPI_Init+0x112>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800649a:	d103      	bne.n	80064a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064b4:	d107      	bne.n	80064c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00f      	beq.n	80064f2 <HAL_SPI_Init+0x13e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b06      	cmp	r3, #6
 80064d8:	d90b      	bls.n	80064f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e007      	b.n	8006502 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006500:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	431a      	orrs	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006514:	ea42 0103 	orr.w	r1, r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006562:	ea42 0103 	orr.w	r1, r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d113      	bne.n	80065a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800658c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40013000 	.word	0x40013000
 80065f4:	40003800 	.word	0x40003800
 80065f8:	40003c00 	.word	0x40003c00

080065fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3320      	adds	r3, #32
 8006612:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006614:	f7fb fc38 	bl	8001e88 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b01      	cmp	r3, #1
 8006624:	d001      	beq.n	800662a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006626:	2302      	movs	r3, #2
 8006628:	e1d1      	b.n	80069ce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_SPI_Transmit+0x3a>
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e1c9      	b.n	80069ce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_SPI_Transmit+0x4c>
 8006644:	2302      	movs	r3, #2
 8006646:	e1c2      	b.n	80069ce <HAL_SPI_Transmit+0x3d2>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2203      	movs	r2, #3
 8006654:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	88fa      	ldrh	r2, [r7, #6]
 800666a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80066a0:	d108      	bne.n	80066b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e009      	b.n	80066c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80066c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	4b96      	ldr	r3, [pc, #600]	@ (8006928 <HAL_SPI_Transmit+0x32c>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	88f9      	ldrh	r1, [r7, #6]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	430b      	orrs	r3, r1
 80066da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066f4:	d107      	bne.n	8006706 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	2b0f      	cmp	r3, #15
 800670c:	d947      	bls.n	800679e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800670e:	e03f      	b.n	8006790 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d114      	bne.n	8006748 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006746:	e023      	b.n	8006790 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006748:	f7fb fb9e 	bl	8001e88 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d803      	bhi.n	8006760 <HAL_SPI_Transmit+0x164>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d102      	bne.n	8006766 <HAL_SPI_Transmit+0x16a>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d114      	bne.n	8006790 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fba8 	bl	8006ebc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006772:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e11e      	b.n	80069ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1b9      	bne.n	8006710 <HAL_SPI_Transmit+0x114>
 800679c:	e0f1      	b.n	8006982 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b07      	cmp	r3, #7
 80067a4:	f240 80e6 	bls.w	8006974 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80067a8:	e05d      	b.n	8006866 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d132      	bne.n	800681e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d918      	bls.n	80067f6 <HAL_SPI_Transmit+0x1fa>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d014      	beq.n	80067f6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b02      	subs	r3, #2
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067f4:	e037      	b.n	8006866 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067fa:	881a      	ldrh	r2, [r3, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006804:	1c9a      	adds	r2, r3, #2
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800681c:	e023      	b.n	8006866 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800681e:	f7fb fb33 	bl	8001e88 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d803      	bhi.n	8006836 <HAL_SPI_Transmit+0x23a>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d102      	bne.n	800683c <HAL_SPI_Transmit+0x240>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d114      	bne.n	8006866 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fb3d 	bl	8006ebc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006848:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e0b3      	b.n	80069ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d19b      	bne.n	80067aa <HAL_SPI_Transmit+0x1ae>
 8006872:	e086      	b.n	8006982 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b02      	cmp	r3, #2
 8006880:	d154      	bne.n	800692c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b03      	cmp	r3, #3
 800688c:	d918      	bls.n	80068c0 <HAL_SPI_Transmit+0x2c4>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006892:	2b40      	cmp	r3, #64	@ 0x40
 8006894:	d914      	bls.n	80068c0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b04      	subs	r3, #4
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068be:	e059      	b.n	8006974 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d917      	bls.n	80068fc <HAL_SPI_Transmit+0x300>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d8:	881a      	ldrh	r2, [r3, #0]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e2:	1c9a      	adds	r2, r3, #2
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b02      	subs	r3, #2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068fa:	e03b      	b.n	8006974 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3320      	adds	r3, #32
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006926:	e025      	b.n	8006974 <HAL_SPI_Transmit+0x378>
 8006928:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692c:	f7fb faac 	bl	8001e88 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d803      	bhi.n	8006944 <HAL_SPI_Transmit+0x348>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d102      	bne.n	800694a <HAL_SPI_Transmit+0x34e>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d114      	bne.n	8006974 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fab6 	bl	8006ebc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006956:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e02c      	b.n	80069ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	f47f af79 	bne.w	8006874 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2200      	movs	r2, #0
 800698a:	2108      	movs	r1, #8
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fb35 	bl	8006ffc <SPI_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699e:	f043 0220 	orr.w	r2, r3, #32
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fa87 	bl	8006ebc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80069cc:	2300      	movs	r3, #0
  }
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop

080069d8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3301      	adds	r3, #1
 80069f2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3330      	adds	r3, #48	@ 0x30
 80069fa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069fc:	f7fb fa44 	bl	8001e88 <HAL_GetTick>
 8006a00:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d001      	beq.n	8006a12 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e250      	b.n	8006eb4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_SPI_Receive+0x46>
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e248      	b.n	8006eb4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_SPI_Receive+0x58>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e241      	b.n	8006eb4 <HAL_SPI_Receive+0x4dc>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	88fa      	ldrh	r2, [r7, #6]
 8006a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006a88:	d108      	bne.n	8006a9c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e009      	b.n	8006ab0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006aae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4b95      	ldr	r3, [pc, #596]	@ (8006d0c <HAL_SPI_Receive+0x334>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	88f9      	ldrh	r1, [r7, #6]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006adc:	d107      	bne.n	8006aee <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b0f      	cmp	r3, #15
 8006af4:	d96c      	bls.n	8006bd0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006af6:	e064      	b.n	8006bc2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d114      	bne.n	8006b38 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b18:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b1e:	1d1a      	adds	r2, r3, #4
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b36:	e044      	b.n	8006bc2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	8bfa      	ldrh	r2, [r7, #30]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d919      	bls.n	8006b7a <HAL_SPI_Receive+0x1a2>
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d014      	beq.n	8006b7a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b5a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b60:	1d1a      	adds	r2, r3, #4
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b78:	e023      	b.n	8006bc2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b7a:	f7fb f985 	bl	8001e88 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d803      	bhi.n	8006b92 <HAL_SPI_Receive+0x1ba>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b90:	d102      	bne.n	8006b98 <HAL_SPI_Receive+0x1c0>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d114      	bne.n	8006bc2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f98f 	bl	8006ebc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e178      	b.n	8006eb4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d194      	bne.n	8006af8 <HAL_SPI_Receive+0x120>
 8006bce:	e15e      	b.n	8006e8e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b07      	cmp	r3, #7
 8006bd6:	f240 8153 	bls.w	8006e80 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006bda:	e08f      	b.n	8006cfc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d114      	bne.n	8006c1c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	8812      	ldrh	r2, [r2, #0]
 8006bfa:	b292      	uxth	r2, r2
 8006bfc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c1a:	e06f      	b.n	8006cfc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8bfa      	ldrh	r2, [r7, #30]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d924      	bls.n	8006c74 <HAL_SPI_Receive+0x29c>
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01f      	beq.n	8006c74 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	8812      	ldrh	r2, [r2, #0]
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c44:	1c9a      	adds	r2, r3, #2
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	8812      	ldrh	r2, [r2, #0]
 8006c52:	b292      	uxth	r2, r2
 8006c54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c5a:	1c9a      	adds	r2, r3, #2
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b02      	subs	r3, #2
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c72:	e043      	b.n	8006cfc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d119      	bne.n	8006cb4 <HAL_SPI_Receive+0x2dc>
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d014      	beq.n	8006cb4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	8812      	ldrh	r2, [r2, #0]
 8006c92:	b292      	uxth	r2, r2
 8006c94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006cb2:	e023      	b.n	8006cfc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb4:	f7fb f8e8 	bl	8001e88 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d803      	bhi.n	8006ccc <HAL_SPI_Receive+0x2f4>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Receive+0x2fa>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d114      	bne.n	8006cfc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f8f2 	bl	8006ebc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e0db      	b.n	8006eb4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f47f af69 	bne.w	8006bdc <HAL_SPI_Receive+0x204>
 8006d0a:	e0c0      	b.n	8006e8e <HAL_SPI_Receive+0x4b6>
 8006d0c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d117      	bne.n	8006d56 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d54:	e094      	b.n	8006e80 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8bfa      	ldrh	r2, [r7, #30]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d946      	bls.n	8006df2 <HAL_SPI_Receive+0x41a>
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d041      	beq.n	8006df2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d96:	7812      	ldrb	r2, [r2, #0]
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b04      	subs	r3, #4
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006df0:	e046      	b.n	8006e80 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d81c      	bhi.n	8006e38 <HAL_SPI_Receive+0x460>
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d017      	beq.n	8006e38 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e14:	7812      	ldrb	r2, [r2, #0]
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006e36:	e023      	b.n	8006e80 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e38:	f7fb f826 	bl	8001e88 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d803      	bhi.n	8006e50 <HAL_SPI_Receive+0x478>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d102      	bne.n	8006e56 <HAL_SPI_Receive+0x47e>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d114      	bne.n	8006e80 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f830 	bl	8006ebc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e019      	b.n	8006eb4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f47f af41 	bne.w	8006d10 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f814 	bl	8006ebc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3720      	adds	r7, #32
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0208 	orr.w	r2, r2, #8
 8006eda:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0210 	orr.w	r2, r2, #16
 8006eea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6919      	ldr	r1, [r3, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff8 <SPI_CloseTransfer+0x13c>)
 8006f08:	400b      	ands	r3, r1
 8006f0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006f1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d014      	beq.n	8006f52 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00f      	beq.n	8006f52 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0220 	orr.w	r2, r2, #32
 8006f50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d014      	beq.n	8006f88 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f6e:	f043 0204 	orr.w	r2, r3, #4
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00f      	beq.n	8006fb2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f98:	f043 0201 	orr.w	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699a      	ldr	r2, [r3, #24]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00f      	beq.n	8006fdc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	fffffc90 	.word	0xfffffc90

08006ffc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800700c:	e010      	b.n	8007030 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800700e:	f7fa ff3b 	bl	8001e88 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d803      	bhi.n	8007026 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d102      	bne.n	800702c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e00f      	b.n	8007050 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4013      	ands	r3, r2
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	429a      	cmp	r2, r3
 800703e:	bf0c      	ite	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	2300      	movne	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	429a      	cmp	r2, r3
 800704c:	d0df      	beq.n	800700e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3307      	adds	r3, #7
 8007076:	08db      	lsrs	r3, r3, #3
 8007078:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e042      	b.n	8007126 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fa fc2c 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	@ 0x24
 80070bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fee7 	bl	8007eac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f97c 	bl	80073dc <UART_SetConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e01b      	b.n	8007126 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800710c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 ff66 	bl	8007ff0 <UART_CheckIdleState>
 8007124:	4603      	mov	r3, r0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b08a      	sub	sp, #40	@ 0x28
 8007132:	af02      	add	r7, sp, #8
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	603b      	str	r3, [r7, #0]
 800713a:	4613      	mov	r3, r2
 800713c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007144:	2b20      	cmp	r3, #32
 8007146:	d17b      	bne.n	8007240 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HAL_UART_Transmit+0x26>
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e074      	b.n	8007242 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2221      	movs	r2, #33	@ 0x21
 8007164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007168:	f7fa fe8e 	bl	8001e88 <HAL_GetTick>
 800716c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	88fa      	ldrh	r2, [r7, #6]
 8007172:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	88fa      	ldrh	r2, [r7, #6]
 800717a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007186:	d108      	bne.n	800719a <HAL_UART_Transmit+0x6c>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	e003      	b.n	80071a2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071a2:	e030      	b.n	8007206 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2200      	movs	r2, #0
 80071ac:	2180      	movs	r1, #128	@ 0x80
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 ffc8 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e03d      	b.n	8007242 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	3302      	adds	r3, #2
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	e007      	b.n	80071f4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3301      	adds	r3, #1
 80071f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1c8      	bne.n	80071a4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2200      	movs	r2, #0
 800721a:	2140      	movs	r1, #64	@ 0x40
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 ff91 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e006      	b.n	8007242 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	e000      	b.n	8007242 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007240:	2302      	movs	r3, #2
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b08a      	sub	sp, #40	@ 0x28
 800724e:	af02      	add	r7, sp, #8
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	603b      	str	r3, [r7, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007260:	2b20      	cmp	r3, #32
 8007262:	f040 80b5 	bne.w	80073d0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_UART_Receive+0x28>
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e0ad      	b.n	80073d2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2222      	movs	r2, #34	@ 0x22
 8007282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800728c:	f7fa fdfc 	bl	8001e88 <HAL_GetTick>
 8007290:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	88fa      	ldrh	r2, [r7, #6]
 8007296:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	88fa      	ldrh	r2, [r7, #6]
 800729e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072aa:	d10e      	bne.n	80072ca <HAL_UART_Receive+0x80>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <HAL_UART_Receive+0x76>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80072ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072be:	e02d      	b.n	800731c <HAL_UART_Receive+0xd2>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	22ff      	movs	r2, #255	@ 0xff
 80072c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072c8:	e028      	b.n	800731c <HAL_UART_Receive+0xd2>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10d      	bne.n	80072ee <HAL_UART_Receive+0xa4>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <HAL_UART_Receive+0x9a>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	22ff      	movs	r2, #255	@ 0xff
 80072de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072e2:	e01b      	b.n	800731c <HAL_UART_Receive+0xd2>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	227f      	movs	r2, #127	@ 0x7f
 80072e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072ec:	e016      	b.n	800731c <HAL_UART_Receive+0xd2>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f6:	d10d      	bne.n	8007314 <HAL_UART_Receive+0xca>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <HAL_UART_Receive+0xc0>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	227f      	movs	r2, #127	@ 0x7f
 8007304:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007308:	e008      	b.n	800731c <HAL_UART_Receive+0xd2>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	223f      	movs	r2, #63	@ 0x3f
 800730e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007312:	e003      	b.n	800731c <HAL_UART_Receive+0xd2>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007322:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732c:	d108      	bne.n	8007340 <HAL_UART_Receive+0xf6>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	e003      	b.n	8007348 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007348:	e036      	b.n	80073b8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2200      	movs	r2, #0
 8007352:	2120      	movs	r1, #32
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fef5 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e032      	b.n	80073d2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	b29a      	uxth	r2, r3
 800737a:	8a7b      	ldrh	r3, [r7, #18]
 800737c:	4013      	ands	r3, r2
 800737e:	b29a      	uxth	r2, r3
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	3302      	adds	r3, #2
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	e00c      	b.n	80073a6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007392:	b2da      	uxtb	r2, r3
 8007394:	8a7b      	ldrh	r3, [r7, #18]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	4013      	ands	r3, r2
 800739a:	b2da      	uxtb	r2, r3
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	3301      	adds	r3, #1
 80073a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1c2      	bne.n	800734a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e000      	b.n	80073d2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80073d0:	2302      	movs	r3, #2
  }
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e0:	b092      	sub	sp, #72	@ 0x48
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	4313      	orrs	r3, r2
 8007402:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4bbe      	ldr	r3, [pc, #760]	@ (8007704 <UART_SetConfig+0x328>)
 800740c:	4013      	ands	r3, r2
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007414:	430b      	orrs	r3, r1
 8007416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4ab3      	ldr	r2, [pc, #716]	@ (8007708 <UART_SetConfig+0x32c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007444:	4313      	orrs	r3, r2
 8007446:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	4baf      	ldr	r3, [pc, #700]	@ (800770c <UART_SetConfig+0x330>)
 8007450:	4013      	ands	r3, r2
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007458:	430b      	orrs	r3, r1
 800745a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	f023 010f 	bic.w	r1, r3, #15
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4aa6      	ldr	r2, [pc, #664]	@ (8007710 <UART_SetConfig+0x334>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d177      	bne.n	800756c <UART_SetConfig+0x190>
 800747c:	4ba5      	ldr	r3, [pc, #660]	@ (8007714 <UART_SetConfig+0x338>)
 800747e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007484:	2b28      	cmp	r3, #40	@ 0x28
 8007486:	d86d      	bhi.n	8007564 <UART_SetConfig+0x188>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <UART_SetConfig+0xb4>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	08007535 	.word	0x08007535
 8007494:	08007565 	.word	0x08007565
 8007498:	08007565 	.word	0x08007565
 800749c:	08007565 	.word	0x08007565
 80074a0:	08007565 	.word	0x08007565
 80074a4:	08007565 	.word	0x08007565
 80074a8:	08007565 	.word	0x08007565
 80074ac:	08007565 	.word	0x08007565
 80074b0:	0800753d 	.word	0x0800753d
 80074b4:	08007565 	.word	0x08007565
 80074b8:	08007565 	.word	0x08007565
 80074bc:	08007565 	.word	0x08007565
 80074c0:	08007565 	.word	0x08007565
 80074c4:	08007565 	.word	0x08007565
 80074c8:	08007565 	.word	0x08007565
 80074cc:	08007565 	.word	0x08007565
 80074d0:	08007545 	.word	0x08007545
 80074d4:	08007565 	.word	0x08007565
 80074d8:	08007565 	.word	0x08007565
 80074dc:	08007565 	.word	0x08007565
 80074e0:	08007565 	.word	0x08007565
 80074e4:	08007565 	.word	0x08007565
 80074e8:	08007565 	.word	0x08007565
 80074ec:	08007565 	.word	0x08007565
 80074f0:	0800754d 	.word	0x0800754d
 80074f4:	08007565 	.word	0x08007565
 80074f8:	08007565 	.word	0x08007565
 80074fc:	08007565 	.word	0x08007565
 8007500:	08007565 	.word	0x08007565
 8007504:	08007565 	.word	0x08007565
 8007508:	08007565 	.word	0x08007565
 800750c:	08007565 	.word	0x08007565
 8007510:	08007555 	.word	0x08007555
 8007514:	08007565 	.word	0x08007565
 8007518:	08007565 	.word	0x08007565
 800751c:	08007565 	.word	0x08007565
 8007520:	08007565 	.word	0x08007565
 8007524:	08007565 	.word	0x08007565
 8007528:	08007565 	.word	0x08007565
 800752c:	08007565 	.word	0x08007565
 8007530:	0800755d 	.word	0x0800755d
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e222      	b.n	8007982 <UART_SetConfig+0x5a6>
 800753c:	2304      	movs	r3, #4
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e21e      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007544:	2308      	movs	r3, #8
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e21a      	b.n	8007982 <UART_SetConfig+0x5a6>
 800754c:	2310      	movs	r3, #16
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e216      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007554:	2320      	movs	r3, #32
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e212      	b.n	8007982 <UART_SetConfig+0x5a6>
 800755c:	2340      	movs	r3, #64	@ 0x40
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	e20e      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007564:	2380      	movs	r3, #128	@ 0x80
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e20a      	b.n	8007982 <UART_SetConfig+0x5a6>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a69      	ldr	r2, [pc, #420]	@ (8007718 <UART_SetConfig+0x33c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d130      	bne.n	80075d8 <UART_SetConfig+0x1fc>
 8007576:	4b67      	ldr	r3, [pc, #412]	@ (8007714 <UART_SetConfig+0x338>)
 8007578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b05      	cmp	r3, #5
 8007580:	d826      	bhi.n	80075d0 <UART_SetConfig+0x1f4>
 8007582:	a201      	add	r2, pc, #4	@ (adr r2, 8007588 <UART_SetConfig+0x1ac>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075a1 	.word	0x080075a1
 800758c:	080075a9 	.word	0x080075a9
 8007590:	080075b1 	.word	0x080075b1
 8007594:	080075b9 	.word	0x080075b9
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e1ec      	b.n	8007982 <UART_SetConfig+0x5a6>
 80075a8:	2304      	movs	r3, #4
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e1e8      	b.n	8007982 <UART_SetConfig+0x5a6>
 80075b0:	2308      	movs	r3, #8
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e1e4      	b.n	8007982 <UART_SetConfig+0x5a6>
 80075b8:	2310      	movs	r3, #16
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e1e0      	b.n	8007982 <UART_SetConfig+0x5a6>
 80075c0:	2320      	movs	r3, #32
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e1dc      	b.n	8007982 <UART_SetConfig+0x5a6>
 80075c8:	2340      	movs	r3, #64	@ 0x40
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e1d8      	b.n	8007982 <UART_SetConfig+0x5a6>
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e1d4      	b.n	8007982 <UART_SetConfig+0x5a6>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a4f      	ldr	r2, [pc, #316]	@ (800771c <UART_SetConfig+0x340>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d130      	bne.n	8007644 <UART_SetConfig+0x268>
 80075e2:	4b4c      	ldr	r3, [pc, #304]	@ (8007714 <UART_SetConfig+0x338>)
 80075e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d826      	bhi.n	800763c <UART_SetConfig+0x260>
 80075ee:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <UART_SetConfig+0x218>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	0800760d 	.word	0x0800760d
 80075f8:	08007615 	.word	0x08007615
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	08007625 	.word	0x08007625
 8007604:	0800762d 	.word	0x0800762d
 8007608:	08007635 	.word	0x08007635
 800760c:	2300      	movs	r3, #0
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e1b6      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e1b2      	b.n	8007982 <UART_SetConfig+0x5a6>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e1ae      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e1aa      	b.n	8007982 <UART_SetConfig+0x5a6>
 800762c:	2320      	movs	r3, #32
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e1a6      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007634:	2340      	movs	r3, #64	@ 0x40
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e1a2      	b.n	8007982 <UART_SetConfig+0x5a6>
 800763c:	2380      	movs	r3, #128	@ 0x80
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e19e      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a35      	ldr	r2, [pc, #212]	@ (8007720 <UART_SetConfig+0x344>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d130      	bne.n	80076b0 <UART_SetConfig+0x2d4>
 800764e:	4b31      	ldr	r3, [pc, #196]	@ (8007714 <UART_SetConfig+0x338>)
 8007650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b05      	cmp	r3, #5
 8007658:	d826      	bhi.n	80076a8 <UART_SetConfig+0x2cc>
 800765a:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <UART_SetConfig+0x284>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007679 	.word	0x08007679
 8007664:	08007681 	.word	0x08007681
 8007668:	08007689 	.word	0x08007689
 800766c:	08007691 	.word	0x08007691
 8007670:	08007699 	.word	0x08007699
 8007674:	080076a1 	.word	0x080076a1
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e180      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007680:	2304      	movs	r3, #4
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e17c      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007688:	2308      	movs	r3, #8
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e178      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e174      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007698:	2320      	movs	r3, #32
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e170      	b.n	8007982 <UART_SetConfig+0x5a6>
 80076a0:	2340      	movs	r3, #64	@ 0x40
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e16c      	b.n	8007982 <UART_SetConfig+0x5a6>
 80076a8:	2380      	movs	r3, #128	@ 0x80
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e168      	b.n	8007982 <UART_SetConfig+0x5a6>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007724 <UART_SetConfig+0x348>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d142      	bne.n	8007740 <UART_SetConfig+0x364>
 80076ba:	4b16      	ldr	r3, [pc, #88]	@ (8007714 <UART_SetConfig+0x338>)
 80076bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d838      	bhi.n	8007738 <UART_SetConfig+0x35c>
 80076c6:	a201      	add	r2, pc, #4	@ (adr r2, 80076cc <UART_SetConfig+0x2f0>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076e5 	.word	0x080076e5
 80076d0:	080076ed 	.word	0x080076ed
 80076d4:	080076f5 	.word	0x080076f5
 80076d8:	080076fd 	.word	0x080076fd
 80076dc:	08007729 	.word	0x08007729
 80076e0:	08007731 	.word	0x08007731
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e14a      	b.n	8007982 <UART_SetConfig+0x5a6>
 80076ec:	2304      	movs	r3, #4
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e146      	b.n	8007982 <UART_SetConfig+0x5a6>
 80076f4:	2308      	movs	r3, #8
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e142      	b.n	8007982 <UART_SetConfig+0x5a6>
 80076fc:	2310      	movs	r3, #16
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e13e      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007704:	cfff69f3 	.word	0xcfff69f3
 8007708:	58000c00 	.word	0x58000c00
 800770c:	11fff4ff 	.word	0x11fff4ff
 8007710:	40011000 	.word	0x40011000
 8007714:	58024400 	.word	0x58024400
 8007718:	40004400 	.word	0x40004400
 800771c:	40004800 	.word	0x40004800
 8007720:	40004c00 	.word	0x40004c00
 8007724:	40005000 	.word	0x40005000
 8007728:	2320      	movs	r3, #32
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e128      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007730:	2340      	movs	r3, #64	@ 0x40
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e124      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007738:	2380      	movs	r3, #128	@ 0x80
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773e:	e120      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4acb      	ldr	r2, [pc, #812]	@ (8007a74 <UART_SetConfig+0x698>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d176      	bne.n	8007838 <UART_SetConfig+0x45c>
 800774a:	4bcb      	ldr	r3, [pc, #812]	@ (8007a78 <UART_SetConfig+0x69c>)
 800774c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007752:	2b28      	cmp	r3, #40	@ 0x28
 8007754:	d86c      	bhi.n	8007830 <UART_SetConfig+0x454>
 8007756:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <UART_SetConfig+0x380>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	08007801 	.word	0x08007801
 8007760:	08007831 	.word	0x08007831
 8007764:	08007831 	.word	0x08007831
 8007768:	08007831 	.word	0x08007831
 800776c:	08007831 	.word	0x08007831
 8007770:	08007831 	.word	0x08007831
 8007774:	08007831 	.word	0x08007831
 8007778:	08007831 	.word	0x08007831
 800777c:	08007809 	.word	0x08007809
 8007780:	08007831 	.word	0x08007831
 8007784:	08007831 	.word	0x08007831
 8007788:	08007831 	.word	0x08007831
 800778c:	08007831 	.word	0x08007831
 8007790:	08007831 	.word	0x08007831
 8007794:	08007831 	.word	0x08007831
 8007798:	08007831 	.word	0x08007831
 800779c:	08007811 	.word	0x08007811
 80077a0:	08007831 	.word	0x08007831
 80077a4:	08007831 	.word	0x08007831
 80077a8:	08007831 	.word	0x08007831
 80077ac:	08007831 	.word	0x08007831
 80077b0:	08007831 	.word	0x08007831
 80077b4:	08007831 	.word	0x08007831
 80077b8:	08007831 	.word	0x08007831
 80077bc:	08007819 	.word	0x08007819
 80077c0:	08007831 	.word	0x08007831
 80077c4:	08007831 	.word	0x08007831
 80077c8:	08007831 	.word	0x08007831
 80077cc:	08007831 	.word	0x08007831
 80077d0:	08007831 	.word	0x08007831
 80077d4:	08007831 	.word	0x08007831
 80077d8:	08007831 	.word	0x08007831
 80077dc:	08007821 	.word	0x08007821
 80077e0:	08007831 	.word	0x08007831
 80077e4:	08007831 	.word	0x08007831
 80077e8:	08007831 	.word	0x08007831
 80077ec:	08007831 	.word	0x08007831
 80077f0:	08007831 	.word	0x08007831
 80077f4:	08007831 	.word	0x08007831
 80077f8:	08007831 	.word	0x08007831
 80077fc:	08007829 	.word	0x08007829
 8007800:	2301      	movs	r3, #1
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e0bc      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007808:	2304      	movs	r3, #4
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e0b8      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007810:	2308      	movs	r3, #8
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e0b4      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007818:	2310      	movs	r3, #16
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e0b0      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007820:	2320      	movs	r3, #32
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e0ac      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007828:	2340      	movs	r3, #64	@ 0x40
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e0a8      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007830:	2380      	movs	r3, #128	@ 0x80
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e0a4      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a8f      	ldr	r2, [pc, #572]	@ (8007a7c <UART_SetConfig+0x6a0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d130      	bne.n	80078a4 <UART_SetConfig+0x4c8>
 8007842:	4b8d      	ldr	r3, [pc, #564]	@ (8007a78 <UART_SetConfig+0x69c>)
 8007844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b05      	cmp	r3, #5
 800784c:	d826      	bhi.n	800789c <UART_SetConfig+0x4c0>
 800784e:	a201      	add	r2, pc, #4	@ (adr r2, 8007854 <UART_SetConfig+0x478>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	0800786d 	.word	0x0800786d
 8007858:	08007875 	.word	0x08007875
 800785c:	0800787d 	.word	0x0800787d
 8007860:	08007885 	.word	0x08007885
 8007864:	0800788d 	.word	0x0800788d
 8007868:	08007895 	.word	0x08007895
 800786c:	2300      	movs	r3, #0
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e086      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007874:	2304      	movs	r3, #4
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e082      	b.n	8007982 <UART_SetConfig+0x5a6>
 800787c:	2308      	movs	r3, #8
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e07e      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007884:	2310      	movs	r3, #16
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e07a      	b.n	8007982 <UART_SetConfig+0x5a6>
 800788c:	2320      	movs	r3, #32
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e076      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007894:	2340      	movs	r3, #64	@ 0x40
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e072      	b.n	8007982 <UART_SetConfig+0x5a6>
 800789c:	2380      	movs	r3, #128	@ 0x80
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e06e      	b.n	8007982 <UART_SetConfig+0x5a6>
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a75      	ldr	r2, [pc, #468]	@ (8007a80 <UART_SetConfig+0x6a4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d130      	bne.n	8007910 <UART_SetConfig+0x534>
 80078ae:	4b72      	ldr	r3, [pc, #456]	@ (8007a78 <UART_SetConfig+0x69c>)
 80078b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d826      	bhi.n	8007908 <UART_SetConfig+0x52c>
 80078ba:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <UART_SetConfig+0x4e4>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d9 	.word	0x080078d9
 80078c4:	080078e1 	.word	0x080078e1
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	080078f9 	.word	0x080078f9
 80078d4:	08007901 	.word	0x08007901
 80078d8:	2300      	movs	r3, #0
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e050      	b.n	8007982 <UART_SetConfig+0x5a6>
 80078e0:	2304      	movs	r3, #4
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e04c      	b.n	8007982 <UART_SetConfig+0x5a6>
 80078e8:	2308      	movs	r3, #8
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e048      	b.n	8007982 <UART_SetConfig+0x5a6>
 80078f0:	2310      	movs	r3, #16
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e044      	b.n	8007982 <UART_SetConfig+0x5a6>
 80078f8:	2320      	movs	r3, #32
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e040      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007900:	2340      	movs	r3, #64	@ 0x40
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e03c      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007908:	2380      	movs	r3, #128	@ 0x80
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e038      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5b      	ldr	r2, [pc, #364]	@ (8007a84 <UART_SetConfig+0x6a8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d130      	bne.n	800797c <UART_SetConfig+0x5a0>
 800791a:	4b57      	ldr	r3, [pc, #348]	@ (8007a78 <UART_SetConfig+0x69c>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	2b05      	cmp	r3, #5
 8007924:	d826      	bhi.n	8007974 <UART_SetConfig+0x598>
 8007926:	a201      	add	r2, pc, #4	@ (adr r2, 800792c <UART_SetConfig+0x550>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007945 	.word	0x08007945
 8007930:	0800794d 	.word	0x0800794d
 8007934:	08007955 	.word	0x08007955
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007965 	.word	0x08007965
 8007940:	0800796d 	.word	0x0800796d
 8007944:	2302      	movs	r3, #2
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e01a      	b.n	8007982 <UART_SetConfig+0x5a6>
 800794c:	2304      	movs	r3, #4
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e016      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007954:	2308      	movs	r3, #8
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e012      	b.n	8007982 <UART_SetConfig+0x5a6>
 800795c:	2310      	movs	r3, #16
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e00e      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007964:	2320      	movs	r3, #32
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e00a      	b.n	8007982 <UART_SetConfig+0x5a6>
 800796c:	2340      	movs	r3, #64	@ 0x40
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e006      	b.n	8007982 <UART_SetConfig+0x5a6>
 8007974:	2380      	movs	r3, #128	@ 0x80
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e002      	b.n	8007982 <UART_SetConfig+0x5a6>
 800797c:	2380      	movs	r3, #128	@ 0x80
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a3f      	ldr	r2, [pc, #252]	@ (8007a84 <UART_SetConfig+0x6a8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	f040 80f8 	bne.w	8007b7e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800798e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007992:	2b20      	cmp	r3, #32
 8007994:	dc46      	bgt.n	8007a24 <UART_SetConfig+0x648>
 8007996:	2b02      	cmp	r3, #2
 8007998:	f2c0 8082 	blt.w	8007aa0 <UART_SetConfig+0x6c4>
 800799c:	3b02      	subs	r3, #2
 800799e:	2b1e      	cmp	r3, #30
 80079a0:	d87e      	bhi.n	8007aa0 <UART_SetConfig+0x6c4>
 80079a2:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <UART_SetConfig+0x5cc>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	08007a2b 	.word	0x08007a2b
 80079ac:	08007aa1 	.word	0x08007aa1
 80079b0:	08007a33 	.word	0x08007a33
 80079b4:	08007aa1 	.word	0x08007aa1
 80079b8:	08007aa1 	.word	0x08007aa1
 80079bc:	08007aa1 	.word	0x08007aa1
 80079c0:	08007a43 	.word	0x08007a43
 80079c4:	08007aa1 	.word	0x08007aa1
 80079c8:	08007aa1 	.word	0x08007aa1
 80079cc:	08007aa1 	.word	0x08007aa1
 80079d0:	08007aa1 	.word	0x08007aa1
 80079d4:	08007aa1 	.word	0x08007aa1
 80079d8:	08007aa1 	.word	0x08007aa1
 80079dc:	08007aa1 	.word	0x08007aa1
 80079e0:	08007a53 	.word	0x08007a53
 80079e4:	08007aa1 	.word	0x08007aa1
 80079e8:	08007aa1 	.word	0x08007aa1
 80079ec:	08007aa1 	.word	0x08007aa1
 80079f0:	08007aa1 	.word	0x08007aa1
 80079f4:	08007aa1 	.word	0x08007aa1
 80079f8:	08007aa1 	.word	0x08007aa1
 80079fc:	08007aa1 	.word	0x08007aa1
 8007a00:	08007aa1 	.word	0x08007aa1
 8007a04:	08007aa1 	.word	0x08007aa1
 8007a08:	08007aa1 	.word	0x08007aa1
 8007a0c:	08007aa1 	.word	0x08007aa1
 8007a10:	08007aa1 	.word	0x08007aa1
 8007a14:	08007aa1 	.word	0x08007aa1
 8007a18:	08007aa1 	.word	0x08007aa1
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007a93 	.word	0x08007a93
 8007a24:	2b40      	cmp	r3, #64	@ 0x40
 8007a26:	d037      	beq.n	8007a98 <UART_SetConfig+0x6bc>
 8007a28:	e03a      	b.n	8007aa0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a2a:	f7fe f8a1 	bl	8005b70 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a30:	e03c      	b.n	8007aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe f8b0 	bl	8005b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a40:	e034      	b.n	8007aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a42:	f107 0318 	add.w	r3, r7, #24
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe f9fc 	bl	8005e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a50:	e02c      	b.n	8007aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a52:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <UART_SetConfig+0x69c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d016      	beq.n	8007a8c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <UART_SetConfig+0x69c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	08db      	lsrs	r3, r3, #3
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	4a07      	ldr	r2, [pc, #28]	@ (8007a88 <UART_SetConfig+0x6ac>)
 8007a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a70:	e01c      	b.n	8007aac <UART_SetConfig+0x6d0>
 8007a72:	bf00      	nop
 8007a74:	40011400 	.word	0x40011400
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	40007800 	.word	0x40007800
 8007a80:	40007c00 	.word	0x40007c00
 8007a84:	58000c00 	.word	0x58000c00
 8007a88:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a8c:	4b9d      	ldr	r3, [pc, #628]	@ (8007d04 <UART_SetConfig+0x928>)
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a90:	e00c      	b.n	8007aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a92:	4b9d      	ldr	r3, [pc, #628]	@ (8007d08 <UART_SetConfig+0x92c>)
 8007a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a96:	e009      	b.n	8007aac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a9e:	e005      	b.n	8007aac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007aaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 81de 	beq.w	8007e70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	4a94      	ldr	r2, [pc, #592]	@ (8007d0c <UART_SetConfig+0x930>)
 8007aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	4413      	add	r3, r2
 8007ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d305      	bcc.n	8007ae4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d903      	bls.n	8007aec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007aea:	e1c1      	b.n	8007e70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aee:	2200      	movs	r2, #0
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	60fa      	str	r2, [r7, #12]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	4a84      	ldr	r2, [pc, #528]	@ (8007d0c <UART_SetConfig+0x930>)
 8007afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2200      	movs	r2, #0
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b0e:	f7f8 fc3f 	bl	8000390 <__aeabi_uldivmod>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4610      	mov	r0, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	020b      	lsls	r3, r1, #8
 8007b24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b28:	0202      	lsls	r2, r0, #8
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	6849      	ldr	r1, [r1, #4]
 8007b2e:	0849      	lsrs	r1, r1, #1
 8007b30:	2000      	movs	r0, #0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4605      	mov	r5, r0
 8007b36:	eb12 0804 	adds.w	r8, r2, r4
 8007b3a:	eb43 0905 	adc.w	r9, r3, r5
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	469a      	mov	sl, r3
 8007b46:	4693      	mov	fp, r2
 8007b48:	4652      	mov	r2, sl
 8007b4a:	465b      	mov	r3, fp
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	4649      	mov	r1, r9
 8007b50:	f7f8 fc1e 	bl	8000390 <__aeabi_uldivmod>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4613      	mov	r3, r2
 8007b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b62:	d308      	bcc.n	8007b76 <UART_SetConfig+0x79a>
 8007b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b6a:	d204      	bcs.n	8007b76 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	e17c      	b.n	8007e70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b7c:	e178      	b.n	8007e70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b86:	f040 80c5 	bne.w	8007d14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	2b20      	cmp	r3, #32
 8007b90:	dc48      	bgt.n	8007c24 <UART_SetConfig+0x848>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	db7b      	blt.n	8007c8e <UART_SetConfig+0x8b2>
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d879      	bhi.n	8007c8e <UART_SetConfig+0x8b2>
 8007b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <UART_SetConfig+0x7c4>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007c2b 	.word	0x08007c2b
 8007ba4:	08007c33 	.word	0x08007c33
 8007ba8:	08007c8f 	.word	0x08007c8f
 8007bac:	08007c8f 	.word	0x08007c8f
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c8f 	.word	0x08007c8f
 8007bb8:	08007c8f 	.word	0x08007c8f
 8007bbc:	08007c8f 	.word	0x08007c8f
 8007bc0:	08007c4b 	.word	0x08007c4b
 8007bc4:	08007c8f 	.word	0x08007c8f
 8007bc8:	08007c8f 	.word	0x08007c8f
 8007bcc:	08007c8f 	.word	0x08007c8f
 8007bd0:	08007c8f 	.word	0x08007c8f
 8007bd4:	08007c8f 	.word	0x08007c8f
 8007bd8:	08007c8f 	.word	0x08007c8f
 8007bdc:	08007c8f 	.word	0x08007c8f
 8007be0:	08007c5b 	.word	0x08007c5b
 8007be4:	08007c8f 	.word	0x08007c8f
 8007be8:	08007c8f 	.word	0x08007c8f
 8007bec:	08007c8f 	.word	0x08007c8f
 8007bf0:	08007c8f 	.word	0x08007c8f
 8007bf4:	08007c8f 	.word	0x08007c8f
 8007bf8:	08007c8f 	.word	0x08007c8f
 8007bfc:	08007c8f 	.word	0x08007c8f
 8007c00:	08007c8f 	.word	0x08007c8f
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007c8f 	.word	0x08007c8f
 8007c0c:	08007c8f 	.word	0x08007c8f
 8007c10:	08007c8f 	.word	0x08007c8f
 8007c14:	08007c8f 	.word	0x08007c8f
 8007c18:	08007c8f 	.word	0x08007c8f
 8007c1c:	08007c8f 	.word	0x08007c8f
 8007c20:	08007c81 	.word	0x08007c81
 8007c24:	2b40      	cmp	r3, #64	@ 0x40
 8007c26:	d02e      	beq.n	8007c86 <UART_SetConfig+0x8aa>
 8007c28:	e031      	b.n	8007c8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c2a:	f7fc fd6b 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8007c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c30:	e033      	b.n	8007c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c32:	f7fc fd7d 	bl	8004730 <HAL_RCC_GetPCLK2Freq>
 8007c36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c38:	e02f      	b.n	8007c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fd ffac 	bl	8005b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c48:	e027      	b.n	8007c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c4a:	f107 0318 	add.w	r3, r7, #24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe f8f8 	bl	8005e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c58:	e01f      	b.n	8007c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d10 <UART_SetConfig+0x934>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c66:	4b2a      	ldr	r3, [pc, #168]	@ (8007d10 <UART_SetConfig+0x934>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	08db      	lsrs	r3, r3, #3
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	4a24      	ldr	r2, [pc, #144]	@ (8007d04 <UART_SetConfig+0x928>)
 8007c72:	fa22 f303 	lsr.w	r3, r2, r3
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c78:	e00f      	b.n	8007c9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c7a:	4b22      	ldr	r3, [pc, #136]	@ (8007d04 <UART_SetConfig+0x928>)
 8007c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7e:	e00c      	b.n	8007c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c80:	4b21      	ldr	r3, [pc, #132]	@ (8007d08 <UART_SetConfig+0x92c>)
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c84:	e009      	b.n	8007c9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c8c:	e005      	b.n	8007c9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80e7 	beq.w	8007e70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca6:	4a19      	ldr	r2, [pc, #100]	@ (8007d0c <UART_SetConfig+0x930>)
 8007ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb4:	005a      	lsls	r2, r3, #1
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	441a      	add	r2, r3
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cca:	2b0f      	cmp	r3, #15
 8007ccc:	d916      	bls.n	8007cfc <UART_SetConfig+0x920>
 8007cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd4:	d212      	bcs.n	8007cfc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f023 030f 	bic.w	r3, r3, #15
 8007cde:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	e0b9      	b.n	8007e70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d02:	e0b5      	b.n	8007e70 <UART_SetConfig+0xa94>
 8007d04:	03d09000 	.word	0x03d09000
 8007d08:	003d0900 	.word	0x003d0900
 8007d0c:	08008f90 	.word	0x08008f90
 8007d10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	dc49      	bgt.n	8007db0 <UART_SetConfig+0x9d4>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	db7c      	blt.n	8007e1a <UART_SetConfig+0xa3e>
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d87a      	bhi.n	8007e1a <UART_SetConfig+0xa3e>
 8007d24:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <UART_SetConfig+0x950>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007db7 	.word	0x08007db7
 8007d30:	08007dbf 	.word	0x08007dbf
 8007d34:	08007e1b 	.word	0x08007e1b
 8007d38:	08007e1b 	.word	0x08007e1b
 8007d3c:	08007dc7 	.word	0x08007dc7
 8007d40:	08007e1b 	.word	0x08007e1b
 8007d44:	08007e1b 	.word	0x08007e1b
 8007d48:	08007e1b 	.word	0x08007e1b
 8007d4c:	08007dd7 	.word	0x08007dd7
 8007d50:	08007e1b 	.word	0x08007e1b
 8007d54:	08007e1b 	.word	0x08007e1b
 8007d58:	08007e1b 	.word	0x08007e1b
 8007d5c:	08007e1b 	.word	0x08007e1b
 8007d60:	08007e1b 	.word	0x08007e1b
 8007d64:	08007e1b 	.word	0x08007e1b
 8007d68:	08007e1b 	.word	0x08007e1b
 8007d6c:	08007de7 	.word	0x08007de7
 8007d70:	08007e1b 	.word	0x08007e1b
 8007d74:	08007e1b 	.word	0x08007e1b
 8007d78:	08007e1b 	.word	0x08007e1b
 8007d7c:	08007e1b 	.word	0x08007e1b
 8007d80:	08007e1b 	.word	0x08007e1b
 8007d84:	08007e1b 	.word	0x08007e1b
 8007d88:	08007e1b 	.word	0x08007e1b
 8007d8c:	08007e1b 	.word	0x08007e1b
 8007d90:	08007e1b 	.word	0x08007e1b
 8007d94:	08007e1b 	.word	0x08007e1b
 8007d98:	08007e1b 	.word	0x08007e1b
 8007d9c:	08007e1b 	.word	0x08007e1b
 8007da0:	08007e1b 	.word	0x08007e1b
 8007da4:	08007e1b 	.word	0x08007e1b
 8007da8:	08007e1b 	.word	0x08007e1b
 8007dac:	08007e0d 	.word	0x08007e0d
 8007db0:	2b40      	cmp	r3, #64	@ 0x40
 8007db2:	d02e      	beq.n	8007e12 <UART_SetConfig+0xa36>
 8007db4:	e031      	b.n	8007e1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007db6:	f7fc fca5 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8007dba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dbc:	e033      	b.n	8007e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dbe:	f7fc fcb7 	bl	8004730 <HAL_RCC_GetPCLK2Freq>
 8007dc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dc4:	e02f      	b.n	8007e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fd fee6 	bl	8005b9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd4:	e027      	b.n	8007e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd6:	f107 0318 	add.w	r3, r7, #24
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe f832 	bl	8005e44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de4:	e01f      	b.n	8007e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007de6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e9c <UART_SetConfig+0xac0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007df2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e9c <UART_SetConfig+0xac0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	08db      	lsrs	r3, r3, #3
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	4a28      	ldr	r2, [pc, #160]	@ (8007ea0 <UART_SetConfig+0xac4>)
 8007dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e04:	e00f      	b.n	8007e26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e06:	4b26      	ldr	r3, [pc, #152]	@ (8007ea0 <UART_SetConfig+0xac4>)
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e0a:	e00c      	b.n	8007e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e0c:	4b25      	ldr	r3, [pc, #148]	@ (8007ea4 <UART_SetConfig+0xac8>)
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e10:	e009      	b.n	8007e26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e18:	e005      	b.n	8007e26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e24:	bf00      	nop
    }

    if (pclk != 0U)
 8007e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d021      	beq.n	8007e70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <UART_SetConfig+0xacc>)
 8007e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e36:	461a      	mov	r2, r3
 8007e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	085b      	lsrs	r3, r3, #1
 8007e44:	441a      	add	r2, r3
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	2b0f      	cmp	r3, #15
 8007e54:	d909      	bls.n	8007e6a <UART_SetConfig+0xa8e>
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5c:	d205      	bcs.n	8007e6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60da      	str	r2, [r3, #12]
 8007e68:	e002      	b.n	8007e70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2200      	movs	r2, #0
 8007e84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e8c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3748      	adds	r7, #72	@ 0x48
 8007e94:	46bd      	mov	sp, r7
 8007e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e9a:	bf00      	nop
 8007e9c:	58024400 	.word	0x58024400
 8007ea0:	03d09000 	.word	0x03d09000
 8007ea4:	003d0900 	.word	0x003d0900
 8007ea8:	08008f90 	.word	0x08008f90

08007eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb8:	f003 0308 	and.w	r3, r3, #8
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007faa:	d10a      	bne.n	8007fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b098      	sub	sp, #96	@ 0x60
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008000:	f7f9 ff42 	bl	8001e88 <HAL_GetTick>
 8008004:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b08      	cmp	r3, #8
 8008012:	d12f      	bne.n	8008074 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008014:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800801c:	2200      	movs	r2, #0
 800801e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f88e 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d022      	beq.n	8008074 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800803c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008042:	653b      	str	r3, [r7, #80]	@ 0x50
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800804c:	647b      	str	r3, [r7, #68]	@ 0x44
 800804e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800805a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e063      	b.n	800813c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b04      	cmp	r3, #4
 8008080:	d149      	bne.n	8008116 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008082:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800808a:	2200      	movs	r2, #0
 800808c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f857 	bl	8008144 <UART_WaitOnFlagUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d03c      	beq.n	8008116 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	623b      	str	r3, [r7, #32]
   return(result);
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80080bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e6      	bne.n	800809c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3308      	adds	r3, #8
 80080d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ee:	61fa      	str	r2, [r7, #28]
 80080f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	69b9      	ldr	r1, [r7, #24]
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	617b      	str	r3, [r7, #20]
   return(result);
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e5      	bne.n	80080ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e012      	b.n	800813c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3758      	adds	r7, #88	@ 0x58
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008154:	e04f      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d04b      	beq.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800815e:	f7f9 fe93 	bl	8001e88 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	429a      	cmp	r2, r3
 800816c:	d302      	bcc.n	8008174 <UART_WaitOnFlagUntilTimeout+0x30>
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e04e      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	d037      	beq.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b80      	cmp	r3, #128	@ 0x80
 800818a:	d034      	beq.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b40      	cmp	r3, #64	@ 0x40
 8008190:	d031      	beq.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b08      	cmp	r3, #8
 800819e:	d110      	bne.n	80081c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2208      	movs	r2, #8
 80081a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f839 	bl	8008220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2208      	movs	r2, #8
 80081b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e029      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081d0:	d111      	bne.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f81f 	bl	8008220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e00f      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	4013      	ands	r3, r2
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	429a      	cmp	r2, r3
 8008204:	bf0c      	ite	eq
 8008206:	2301      	moveq	r3, #1
 8008208:	2300      	movne	r3, #0
 800820a:	b2db      	uxtb	r3, r3
 800820c:	461a      	mov	r2, r3
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	429a      	cmp	r2, r3
 8008212:	d0a0      	beq.n	8008156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008220:	b480      	push	{r7}
 8008222:	b095      	sub	sp, #84	@ 0x54
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800823c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008246:	643b      	str	r3, [r7, #64]	@ 0x40
 8008248:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800824c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e6      	bne.n	8008228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	61fb      	str	r3, [r7, #28]
   return(result);
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	4b1e      	ldr	r3, [pc, #120]	@ (80082e8 <UART_EndRxTransfer+0xc8>)
 800826e:	4013      	ands	r3, r2
 8008270:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800827a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800827c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e5      	bne.n	800825a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008292:	2b01      	cmp	r3, #1
 8008294:	d118      	bne.n	80082c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f023 0310 	bic.w	r3, r3, #16
 80082aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b4:	61bb      	str	r3, [r7, #24]
 80082b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6979      	ldr	r1, [r7, #20]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	613b      	str	r3, [r7, #16]
   return(result);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082dc:	bf00      	nop
 80082de:	3754      	adds	r7, #84	@ 0x54
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	effffffe 	.word	0xeffffffe

080082ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UARTEx_DisableFifoMode+0x16>
 80082fe:	2302      	movs	r3, #2
 8008300:	e027      	b.n	8008352 <HAL_UARTEx_DisableFifoMode+0x66>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2224      	movs	r2, #36	@ 0x24
 800830e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008372:	2302      	movs	r3, #2
 8008374:	e02d      	b.n	80083d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2224      	movs	r2, #36	@ 0x24
 8008382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0201 	bic.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f850 	bl	8008458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e02d      	b.n	800844e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2224      	movs	r2, #36	@ 0x24
 80083fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f812 	bl	8008458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008464:	2b00      	cmp	r3, #0
 8008466:	d108      	bne.n	800847a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008478:	e031      	b.n	80084de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800847a:	2310      	movs	r3, #16
 800847c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800847e:	2310      	movs	r3, #16
 8008480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	0e5b      	lsrs	r3, r3, #25
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	0f5b      	lsrs	r3, r3, #29
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	7b3a      	ldrb	r2, [r7, #12]
 80084a6:	4911      	ldr	r1, [pc, #68]	@ (80084ec <UARTEx_SetNbDataToProcess+0x94>)
 80084a8:	5c8a      	ldrb	r2, [r1, r2]
 80084aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ae:	7b3a      	ldrb	r2, [r7, #12]
 80084b0:	490f      	ldr	r1, [pc, #60]	@ (80084f0 <UARTEx_SetNbDataToProcess+0x98>)
 80084b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	7b7a      	ldrb	r2, [r7, #13]
 80084c4:	4909      	ldr	r1, [pc, #36]	@ (80084ec <UARTEx_SetNbDataToProcess+0x94>)
 80084c6:	5c8a      	ldrb	r2, [r1, r2]
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084cc:	7b7a      	ldrb	r2, [r7, #13]
 80084ce:	4908      	ldr	r1, [pc, #32]	@ (80084f0 <UARTEx_SetNbDataToProcess+0x98>)
 80084d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	08008fa8 	.word	0x08008fa8
 80084f0:	08008fb0 	.word	0x08008fb0

080084f4 <_vsniprintf_r>:
 80084f4:	b530      	push	{r4, r5, lr}
 80084f6:	4614      	mov	r4, r2
 80084f8:	2c00      	cmp	r4, #0
 80084fa:	b09b      	sub	sp, #108	@ 0x6c
 80084fc:	4605      	mov	r5, r0
 80084fe:	461a      	mov	r2, r3
 8008500:	da05      	bge.n	800850e <_vsniprintf_r+0x1a>
 8008502:	238b      	movs	r3, #139	@ 0x8b
 8008504:	6003      	str	r3, [r0, #0]
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	b01b      	add	sp, #108	@ 0x6c
 800850c:	bd30      	pop	{r4, r5, pc}
 800850e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008512:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	9319      	str	r3, [sp, #100]	@ 0x64
 800851c:	bf14      	ite	ne
 800851e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008522:	4623      	moveq	r3, r4
 8008524:	9302      	str	r3, [sp, #8]
 8008526:	9305      	str	r3, [sp, #20]
 8008528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800852c:	9100      	str	r1, [sp, #0]
 800852e:	9104      	str	r1, [sp, #16]
 8008530:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008534:	4669      	mov	r1, sp
 8008536:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008538:	f000 f9ae 	bl	8008898 <_svfiprintf_r>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	bfbc      	itt	lt
 8008540:	238b      	movlt	r3, #139	@ 0x8b
 8008542:	602b      	strlt	r3, [r5, #0]
 8008544:	2c00      	cmp	r4, #0
 8008546:	d0e0      	beq.n	800850a <_vsniprintf_r+0x16>
 8008548:	9b00      	ldr	r3, [sp, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
 800854e:	e7dc      	b.n	800850a <_vsniprintf_r+0x16>

08008550 <vsniprintf>:
 8008550:	b507      	push	{r0, r1, r2, lr}
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	460a      	mov	r2, r1
 8008558:	4601      	mov	r1, r0
 800855a:	4803      	ldr	r0, [pc, #12]	@ (8008568 <vsniprintf+0x18>)
 800855c:	6800      	ldr	r0, [r0, #0]
 800855e:	f7ff ffc9 	bl	80084f4 <_vsniprintf_r>
 8008562:	b003      	add	sp, #12
 8008564:	f85d fb04 	ldr.w	pc, [sp], #4
 8008568:	24001018 	.word	0x24001018

0800856c <memset>:
 800856c:	4402      	add	r2, r0
 800856e:	4603      	mov	r3, r0
 8008570:	4293      	cmp	r3, r2
 8008572:	d100      	bne.n	8008576 <memset+0xa>
 8008574:	4770      	bx	lr
 8008576:	f803 1b01 	strb.w	r1, [r3], #1
 800857a:	e7f9      	b.n	8008570 <memset+0x4>

0800857c <__errno>:
 800857c:	4b01      	ldr	r3, [pc, #4]	@ (8008584 <__errno+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	24001018 	.word	0x24001018

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4d0d      	ldr	r5, [pc, #52]	@ (80085c0 <__libc_init_array+0x38>)
 800858c:	4c0d      	ldr	r4, [pc, #52]	@ (80085c4 <__libc_init_array+0x3c>)
 800858e:	1b64      	subs	r4, r4, r5
 8008590:	10a4      	asrs	r4, r4, #2
 8008592:	2600      	movs	r6, #0
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	4d0b      	ldr	r5, [pc, #44]	@ (80085c8 <__libc_init_array+0x40>)
 800859a:	4c0c      	ldr	r4, [pc, #48]	@ (80085cc <__libc_init_array+0x44>)
 800859c:	f000 fc64 	bl	8008e68 <_init>
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	2600      	movs	r6, #0
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	08008ff4 	.word	0x08008ff4
 80085c4:	08008ff4 	.word	0x08008ff4
 80085c8:	08008ff4 	.word	0x08008ff4
 80085cc:	08008ff8 	.word	0x08008ff8

080085d0 <__retarget_lock_acquire_recursive>:
 80085d0:	4770      	bx	lr

080085d2 <__retarget_lock_release_recursive>:
 80085d2:	4770      	bx	lr

080085d4 <memcpy>:
 80085d4:	440a      	add	r2, r1
 80085d6:	4291      	cmp	r1, r2
 80085d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085dc:	d100      	bne.n	80085e0 <memcpy+0xc>
 80085de:	4770      	bx	lr
 80085e0:	b510      	push	{r4, lr}
 80085e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ea:	4291      	cmp	r1, r2
 80085ec:	d1f9      	bne.n	80085e2 <memcpy+0xe>
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <_free_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4605      	mov	r5, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d041      	beq.n	800867c <_free_r+0x8c>
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f0c      	subs	r4, r1, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	18e4      	addlt	r4, r4, r3
 8008604:	f000 f8e0 	bl	80087c8 <__malloc_lock>
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <_free_r+0x90>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x2c>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	4628      	mov	r0, r5
 8008614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008618:	f000 b8dc 	b.w	80087d4 <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x42>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	1821      	adds	r1, r4, r0
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1809      	addeq	r1, r1, r0
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x1e>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x4c>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x42>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1850      	adds	r0, r2, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x6c>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1850      	adds	r0, r2, r1
 800864a:	4283      	cmp	r3, r0
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x22>
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4408      	add	r0, r1
 8008658:	6010      	str	r0, [r2, #0]
 800865a:	e7da      	b.n	8008612 <_free_r+0x22>
 800865c:	d902      	bls.n	8008664 <_free_r+0x74>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x22>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428b      	cmp	r3, r1
 800866a:	bf04      	itt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6054      	str	r4, [r2, #4]
 800867a:	e7ca      	b.n	8008612 <_free_r+0x22>
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	2400140c 	.word	0x2400140c

08008684 <sbrk_aligned>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4e0f      	ldr	r6, [pc, #60]	@ (80086c4 <sbrk_aligned+0x40>)
 8008688:	460c      	mov	r4, r1
 800868a:	6831      	ldr	r1, [r6, #0]
 800868c:	4605      	mov	r5, r0
 800868e:	b911      	cbnz	r1, 8008696 <sbrk_aligned+0x12>
 8008690:	f000 fba4 	bl	8008ddc <_sbrk_r>
 8008694:	6030      	str	r0, [r6, #0]
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 fb9f 	bl	8008ddc <_sbrk_r>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d103      	bne.n	80086aa <sbrk_aligned+0x26>
 80086a2:	f04f 34ff 	mov.w	r4, #4294967295
 80086a6:	4620      	mov	r0, r4
 80086a8:	bd70      	pop	{r4, r5, r6, pc}
 80086aa:	1cc4      	adds	r4, r0, #3
 80086ac:	f024 0403 	bic.w	r4, r4, #3
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d0f8      	beq.n	80086a6 <sbrk_aligned+0x22>
 80086b4:	1a21      	subs	r1, r4, r0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fb90 	bl	8008ddc <_sbrk_r>
 80086bc:	3001      	adds	r0, #1
 80086be:	d1f2      	bne.n	80086a6 <sbrk_aligned+0x22>
 80086c0:	e7ef      	b.n	80086a2 <sbrk_aligned+0x1e>
 80086c2:	bf00      	nop
 80086c4:	24001408 	.word	0x24001408

080086c8 <_malloc_r>:
 80086c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	1ccd      	adds	r5, r1, #3
 80086ce:	f025 0503 	bic.w	r5, r5, #3
 80086d2:	3508      	adds	r5, #8
 80086d4:	2d0c      	cmp	r5, #12
 80086d6:	bf38      	it	cc
 80086d8:	250c      	movcc	r5, #12
 80086da:	2d00      	cmp	r5, #0
 80086dc:	4606      	mov	r6, r0
 80086de:	db01      	blt.n	80086e4 <_malloc_r+0x1c>
 80086e0:	42a9      	cmp	r1, r5
 80086e2:	d904      	bls.n	80086ee <_malloc_r+0x26>
 80086e4:	230c      	movs	r3, #12
 80086e6:	6033      	str	r3, [r6, #0]
 80086e8:	2000      	movs	r0, #0
 80086ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087c4 <_malloc_r+0xfc>
 80086f2:	f000 f869 	bl	80087c8 <__malloc_lock>
 80086f6:	f8d8 3000 	ldr.w	r3, [r8]
 80086fa:	461c      	mov	r4, r3
 80086fc:	bb44      	cbnz	r4, 8008750 <_malloc_r+0x88>
 80086fe:	4629      	mov	r1, r5
 8008700:	4630      	mov	r0, r6
 8008702:	f7ff ffbf 	bl	8008684 <sbrk_aligned>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	4604      	mov	r4, r0
 800870a:	d158      	bne.n	80087be <_malloc_r+0xf6>
 800870c:	f8d8 4000 	ldr.w	r4, [r8]
 8008710:	4627      	mov	r7, r4
 8008712:	2f00      	cmp	r7, #0
 8008714:	d143      	bne.n	800879e <_malloc_r+0xd6>
 8008716:	2c00      	cmp	r4, #0
 8008718:	d04b      	beq.n	80087b2 <_malloc_r+0xea>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	4639      	mov	r1, r7
 800871e:	4630      	mov	r0, r6
 8008720:	eb04 0903 	add.w	r9, r4, r3
 8008724:	f000 fb5a 	bl	8008ddc <_sbrk_r>
 8008728:	4581      	cmp	r9, r0
 800872a:	d142      	bne.n	80087b2 <_malloc_r+0xea>
 800872c:	6821      	ldr	r1, [r4, #0]
 800872e:	1a6d      	subs	r5, r5, r1
 8008730:	4629      	mov	r1, r5
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff ffa6 	bl	8008684 <sbrk_aligned>
 8008738:	3001      	adds	r0, #1
 800873a:	d03a      	beq.n	80087b2 <_malloc_r+0xea>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	442b      	add	r3, r5
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	f8d8 3000 	ldr.w	r3, [r8]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	bb62      	cbnz	r2, 80087a4 <_malloc_r+0xdc>
 800874a:	f8c8 7000 	str.w	r7, [r8]
 800874e:	e00f      	b.n	8008770 <_malloc_r+0xa8>
 8008750:	6822      	ldr	r2, [r4, #0]
 8008752:	1b52      	subs	r2, r2, r5
 8008754:	d420      	bmi.n	8008798 <_malloc_r+0xd0>
 8008756:	2a0b      	cmp	r2, #11
 8008758:	d917      	bls.n	800878a <_malloc_r+0xc2>
 800875a:	1961      	adds	r1, r4, r5
 800875c:	42a3      	cmp	r3, r4
 800875e:	6025      	str	r5, [r4, #0]
 8008760:	bf18      	it	ne
 8008762:	6059      	strne	r1, [r3, #4]
 8008764:	6863      	ldr	r3, [r4, #4]
 8008766:	bf08      	it	eq
 8008768:	f8c8 1000 	streq.w	r1, [r8]
 800876c:	5162      	str	r2, [r4, r5]
 800876e:	604b      	str	r3, [r1, #4]
 8008770:	4630      	mov	r0, r6
 8008772:	f000 f82f 	bl	80087d4 <__malloc_unlock>
 8008776:	f104 000b 	add.w	r0, r4, #11
 800877a:	1d23      	adds	r3, r4, #4
 800877c:	f020 0007 	bic.w	r0, r0, #7
 8008780:	1ac2      	subs	r2, r0, r3
 8008782:	bf1c      	itt	ne
 8008784:	1a1b      	subne	r3, r3, r0
 8008786:	50a3      	strne	r3, [r4, r2]
 8008788:	e7af      	b.n	80086ea <_malloc_r+0x22>
 800878a:	6862      	ldr	r2, [r4, #4]
 800878c:	42a3      	cmp	r3, r4
 800878e:	bf0c      	ite	eq
 8008790:	f8c8 2000 	streq.w	r2, [r8]
 8008794:	605a      	strne	r2, [r3, #4]
 8008796:	e7eb      	b.n	8008770 <_malloc_r+0xa8>
 8008798:	4623      	mov	r3, r4
 800879a:	6864      	ldr	r4, [r4, #4]
 800879c:	e7ae      	b.n	80086fc <_malloc_r+0x34>
 800879e:	463c      	mov	r4, r7
 80087a0:	687f      	ldr	r7, [r7, #4]
 80087a2:	e7b6      	b.n	8008712 <_malloc_r+0x4a>
 80087a4:	461a      	mov	r2, r3
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	d1fb      	bne.n	80087a4 <_malloc_r+0xdc>
 80087ac:	2300      	movs	r3, #0
 80087ae:	6053      	str	r3, [r2, #4]
 80087b0:	e7de      	b.n	8008770 <_malloc_r+0xa8>
 80087b2:	230c      	movs	r3, #12
 80087b4:	6033      	str	r3, [r6, #0]
 80087b6:	4630      	mov	r0, r6
 80087b8:	f000 f80c 	bl	80087d4 <__malloc_unlock>
 80087bc:	e794      	b.n	80086e8 <_malloc_r+0x20>
 80087be:	6005      	str	r5, [r0, #0]
 80087c0:	e7d6      	b.n	8008770 <_malloc_r+0xa8>
 80087c2:	bf00      	nop
 80087c4:	2400140c 	.word	0x2400140c

080087c8 <__malloc_lock>:
 80087c8:	4801      	ldr	r0, [pc, #4]	@ (80087d0 <__malloc_lock+0x8>)
 80087ca:	f7ff bf01 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 80087ce:	bf00      	nop
 80087d0:	24001404 	.word	0x24001404

080087d4 <__malloc_unlock>:
 80087d4:	4801      	ldr	r0, [pc, #4]	@ (80087dc <__malloc_unlock+0x8>)
 80087d6:	f7ff befc 	b.w	80085d2 <__retarget_lock_release_recursive>
 80087da:	bf00      	nop
 80087dc:	24001404 	.word	0x24001404

080087e0 <__ssputs_r>:
 80087e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	688e      	ldr	r6, [r1, #8]
 80087e6:	461f      	mov	r7, r3
 80087e8:	42be      	cmp	r6, r7
 80087ea:	680b      	ldr	r3, [r1, #0]
 80087ec:	4682      	mov	sl, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	4690      	mov	r8, r2
 80087f2:	d82d      	bhi.n	8008850 <__ssputs_r+0x70>
 80087f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087fc:	d026      	beq.n	800884c <__ssputs_r+0x6c>
 80087fe:	6965      	ldr	r5, [r4, #20]
 8008800:	6909      	ldr	r1, [r1, #16]
 8008802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008806:	eba3 0901 	sub.w	r9, r3, r1
 800880a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800880e:	1c7b      	adds	r3, r7, #1
 8008810:	444b      	add	r3, r9
 8008812:	106d      	asrs	r5, r5, #1
 8008814:	429d      	cmp	r5, r3
 8008816:	bf38      	it	cc
 8008818:	461d      	movcc	r5, r3
 800881a:	0553      	lsls	r3, r2, #21
 800881c:	d527      	bpl.n	800886e <__ssputs_r+0x8e>
 800881e:	4629      	mov	r1, r5
 8008820:	f7ff ff52 	bl	80086c8 <_malloc_r>
 8008824:	4606      	mov	r6, r0
 8008826:	b360      	cbz	r0, 8008882 <__ssputs_r+0xa2>
 8008828:	6921      	ldr	r1, [r4, #16]
 800882a:	464a      	mov	r2, r9
 800882c:	f7ff fed2 	bl	80085d4 <memcpy>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	6126      	str	r6, [r4, #16]
 800883e:	6165      	str	r5, [r4, #20]
 8008840:	444e      	add	r6, r9
 8008842:	eba5 0509 	sub.w	r5, r5, r9
 8008846:	6026      	str	r6, [r4, #0]
 8008848:	60a5      	str	r5, [r4, #8]
 800884a:	463e      	mov	r6, r7
 800884c:	42be      	cmp	r6, r7
 800884e:	d900      	bls.n	8008852 <__ssputs_r+0x72>
 8008850:	463e      	mov	r6, r7
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	4632      	mov	r2, r6
 8008856:	4641      	mov	r1, r8
 8008858:	f000 faa6 	bl	8008da8 <memmove>
 800885c:	68a3      	ldr	r3, [r4, #8]
 800885e:	1b9b      	subs	r3, r3, r6
 8008860:	60a3      	str	r3, [r4, #8]
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	4433      	add	r3, r6
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	2000      	movs	r0, #0
 800886a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886e:	462a      	mov	r2, r5
 8008870:	f000 fac4 	bl	8008dfc <_realloc_r>
 8008874:	4606      	mov	r6, r0
 8008876:	2800      	cmp	r0, #0
 8008878:	d1e0      	bne.n	800883c <__ssputs_r+0x5c>
 800887a:	6921      	ldr	r1, [r4, #16]
 800887c:	4650      	mov	r0, sl
 800887e:	f7ff feb7 	bl	80085f0 <_free_r>
 8008882:	230c      	movs	r3, #12
 8008884:	f8ca 3000 	str.w	r3, [sl]
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	e7e9      	b.n	800886a <__ssputs_r+0x8a>
	...

08008898 <_svfiprintf_r>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	4698      	mov	r8, r3
 800889e:	898b      	ldrh	r3, [r1, #12]
 80088a0:	061b      	lsls	r3, r3, #24
 80088a2:	b09d      	sub	sp, #116	@ 0x74
 80088a4:	4607      	mov	r7, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	4614      	mov	r4, r2
 80088aa:	d510      	bpl.n	80088ce <_svfiprintf_r+0x36>
 80088ac:	690b      	ldr	r3, [r1, #16]
 80088ae:	b973      	cbnz	r3, 80088ce <_svfiprintf_r+0x36>
 80088b0:	2140      	movs	r1, #64	@ 0x40
 80088b2:	f7ff ff09 	bl	80086c8 <_malloc_r>
 80088b6:	6028      	str	r0, [r5, #0]
 80088b8:	6128      	str	r0, [r5, #16]
 80088ba:	b930      	cbnz	r0, 80088ca <_svfiprintf_r+0x32>
 80088bc:	230c      	movs	r3, #12
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	b01d      	add	sp, #116	@ 0x74
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	2340      	movs	r3, #64	@ 0x40
 80088cc:	616b      	str	r3, [r5, #20]
 80088ce:	2300      	movs	r3, #0
 80088d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d2:	2320      	movs	r3, #32
 80088d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80088dc:	2330      	movs	r3, #48	@ 0x30
 80088de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a7c <_svfiprintf_r+0x1e4>
 80088e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088e6:	f04f 0901 	mov.w	r9, #1
 80088ea:	4623      	mov	r3, r4
 80088ec:	469a      	mov	sl, r3
 80088ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f2:	b10a      	cbz	r2, 80088f8 <_svfiprintf_r+0x60>
 80088f4:	2a25      	cmp	r2, #37	@ 0x25
 80088f6:	d1f9      	bne.n	80088ec <_svfiprintf_r+0x54>
 80088f8:	ebba 0b04 	subs.w	fp, sl, r4
 80088fc:	d00b      	beq.n	8008916 <_svfiprintf_r+0x7e>
 80088fe:	465b      	mov	r3, fp
 8008900:	4622      	mov	r2, r4
 8008902:	4629      	mov	r1, r5
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff ff6b 	bl	80087e0 <__ssputs_r>
 800890a:	3001      	adds	r0, #1
 800890c:	f000 80a7 	beq.w	8008a5e <_svfiprintf_r+0x1c6>
 8008910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008912:	445a      	add	r2, fp
 8008914:	9209      	str	r2, [sp, #36]	@ 0x24
 8008916:	f89a 3000 	ldrb.w	r3, [sl]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 809f 	beq.w	8008a5e <_svfiprintf_r+0x1c6>
 8008920:	2300      	movs	r3, #0
 8008922:	f04f 32ff 	mov.w	r2, #4294967295
 8008926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800892a:	f10a 0a01 	add.w	sl, sl, #1
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	9307      	str	r3, [sp, #28]
 8008932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008936:	931a      	str	r3, [sp, #104]	@ 0x68
 8008938:	4654      	mov	r4, sl
 800893a:	2205      	movs	r2, #5
 800893c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008940:	484e      	ldr	r0, [pc, #312]	@ (8008a7c <_svfiprintf_r+0x1e4>)
 8008942:	f7f7 fcd5 	bl	80002f0 <memchr>
 8008946:	9a04      	ldr	r2, [sp, #16]
 8008948:	b9d8      	cbnz	r0, 8008982 <_svfiprintf_r+0xea>
 800894a:	06d0      	lsls	r0, r2, #27
 800894c:	bf44      	itt	mi
 800894e:	2320      	movmi	r3, #32
 8008950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008954:	0711      	lsls	r1, r2, #28
 8008956:	bf44      	itt	mi
 8008958:	232b      	movmi	r3, #43	@ 0x2b
 800895a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800895e:	f89a 3000 	ldrb.w	r3, [sl]
 8008962:	2b2a      	cmp	r3, #42	@ 0x2a
 8008964:	d015      	beq.n	8008992 <_svfiprintf_r+0xfa>
 8008966:	9a07      	ldr	r2, [sp, #28]
 8008968:	4654      	mov	r4, sl
 800896a:	2000      	movs	r0, #0
 800896c:	f04f 0c0a 	mov.w	ip, #10
 8008970:	4621      	mov	r1, r4
 8008972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008976:	3b30      	subs	r3, #48	@ 0x30
 8008978:	2b09      	cmp	r3, #9
 800897a:	d94b      	bls.n	8008a14 <_svfiprintf_r+0x17c>
 800897c:	b1b0      	cbz	r0, 80089ac <_svfiprintf_r+0x114>
 800897e:	9207      	str	r2, [sp, #28]
 8008980:	e014      	b.n	80089ac <_svfiprintf_r+0x114>
 8008982:	eba0 0308 	sub.w	r3, r0, r8
 8008986:	fa09 f303 	lsl.w	r3, r9, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	46a2      	mov	sl, r4
 8008990:	e7d2      	b.n	8008938 <_svfiprintf_r+0xa0>
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	1d19      	adds	r1, r3, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	9103      	str	r1, [sp, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfbb      	ittet	lt
 800899e:	425b      	neglt	r3, r3
 80089a0:	f042 0202 	orrlt.w	r2, r2, #2
 80089a4:	9307      	strge	r3, [sp, #28]
 80089a6:	9307      	strlt	r3, [sp, #28]
 80089a8:	bfb8      	it	lt
 80089aa:	9204      	strlt	r2, [sp, #16]
 80089ac:	7823      	ldrb	r3, [r4, #0]
 80089ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80089b0:	d10a      	bne.n	80089c8 <_svfiprintf_r+0x130>
 80089b2:	7863      	ldrb	r3, [r4, #1]
 80089b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b6:	d132      	bne.n	8008a1e <_svfiprintf_r+0x186>
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	1d1a      	adds	r2, r3, #4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	9203      	str	r2, [sp, #12]
 80089c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089c4:	3402      	adds	r4, #2
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a8c <_svfiprintf_r+0x1f4>
 80089cc:	7821      	ldrb	r1, [r4, #0]
 80089ce:	2203      	movs	r2, #3
 80089d0:	4650      	mov	r0, sl
 80089d2:	f7f7 fc8d 	bl	80002f0 <memchr>
 80089d6:	b138      	cbz	r0, 80089e8 <_svfiprintf_r+0x150>
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	eba0 000a 	sub.w	r0, r0, sl
 80089de:	2240      	movs	r2, #64	@ 0x40
 80089e0:	4082      	lsls	r2, r0
 80089e2:	4313      	orrs	r3, r2
 80089e4:	3401      	adds	r4, #1
 80089e6:	9304      	str	r3, [sp, #16]
 80089e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ec:	4824      	ldr	r0, [pc, #144]	@ (8008a80 <_svfiprintf_r+0x1e8>)
 80089ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089f2:	2206      	movs	r2, #6
 80089f4:	f7f7 fc7c 	bl	80002f0 <memchr>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d036      	beq.n	8008a6a <_svfiprintf_r+0x1d2>
 80089fc:	4b21      	ldr	r3, [pc, #132]	@ (8008a84 <_svfiprintf_r+0x1ec>)
 80089fe:	bb1b      	cbnz	r3, 8008a48 <_svfiprintf_r+0x1b0>
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	3307      	adds	r3, #7
 8008a04:	f023 0307 	bic.w	r3, r3, #7
 8008a08:	3308      	adds	r3, #8
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0e:	4433      	add	r3, r6
 8008a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a12:	e76a      	b.n	80088ea <_svfiprintf_r+0x52>
 8008a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a18:	460c      	mov	r4, r1
 8008a1a:	2001      	movs	r0, #1
 8008a1c:	e7a8      	b.n	8008970 <_svfiprintf_r+0xd8>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	3401      	adds	r4, #1
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	4619      	mov	r1, r3
 8008a26:	f04f 0c0a 	mov.w	ip, #10
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a30:	3a30      	subs	r2, #48	@ 0x30
 8008a32:	2a09      	cmp	r2, #9
 8008a34:	d903      	bls.n	8008a3e <_svfiprintf_r+0x1a6>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0c6      	beq.n	80089c8 <_svfiprintf_r+0x130>
 8008a3a:	9105      	str	r1, [sp, #20]
 8008a3c:	e7c4      	b.n	80089c8 <_svfiprintf_r+0x130>
 8008a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a42:	4604      	mov	r4, r0
 8008a44:	2301      	movs	r3, #1
 8008a46:	e7f0      	b.n	8008a2a <_svfiprintf_r+0x192>
 8008a48:	ab03      	add	r3, sp, #12
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a88 <_svfiprintf_r+0x1f0>)
 8008a50:	a904      	add	r1, sp, #16
 8008a52:	4638      	mov	r0, r7
 8008a54:	f3af 8000 	nop.w
 8008a58:	1c42      	adds	r2, r0, #1
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	d1d6      	bne.n	8008a0c <_svfiprintf_r+0x174>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	065b      	lsls	r3, r3, #25
 8008a62:	f53f af2d 	bmi.w	80088c0 <_svfiprintf_r+0x28>
 8008a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a68:	e72c      	b.n	80088c4 <_svfiprintf_r+0x2c>
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <_svfiprintf_r+0x1f0>)
 8008a72:	a904      	add	r1, sp, #16
 8008a74:	4638      	mov	r0, r7
 8008a76:	f000 f879 	bl	8008b6c <_printf_i>
 8008a7a:	e7ed      	b.n	8008a58 <_svfiprintf_r+0x1c0>
 8008a7c:	08008fb8 	.word	0x08008fb8
 8008a80:	08008fc2 	.word	0x08008fc2
 8008a84:	00000000 	.word	0x00000000
 8008a88:	080087e1 	.word	0x080087e1
 8008a8c:	08008fbe 	.word	0x08008fbe

08008a90 <_printf_common>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	4616      	mov	r6, r2
 8008a96:	4698      	mov	r8, r3
 8008a98:	688a      	ldr	r2, [r1, #8]
 8008a9a:	690b      	ldr	r3, [r1, #16]
 8008a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	bfb8      	it	lt
 8008aa4:	4613      	movlt	r3, r2
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008aac:	4607      	mov	r7, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	b10a      	cbz	r2, 8008ab6 <_printf_common+0x26>
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	0699      	lsls	r1, r3, #26
 8008aba:	bf42      	ittt	mi
 8008abc:	6833      	ldrmi	r3, [r6, #0]
 8008abe:	3302      	addmi	r3, #2
 8008ac0:	6033      	strmi	r3, [r6, #0]
 8008ac2:	6825      	ldr	r5, [r4, #0]
 8008ac4:	f015 0506 	ands.w	r5, r5, #6
 8008ac8:	d106      	bne.n	8008ad8 <_printf_common+0x48>
 8008aca:	f104 0a19 	add.w	sl, r4, #25
 8008ace:	68e3      	ldr	r3, [r4, #12]
 8008ad0:	6832      	ldr	r2, [r6, #0]
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	42ab      	cmp	r3, r5
 8008ad6:	dc26      	bgt.n	8008b26 <_printf_common+0x96>
 8008ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	3b00      	subs	r3, #0
 8008ae0:	bf18      	it	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	0692      	lsls	r2, r2, #26
 8008ae6:	d42b      	bmi.n	8008b40 <_printf_common+0xb0>
 8008ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008aec:	4641      	mov	r1, r8
 8008aee:	4638      	mov	r0, r7
 8008af0:	47c8      	blx	r9
 8008af2:	3001      	adds	r0, #1
 8008af4:	d01e      	beq.n	8008b34 <_printf_common+0xa4>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	f003 0306 	and.w	r3, r3, #6
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	bf02      	ittt	eq
 8008b02:	68e5      	ldreq	r5, [r4, #12]
 8008b04:	6833      	ldreq	r3, [r6, #0]
 8008b06:	1aed      	subeq	r5, r5, r3
 8008b08:	68a3      	ldr	r3, [r4, #8]
 8008b0a:	bf0c      	ite	eq
 8008b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b10:	2500      	movne	r5, #0
 8008b12:	4293      	cmp	r3, r2
 8008b14:	bfc4      	itt	gt
 8008b16:	1a9b      	subgt	r3, r3, r2
 8008b18:	18ed      	addgt	r5, r5, r3
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	341a      	adds	r4, #26
 8008b1e:	42b5      	cmp	r5, r6
 8008b20:	d11a      	bne.n	8008b58 <_printf_common+0xc8>
 8008b22:	2000      	movs	r0, #0
 8008b24:	e008      	b.n	8008b38 <_printf_common+0xa8>
 8008b26:	2301      	movs	r3, #1
 8008b28:	4652      	mov	r2, sl
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	47c8      	blx	r9
 8008b30:	3001      	adds	r0, #1
 8008b32:	d103      	bne.n	8008b3c <_printf_common+0xac>
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	e7c6      	b.n	8008ace <_printf_common+0x3e>
 8008b40:	18e1      	adds	r1, r4, r3
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	2030      	movs	r0, #48	@ 0x30
 8008b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b4a:	4422      	add	r2, r4
 8008b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b54:	3302      	adds	r3, #2
 8008b56:	e7c7      	b.n	8008ae8 <_printf_common+0x58>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	4638      	mov	r0, r7
 8008b60:	47c8      	blx	r9
 8008b62:	3001      	adds	r0, #1
 8008b64:	d0e6      	beq.n	8008b34 <_printf_common+0xa4>
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7d9      	b.n	8008b1e <_printf_common+0x8e>
	...

08008b6c <_printf_i>:
 8008b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	7e0f      	ldrb	r7, [r1, #24]
 8008b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b74:	2f78      	cmp	r7, #120	@ 0x78
 8008b76:	4691      	mov	r9, r2
 8008b78:	4680      	mov	r8, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	469a      	mov	sl, r3
 8008b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b82:	d807      	bhi.n	8008b94 <_printf_i+0x28>
 8008b84:	2f62      	cmp	r7, #98	@ 0x62
 8008b86:	d80a      	bhi.n	8008b9e <_printf_i+0x32>
 8008b88:	2f00      	cmp	r7, #0
 8008b8a:	f000 80d1 	beq.w	8008d30 <_printf_i+0x1c4>
 8008b8e:	2f58      	cmp	r7, #88	@ 0x58
 8008b90:	f000 80b8 	beq.w	8008d04 <_printf_i+0x198>
 8008b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b9c:	e03a      	b.n	8008c14 <_printf_i+0xa8>
 8008b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ba2:	2b15      	cmp	r3, #21
 8008ba4:	d8f6      	bhi.n	8008b94 <_printf_i+0x28>
 8008ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8008bac <_printf_i+0x40>)
 8008ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008c19 	.word	0x08008c19
 8008bb4:	08008b95 	.word	0x08008b95
 8008bb8:	08008b95 	.word	0x08008b95
 8008bbc:	08008b95 	.word	0x08008b95
 8008bc0:	08008b95 	.word	0x08008b95
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008b95 	.word	0x08008b95
 8008bcc:	08008b95 	.word	0x08008b95
 8008bd0:	08008b95 	.word	0x08008b95
 8008bd4:	08008b95 	.word	0x08008b95
 8008bd8:	08008d17 	.word	0x08008d17
 8008bdc:	08008c43 	.word	0x08008c43
 8008be0:	08008cd1 	.word	0x08008cd1
 8008be4:	08008b95 	.word	0x08008b95
 8008be8:	08008b95 	.word	0x08008b95
 8008bec:	08008d39 	.word	0x08008d39
 8008bf0:	08008b95 	.word	0x08008b95
 8008bf4:	08008c43 	.word	0x08008c43
 8008bf8:	08008b95 	.word	0x08008b95
 8008bfc:	08008b95 	.word	0x08008b95
 8008c00:	08008cd9 	.word	0x08008cd9
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	1d1a      	adds	r2, r3, #4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6032      	str	r2, [r6, #0]
 8008c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c14:	2301      	movs	r3, #1
 8008c16:	e09c      	b.n	8008d52 <_printf_i+0x1e6>
 8008c18:	6833      	ldr	r3, [r6, #0]
 8008c1a:	6820      	ldr	r0, [r4, #0]
 8008c1c:	1d19      	adds	r1, r3, #4
 8008c1e:	6031      	str	r1, [r6, #0]
 8008c20:	0606      	lsls	r6, r0, #24
 8008c22:	d501      	bpl.n	8008c28 <_printf_i+0xbc>
 8008c24:	681d      	ldr	r5, [r3, #0]
 8008c26:	e003      	b.n	8008c30 <_printf_i+0xc4>
 8008c28:	0645      	lsls	r5, r0, #25
 8008c2a:	d5fb      	bpl.n	8008c24 <_printf_i+0xb8>
 8008c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	da03      	bge.n	8008c3c <_printf_i+0xd0>
 8008c34:	232d      	movs	r3, #45	@ 0x2d
 8008c36:	426d      	negs	r5, r5
 8008c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c3c:	4858      	ldr	r0, [pc, #352]	@ (8008da0 <_printf_i+0x234>)
 8008c3e:	230a      	movs	r3, #10
 8008c40:	e011      	b.n	8008c66 <_printf_i+0xfa>
 8008c42:	6821      	ldr	r1, [r4, #0]
 8008c44:	6833      	ldr	r3, [r6, #0]
 8008c46:	0608      	lsls	r0, r1, #24
 8008c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c4c:	d402      	bmi.n	8008c54 <_printf_i+0xe8>
 8008c4e:	0649      	lsls	r1, r1, #25
 8008c50:	bf48      	it	mi
 8008c52:	b2ad      	uxthmi	r5, r5
 8008c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c56:	4852      	ldr	r0, [pc, #328]	@ (8008da0 <_printf_i+0x234>)
 8008c58:	6033      	str	r3, [r6, #0]
 8008c5a:	bf14      	ite	ne
 8008c5c:	230a      	movne	r3, #10
 8008c5e:	2308      	moveq	r3, #8
 8008c60:	2100      	movs	r1, #0
 8008c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c66:	6866      	ldr	r6, [r4, #4]
 8008c68:	60a6      	str	r6, [r4, #8]
 8008c6a:	2e00      	cmp	r6, #0
 8008c6c:	db05      	blt.n	8008c7a <_printf_i+0x10e>
 8008c6e:	6821      	ldr	r1, [r4, #0]
 8008c70:	432e      	orrs	r6, r5
 8008c72:	f021 0104 	bic.w	r1, r1, #4
 8008c76:	6021      	str	r1, [r4, #0]
 8008c78:	d04b      	beq.n	8008d12 <_printf_i+0x1a6>
 8008c7a:	4616      	mov	r6, r2
 8008c7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c80:	fb03 5711 	mls	r7, r3, r1, r5
 8008c84:	5dc7      	ldrb	r7, [r0, r7]
 8008c86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c8a:	462f      	mov	r7, r5
 8008c8c:	42bb      	cmp	r3, r7
 8008c8e:	460d      	mov	r5, r1
 8008c90:	d9f4      	bls.n	8008c7c <_printf_i+0x110>
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d10b      	bne.n	8008cae <_printf_i+0x142>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	07df      	lsls	r7, r3, #31
 8008c9a:	d508      	bpl.n	8008cae <_printf_i+0x142>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	6861      	ldr	r1, [r4, #4]
 8008ca0:	4299      	cmp	r1, r3
 8008ca2:	bfde      	ittt	le
 8008ca4:	2330      	movle	r3, #48	@ 0x30
 8008ca6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008caa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cae:	1b92      	subs	r2, r2, r6
 8008cb0:	6122      	str	r2, [r4, #16]
 8008cb2:	f8cd a000 	str.w	sl, [sp]
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	aa03      	add	r2, sp, #12
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	f7ff fee7 	bl	8008a90 <_printf_common>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d14a      	bne.n	8008d5c <_printf_i+0x1f0>
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	b004      	add	sp, #16
 8008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	f043 0320 	orr.w	r3, r3, #32
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	4832      	ldr	r0, [pc, #200]	@ (8008da4 <_printf_i+0x238>)
 8008cda:	2778      	movs	r7, #120	@ 0x78
 8008cdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	6831      	ldr	r1, [r6, #0]
 8008ce4:	061f      	lsls	r7, r3, #24
 8008ce6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cea:	d402      	bmi.n	8008cf2 <_printf_i+0x186>
 8008cec:	065f      	lsls	r7, r3, #25
 8008cee:	bf48      	it	mi
 8008cf0:	b2ad      	uxthmi	r5, r5
 8008cf2:	6031      	str	r1, [r6, #0]
 8008cf4:	07d9      	lsls	r1, r3, #31
 8008cf6:	bf44      	itt	mi
 8008cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8008cfc:	6023      	strmi	r3, [r4, #0]
 8008cfe:	b11d      	cbz	r5, 8008d08 <_printf_i+0x19c>
 8008d00:	2310      	movs	r3, #16
 8008d02:	e7ad      	b.n	8008c60 <_printf_i+0xf4>
 8008d04:	4826      	ldr	r0, [pc, #152]	@ (8008da0 <_printf_i+0x234>)
 8008d06:	e7e9      	b.n	8008cdc <_printf_i+0x170>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	f023 0320 	bic.w	r3, r3, #32
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	e7f6      	b.n	8008d00 <_printf_i+0x194>
 8008d12:	4616      	mov	r6, r2
 8008d14:	e7bd      	b.n	8008c92 <_printf_i+0x126>
 8008d16:	6833      	ldr	r3, [r6, #0]
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	6961      	ldr	r1, [r4, #20]
 8008d1c:	1d18      	adds	r0, r3, #4
 8008d1e:	6030      	str	r0, [r6, #0]
 8008d20:	062e      	lsls	r6, r5, #24
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	d501      	bpl.n	8008d2a <_printf_i+0x1be>
 8008d26:	6019      	str	r1, [r3, #0]
 8008d28:	e002      	b.n	8008d30 <_printf_i+0x1c4>
 8008d2a:	0668      	lsls	r0, r5, #25
 8008d2c:	d5fb      	bpl.n	8008d26 <_printf_i+0x1ba>
 8008d2e:	8019      	strh	r1, [r3, #0]
 8008d30:	2300      	movs	r3, #0
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	4616      	mov	r6, r2
 8008d36:	e7bc      	b.n	8008cb2 <_printf_i+0x146>
 8008d38:	6833      	ldr	r3, [r6, #0]
 8008d3a:	1d1a      	adds	r2, r3, #4
 8008d3c:	6032      	str	r2, [r6, #0]
 8008d3e:	681e      	ldr	r6, [r3, #0]
 8008d40:	6862      	ldr	r2, [r4, #4]
 8008d42:	2100      	movs	r1, #0
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7f7 fad3 	bl	80002f0 <memchr>
 8008d4a:	b108      	cbz	r0, 8008d50 <_printf_i+0x1e4>
 8008d4c:	1b80      	subs	r0, r0, r6
 8008d4e:	6060      	str	r0, [r4, #4]
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	2300      	movs	r3, #0
 8008d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d5a:	e7aa      	b.n	8008cb2 <_printf_i+0x146>
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	4632      	mov	r2, r6
 8008d60:	4649      	mov	r1, r9
 8008d62:	4640      	mov	r0, r8
 8008d64:	47d0      	blx	sl
 8008d66:	3001      	adds	r0, #1
 8008d68:	d0ad      	beq.n	8008cc6 <_printf_i+0x15a>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	079b      	lsls	r3, r3, #30
 8008d6e:	d413      	bmi.n	8008d98 <_printf_i+0x22c>
 8008d70:	68e0      	ldr	r0, [r4, #12]
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	4298      	cmp	r0, r3
 8008d76:	bfb8      	it	lt
 8008d78:	4618      	movlt	r0, r3
 8008d7a:	e7a6      	b.n	8008cca <_printf_i+0x15e>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4632      	mov	r2, r6
 8008d80:	4649      	mov	r1, r9
 8008d82:	4640      	mov	r0, r8
 8008d84:	47d0      	blx	sl
 8008d86:	3001      	adds	r0, #1
 8008d88:	d09d      	beq.n	8008cc6 <_printf_i+0x15a>
 8008d8a:	3501      	adds	r5, #1
 8008d8c:	68e3      	ldr	r3, [r4, #12]
 8008d8e:	9903      	ldr	r1, [sp, #12]
 8008d90:	1a5b      	subs	r3, r3, r1
 8008d92:	42ab      	cmp	r3, r5
 8008d94:	dcf2      	bgt.n	8008d7c <_printf_i+0x210>
 8008d96:	e7eb      	b.n	8008d70 <_printf_i+0x204>
 8008d98:	2500      	movs	r5, #0
 8008d9a:	f104 0619 	add.w	r6, r4, #25
 8008d9e:	e7f5      	b.n	8008d8c <_printf_i+0x220>
 8008da0:	08008fc9 	.word	0x08008fc9
 8008da4:	08008fda 	.word	0x08008fda

08008da8 <memmove>:
 8008da8:	4288      	cmp	r0, r1
 8008daa:	b510      	push	{r4, lr}
 8008dac:	eb01 0402 	add.w	r4, r1, r2
 8008db0:	d902      	bls.n	8008db8 <memmove+0x10>
 8008db2:	4284      	cmp	r4, r0
 8008db4:	4623      	mov	r3, r4
 8008db6:	d807      	bhi.n	8008dc8 <memmove+0x20>
 8008db8:	1e43      	subs	r3, r0, #1
 8008dba:	42a1      	cmp	r1, r4
 8008dbc:	d008      	beq.n	8008dd0 <memmove+0x28>
 8008dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dc6:	e7f8      	b.n	8008dba <memmove+0x12>
 8008dc8:	4402      	add	r2, r0
 8008dca:	4601      	mov	r1, r0
 8008dcc:	428a      	cmp	r2, r1
 8008dce:	d100      	bne.n	8008dd2 <memmove+0x2a>
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dda:	e7f7      	b.n	8008dcc <memmove+0x24>

08008ddc <_sbrk_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d06      	ldr	r5, [pc, #24]	@ (8008df8 <_sbrk_r+0x1c>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	f7f8 feae 	bl	8001b48 <_sbrk>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_sbrk_r+0x1a>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_sbrk_r+0x1a>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	24001400 	.word	0x24001400

08008dfc <_realloc_r>:
 8008dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e00:	4607      	mov	r7, r0
 8008e02:	4614      	mov	r4, r2
 8008e04:	460d      	mov	r5, r1
 8008e06:	b921      	cbnz	r1, 8008e12 <_realloc_r+0x16>
 8008e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	f7ff bc5b 	b.w	80086c8 <_malloc_r>
 8008e12:	b92a      	cbnz	r2, 8008e20 <_realloc_r+0x24>
 8008e14:	f7ff fbec 	bl	80085f0 <_free_r>
 8008e18:	4625      	mov	r5, r4
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e20:	f000 f81a 	bl	8008e58 <_malloc_usable_size_r>
 8008e24:	4284      	cmp	r4, r0
 8008e26:	4606      	mov	r6, r0
 8008e28:	d802      	bhi.n	8008e30 <_realloc_r+0x34>
 8008e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e2e:	d8f4      	bhi.n	8008e1a <_realloc_r+0x1e>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4638      	mov	r0, r7
 8008e34:	f7ff fc48 	bl	80086c8 <_malloc_r>
 8008e38:	4680      	mov	r8, r0
 8008e3a:	b908      	cbnz	r0, 8008e40 <_realloc_r+0x44>
 8008e3c:	4645      	mov	r5, r8
 8008e3e:	e7ec      	b.n	8008e1a <_realloc_r+0x1e>
 8008e40:	42b4      	cmp	r4, r6
 8008e42:	4622      	mov	r2, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	bf28      	it	cs
 8008e48:	4632      	movcs	r2, r6
 8008e4a:	f7ff fbc3 	bl	80085d4 <memcpy>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff fbcd 	bl	80085f0 <_free_r>
 8008e56:	e7f1      	b.n	8008e3c <_realloc_r+0x40>

08008e58 <_malloc_usable_size_r>:
 8008e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5c:	1f18      	subs	r0, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfbc      	itt	lt
 8008e62:	580b      	ldrlt	r3, [r1, r0]
 8008e64:	18c0      	addlt	r0, r0, r3
 8008e66:	4770      	bx	lr

08008e68 <_init>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	bf00      	nop
 8008e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6e:	bc08      	pop	{r3}
 8008e70:	469e      	mov	lr, r3
 8008e72:	4770      	bx	lr

08008e74 <_fini>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr
