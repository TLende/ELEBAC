
Winbond_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800b180  0800b180  0000c180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b2d8  0800b2d8  0000c2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b2e0  0800b2e0  0000c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b2e4  0800b2e4  0000c2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000898  24000000  0800b2e8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000430  24000898  0800bb80  0000d898  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000cc8  0800bb80  0000dcc8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d898  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aecd  00000000  00000000  0000d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003070  00000000  00000000  00028793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d71  00000000  00000000  0002c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a030  00000000  00000000  0002d6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019081  00000000  00000000  00067721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016af74  00000000  00000000  000807a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eb716  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ecc  00000000  00000000  001eb75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001f0628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000898 	.word	0x24000898
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b168 	.word	0x0800b168

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400089c 	.word	0x2400089c
 80002dc:	0800b168 	.word	0x0800b168

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <CAN_SendMessage>:
        }
        USART1_Printf("\r\n");
    }
}

void CAN_SendMessage(uint16_t ID) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    // Configure TX Header
    TxHeader.Identifier = ID;
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ca:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <CAN_SendMessage+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]

    // Send Message
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <CAN_SendMessage+0x60>)
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <CAN_SendMessage+0x5c>)
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <CAN_SendMessage+0x64>)
 8000702:	f003 ff38 	bl	8004576 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <CAN_SendMessage+0x54>
        Error_Handler();
 800070c:	f000 feb2 	bl	8001474 <Error_Handler>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	240008fc 	.word	0x240008fc
 800071c:	24000010 	.word	0x24000010
 8000720:	24000930 	.word	0x24000930

08000724 <Read_Register>:
///////////User friendly code for implementation///////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Read all status registers
void Read_Register(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	SR_1 = Read_Status_Register(SR_1_Addr);
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <Read_Register+0x50>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fa13 	bl	8000b58 <Read_Status_Register>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <Read_Register+0x54>)
 8000738:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800073a:	2064      	movs	r0, #100	@ 0x64
 800073c:	f000 fb78 	bl	8000e30 <delay_ns>
	SR_2 = Read_Status_Register(SR_2_Addr);
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <Read_Register+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fa07 	bl	8000b58 <Read_Status_Register>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <Read_Register+0x5c>)
 8000750:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 8000752:	2064      	movs	r0, #100	@ 0x64
 8000754:	f000 fb6c 	bl	8000e30 <delay_ns>
	SR_3 = Read_Status_Register(SR_3_Addr);
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <Read_Register+0x60>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f9fb 	bl	8000b58 <Read_Status_Register>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <Read_Register+0x64>)
 8000768:	701a      	strb	r2, [r3, #0]
	delay_ns(DELAY_NS);
 800076a:	2064      	movs	r0, #100	@ 0x64
 800076c:	f000 fb60 	bl	8000e30 <delay_ns>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	24000818 	.word	0x24000818
 8000778:	240008d0 	.word	0x240008d0
 800077c:	24000819 	.word	0x24000819
 8000780:	240008d1 	.word	0x240008d1
 8000784:	2400081a 	.word	0x2400081a
 8000788:	240008d2 	.word	0x240008d2

0800078c <Write_Data>:

//Write data to buffer in microcontroller
void Write_Data(uint8_t* data, uint16_t lenght){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	807b      	strh	r3, [r7, #2]
	if((Page_Index==0)&&(Buffer_Index==0)){
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <Write_Data+0x74>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d106      	bne.n	80007ae <Write_Data+0x22>
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <Write_Data+0x78>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <Write_Data+0x22>
		Block_Erase(0);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fb0b 	bl	8000dc4 <Block_Erase>
	}
	uint16_t count=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	81fb      	strh	r3, [r7, #14]
	while(count<lenght){
 80007b2:	e01c      	b.n	80007ee <Write_Data+0x62>
		*Buffer=*data;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <Write_Data+0x7c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	701a      	strb	r2, [r3, #0]
		Buffer++;
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <Write_Data+0x7c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <Write_Data+0x7c>)
 80007c6:	6013      	str	r3, [r2, #0]
		data++;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
		Buffer_Index++;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <Write_Data+0x78>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <Write_Data+0x78>)
 80007d8:	801a      	strh	r2, [r3, #0]
		count++;
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	3301      	adds	r3, #1
 80007de:	81fb      	strh	r3, [r7, #14]
		if(Buffer_Index>=2048){
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <Write_Data+0x78>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007e8:	d301      	bcc.n	80007ee <Write_Data+0x62>
			Write_to_page();
 80007ea:	f000 f80f 	bl	800080c <Write_to_page>
	while(count<lenght){
 80007ee:	89fa      	ldrh	r2, [r7, #14]
 80007f0:	887b      	ldrh	r3, [r7, #2]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3de      	bcc.n	80007b4 <Write_Data+0x28>
		}
	}
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	240008c2 	.word	0x240008c2
 8000804:	240008cc 	.word	0x240008cc
 8000808:	24000000 	.word	0x24000000

0800080c <Write_to_page>:

//Write data to buffer in flash IC, then write buffer to page
void Write_to_page(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	Write_Data_Buffer(0, &write_data[0], Buffer_Index);
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <Write_to_page+0x50>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4912      	ldr	r1, [pc, #72]	@ (8000860 <Write_to_page+0x54>)
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fa2d 	bl	8000c78 <Write_Data_Buffer>
	Write_Data_Flash(Page_Index);
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <Write_to_page+0x58>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fa66 	bl	8000cf4 <Write_Data_Flash>
	Page_Index++;
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <Write_to_page+0x58>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <Write_to_page+0x58>)
 8000832:	801a      	strh	r2, [r3, #0]
	Buffer_Index=0;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <Write_to_page+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	801a      	strh	r2, [r3, #0]
	Buffer=&write_data[0];
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <Write_to_page+0x5c>)
 800083c:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <Write_to_page+0x54>)
 800083e:	601a      	str	r2, [r3, #0]
	memset(write_data, 0xFF, sizeof(write_data));
 8000840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000844:	21ff      	movs	r1, #255	@ 0xff
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <Write_to_page+0x54>)
 8000848:	f00a f810 	bl	800a86c <memset>
	Automatic_Block_Managment(Page_Index);
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <Write_to_page+0x58>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f80b 	bl	800086c <Automatic_Block_Managment>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	240008cc 	.word	0x240008cc
 8000860:	24000018 	.word	0x24000018
 8000864:	240008c2 	.word	0x240008c2
 8000868:	24000000 	.word	0x24000000

0800086c <Automatic_Block_Managment>:
	Select_Page_Read(page);
	Read_Data_Buffer(data, 2048);
}

//Check if page is located in new block. If it is located in new block, erase block
void Automatic_Block_Managment(uint16_t Page_Index){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	uint16_t Block=Page_Index/64;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	099b      	lsrs	r3, r3, #6
 800087a:	81fb      	strh	r3, [r7, #14]
	if(!(Block_Mem==Block)){
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <Automatic_Block_Managment+0x38>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	89fa      	ldrh	r2, [r7, #14]
 8000882:	429a      	cmp	r2, r3
 8000884:	d007      	beq.n	8000896 <Automatic_Block_Managment+0x2a>
		Block_Erase(Page_Index);
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa9b 	bl	8000dc4 <Block_Erase>
		Block_Mem=Block;
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <Automatic_Block_Managment+0x38>)
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	8013      	strh	r3, [r2, #0]
	}
	else{
		Block_Mem=Block;
	}
}
 8000894:	e002      	b.n	800089c <Automatic_Block_Managment+0x30>
		Block_Mem=Block;
 8000896:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <Automatic_Block_Managment+0x38>)
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	8013      	strh	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	240008ce 	.word	0x240008ce

080008a8 <Chip_Erase>:

//Erase all flash memory on IC
void Chip_Erase(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	uint8_t UART_buffer;
	USART1_Printf("Vil du slette alt minne for lagra flydata? Y/N\r\n");
 80008ae:	481f      	ldr	r0, [pc, #124]	@ (800092c <Chip_Erase+0x84>)
 80008b0:	f000 fae8 	bl	8000e84 <USART1_Printf>
	HAL_UART_Receive(&hcom_uart[COM1], &UART_buffer,1, HAL_MAX_DELAY);
 80008b4:	1cf9      	adds	r1, r7, #3
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2201      	movs	r2, #1
 80008bc:	481c      	ldr	r0, [pc, #112]	@ (8000930 <Chip_Erase+0x88>)
 80008be:	f008 ff48 	bl	8009752 <HAL_UART_Receive>
	if(UART_buffer == 0x59){
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2b59      	cmp	r3, #89	@ 0x59
 80008c6:	d129      	bne.n	800091c <Chip_Erase+0x74>
		USART1_Printf("Sletter minne...\r\n");
 80008c8:	481a      	ldr	r0, [pc, #104]	@ (8000934 <Chip_Erase+0x8c>)
 80008ca:	f000 fadb 	bl	8000e84 <USART1_Printf>
		for(int i = 0; i <= 1024; i++){
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	e009      	b.n	80008e8 <Chip_Erase+0x40>
			Block_Erase(i*64);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	019b      	lsls	r3, r3, #6
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fa71 	bl	8000dc4 <Block_Erase>
		for(int i = 0; i <= 1024; i++){
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3301      	adds	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008ee:	ddf1      	ble.n	80008d4 <Chip_Erase+0x2c>
		}
		Buffer_Index=0;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <Chip_Erase+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	801a      	strh	r2, [r3, #0]
		Page_Index=0;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <Chip_Erase+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	801a      	strh	r2, [r3, #0]
		Block_Mem=0;
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <Chip_Erase+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	801a      	strh	r2, [r3, #0]
		Buffer=&write_data[0];
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <Chip_Erase+0x9c>)
 8000904:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <Chip_Erase+0xa0>)
 8000906:	601a      	str	r2, [r3, #0]
		memset(write_data, 0xFF, sizeof(write_data));
 8000908:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800090c:	21ff      	movs	r1, #255	@ 0xff
 800090e:	480e      	ldr	r0, [pc, #56]	@ (8000948 <Chip_Erase+0xa0>)
 8000910:	f009 ffac 	bl	800a86c <memset>
		USART1_Printf("Ferdig\r\n");
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <Chip_Erase+0xa4>)
 8000916:	f000 fab5 	bl	8000e84 <USART1_Printf>
	}
	else{
		USART1_Printf("Sletter IKKE minne\r\n");
	}
}
 800091a:	e002      	b.n	8000922 <Chip_Erase+0x7a>
		USART1_Printf("Sletter IKKE minne\r\n");
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <Chip_Erase+0xa8>)
 800091e:	f000 fab1 	bl	8000e84 <USART1_Printf>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	0800b180 	.word	0x0800b180
 8000930:	24000ae8 	.word	0x24000ae8
 8000934:	0800b1b4 	.word	0x0800b1b4
 8000938:	240008cc 	.word	0x240008cc
 800093c:	240008c2 	.word	0x240008c2
 8000940:	240008ce 	.word	0x240008ce
 8000944:	24000000 	.word	0x24000000
 8000948:	24000018 	.word	0x24000018
 800094c:	0800b1c8 	.word	0x0800b1c8
 8000950:	0800b1d4 	.word	0x0800b1d4

08000954 <Read_Data_Cont>:

//Read data continuous from IC, then print data to Virtual USART
void Read_Data_Cont(uint16_t len){
 8000954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000958:	b089      	sub	sp, #36	@ 0x24
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	80fb      	strh	r3, [r7, #6]
 8000960:	466b      	mov	r3, sp
 8000962:	461e      	mov	r6, r3
	Select_Page_Read(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f000 f9f9 	bl	8000d5c <Select_Page_Read>
	uint8_t Data_Buffer[len];
 800096a:	88f9      	ldrh	r1, [r7, #6]
 800096c:	460b      	mov	r3, r1
 800096e:	3b01      	subs	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	b28b      	uxth	r3, r1
 8000974:	2200      	movs	r2, #0
 8000976:	4698      	mov	r8, r3
 8000978:	4691      	mov	r9, r2
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800098a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800098e:	b28b      	uxth	r3, r1
 8000990:	2200      	movs	r2, #0
 8000992:	461c      	mov	r4, r3
 8000994:	4615      	mov	r5, r2
 8000996:	f04f 0200 	mov.w	r2, #0
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	00eb      	lsls	r3, r5, #3
 80009a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009a4:	00e2      	lsls	r2, r4, #3
 80009a6:	460b      	mov	r3, r1
 80009a8:	3307      	adds	r3, #7
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	ebad 0d03 	sub.w	sp, sp, r3
 80009b2:	466b      	mov	r3, sp
 80009b4:	3300      	adds	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]

	Tx_Buffer[0]=OP_Read_Data;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <Read_Data_Cont+0x114>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <Read_Data_Cont+0x118>)
 80009be:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <Read_Data_Cont+0x118>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=0x00;
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <Read_Data_Cont+0x118>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=0x00;
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <Read_Data_Cont+0x118>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	70da      	strb	r2, [r3, #3]
	csLOW();
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	4826      	ldr	r0, [pc, #152]	@ (8000a70 <Read_Data_Cont+0x11c>)
 80009d8:	f004 fecc 	bl	8005774 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 80009dc:	2364      	movs	r3, #100	@ 0x64
 80009de:	2204      	movs	r2, #4
 80009e0:	4922      	ldr	r1, [pc, #136]	@ (8000a6c <Read_Data_Cont+0x118>)
 80009e2:	4824      	ldr	r0, [pc, #144]	@ (8000a74 <Read_Data_Cont+0x120>)
 80009e4:	f007 fe6a 	bl	80086bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 80009e8:	88fa      	ldrh	r2, [r7, #6]
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	68f9      	ldr	r1, [r7, #12]
 80009f0:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <Read_Data_Cont+0x120>)
 80009f2:	f008 f851 	bl	8008a98 <HAL_SPI_Receive>

	uint16_t CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3301      	adds	r3, #1
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	83fb      	strh	r3, [r7, #30]
	uint32_t Data_Temp = *(uint32_t*)&Data_Buffer[3];
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3303      	adds	r3, #3
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	61bb      	str	r3, [r7, #24]
	uint32_t Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	330b      	adds	r3, #11
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	617b      	str	r3, [r7, #20]

	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000a0e:	e018      	b.n	8000a42 <Read_Data_Cont+0xee>
		USART1_Printf("CANID:%u, DATA:%u, Time:%u\r\n", (unsigned int)CAN_Temp, (unsigned int)Data_Temp, (unsigned int)Time_Temp);
 8000a10:	8bf9      	ldrh	r1, [r7, #30]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4818      	ldr	r0, [pc, #96]	@ (8000a78 <Read_Data_Cont+0x124>)
 8000a18:	f000 fa34 	bl	8000e84 <USART1_Printf>
		HAL_SPI_Receive(&Flash, Data_Buffer, len, HAL_MAX_DELAY);
 8000a1c:	88fa      	ldrh	r2, [r7, #6]
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	68f9      	ldr	r1, [r7, #12]
 8000a24:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <Read_Data_Cont+0x120>)
 8000a26:	f008 f837 	bl	8008a98 <HAL_SPI_Receive>

		CAN_Temp = *(uint16_t*)&Data_Buffer[1];
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	83fb      	strh	r3, [r7, #30]
		Data_Temp = *(uint32_t*)&Data_Buffer[3];
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3303      	adds	r3, #3
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	61bb      	str	r3, [r7, #24]
		Time_Temp = *(uint32_t*)&Data_Buffer[11];
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	330b      	adds	r3, #11
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	617b      	str	r3, [r7, #20]
	while((Data_Buffer[0]==0xFF)&&(Data_Buffer[15]==0x00)){
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2bff      	cmp	r3, #255	@ 0xff
 8000a48:	d103      	bne.n	8000a52 <Read_Data_Cont+0xfe>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	7bdb      	ldrb	r3, [r3, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0de      	beq.n	8000a10 <Read_Data_Cont+0xbc>
	}
	csHIGH();
 8000a52:	2201      	movs	r2, #1
 8000a54:	2110      	movs	r1, #16
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <Read_Data_Cont+0x11c>)
 8000a58:	f004 fe8c 	bl	8005774 <HAL_GPIO_WritePin>
 8000a5c:	46b5      	mov	sp, r6
}
 8000a5e:	bf00      	nop
 8000a60:	3724      	adds	r7, #36	@ 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a68:	2400000f 	.word	0x2400000f
 8000a6c:	240008b4 	.word	0x240008b4
 8000a70:	58020000 	.word	0x58020000
 8000a74:	240009d0 	.word	0x240009d0
 8000a78:	0800b1ec 	.word	0x0800b1ec

08000a7c <Write_Enable>:
////////Barebone code for interfacing with Flash IC////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

//Enable WEL(Write enable latch) in flash IC
void Write_Enable(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	csLOW();
 8000a80:	2200      	movs	r2, #0
 8000a82:	2110      	movs	r1, #16
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <Write_Enable+0x30>)
 8000a86:	f004 fe75 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_Write_Enable, 1, 100);
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4908      	ldr	r1, [pc, #32]	@ (8000ab0 <Write_Enable+0x34>)
 8000a90:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <Write_Enable+0x38>)
 8000a92:	f007 fe13 	bl	80086bc <HAL_SPI_Transmit>
	csHIGH();
 8000a96:	2201      	movs	r2, #1
 8000a98:	2110      	movs	r1, #16
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <Write_Enable+0x30>)
 8000a9c:	f004 fe6a 	bl	8005774 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000aa0:	2064      	movs	r0, #100	@ 0x64
 8000aa2:	f000 f9c5 	bl	8000e30 <delay_ns>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	58020000 	.word	0x58020000
 8000ab0:	2400000a 	.word	0x2400000a
 8000ab4:	240009d0 	.word	0x240009d0

08000ab8 <Flash_Init>:
}

//Initialize flash IC
//BUF=1-> Buffer Read
//BUF=0-> Continuous Read
void Flash_Init(uint8_t BUF){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac6:	f001 faa1 	bl	800200c <HAL_Delay>
	if(BUF){
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d012      	beq.n	8000af6 <Flash_Init+0x3e>
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <Flash_Init+0x98>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f83f 	bl	8000b58 <Read_Status_Register>
 8000ada:	4603      	mov	r3, r0
 8000adc:	73bb      	strb	r3, [r7, #14]
		data|=0x08;
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	73bb      	strb	r3, [r7, #14]
		Write_Status_Register(SR_2_Addr, data);
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <Flash_Init+0x98>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	7bba      	ldrb	r2, [r7, #14]
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f864 	bl	8000bbc <Write_Status_Register>
 8000af4:	e011      	b.n	8000b1a <Flash_Init+0x62>
	}
	else{
		uint8_t data = Read_Status_Register(SR_2_Addr);
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <Flash_Init+0x98>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f82c 	bl	8000b58 <Read_Status_Register>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]
		data&=0xF7;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	f023 0308 	bic.w	r3, r3, #8
 8000b0a:	73fb      	strb	r3, [r7, #15]
		Write_Status_Register(SR_2_Addr, data);
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <Flash_Init+0x98>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f851 	bl	8000bbc <Write_Status_Register>
	}
	uint8_t data = Read_Status_Register(SR_1_Addr);
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <Flash_Init+0x9c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f81a 	bl	8000b58 <Read_Status_Register>
 8000b24:	4603      	mov	r3, r0
 8000b26:	737b      	strb	r3, [r7, #13]
	data|=0x02;
 8000b28:	7b7b      	ldrb	r3, [r7, #13]
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	737b      	strb	r3, [r7, #13]
	data&=0x83;
 8000b30:	7b7b      	ldrb	r3, [r7, #13]
 8000b32:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000b36:	737b      	strb	r3, [r7, #13]
	Write_Status_Register(SR_1_Addr, data);
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <Flash_Init+0x9c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	7b7a      	ldrb	r2, [r7, #13]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f83b 	bl	8000bbc <Write_Status_Register>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	24000819 	.word	0x24000819
 8000b54:	24000818 	.word	0x24000818

08000b58 <Read_Status_Register>:

//Read status register.
//SR->Select register address to read
uint8_t Read_Status_Register(uint8_t SR){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	Tx_Buffer[0]=OP_Read_Register;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <Read_Status_Register+0x50>)
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <Read_Status_Register+0x54>)
 8000b68:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000b6a:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <Read_Status_Register+0x54>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	7053      	strb	r3, [r2, #1]
	csLOW();
 8000b70:	2200      	movs	r2, #0
 8000b72:	2110      	movs	r1, #16
 8000b74:	480e      	ldr	r0, [pc, #56]	@ (8000bb0 <Read_Status_Register+0x58>)
 8000b76:	f004 fdfd 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 2, 100);
 8000b7a:	2364      	movs	r3, #100	@ 0x64
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	490b      	ldr	r1, [pc, #44]	@ (8000bac <Read_Status_Register+0x54>)
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <Read_Status_Register+0x5c>)
 8000b82:	f007 fd9b 	bl	80086bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Rx_Buffer[0], 1, 100);
 8000b86:	2364      	movs	r3, #100	@ 0x64
 8000b88:	2201      	movs	r2, #1
 8000b8a:	490b      	ldr	r1, [pc, #44]	@ (8000bb8 <Read_Status_Register+0x60>)
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <Read_Status_Register+0x5c>)
 8000b8e:	f007 ff83 	bl	8008a98 <HAL_SPI_Receive>
	csHIGH();
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <Read_Status_Register+0x58>)
 8000b98:	f004 fdec 	bl	8005774 <HAL_GPIO_WritePin>
	return Rx_Buffer[0];
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <Read_Status_Register+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24000004 	.word	0x24000004
 8000bac:	240008b4 	.word	0x240008b4
 8000bb0:	58020000 	.word	0x58020000
 8000bb4:	240009d0 	.word	0x240009d0
 8000bb8:	240008bc 	.word	0x240008bc

08000bbc <Write_Status_Register>:

//Write to status register
//SR->register address to write
//REG_DATA->Register data to write to register
void Write_Status_Register(uint8_t SR, uint8_t REG_DATA){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	Tx_Buffer[0]=OP_Write_Register;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <Write_Status_Register+0x4c>)
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <Write_Status_Register+0x50>)
 8000bd2:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=SR;
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <Write_Status_Register+0x50>)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	7053      	strb	r3, [r2, #1]
	Tx_Buffer[2]=REG_DATA;
 8000bda:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <Write_Status_Register+0x50>)
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	7093      	strb	r3, [r2, #2]
	csLOW();
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	480a      	ldr	r0, [pc, #40]	@ (8000c10 <Write_Status_Register+0x54>)
 8000be6:	f004 fdc5 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000bea:	2364      	movs	r3, #100	@ 0x64
 8000bec:	2203      	movs	r2, #3
 8000bee:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <Write_Status_Register+0x50>)
 8000bf0:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <Write_Status_Register+0x58>)
 8000bf2:	f007 fd63 	bl	80086bc <HAL_SPI_Transmit>
	csHIGH();
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <Write_Status_Register+0x54>)
 8000bfc:	f004 fdba 	bl	8005774 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24000005 	.word	0x24000005
 8000c0c:	240008b4 	.word	0x240008b4
 8000c10:	58020000 	.word	0x58020000
 8000c14:	240009d0 	.word	0x240009d0

08000c18 <Read_ID>:

//Read JEDEC ID from flash IC. Useful to check that Flash IC is connected correctly
uint32_t Read_ID(void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t Buffer[3]={0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2100      	movs	r1, #0
 8000c22:	460a      	mov	r2, r1
 8000c24:	801a      	strh	r2, [r3, #0]
 8000c26:	460a      	mov	r2, r1
 8000c28:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	480f      	ldr	r0, [pc, #60]	@ (8000c6c <Read_ID+0x54>)
 8000c30:	f004 fda0 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &OP_JEDEC_ID[0], 2, 100);
 8000c34:	2364      	movs	r3, #100	@ 0x64
 8000c36:	2202      	movs	r2, #2
 8000c38:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <Read_ID+0x58>)
 8000c3a:	480e      	ldr	r0, [pc, #56]	@ (8000c74 <Read_ID+0x5c>)
 8000c3c:	f007 fd3e 	bl	80086bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&Flash, &Buffer[0], 3, 100);
 8000c40:	1d39      	adds	r1, r7, #4
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	2203      	movs	r2, #3
 8000c46:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <Read_ID+0x5c>)
 8000c48:	f007 ff26 	bl	8008a98 <HAL_SPI_Receive>
	csHIGH();
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2110      	movs	r1, #16
 8000c50:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <Read_ID+0x54>)
 8000c52:	f004 fd8f 	bl	8005774 <HAL_GPIO_WritePin>
	return ((Buffer[0]<<16)|(Buffer[1]<<8|Buffer[2]));
 8000c56:	793b      	ldrb	r3, [r7, #4]
 8000c58:	041a      	lsls	r2, r3, #16
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	79b9      	ldrb	r1, [r7, #6]
 8000c60:	430b      	orrs	r3, r1
 8000c62:	4313      	orrs	r3, r2
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58020000 	.word	0x58020000
 8000c70:	24000008 	.word	0x24000008
 8000c74:	240009d0 	.word	0x240009d0

08000c78 <Write_Data_Buffer>:

//Write data to buffer in flash IC
void Write_Data_Buffer(uint16_t Buffer_Addr, uint8_t *Data, uint16_t len){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	80fb      	strh	r3, [r7, #6]
 8000c84:	4613      	mov	r3, r2
 8000c86:	80bb      	strh	r3, [r7, #4]
	Write_Enable();
 8000c88:	f7ff fef8 	bl	8000a7c <Write_Enable>
	Tx_Buffer[0]=OP_Load_Program_Data;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <Write_Data_Buffer+0x6c>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <Write_Data_Buffer+0x70>)
 8000c92:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=(uint8_t)(Buffer_Addr>>8);
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <Write_Data_Buffer+0x70>)
 8000c9e:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)Buffer_Addr;
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <Write_Data_Buffer+0x70>)
 8000ca6:	709a      	strb	r2, [r3, #2]
	csLOW();
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2110      	movs	r1, #16
 8000cac:	480f      	ldr	r0, [pc, #60]	@ (8000cec <Write_Data_Buffer+0x74>)
 8000cae:	f004 fd61 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 3, 100);
 8000cb2:	2364      	movs	r3, #100	@ 0x64
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <Write_Data_Buffer+0x70>)
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <Write_Data_Buffer+0x78>)
 8000cba:	f007 fcff 	bl	80086bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&Flash, Data, len, HAL_MAX_DELAY);
 8000cbe:	88ba      	ldrh	r2, [r7, #4]
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	6839      	ldr	r1, [r7, #0]
 8000cc6:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <Write_Data_Buffer+0x78>)
 8000cc8:	f007 fcf8 	bl	80086bc <HAL_SPI_Transmit>
	csHIGH();
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <Write_Data_Buffer+0x74>)
 8000cd2:	f004 fd4f 	bl	8005774 <HAL_GPIO_WritePin>
	delay_ns(DELAY_NS);
 8000cd6:	2064      	movs	r0, #100	@ 0x64
 8000cd8:	f000 f8aa 	bl	8000e30 <delay_ns>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2400000c 	.word	0x2400000c
 8000ce8:	240008b4 	.word	0x240008b4
 8000cec:	58020000 	.word	0x58020000
 8000cf0:	240009d0 	.word	0x240009d0

08000cf4 <Write_Data_Flash>:

//Write buffer data to page
void Write_Data_Flash(uint16_t Page_Addr){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Program_Ex;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <Write_Data_Flash+0x58>)
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <Write_Data_Flash+0x5c>)
 8000d04:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <Write_Data_Flash+0x5c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <Write_Data_Flash+0x5c>)
 8000d16:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <Write_Data_Flash+0x5c>)
 8000d1e:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d20:	2200      	movs	r2, #0
 8000d22:	2110      	movs	r1, #16
 8000d24:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <Write_Data_Flash+0x60>)
 8000d26:	f004 fd25 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000d2a:	2364      	movs	r3, #100	@ 0x64
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <Write_Data_Flash+0x5c>)
 8000d30:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <Write_Data_Flash+0x64>)
 8000d32:	f007 fcc3 	bl	80086bc <HAL_SPI_Transmit>
	csHIGH();
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <Write_Data_Flash+0x60>)
 8000d3c:	f004 fd1a 	bl	8005774 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000d40:	f000 f8c6 	bl	8000ed0 <W25N_WaitForReady>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2400000d 	.word	0x2400000d
 8000d50:	240008b4 	.word	0x240008b4
 8000d54:	58020000 	.word	0x58020000
 8000d58:	240009d0 	.word	0x240009d0

08000d5c <Select_Page_Read>:

//Select page to read
void Select_Page_Read(uint16_t Page_Addr){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	Tx_Buffer[0]=OP_Page_Data_Read;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <Select_Page_Read+0x58>)
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <Select_Page_Read+0x5c>)
 8000d6c:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <Select_Page_Read+0x5c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	0a1b      	lsrs	r3, r3, #8
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <Select_Page_Read+0x5c>)
 8000d7e:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <Select_Page_Read+0x5c>)
 8000d86:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <Select_Page_Read+0x60>)
 8000d8e:	f004 fcf1 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0],4,100);
 8000d92:	2364      	movs	r3, #100	@ 0x64
 8000d94:	2204      	movs	r2, #4
 8000d96:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <Select_Page_Read+0x5c>)
 8000d98:	4809      	ldr	r0, [pc, #36]	@ (8000dc0 <Select_Page_Read+0x64>)
 8000d9a:	f007 fc8f 	bl	80086bc <HAL_SPI_Transmit>
	csHIGH();
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2110      	movs	r1, #16
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <Select_Page_Read+0x60>)
 8000da4:	f004 fce6 	bl	8005774 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000da8:	f000 f892 	bl	8000ed0 <W25N_WaitForReady>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2400000e 	.word	0x2400000e
 8000db8:	240008b4 	.word	0x240008b4
 8000dbc:	58020000 	.word	0x58020000
 8000dc0:	240009d0 	.word	0x240009d0

08000dc4 <Block_Erase>:
	csHIGH();
}

//Erase Block where page is located
//Page_Addr-> Address to page, where the block which includes page is erased
void Block_Erase(uint16_t Page_Addr){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
	Write_Enable();
 8000dce:	f7ff fe55 	bl	8000a7c <Write_Enable>
	Tx_Buffer[0]=OP_Block_Erase;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <Block_Erase+0x5c>)
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <Block_Erase+0x60>)
 8000dd8:	701a      	strb	r2, [r3, #0]
	Tx_Buffer[1]=0x00;
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <Block_Erase+0x60>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	705a      	strb	r2, [r3, #1]
	Tx_Buffer[2]=(uint8_t)(Page_Addr>>8);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <Block_Erase+0x60>)
 8000dea:	709a      	strb	r2, [r3, #2]
	Tx_Buffer[3]=(uint8_t)(Page_Addr);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <Block_Erase+0x60>)
 8000df2:	70da      	strb	r2, [r3, #3]
	csLOW();
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <Block_Erase+0x64>)
 8000dfa:	f004 fcbb 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Flash, &Tx_Buffer[0], 4, 100);
 8000dfe:	2364      	movs	r3, #100	@ 0x64
 8000e00:	2204      	movs	r2, #4
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <Block_Erase+0x60>)
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <Block_Erase+0x68>)
 8000e06:	f007 fc59 	bl	80086bc <HAL_SPI_Transmit>
	csHIGH();
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <Block_Erase+0x64>)
 8000e10:	f004 fcb0 	bl	8005774 <HAL_GPIO_WritePin>
	W25N_WaitForReady();
 8000e14:	f000 f85c 	bl	8000ed0 <W25N_WaitForReady>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2400000b 	.word	0x2400000b
 8000e24:	240008b4 	.word	0x240008b4
 8000e28:	58020000 	.word	0x58020000
 8000e2c:	240009d0 	.word	0x240009d0

08000e30 <delay_ns>:

    send_uart(binaryString); // Send the binary string
    send_uart("\r\n");       // Newline for readability
}

void delay_ns(uint32_t ns) {
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    uint32_t cycles_per_ns = SystemCoreClock / 1000000000; // Convert clock speed to cycles per ns
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <delay_ns+0x48>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	0a5b      	lsrs	r3, r3, #9
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <delay_ns+0x4c>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	09db      	lsrs	r3, r3, #7
 8000e46:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;                         // Get start cycle count
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <delay_ns+0x50>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	613b      	str	r3, [r7, #16]
    uint32_t delay_cycles = ns * cycles_per_ns;           // Calculate required cycles
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < delay_cycles);         // Wait until delay is met
 8000e58:	bf00      	nop
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <delay_ns+0x50>)
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f8      	bhi.n	8000e5a <delay_ns+0x2a>
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2400081c 	.word	0x2400081c
 8000e7c:	00044b83 	.word	0x00044b83
 8000e80:	e0001000 	.word	0xe0001000

08000e84 <USART1_Printf>:

void USART1_Printf(const char *format, ...) {
 8000e84:	b40f      	push	{r0, r1, r2, r3}
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b0a2      	sub	sp, #136	@ 0x88
 8000e8a:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000e8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e90:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000e92:	f107 0008 	add.w	r0, r7, #8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000e9c:	2180      	movs	r1, #128	@ 0x80
 8000e9e:	f009 fcd7 	bl	800a850 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fa1a 	bl	80002e0 <strlen>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	f107 0108 	add.w	r1, r7, #8
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <USART1_Printf+0x48>)
 8000eba:	f008 fbbc 	bl	8009636 <HAL_UART_Transmit>
}
 8000ebe:	bf00      	nop
 8000ec0:	3788      	adds	r7, #136	@ 0x88
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec8:	b004      	add	sp, #16
 8000eca:	4770      	bx	lr
 8000ecc:	24000ae8 	.word	0x24000ae8

08000ed0 <W25N_WaitForReady>:

//Function for delay in nanosecond
void W25N_WaitForReady(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	delay_ns(DELAY_NS);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f7ff ffab 	bl	8000e30 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000eda:	e002      	b.n	8000ee2 <W25N_WaitForReady+0x12>
    	delay_ns(DELAY_NS);  // Wait until flash is ready
 8000edc:	2064      	movs	r0, #100	@ 0x64
 8000ede:	f7ff ffa7 	bl	8000e30 <delay_ns>
    while (Read_Status_Register(SR_3_Addr) & 0x01) {
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <W25N_WaitForReady+0x2c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe36 	bl	8000b58 <Read_Status_Register>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f2      	bne.n	8000edc <W25N_WaitForReady+0xc>
    }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2400081a 	.word	0x2400081a

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fff0 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f890 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 fa0a 	bl	8001324 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f10:	f000 f9e8 	bl	80012e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f14:	f000 f990 	bl	8001238 <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8000f18:	f000 f904 	bl	8001124 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fdf1 	bl	8001b04 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 fdee 	bl	8001b04 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f000 fdeb 	bl	8001b04 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fe87 	bl	8001c44 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f36:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <main+0x110>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f3c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f3e:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <main+0x110>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f44:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <main+0x110>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f4a:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <main+0x110>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f50:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <main+0x110>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f56:	492e      	ldr	r1, [pc, #184]	@ (8001010 <main+0x110>)
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 ff03 	bl	8001d64 <BSP_COM_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <main+0x68>
  {
    Error_Handler();
 8000f64:	f000 fa86 	bl	8001474 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000f68:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <main+0x114>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4a29      	ldr	r2, [pc, #164]	@ (8001014 <main+0x114>)
 8000f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f72:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 8000f74:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <main+0x118>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a27      	ldr	r2, [pc, #156]	@ (8001018 <main+0x118>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]

  Flash_Init(0);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff fd99 	bl	8000ab8 <Flash_Init>
  ID=Read_ID();
 8000f86:	f7ff fe47 	bl	8000c18 <Read_ID>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <main+0x11c>)
 8000f90:	601a      	str	r2, [r3, #0]
  while (1)
  {
//	  printf("CANID:%u,DATA:%u;\r\n", CAN_ID_TEST, (unsigned int)CAN_DATA);
//	  CAN_DATA++;
	  Read_Register();
 8000f92:	f7ff fbc7 	bl	8000724 <Read_Register>
	  HAL_UART_Receive(&hcom_uart[COM1], &command,1, 100);
 8000f96:	2364      	movs	r3, #100	@ 0x64
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4921      	ldr	r1, [pc, #132]	@ (8001020 <main+0x120>)
 8000f9c:	4821      	ldr	r0, [pc, #132]	@ (8001024 <main+0x124>)
 8000f9e:	f008 fbd8 	bl	8009752 <HAL_UART_Receive>

	  //Read
	  if(command==0x31){
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <main+0x120>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b31      	cmp	r3, #49	@ 0x31
 8000fa8:	d105      	bne.n	8000fb6 <main+0xb6>
		  Read_Data_Cont(16);
 8000faa:	2010      	movs	r0, #16
 8000fac:	f7ff fcd2 	bl	8000954 <Read_Data_Cont>
//		  Read_Data(15, Read_data);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
//		  Read_Data(1, &Read_data[0]);
//		  HAL_UART_Transmit(&hcom_uart[COM1], &Read_data[0], 2048, HAL_MAX_DELAY);
		  command = 0;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <main+0x120>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	  }

	  //Start
	  if(command==0x32){
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <main+0x120>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b32      	cmp	r3, #50	@ 0x32
 8000fbc:	d10c      	bne.n	8000fd8 <main+0xd8>
		  Start_Flight_Recording=1;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <main+0x128>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x100);
 8000fc4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fc8:	f7ff fb78 	bl	80006bc <CAN_SendMessage>
		  BSP_LED_Toggle(LED_GREEN);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fe0f 	bl	8001bf0 <BSP_LED_Toggle>
		  command=0;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <main+0x120>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	  }

	  //Stop
	  if(command==0x33){
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <main+0x120>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b33      	cmp	r3, #51	@ 0x33
 8000fde:	d10c      	bne.n	8000ffa <main+0xfa>
		  Start_Flight_Recording=0;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <main+0x128>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
		  CAN_SendMessage(0x101);
 8000fe6:	f240 1001 	movw	r0, #257	@ 0x101
 8000fea:	f7ff fb67 	bl	80006bc <CAN_SendMessage>
		  BSP_LED_Toggle(LED_GREEN);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 fdfe 	bl	8001bf0 <BSP_LED_Toggle>
		  command=0;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <main+0x120>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	  }

	  if(command==0x34){
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <main+0x120>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b34      	cmp	r3, #52	@ 0x34
 8001000:	d1c7      	bne.n	8000f92 <main+0x92>
		  Chip_Erase();
 8001002:	f7ff fc51 	bl	80008a8 <Chip_Erase>
		  command=0;
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <main+0x120>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
	  Read_Register();
 800100c:	e7c1      	b.n	8000f92 <main+0x92>
 800100e:	bf00      	nop
 8001010:	24000920 	.word	0x24000920
 8001014:	e000edf0 	.word	0xe000edf0
 8001018:	e0001000 	.word	0xe0001000
 800101c:	24000ad0 	.word	0x24000ad0
 8001020:	24000ad4 	.word	0x24000ad4
 8001024:	24000ae8 	.word	0x24000ae8
 8001028:	240008c1 	.word	0x240008c1

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09c      	sub	sp, #112	@ 0x70
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	224c      	movs	r2, #76	@ 0x4c
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f009 fc16 	bl	800a86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2220      	movs	r2, #32
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f009 fc10 	bl	800a86c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800104c:	2002      	movs	r0, #2
 800104e:	f004 fbc5 	bl	80057dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b31      	ldr	r3, [pc, #196]	@ (800111c <SystemClock_Config+0xf0>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a30      	ldr	r2, [pc, #192]	@ (800111c <SystemClock_Config+0xf0>)
 800105c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <SystemClock_Config+0xf0>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <SystemClock_Config+0xf4>)
 800106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <SystemClock_Config+0xf4>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <SystemClock_Config+0xf4>)
 800107a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001084:	bf00      	nop
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <SystemClock_Config+0xf0>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800108e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001092:	d1f8      	bne.n	8001086 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001098:	2301      	movs	r3, #1
 800109a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2340      	movs	r3, #64	@ 0x40
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010ac:	233c      	movs	r3, #60	@ 0x3c
 80010ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010b4:	2305      	movs	r3, #5
 80010b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010bc:	230c      	movs	r3, #12
 80010be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fbbf 	bl	8005850 <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010d8:	f000 f9cc 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	233f      	movs	r3, #63	@ 0x3f
 80010de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e0:	2303      	movs	r3, #3
 80010e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010e8:	2308      	movs	r3, #8
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010ec:	2340      	movs	r3, #64	@ 0x40
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010fa:	2340      	movs	r3, #64	@ 0x40
 80010fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f004 fffe 	bl	8006104 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800110e:	f000 f9b1 	bl	8001474 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3770      	adds	r7, #112	@ 0x70
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	58024800 	.word	0x58024800
 8001120:	58000400 	.word	0x58000400

08001124 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
	__HAL_RCC_FDCAN_CLK_ENABLE();
 800112a:	4b40      	ldr	r3, [pc, #256]	@ (800122c <MX_FDCAN1_Init+0x108>)
 800112c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001130:	4a3e      	ldr	r2, [pc, #248]	@ (800122c <MX_FDCAN1_Init+0x108>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001136:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800113a:	4b3c      	ldr	r3, [pc, #240]	@ (800122c <MX_FDCAN1_Init+0x108>)
 800113c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001148:	4b39      	ldr	r3, [pc, #228]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 800114a:	4a3a      	ldr	r2, [pc, #232]	@ (8001234 <MX_FDCAN1_Init+0x110>)
 800114c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800114e:	4b38      	ldr	r3, [pc, #224]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001154:	4b36      	ldr	r3, [pc, #216]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800115a:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 800115c:	2200      	movs	r2, #0
 800115e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001160:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001162:	2200      	movs	r2, #0
 8001164:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001166:	4b32      	ldr	r3, [pc, #200]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001168:	2200      	movs	r2, #0
 800116a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800116c:	4b30      	ldr	r3, [pc, #192]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 800116e:	2201      	movs	r2, #1
 8001170:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8001172:	4b2f      	ldr	r3, [pc, #188]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001174:	2202      	movs	r2, #2
 8001176:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8001178:	4b2d      	ldr	r3, [pc, #180]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 800117a:	220d      	movs	r2, #13
 800117c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800117e:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001180:	2202      	movs	r2, #2
 8001182:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001184:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001186:	2201      	movs	r2, #1
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 7;
 800118a:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 800118c:	2207      	movs	r2, #7
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001192:	2208      	movs	r2, #8
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 7;
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001198:	2207      	movs	r2, #7
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800119c:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80011a8:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80011ae:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011b0:	2240      	movs	r2, #64	@ 0x40
 80011b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011ce:	2204      	movs	r2, #4
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 2;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011ec:	2204      	movs	r2, #4
 80011ee:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011f0:	480f      	ldr	r0, [pc, #60]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 80011f2:	f002 ffb7 	bl	8004164 <HAL_FDCAN_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_FDCAN1_Init+0xdc>
  {
    Error_Handler();
 80011fc:	f000 f93a 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001200:	480b      	ldr	r0, [pc, #44]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001202:	f003 f98d 	bl	8004520 <HAL_FDCAN_Start>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_FDCAN1_Init+0xec>
      Error_Handler();
 800120c:	f000 f932 	bl	8001474 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_FDCAN1_Init+0x10c>)
 8001216:	f003 fb75 	bl	8004904 <HAL_FDCAN_ActivateNotification>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_FDCAN1_Init+0x100>
      Error_Handler();
 8001220:	f000 f928 	bl	8001474 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	58024400 	.word	0x58024400
 8001230:	24000930 	.word	0x24000930
 8001234:	4000a000 	.word	0x4000a000

08001238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800123c:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800123e:	4a28      	ldr	r2, [pc, #160]	@ (80012e0 <MX_SPI1_Init+0xa8>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001244:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001252:	2207      	movs	r2, #7
 8001254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001264:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800126c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_SPI1_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <MX_SPI1_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_SPI1_Init+0xa4>)
 80012ca:	f007 f8d3 	bl	8008474 <HAL_SPI_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012d4:	f000 f8ce 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	240009d0 	.word	0x240009d0
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <MX_DMA_Init+0x3c>)
 80012ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <MX_DMA_Init+0x3c>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_DMA_Init+0x3c>)
 80012fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	200b      	movs	r0, #11
 800130e:	f000 ff88 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001312:	200b      	movs	r0, #11
 8001314:	f000 ff9f 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58024400 	.word	0x58024400

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	@ 0x30
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b4a      	ldr	r3, [pc, #296]	@ (8001464 <MX_GPIO_Init+0x140>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001340:	4a48      	ldr	r2, [pc, #288]	@ (8001464 <MX_GPIO_Init+0x140>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134a:	4b46      	ldr	r3, [pc, #280]	@ (8001464 <MX_GPIO_Init+0x140>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001358:	4b42      	ldr	r3, [pc, #264]	@ (8001464 <MX_GPIO_Init+0x140>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	4a41      	ldr	r2, [pc, #260]	@ (8001464 <MX_GPIO_Init+0x140>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001368:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <MX_GPIO_Init+0x140>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <MX_GPIO_Init+0x140>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137c:	4a39      	ldr	r2, [pc, #228]	@ (8001464 <MX_GPIO_Init+0x140>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001386:	4b37      	ldr	r3, [pc, #220]	@ (8001464 <MX_GPIO_Init+0x140>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <MX_GPIO_Init+0x140>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	4a32      	ldr	r2, [pc, #200]	@ (8001464 <MX_GPIO_Init+0x140>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	4a23      	ldr	r2, [pc, #140]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_GPIO_Init+0x140>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2110      	movs	r1, #16
 80013f2:	481d      	ldr	r0, [pc, #116]	@ (8001468 <MX_GPIO_Init+0x144>)
 80013f4:	f004 f9be 	bl	8005774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2102      	movs	r1, #2
 80013fc:	481b      	ldr	r0, [pc, #108]	@ (800146c <MX_GPIO_Init+0x148>)
 80013fe:	f004 f9b9 	bl	8005774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8001402:	2310      	movs	r3, #16
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4813      	ldr	r0, [pc, #76]	@ (8001468 <MX_GPIO_Init+0x144>)
 800141a:	f003 fffb 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800141e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001430:	2304      	movs	r3, #4
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	@ (8001470 <MX_GPIO_Init+0x14c>)
 800143c:	f003 ffea 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_GPIO_Init+0x148>)
 8001458:	f003 ffdc 	bl	8005414 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800145c:	bf00      	nop
 800145e:	3730      	adds	r7, #48	@ 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	58024400 	.word	0x58024400
 8001468:	58020000 	.word	0x58020000
 800146c:	58021000 	.word	0x58021000
 8001470:	58020400 	.word	0x58020400

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_FDCAN_Start(&hfdcan1);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <Error_Handler+0x10>)
 800147a:	f003 f851 	bl	8004520 <HAL_FDCAN_Start>
  //__disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	24000930 	.word	0x24000930

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_MspInit+0x30>)
 8001490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001494:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x30>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x30>)
 80014a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	58024400 	.word	0x58024400

080014bc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0ba      	sub	sp, #232	@ 0xe8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	22c0      	movs	r2, #192	@ 0xc0
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f009 f9c5 	bl	800a86c <memset>
  if(hfdcan->Instance==FDCAN1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a33      	ldr	r2, [pc, #204]	@ (80015b4 <HAL_FDCAN_MspInit+0xf8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d15e      	bne.n	80015aa <HAL_FDCAN_MspInit+0xee>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80014fc:	230a      	movs	r3, #10
 80014fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8001504:	2314      	movs	r3, #20
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800150c:	23c0      	movs	r3, #192	@ 0xc0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001510:	2320      	movs	r3, #32
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001518:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800151c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f005 f979 	bl	800681c <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001530:	f7ff ffa0 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_FDCAN_MspInit+0xfc>)
 8001536:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800153a:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_FDCAN_MspInit+0xfc>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001540:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_FDCAN_MspInit+0xfc>)
 8001546:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800154a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_FDCAN_MspInit+0xfc>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001558:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <HAL_FDCAN_MspInit+0xfc>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_FDCAN_MspInit+0xfc>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001570:	2303      	movs	r3, #3
 8001572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001588:	2309      	movs	r3, #9
 800158a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001592:	4619      	mov	r1, r3
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <HAL_FDCAN_MspInit+0x100>)
 8001596:	f003 ff3d 	bl	8005414 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2013      	movs	r0, #19
 80015a0:	f000 fe3f 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80015a4:	2013      	movs	r0, #19
 80015a6:	f000 fe56 	bl	8002256 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	37e8      	adds	r7, #232	@ 0xe8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	4000a000 	.word	0x4000a000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58020c00 	.word	0x58020c00

080015c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0bc      	sub	sp, #240	@ 0xf0
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	22c0      	movs	r2, #192	@ 0xc0
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f009 f943 	bl	800a86c <memset>
  if(hspi->Instance==SPI1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a53      	ldr	r2, [pc, #332]	@ (8001738 <HAL_SPI_MspInit+0x178>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	f040 809f 	bne.w	8001730 <HAL_SPI_MspInit+0x170>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015fe:	2300      	movs	r3, #0
 8001600:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4618      	mov	r0, r3
 8001608:	f005 f908 	bl	800681c <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001612:	f7ff ff2f 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001616:	4b49      	ldr	r3, [pc, #292]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 8001618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800161c:	4a47      	ldr	r2, [pc, #284]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 800161e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001622:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001626:	4b45      	ldr	r3, [pc, #276]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800162c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	4a40      	ldr	r2, [pc, #256]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001644:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	4a38      	ldr	r2, [pc, #224]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <HAL_SPI_MspInit+0x17c>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001670:	2360      	movs	r3, #96	@ 0x60
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001688:	2305      	movs	r3, #5
 800168a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001692:	4619      	mov	r1, r3
 8001694:	482a      	ldr	r0, [pc, #168]	@ (8001740 <HAL_SPI_MspInit+0x180>)
 8001696:	f003 febd 	bl	8005414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800169a:	2320      	movs	r3, #32
 800169c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b2:	2305      	movs	r3, #5
 80016b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016bc:	4619      	mov	r1, r3
 80016be:	4821      	ldr	r0, [pc, #132]	@ (8001744 <HAL_SPI_MspInit+0x184>)
 80016c0:	f003 fea8 	bl	8005414 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016c6:	4a21      	ldr	r2, [pc, #132]	@ (800174c <HAL_SPI_MspInit+0x18c>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016cc:	2226      	movs	r2, #38	@ 0x26
 80016ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016d2:	2240      	movs	r2, #64	@ 0x40
 80016d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80016f6:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 80016f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016fc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001704:	4810      	ldr	r0, [pc, #64]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 8001706:	f000 fdc1 	bl	800228c <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 8001710:	f7ff feb0 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 8001718:	679a      	str	r2, [r3, #120]	@ 0x78
 800171a:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_SPI_MspInit+0x188>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2023      	movs	r0, #35	@ 0x23
 8001726:	f000 fd7c 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800172a:	2023      	movs	r0, #35	@ 0x23
 800172c:	f000 fd93 	bl	8002256 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001730:	bf00      	nop
 8001732:	37f0      	adds	r7, #240	@ 0xf0
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40013000 	.word	0x40013000
 800173c:	58024400 	.word	0x58024400
 8001740:	58020000 	.word	0x58020000
 8001744:	58020400 	.word	0x58020400
 8001748:	24000a58 	.word	0x24000a58
 800174c:	40020010 	.word	0x40020010

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <NMI_Handler+0x4>

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <MemManage_Handler+0x4>

08001768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <UsageFault_Handler+0x4>

08001778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 fc10 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(Start_Flight_Recording){
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <SysTick_Handler+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <SysTick_Handler+0x1a>
	  CLK_SIM++;
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <SysTick_Handler+0x24>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a03      	ldr	r2, [pc, #12]	@ (80017c8 <SysTick_Handler+0x24>)
 80017bc:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	240008c1 	.word	0x240008c1
 80017c8:	24000ad8 	.word	0x24000ad8

080017cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <DMA1_Stream0_IRQHandler+0x10>)
 80017d2:	f001 fafd 	bl	8002dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	24000a58 	.word	0x24000a58

080017e0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <FDCAN1_IT0_IRQHandler+0x10>)
 80017e6:	f003 f907 	bl	80049f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	24000930 	.word	0x24000930

080017f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <SPI1_IRQHandler+0x10>)
 80017fa:	f007 fbbf 	bl	8008f7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	240009d0 	.word	0x240009d0

08001808 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800180c:	2000      	movs	r0, #0
 800180e:	f000 fa8b 	bl	8001d28 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 1 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001824:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001826:	2140      	movs	r1, #64	@ 0x40
 8001828:	4826      	ldr	r0, [pc, #152]	@ (80018c4 <HAL_FDCAN_RxFifo0Callback+0xac>)
 800182a:	f002 feff 	bl	800462c <HAL_FDCAN_GetRxMessage>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d13f      	bne.n	80018b4 <HAL_FDCAN_RxFifo0Callback+0x9c>
		uint8_t Temp[16];

		Temp[0]=0xFF;
 8001834:	23ff      	movs	r3, #255	@ 0xff
 8001836:	723b      	strb	r3, [r7, #8]

		//CAN ID Stored in 2 first bytes
		*(uint16_t*)&Temp[1] = (uint16_t)RxHeader.Identifier;
 8001838:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	3301      	adds	r3, #1
 8001842:	b292      	uxth	r2, r2
 8001844:	801a      	strh	r2, [r3, #0]

		//8 bytes with CAN data
		Temp[3]=RxData[0];
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	72fb      	strb	r3, [r7, #11]
		Temp[4]=RxData[1];
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	733b      	strb	r3, [r7, #12]
		Temp[5]=RxData[2];
 8001852:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	737b      	strb	r3, [r7, #13]
		Temp[6]=RxData[3];
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800185a:	78db      	ldrb	r3, [r3, #3]
 800185c:	73bb      	strb	r3, [r7, #14]
		Temp[7]=RxData[4];
 800185e:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
		Temp[8]=RxData[5];
 8001864:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001866:	795b      	ldrb	r3, [r3, #5]
 8001868:	743b      	strb	r3, [r7, #16]
		Temp[9]=RxData[6];
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800186c:	799b      	ldrb	r3, [r3, #6]
 800186e:	747b      	strb	r3, [r7, #17]
		Temp[10]=RxData[7];
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001872:	79db      	ldrb	r3, [r3, #7]
 8001874:	74bb      	strb	r3, [r7, #18]

		//Clock (uint32_t)
		Temp[11]=(uint8_t)(CLK_SIM);
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	74fb      	strb	r3, [r7, #19]
		Temp[12]=(uint8_t)(CLK_SIM>>8);
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	b2db      	uxtb	r3, r3
 8001886:	753b      	strb	r3, [r7, #20]
		Temp[13]=(uint8_t)(CLK_SIM>>16);
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	b2db      	uxtb	r3, r3
 8001890:	757b      	strb	r3, [r7, #21]
		Temp[14]=(uint8_t)(CLK_SIM>>24);
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0e1b      	lsrs	r3, r3, #24
 8001898:	b2db      	uxtb	r3, r3
 800189a:	75bb      	strb	r3, [r7, #22]
		Temp[15]=0x00;
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]

		//Write to flash if when start
		if(Start_Flight_Recording==1){
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_FDCAN_RxFifo0Callback+0x9c>
			Write_Data(Temp, sizeof(Temp));
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	2110      	movs	r1, #16
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe ff6c 	bl	800078c <Write_Data>
		}
	}
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	240008c4 	.word	0x240008c4
 80018c0:	240008d4 	.word	0x240008d4
 80018c4:	24000930 	.word	0x24000930
 80018c8:	24000ad8 	.word	0x24000ad8
 80018cc:	240008c1 	.word	0x240008c1

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f008 ffbc 	bl	800a87c <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24080000 	.word	0x24080000
 8001930:	00000400 	.word	0x00000400
 8001934:	24000adc 	.word	0x24000adc
 8001938:	24000cc8 	.word	0x24000cc8

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001940:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <SystemInit+0x114>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001946:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <SystemInit+0x114>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001950:	4b40      	ldr	r3, [pc, #256]	@ (8001a54 <SystemInit+0x118>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	2b06      	cmp	r3, #6
 800195a:	d807      	bhi.n	800196c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800195c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <SystemInit+0x118>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 030f 	bic.w	r3, r3, #15
 8001964:	4a3b      	ldr	r2, [pc, #236]	@ (8001a54 <SystemInit+0x118>)
 8001966:	f043 0307 	orr.w	r3, r3, #7
 800196a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800196c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <SystemInit+0x11c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a39      	ldr	r2, [pc, #228]	@ (8001a58 <SystemInit+0x11c>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001978:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <SystemInit+0x11c>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800197e:	4b36      	ldr	r3, [pc, #216]	@ (8001a58 <SystemInit+0x11c>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4935      	ldr	r1, [pc, #212]	@ (8001a58 <SystemInit+0x11c>)
 8001984:	4b35      	ldr	r3, [pc, #212]	@ (8001a5c <SystemInit+0x120>)
 8001986:	4013      	ands	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <SystemInit+0x118>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <SystemInit+0x118>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 030f 	bic.w	r3, r3, #15
 800199e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a54 <SystemInit+0x118>)
 80019a0:	f043 0307 	orr.w	r3, r3, #7
 80019a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <SystemInit+0x11c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <SystemInit+0x11c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019b2:	4b29      	ldr	r3, [pc, #164]	@ (8001a58 <SystemInit+0x11c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019b8:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <SystemInit+0x11c>)
 80019ba:	4a29      	ldr	r2, [pc, #164]	@ (8001a60 <SystemInit+0x124>)
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019be:	4b26      	ldr	r3, [pc, #152]	@ (8001a58 <SystemInit+0x11c>)
 80019c0:	4a28      	ldr	r2, [pc, #160]	@ (8001a64 <SystemInit+0x128>)
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <SystemInit+0x11c>)
 80019c6:	4a28      	ldr	r2, [pc, #160]	@ (8001a68 <SystemInit+0x12c>)
 80019c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019ca:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <SystemInit+0x11c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <SystemInit+0x11c>)
 80019d2:	4a25      	ldr	r2, [pc, #148]	@ (8001a68 <SystemInit+0x12c>)
 80019d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <SystemInit+0x11c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <SystemInit+0x11c>)
 80019de:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <SystemInit+0x12c>)
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <SystemInit+0x11c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <SystemInit+0x11c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001a58 <SystemInit+0x11c>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <SystemInit+0x11c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019fa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <SystemInit+0x130>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <SystemInit+0x134>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a06:	d202      	bcs.n	8001a0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <SystemInit+0x138>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <SystemInit+0x11c>)
 8001a10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d113      	bne.n	8001a44 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <SystemInit+0x11c>)
 8001a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a22:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <SystemInit+0x11c>)
 8001a24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <SystemInit+0x13c>)
 8001a2e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a32:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <SystemInit+0x11c>)
 8001a36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a3a:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <SystemInit+0x11c>)
 8001a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	52002000 	.word	0x52002000
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a60:	02020200 	.word	0x02020200
 8001a64:	01ff0000 	.word	0x01ff0000
 8001a68:	01010280 	.word	0x01010280
 8001a6c:	5c001000 	.word	0x5c001000
 8001a70:	ffff0000 	.word	0xffff0000
 8001a74:	51008108 	.word	0x51008108
 8001a78:	52004000 	.word	0x52004000

08001a7c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <ExitRun0Mode+0x2c>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <ExitRun0Mode+0x2c>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001a8c:	bf00      	nop
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <ExitRun0Mode+0x2c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f9      	beq.n	8001a8e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	58024800 	.word	0x58024800

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001aac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ae8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ab0:	f7ff ffe4 	bl	8001a7c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab4:	f7ff ff42 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f008 fed3 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff fa0d 	bl	8000f00 <main>
  bx  lr
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001aec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001af0:	24000898 	.word	0x24000898
  ldr r2, =_sidata
 8001af4:	0800b2e8 	.word	0x0800b2e8
  ldr r2, =_sbss
 8001af8:	24000898 	.word	0x24000898
  ldr r4, =_ebss
 8001afc:	24000cc8 	.word	0x24000cc8

08001b00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC3_IRQHandler>
	...

08001b04 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	@ 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d009      	beq.n	8001b2c <BSP_LED_Init+0x28>
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d006      	beq.n	8001b2c <BSP_LED_Init+0x28>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d003      	beq.n	8001b2c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b24:	f06f 0301 	mvn.w	r3, #1
 8001b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b2a:	e055      	b.n	8001bd8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001b32:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b38:	4a2a      	ldr	r2, [pc, #168]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	e021      	b.n	8001b96 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10f      	bne.n	8001b78 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001b58:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5e:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b68:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	e00e      	b.n	8001b96 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7e:	4a19      	ldr	r2, [pc, #100]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b88:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <BSP_LED_Init+0xe0>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4a13      	ldr	r2, [pc, #76]	@ (8001be8 <BSP_LED_Init+0xe4>)
 8001b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b9e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4a0f      	ldr	r2, [pc, #60]	@ (8001bec <BSP_LED_Init+0xe8>)
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	f107 0218 	add.w	r2, r7, #24
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fc2a 	bl	8005414 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <BSP_LED_Init+0xe8>)
 8001bc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <BSP_LED_Init+0xe4>)
 8001bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f003 fdce 	bl	8005774 <HAL_GPIO_WritePin>
  }

  return ret;
 8001bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3730      	adds	r7, #48	@ 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	58024400 	.word	0x58024400
 8001be8:	0800b268 	.word	0x0800b268
 8001bec:	24000828 	.word	0x24000828

08001bf0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <BSP_LED_Toggle+0x28>
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d006      	beq.n	8001c18 <BSP_LED_Toggle+0x28>
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d003      	beq.n	8001c18 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c10:	f06f 0301 	mvn.w	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e00b      	b.n	8001c30 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <BSP_LED_Toggle+0x4c>)
 8001c1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4907      	ldr	r1, [pc, #28]	@ (8001c40 <BSP_LED_Toggle+0x50>)
 8001c24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f003 fdbb 	bl	80057a6 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	24000828 	.word	0x24000828
 8001c40:	0800b268 	.word	0x0800b268

08001c44 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460a      	mov	r2, r1
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	4613      	mov	r3, r2
 8001c52:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001c54:	4b2e      	ldr	r3, [pc, #184]	@ (8001d10 <BSP_PB_Init+0xcc>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d10 <BSP_PB_Init+0xcc>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c64:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <BSP_PB_Init+0xcc>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001c72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c76:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <BSP_PB_Init+0xd0>)
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	f107 020c 	add.w	r2, r7, #12
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fbbb 	bl	8005414 <HAL_GPIO_Init>
 8001c9e:	e031      	b.n	8001d04 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ca4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d14 <BSP_PB_Init+0xd0>)
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	f107 020c 	add.w	r2, r7, #12
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fbad 	bl	8005414 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <BSP_PB_Init+0xd4>)
 8001cc0:	441a      	add	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4915      	ldr	r1, [pc, #84]	@ (8001d1c <BSP_PB_Init+0xd8>)
 8001cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f002 fa04 	bl	80040da <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <BSP_PB_Init+0xd4>)
 8001cd8:	1898      	adds	r0, r3, r2
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a10      	ldr	r2, [pc, #64]	@ (8001d20 <BSP_PB_Init+0xdc>)
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f002 f9d9 	bl	800409c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001cea:	2028      	movs	r0, #40	@ 0x28
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <BSP_PB_Init+0xe0>)
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f000 fa93 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001cfc:	2328      	movs	r3, #40	@ 0x28
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 faa9 	bl	8002256 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	58024400 	.word	0x58024400
 8001d14:	24000834 	.word	0x24000834
 8001d18:	24000ae0 	.word	0x24000ae0
 8001d1c:	0800b270 	.word	0x0800b270
 8001d20:	24000838 	.word	0x24000838
 8001d24:	2400083c 	.word	0x2400083c

08001d28 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <BSP_PB_IRQHandler+0x20>)
 8001d38:	4413      	add	r3, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f9e2 	bl	8004104 <HAL_EXTI_IRQHandler>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24000ae0 	.word	0x24000ae0

08001d4c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d7a:	f06f 0301 	mvn.w	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e018      	b.n	8001db4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2294      	movs	r2, #148	@ 0x94
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <BSP_COM_Init+0x5c>)
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f852 	bl	8001e38 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2294      	movs	r2, #148	@ 0x94
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <BSP_COM_Init+0x5c>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f80e 	bl	8001dc4 <MX_USART3_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001dae:	f06f 0303 	mvn.w	r3, #3
 8001db2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001db4:	68fb      	ldr	r3, [r7, #12]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	24000ae8 	.word	0x24000ae8

08001dc4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <MX_USART3_Init+0x60>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	220c      	movs	r2, #12
 8001de2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	895b      	ldrh	r3, [r3, #10]
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	891b      	ldrh	r3, [r3, #8]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	899b      	ldrh	r3, [r3, #12]
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e10:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f007 fbb5 	bl	8009582 <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24000824 	.word	0x24000824

08001e28 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff ff8d 	bl	8001d4c <BSP_PB_Callback>
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e50:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001e7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e82:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <COM1_MspInit+0xa8>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001e9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001eac:	2307      	movs	r3, #7
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480b      	ldr	r0, [pc, #44]	@ (8001ee4 <COM1_MspInit+0xac>)
 8001eb8:	f003 faac 	bl	8005414 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <COM1_MspInit+0xac>)
 8001ed2:	f003 fa9f 	bl	8005414 <HAL_GPIO_Init>
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	@ 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58020c00 	.word	0x58020c00

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f000 f98c 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef4:	f004 fabc 	bl	8006470 <HAL_RCC_GetSysClockFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_Init+0x68>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	4913      	ldr	r1, [pc, #76]	@ (8001f54 <HAL_Init+0x6c>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_Init+0x68>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_Init+0x6c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_Init+0x70>)
 8001f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f5c <HAL_Init+0x74>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 f814 	bl	8001f60 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e002      	b.n	8001f48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f42:	f7ff faa1 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	58024400 	.word	0x58024400
 8001f54:	0800b258 	.word	0x0800b258
 8001f58:	24000820 	.word	0x24000820
 8001f5c:	2400081c 	.word	0x2400081c

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f68:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_InitTick+0x60>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e021      	b.n	8001fb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_InitTick+0x64>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_InitTick+0x60>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f971 	bl	8002272 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f93b 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	@ (8001fc8 <HAL_InitTick+0x68>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	24000844 	.word	0x24000844
 8001fc4:	2400081c 	.word	0x2400081c
 8001fc8:	24000840 	.word	0x24000840

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	24000844 	.word	0x24000844
 8001ff0:	24000b7c 	.word	0x24000b7c

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	24000b7c 	.word	0x24000b7c

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff ffee 	bl	8001ff4 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	24000844 	.word	0x24000844

08002054 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002058:	4b03      	ldr	r3, [pc, #12]	@ (8002068 <HAL_GetREVID+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0c1b      	lsrs	r3, r3, #16
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	5c001000 	.word	0x5c001000

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <__NVIC_SetPriorityGrouping+0x40>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002096:	4313      	orrs	r3, r2
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x40>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00
 80020b0:	05fa0000 	.word	0x05fa0000

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	@ (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff40 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff90 	bl	8002160 <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5f 	bl	800210c <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff33 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa4 	bl	80021c8 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff feae 	bl	8001ff4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e316      	b.n	80028d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a66      	ldr	r2, [pc, #408]	@ (8002444 <HAL_DMA_Init+0x1b8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d04a      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a65      	ldr	r2, [pc, #404]	@ (8002448 <HAL_DMA_Init+0x1bc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d045      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <HAL_DMA_Init+0x1c0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d040      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a62      	ldr	r2, [pc, #392]	@ (8002450 <HAL_DMA_Init+0x1c4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d03b      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a60      	ldr	r2, [pc, #384]	@ (8002454 <HAL_DMA_Init+0x1c8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d036      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5f      	ldr	r2, [pc, #380]	@ (8002458 <HAL_DMA_Init+0x1cc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d031      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a5d      	ldr	r2, [pc, #372]	@ (800245c <HAL_DMA_Init+0x1d0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02c      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002460 <HAL_DMA_Init+0x1d4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d027      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002464 <HAL_DMA_Init+0x1d8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d022      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a59      	ldr	r2, [pc, #356]	@ (8002468 <HAL_DMA_Init+0x1dc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d01d      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a57      	ldr	r2, [pc, #348]	@ (800246c <HAL_DMA_Init+0x1e0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a56      	ldr	r2, [pc, #344]	@ (8002470 <HAL_DMA_Init+0x1e4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a54      	ldr	r2, [pc, #336]	@ (8002474 <HAL_DMA_Init+0x1e8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00e      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a53      	ldr	r2, [pc, #332]	@ (8002478 <HAL_DMA_Init+0x1ec>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a51      	ldr	r2, [pc, #324]	@ (800247c <HAL_DMA_Init+0x1f0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Init+0xb8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a50      	ldr	r2, [pc, #320]	@ (8002480 <HAL_DMA_Init+0x1f4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_DMA_Init+0xbc>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_DMA_Init+0xbe>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 813b 	beq.w	80025c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_DMA_Init+0x1b8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d04a      	beq.n	8002400 <HAL_DMA_Init+0x174>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <HAL_DMA_Init+0x1bc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d045      	beq.n	8002400 <HAL_DMA_Init+0x174>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	@ (800244c <HAL_DMA_Init+0x1c0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d040      	beq.n	8002400 <HAL_DMA_Init+0x174>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	@ (8002450 <HAL_DMA_Init+0x1c4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d03b      	beq.n	8002400 <HAL_DMA_Init+0x174>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <HAL_DMA_Init+0x1c8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d036      	beq.n	8002400 <HAL_DMA_Init+0x174>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <HAL_DMA_Init+0x1cc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d031      	beq.n	8002400 <HAL_DMA_Init+0x174>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	@ (800245c <HAL_DMA_Init+0x1d0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02c      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002460 <HAL_DMA_Init+0x1d4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d027      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002464 <HAL_DMA_Init+0x1d8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d022      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2a      	ldr	r2, [pc, #168]	@ (8002468 <HAL_DMA_Init+0x1dc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d01d      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	@ (800246c <HAL_DMA_Init+0x1e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d018      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_DMA_Init+0x1e4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	@ (8002474 <HAL_DMA_Init+0x1e8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a24      	ldr	r2, [pc, #144]	@ (8002478 <HAL_DMA_Init+0x1ec>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_DMA_Init+0x1f0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_DMA_Init+0x174>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <HAL_DMA_Init+0x1f4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d108      	bne.n	8002412 <HAL_DMA_Init+0x186>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e007      	b.n	8002422 <HAL_DMA_Init+0x196>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002422:	e02f      	b.n	8002484 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002424:	f7ff fde6 	bl	8001ff4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b05      	cmp	r3, #5
 8002430:	d928      	bls.n	8002484 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2203      	movs	r2, #3
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e246      	b.n	80028d2 <HAL_DMA_Init+0x646>
 8002444:	40020010 	.word	0x40020010
 8002448:	40020028 	.word	0x40020028
 800244c:	40020040 	.word	0x40020040
 8002450:	40020058 	.word	0x40020058
 8002454:	40020070 	.word	0x40020070
 8002458:	40020088 	.word	0x40020088
 800245c:	400200a0 	.word	0x400200a0
 8002460:	400200b8 	.word	0x400200b8
 8002464:	40020410 	.word	0x40020410
 8002468:	40020428 	.word	0x40020428
 800246c:	40020440 	.word	0x40020440
 8002470:	40020458 	.word	0x40020458
 8002474:	40020470 	.word	0x40020470
 8002478:	40020488 	.word	0x40020488
 800247c:	400204a0 	.word	0x400204a0
 8002480:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1c8      	bne.n	8002424 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4b83      	ldr	r3, [pc, #524]	@ (80026ac <HAL_DMA_Init+0x420>)
 800249e:	4013      	ands	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d107      	bne.n	80024e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	4313      	orrs	r3, r2
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80024e8:	4b71      	ldr	r3, [pc, #452]	@ (80026b0 <HAL_DMA_Init+0x424>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b71      	ldr	r3, [pc, #452]	@ (80026b4 <HAL_DMA_Init+0x428>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f4:	d328      	bcc.n	8002548 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b28      	cmp	r3, #40	@ 0x28
 80024fc:	d903      	bls.n	8002506 <HAL_DMA_Init+0x27a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b2e      	cmp	r3, #46	@ 0x2e
 8002504:	d917      	bls.n	8002536 <HAL_DMA_Init+0x2aa>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b3e      	cmp	r3, #62	@ 0x3e
 800250c:	d903      	bls.n	8002516 <HAL_DMA_Init+0x28a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b42      	cmp	r3, #66	@ 0x42
 8002514:	d90f      	bls.n	8002536 <HAL_DMA_Init+0x2aa>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b46      	cmp	r3, #70	@ 0x46
 800251c:	d903      	bls.n	8002526 <HAL_DMA_Init+0x29a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b48      	cmp	r3, #72	@ 0x48
 8002524:	d907      	bls.n	8002536 <HAL_DMA_Init+0x2aa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b4e      	cmp	r3, #78	@ 0x4e
 800252c:	d905      	bls.n	800253a <HAL_DMA_Init+0x2ae>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b52      	cmp	r3, #82	@ 0x52
 8002534:	d801      	bhi.n	800253a <HAL_DMA_Init+0x2ae>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_DMA_Init+0x2b0>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002546:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0307 	bic.w	r3, r3, #7
 800255e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	2b04      	cmp	r3, #4
 8002570:	d117      	bne.n	80025a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00e      	beq.n	80025a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 fbff 	bl	8003d88 <DMA_CheckFifoParam>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2240      	movs	r2, #64	@ 0x40
 8002594:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e197      	b.n	80028d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f001 fb3a 	bl	8003c24 <DMA_CalcBaseAndBitshift>
 80025b0:	4603      	mov	r3, r0
 80025b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	223f      	movs	r2, #63	@ 0x3f
 80025be:	409a      	lsls	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e0cd      	b.n	8002762 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a3b      	ldr	r2, [pc, #236]	@ (80026b8 <HAL_DMA_Init+0x42c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_DMA_Init+0x38a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a39      	ldr	r2, [pc, #228]	@ (80026bc <HAL_DMA_Init+0x430>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01d      	beq.n	8002616 <HAL_DMA_Init+0x38a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a38      	ldr	r2, [pc, #224]	@ (80026c0 <HAL_DMA_Init+0x434>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d018      	beq.n	8002616 <HAL_DMA_Init+0x38a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a36      	ldr	r2, [pc, #216]	@ (80026c4 <HAL_DMA_Init+0x438>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_DMA_Init+0x38a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a35      	ldr	r2, [pc, #212]	@ (80026c8 <HAL_DMA_Init+0x43c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_DMA_Init+0x38a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a33      	ldr	r2, [pc, #204]	@ (80026cc <HAL_DMA_Init+0x440>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_DMA_Init+0x38a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a32      	ldr	r2, [pc, #200]	@ (80026d0 <HAL_DMA_Init+0x444>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_DMA_Init+0x38a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a30      	ldr	r2, [pc, #192]	@ (80026d4 <HAL_DMA_Init+0x448>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_DMA_Init+0x38e>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_DMA_Init+0x390>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8097 	beq.w	8002750 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a24      	ldr	r2, [pc, #144]	@ (80026b8 <HAL_DMA_Init+0x42c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d021      	beq.n	8002670 <HAL_DMA_Init+0x3e4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a22      	ldr	r2, [pc, #136]	@ (80026bc <HAL_DMA_Init+0x430>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01c      	beq.n	8002670 <HAL_DMA_Init+0x3e4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <HAL_DMA_Init+0x434>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d017      	beq.n	8002670 <HAL_DMA_Init+0x3e4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1f      	ldr	r2, [pc, #124]	@ (80026c4 <HAL_DMA_Init+0x438>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d012      	beq.n	8002670 <HAL_DMA_Init+0x3e4>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <HAL_DMA_Init+0x43c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00d      	beq.n	8002670 <HAL_DMA_Init+0x3e4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_DMA_Init+0x440>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d008      	beq.n	8002670 <HAL_DMA_Init+0x3e4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	@ (80026d0 <HAL_DMA_Init+0x444>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <HAL_DMA_Init+0x3e4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	@ (80026d4 <HAL_DMA_Init+0x448>)
 800266e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <HAL_DMA_Init+0x44c>)
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b40      	cmp	r3, #64	@ 0x40
 8002696:	d021      	beq.n	80026dc <HAL_DMA_Init+0x450>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b80      	cmp	r3, #128	@ 0x80
 800269e:	d102      	bne.n	80026a6 <HAL_DMA_Init+0x41a>
 80026a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026a4:	e01b      	b.n	80026de <HAL_DMA_Init+0x452>
 80026a6:	2300      	movs	r3, #0
 80026a8:	e019      	b.n	80026de <HAL_DMA_Init+0x452>
 80026aa:	bf00      	nop
 80026ac:	fe10803f 	.word	0xfe10803f
 80026b0:	5c001000 	.word	0x5c001000
 80026b4:	ffff0000 	.word	0xffff0000
 80026b8:	58025408 	.word	0x58025408
 80026bc:	5802541c 	.word	0x5802541c
 80026c0:	58025430 	.word	0x58025430
 80026c4:	58025444 	.word	0x58025444
 80026c8:	58025458 	.word	0x58025458
 80026cc:	5802546c 	.word	0x5802546c
 80026d0:	58025480 	.word	0x58025480
 80026d4:	58025494 	.word	0x58025494
 80026d8:	fffe000f 	.word	0xfffe000f
 80026dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800270c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b6e      	ldr	r3, [pc, #440]	@ (80028dc <HAL_DMA_Init+0x650>)
 8002724:	4413      	add	r3, r2
 8002726:	4a6e      	ldr	r2, [pc, #440]	@ (80028e0 <HAL_DMA_Init+0x654>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f001 fa75 	bl	8003c24 <DMA_CalcBaseAndBitshift>
 800273a:	4603      	mov	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2201      	movs	r2, #1
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e008      	b.n	8002762 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2240      	movs	r2, #64	@ 0x40
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0b7      	b.n	80028d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5f      	ldr	r2, [pc, #380]	@ (80028e4 <HAL_DMA_Init+0x658>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d072      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5d      	ldr	r2, [pc, #372]	@ (80028e8 <HAL_DMA_Init+0x65c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d06d      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5c      	ldr	r2, [pc, #368]	@ (80028ec <HAL_DMA_Init+0x660>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d068      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5a      	ldr	r2, [pc, #360]	@ (80028f0 <HAL_DMA_Init+0x664>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d063      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a59      	ldr	r2, [pc, #356]	@ (80028f4 <HAL_DMA_Init+0x668>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d05e      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <HAL_DMA_Init+0x66c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d059      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a56      	ldr	r2, [pc, #344]	@ (80028fc <HAL_DMA_Init+0x670>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d054      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a54      	ldr	r2, [pc, #336]	@ (8002900 <HAL_DMA_Init+0x674>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04f      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a53      	ldr	r2, [pc, #332]	@ (8002904 <HAL_DMA_Init+0x678>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04a      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a51      	ldr	r2, [pc, #324]	@ (8002908 <HAL_DMA_Init+0x67c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d045      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a50      	ldr	r2, [pc, #320]	@ (800290c <HAL_DMA_Init+0x680>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d040      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002910 <HAL_DMA_Init+0x684>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d03b      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a4d      	ldr	r2, [pc, #308]	@ (8002914 <HAL_DMA_Init+0x688>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d036      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002918 <HAL_DMA_Init+0x68c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a4a      	ldr	r2, [pc, #296]	@ (800291c <HAL_DMA_Init+0x690>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d02c      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a48      	ldr	r2, [pc, #288]	@ (8002920 <HAL_DMA_Init+0x694>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d027      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a47      	ldr	r2, [pc, #284]	@ (8002924 <HAL_DMA_Init+0x698>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a45      	ldr	r2, [pc, #276]	@ (8002928 <HAL_DMA_Init+0x69c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a44      	ldr	r2, [pc, #272]	@ (800292c <HAL_DMA_Init+0x6a0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d018      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a42      	ldr	r2, [pc, #264]	@ (8002930 <HAL_DMA_Init+0x6a4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a41      	ldr	r2, [pc, #260]	@ (8002934 <HAL_DMA_Init+0x6a8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3f      	ldr	r2, [pc, #252]	@ (8002938 <HAL_DMA_Init+0x6ac>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3e      	ldr	r2, [pc, #248]	@ (800293c <HAL_DMA_Init+0x6b0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Init+0x5c6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3c      	ldr	r2, [pc, #240]	@ (8002940 <HAL_DMA_Init+0x6b4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Init+0x5ca>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_DMA_Init+0x5cc>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d032      	beq.n	80028c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f001 fb0f 	bl	8003e80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b80      	cmp	r3, #128	@ 0x80
 8002868:	d102      	bne.n	8002870 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002884:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d010      	beq.n	80028b0 <HAL_DMA_Init+0x624>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d80c      	bhi.n	80028b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f001 fb8c 	bl	8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	e008      	b.n	80028c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	a7fdabf8 	.word	0xa7fdabf8
 80028e0:	cccccccd 	.word	0xcccccccd
 80028e4:	40020010 	.word	0x40020010
 80028e8:	40020028 	.word	0x40020028
 80028ec:	40020040 	.word	0x40020040
 80028f0:	40020058 	.word	0x40020058
 80028f4:	40020070 	.word	0x40020070
 80028f8:	40020088 	.word	0x40020088
 80028fc:	400200a0 	.word	0x400200a0
 8002900:	400200b8 	.word	0x400200b8
 8002904:	40020410 	.word	0x40020410
 8002908:	40020428 	.word	0x40020428
 800290c:	40020440 	.word	0x40020440
 8002910:	40020458 	.word	0x40020458
 8002914:	40020470 	.word	0x40020470
 8002918:	40020488 	.word	0x40020488
 800291c:	400204a0 	.word	0x400204a0
 8002920:	400204b8 	.word	0x400204b8
 8002924:	58025408 	.word	0x58025408
 8002928:	5802541c 	.word	0x5802541c
 800292c:	58025430 	.word	0x58025430
 8002930:	58025444 	.word	0x58025444
 8002934:	58025458 	.word	0x58025458
 8002938:	5802546c 	.word	0x5802546c
 800293c:	58025480 	.word	0x58025480
 8002940:	58025494 	.word	0x58025494

08002944 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e237      	b.n	8002dc6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d004      	beq.n	800296c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e22c      	b.n	8002dc6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5c      	ldr	r2, [pc, #368]	@ (8002ae4 <HAL_DMA_Abort_IT+0x1a0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04a      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ae8 <HAL_DMA_Abort_IT+0x1a4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d045      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a59      	ldr	r2, [pc, #356]	@ (8002aec <HAL_DMA_Abort_IT+0x1a8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d040      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a58      	ldr	r2, [pc, #352]	@ (8002af0 <HAL_DMA_Abort_IT+0x1ac>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d03b      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_DMA_Abort_IT+0x1b0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d036      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a55      	ldr	r2, [pc, #340]	@ (8002af8 <HAL_DMA_Abort_IT+0x1b4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d031      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a53      	ldr	r2, [pc, #332]	@ (8002afc <HAL_DMA_Abort_IT+0x1b8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02c      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a52      	ldr	r2, [pc, #328]	@ (8002b00 <HAL_DMA_Abort_IT+0x1bc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d027      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a50      	ldr	r2, [pc, #320]	@ (8002b04 <HAL_DMA_Abort_IT+0x1c0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002b08 <HAL_DMA_Abort_IT+0x1c4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01d      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b0c <HAL_DMA_Abort_IT+0x1c8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d018      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a4c      	ldr	r2, [pc, #304]	@ (8002b10 <HAL_DMA_Abort_IT+0x1cc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b14 <HAL_DMA_Abort_IT+0x1d0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a49      	ldr	r2, [pc, #292]	@ (8002b18 <HAL_DMA_Abort_IT+0x1d4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a47      	ldr	r2, [pc, #284]	@ (8002b1c <HAL_DMA_Abort_IT+0x1d8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xc8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a46      	ldr	r2, [pc, #280]	@ (8002b20 <HAL_DMA_Abort_IT+0x1dc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Abort_IT+0xcc>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_DMA_Abort_IT+0xce>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8086 	beq.w	8002b24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae4 <HAL_DMA_Abort_IT+0x1a0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d04a      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ae8 <HAL_DMA_Abort_IT+0x1a4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d045      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2c      	ldr	r2, [pc, #176]	@ (8002aec <HAL_DMA_Abort_IT+0x1a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d040      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2b      	ldr	r2, [pc, #172]	@ (8002af0 <HAL_DMA_Abort_IT+0x1ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d03b      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a29      	ldr	r2, [pc, #164]	@ (8002af4 <HAL_DMA_Abort_IT+0x1b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d036      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a28      	ldr	r2, [pc, #160]	@ (8002af8 <HAL_DMA_Abort_IT+0x1b4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d031      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a26      	ldr	r2, [pc, #152]	@ (8002afc <HAL_DMA_Abort_IT+0x1b8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02c      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a25      	ldr	r2, [pc, #148]	@ (8002b00 <HAL_DMA_Abort_IT+0x1bc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d027      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a23      	ldr	r2, [pc, #140]	@ (8002b04 <HAL_DMA_Abort_IT+0x1c0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d022      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_DMA_Abort_IT+0x1c4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d01d      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a20      	ldr	r2, [pc, #128]	@ (8002b0c <HAL_DMA_Abort_IT+0x1c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d018      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <HAL_DMA_Abort_IT+0x1cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b14 <HAL_DMA_Abort_IT+0x1d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_DMA_Abort_IT+0x1d4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d009      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b1c <HAL_DMA_Abort_IT+0x1d8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0x17c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a19      	ldr	r2, [pc, #100]	@ (8002b20 <HAL_DMA_Abort_IT+0x1dc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <HAL_DMA_Abort_IT+0x18e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e178      	b.n	8002dc4 <HAL_DMA_Abort_IT+0x480>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e16f      	b.n	8002dc4 <HAL_DMA_Abort_IT+0x480>
 8002ae4:	40020010 	.word	0x40020010
 8002ae8:	40020028 	.word	0x40020028
 8002aec:	40020040 	.word	0x40020040
 8002af0:	40020058 	.word	0x40020058
 8002af4:	40020070 	.word	0x40020070
 8002af8:	40020088 	.word	0x40020088
 8002afc:	400200a0 	.word	0x400200a0
 8002b00:	400200b8 	.word	0x400200b8
 8002b04:	40020410 	.word	0x40020410
 8002b08:	40020428 	.word	0x40020428
 8002b0c:	40020440 	.word	0x40020440
 8002b10:	40020458 	.word	0x40020458
 8002b14:	40020470 	.word	0x40020470
 8002b18:	40020488 	.word	0x40020488
 8002b1c:	400204a0 	.word	0x400204a0
 8002b20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 020e 	bic.w	r2, r2, #14
 8002b32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6c      	ldr	r2, [pc, #432]	@ (8002cec <HAL_DMA_Abort_IT+0x3a8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d04a      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6b      	ldr	r2, [pc, #428]	@ (8002cf0 <HAL_DMA_Abort_IT+0x3ac>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d045      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a69      	ldr	r2, [pc, #420]	@ (8002cf4 <HAL_DMA_Abort_IT+0x3b0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d040      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a68      	ldr	r2, [pc, #416]	@ (8002cf8 <HAL_DMA_Abort_IT+0x3b4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d03b      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a66      	ldr	r2, [pc, #408]	@ (8002cfc <HAL_DMA_Abort_IT+0x3b8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d036      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a65      	ldr	r2, [pc, #404]	@ (8002d00 <HAL_DMA_Abort_IT+0x3bc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d031      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a63      	ldr	r2, [pc, #396]	@ (8002d04 <HAL_DMA_Abort_IT+0x3c0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d02c      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a62      	ldr	r2, [pc, #392]	@ (8002d08 <HAL_DMA_Abort_IT+0x3c4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d027      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a60      	ldr	r2, [pc, #384]	@ (8002d0c <HAL_DMA_Abort_IT+0x3c8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d022      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5f      	ldr	r2, [pc, #380]	@ (8002d10 <HAL_DMA_Abort_IT+0x3cc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d01d      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d14 <HAL_DMA_Abort_IT+0x3d0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d018      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d18 <HAL_DMA_Abort_IT+0x3d4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d1c <HAL_DMA_Abort_IT+0x3d8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a59      	ldr	r2, [pc, #356]	@ (8002d20 <HAL_DMA_Abort_IT+0x3dc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a57      	ldr	r2, [pc, #348]	@ (8002d24 <HAL_DMA_Abort_IT+0x3e0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x290>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a56      	ldr	r2, [pc, #344]	@ (8002d28 <HAL_DMA_Abort_IT+0x3e4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d108      	bne.n	8002be6 <HAL_DMA_Abort_IT+0x2a2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e007      	b.n	8002bf6 <HAL_DMA_Abort_IT+0x2b2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8002cec <HAL_DMA_Abort_IT+0x3a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d072      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf0 <HAL_DMA_Abort_IT+0x3ac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d06d      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a39      	ldr	r2, [pc, #228]	@ (8002cf4 <HAL_DMA_Abort_IT+0x3b0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d068      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a37      	ldr	r2, [pc, #220]	@ (8002cf8 <HAL_DMA_Abort_IT+0x3b4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d063      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a36      	ldr	r2, [pc, #216]	@ (8002cfc <HAL_DMA_Abort_IT+0x3b8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d05e      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a34      	ldr	r2, [pc, #208]	@ (8002d00 <HAL_DMA_Abort_IT+0x3bc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d059      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a33      	ldr	r2, [pc, #204]	@ (8002d04 <HAL_DMA_Abort_IT+0x3c0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d054      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a31      	ldr	r2, [pc, #196]	@ (8002d08 <HAL_DMA_Abort_IT+0x3c4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d04f      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a30      	ldr	r2, [pc, #192]	@ (8002d0c <HAL_DMA_Abort_IT+0x3c8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d04a      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2e      	ldr	r2, [pc, #184]	@ (8002d10 <HAL_DMA_Abort_IT+0x3cc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d045      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d14 <HAL_DMA_Abort_IT+0x3d0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d040      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	@ (8002d18 <HAL_DMA_Abort_IT+0x3d4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d03b      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2a      	ldr	r2, [pc, #168]	@ (8002d1c <HAL_DMA_Abort_IT+0x3d8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d036      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a28      	ldr	r2, [pc, #160]	@ (8002d20 <HAL_DMA_Abort_IT+0x3dc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d031      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a27      	ldr	r2, [pc, #156]	@ (8002d24 <HAL_DMA_Abort_IT+0x3e0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d02c      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a25      	ldr	r2, [pc, #148]	@ (8002d28 <HAL_DMA_Abort_IT+0x3e4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d027      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a24      	ldr	r2, [pc, #144]	@ (8002d2c <HAL_DMA_Abort_IT+0x3e8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	@ (8002d30 <HAL_DMA_Abort_IT+0x3ec>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a21      	ldr	r2, [pc, #132]	@ (8002d34 <HAL_DMA_Abort_IT+0x3f0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d018      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d38 <HAL_DMA_Abort_IT+0x3f4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <HAL_DMA_Abort_IT+0x3f8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d40 <HAL_DMA_Abort_IT+0x3fc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <HAL_DMA_Abort_IT+0x400>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x3a2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_DMA_Abort_IT+0x404>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d132      	bne.n	8002d4c <HAL_DMA_Abort_IT+0x408>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e031      	b.n	8002d4e <HAL_DMA_Abort_IT+0x40a>
 8002cea:	bf00      	nop
 8002cec:	40020010 	.word	0x40020010
 8002cf0:	40020028 	.word	0x40020028
 8002cf4:	40020040 	.word	0x40020040
 8002cf8:	40020058 	.word	0x40020058
 8002cfc:	40020070 	.word	0x40020070
 8002d00:	40020088 	.word	0x40020088
 8002d04:	400200a0 	.word	0x400200a0
 8002d08:	400200b8 	.word	0x400200b8
 8002d0c:	40020410 	.word	0x40020410
 8002d10:	40020428 	.word	0x40020428
 8002d14:	40020440 	.word	0x40020440
 8002d18:	40020458 	.word	0x40020458
 8002d1c:	40020470 	.word	0x40020470
 8002d20:	40020488 	.word	0x40020488
 8002d24:	400204a0 	.word	0x400204a0
 8002d28:	400204b8 	.word	0x400204b8
 8002d2c:	58025408 	.word	0x58025408
 8002d30:	5802541c 	.word	0x5802541c
 8002d34:	58025430 	.word	0x58025430
 8002d38:	58025444 	.word	0x58025444
 8002d3c:	58025458 	.word	0x58025458
 8002d40:	5802546c 	.word	0x5802546c
 8002d44:	58025480 	.word	0x58025480
 8002d48:	58025494 	.word	0x58025494
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00c      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002da2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop

08002dd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	@ 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ddc:	4b67      	ldr	r3, [pc, #412]	@ (8002f7c <HAL_DMA_IRQHandler+0x1ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a67      	ldr	r2, [pc, #412]	@ (8002f80 <HAL_DMA_IRQHandler+0x1b0>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0a9b      	lsrs	r3, r3, #10
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5f      	ldr	r2, [pc, #380]	@ (8002f84 <HAL_DMA_IRQHandler+0x1b4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04a      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	@ (8002f88 <HAL_DMA_IRQHandler+0x1b8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d045      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002f8c <HAL_DMA_IRQHandler+0x1bc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d040      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5a      	ldr	r2, [pc, #360]	@ (8002f90 <HAL_DMA_IRQHandler+0x1c0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d03b      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a59      	ldr	r2, [pc, #356]	@ (8002f94 <HAL_DMA_IRQHandler+0x1c4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a57      	ldr	r2, [pc, #348]	@ (8002f98 <HAL_DMA_IRQHandler+0x1c8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d031      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a56      	ldr	r2, [pc, #344]	@ (8002f9c <HAL_DMA_IRQHandler+0x1cc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d02c      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a54      	ldr	r2, [pc, #336]	@ (8002fa0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d027      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a53      	ldr	r2, [pc, #332]	@ (8002fa4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a51      	ldr	r2, [pc, #324]	@ (8002fa8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <HAL_DMA_IRQHandler+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a4a      	ldr	r2, [pc, #296]	@ (8002fbc <HAL_DMA_IRQHandler+0x1ec>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xd2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a48      	ldr	r2, [pc, #288]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0xd6>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_DMA_IRQHandler+0xd8>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 842b 	beq.w	8003704 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a2 	beq.w	8003008 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f84 <HAL_DMA_IRQHandler+0x1b4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f88 <HAL_DMA_IRQHandler+0x1b8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <HAL_DMA_IRQHandler+0x1bc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8002f90 <HAL_DMA_IRQHandler+0x1c0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <HAL_DMA_IRQHandler+0x1c4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <HAL_DMA_IRQHandler+0x1c8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a25      	ldr	r2, [pc, #148]	@ (8002f9c <HAL_DMA_IRQHandler+0x1cc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a24      	ldr	r2, [pc, #144]	@ (8002fa0 <HAL_DMA_IRQHandler+0x1d0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	@ (8002fa4 <HAL_DMA_IRQHandler+0x1d4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <HAL_DMA_IRQHandler+0x1d8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fac <HAL_DMA_IRQHandler+0x1dc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <HAL_DMA_IRQHandler+0x1ec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x194>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d12f      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x1f4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e02e      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x208>
 8002f7a:	bf00      	nop
 8002f7c:	2400081c 	.word	0x2400081c
 8002f80:	1b4e81b5 	.word	0x1b4e81b5
 8002f84:	40020010 	.word	0x40020010
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40020040 	.word	0x40020040
 8002f90:	40020058 	.word	0x40020058
 8002f94:	40020070 	.word	0x40020070
 8002f98:	40020088 	.word	0x40020088
 8002f9c:	400200a0 	.word	0x400200a0
 8002fa0:	400200b8 	.word	0x400200b8
 8002fa4:	40020410 	.word	0x40020410
 8002fa8:	40020428 	.word	0x40020428
 8002fac:	40020440 	.word	0x40020440
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	40020470 	.word	0x40020470
 8002fb8:	40020488 	.word	0x40020488
 8002fbc:	400204a0 	.word	0x400204a0
 8002fc0:	400204b8 	.word	0x400204b8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d06e      	beq.n	80030fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a69      	ldr	r2, [pc, #420]	@ (80031c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a67      	ldr	r2, [pc, #412]	@ (80031cc <HAL_DMA_IRQHandler+0x3fc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a66      	ldr	r2, [pc, #408]	@ (80031d0 <HAL_DMA_IRQHandler+0x400>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a64      	ldr	r2, [pc, #400]	@ (80031d4 <HAL_DMA_IRQHandler+0x404>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a63      	ldr	r2, [pc, #396]	@ (80031d8 <HAL_DMA_IRQHandler+0x408>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a61      	ldr	r2, [pc, #388]	@ (80031dc <HAL_DMA_IRQHandler+0x40c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a60      	ldr	r2, [pc, #384]	@ (80031e0 <HAL_DMA_IRQHandler+0x410>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5e      	ldr	r2, [pc, #376]	@ (80031e4 <HAL_DMA_IRQHandler+0x414>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5d      	ldr	r2, [pc, #372]	@ (80031e8 <HAL_DMA_IRQHandler+0x418>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a5b      	ldr	r2, [pc, #364]	@ (80031ec <HAL_DMA_IRQHandler+0x41c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5a      	ldr	r2, [pc, #360]	@ (80031f0 <HAL_DMA_IRQHandler+0x420>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a58      	ldr	r2, [pc, #352]	@ (80031f4 <HAL_DMA_IRQHandler+0x424>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a57      	ldr	r2, [pc, #348]	@ (80031f8 <HAL_DMA_IRQHandler+0x428>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a55      	ldr	r2, [pc, #340]	@ (80031fc <HAL_DMA_IRQHandler+0x42c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a54      	ldr	r2, [pc, #336]	@ (8003200 <HAL_DMA_IRQHandler+0x430>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_IRQHandler+0x2ee>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_DMA_IRQHandler+0x434>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10a      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x304>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e003      	b.n	80030dc <HAL_DMA_IRQHandler+0x30c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2201      	movs	r2, #1
 80030ea:	409a      	lsls	r2, r3
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	f043 0202 	orr.w	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2204      	movs	r2, #4
 8003106:	409a      	lsls	r2, r3
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 808f 	beq.w	8003230 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2c      	ldr	r2, [pc, #176]	@ (80031c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2a      	ldr	r2, [pc, #168]	@ (80031cc <HAL_DMA_IRQHandler+0x3fc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a29      	ldr	r2, [pc, #164]	@ (80031d0 <HAL_DMA_IRQHandler+0x400>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a27      	ldr	r2, [pc, #156]	@ (80031d4 <HAL_DMA_IRQHandler+0x404>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a26      	ldr	r2, [pc, #152]	@ (80031d8 <HAL_DMA_IRQHandler+0x408>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a24      	ldr	r2, [pc, #144]	@ (80031dc <HAL_DMA_IRQHandler+0x40c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a23      	ldr	r2, [pc, #140]	@ (80031e0 <HAL_DMA_IRQHandler+0x410>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a21      	ldr	r2, [pc, #132]	@ (80031e4 <HAL_DMA_IRQHandler+0x414>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a20      	ldr	r2, [pc, #128]	@ (80031e8 <HAL_DMA_IRQHandler+0x418>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_DMA_IRQHandler+0x41c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1d      	ldr	r2, [pc, #116]	@ (80031f0 <HAL_DMA_IRQHandler+0x420>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <HAL_DMA_IRQHandler+0x424>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <HAL_DMA_IRQHandler+0x428>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a18      	ldr	r2, [pc, #96]	@ (80031fc <HAL_DMA_IRQHandler+0x42c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a17      	ldr	r2, [pc, #92]	@ (8003200 <HAL_DMA_IRQHandler+0x430>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x3e2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a15      	ldr	r2, [pc, #84]	@ (8003204 <HAL_DMA_IRQHandler+0x434>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d12a      	bne.n	8003208 <HAL_DMA_IRQHandler+0x438>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e023      	b.n	8003210 <HAL_DMA_IRQHandler+0x440>
 80031c8:	40020010 	.word	0x40020010
 80031cc:	40020028 	.word	0x40020028
 80031d0:	40020040 	.word	0x40020040
 80031d4:	40020058 	.word	0x40020058
 80031d8:	40020070 	.word	0x40020070
 80031dc:	40020088 	.word	0x40020088
 80031e0:	400200a0 	.word	0x400200a0
 80031e4:	400200b8 	.word	0x400200b8
 80031e8:	40020410 	.word	0x40020410
 80031ec:	40020428 	.word	0x40020428
 80031f0:	40020440 	.word	0x40020440
 80031f4:	40020458 	.word	0x40020458
 80031f8:	40020470 	.word	0x40020470
 80031fc:	40020488 	.word	0x40020488
 8003200:	400204a0 	.word	0x400204a0
 8003204:	400204b8 	.word	0x400204b8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2204      	movs	r2, #4
 800321e:	409a      	lsls	r2, r3
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003228:	f043 0204 	orr.w	r2, r3, #4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2210      	movs	r2, #16
 800323a:	409a      	lsls	r2, r3
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a6 	beq.w	8003392 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a85      	ldr	r2, [pc, #532]	@ (8003460 <HAL_DMA_IRQHandler+0x690>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d04a      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a83      	ldr	r2, [pc, #524]	@ (8003464 <HAL_DMA_IRQHandler+0x694>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d045      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a82      	ldr	r2, [pc, #520]	@ (8003468 <HAL_DMA_IRQHandler+0x698>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d040      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a80      	ldr	r2, [pc, #512]	@ (800346c <HAL_DMA_IRQHandler+0x69c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d03b      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7f      	ldr	r2, [pc, #508]	@ (8003470 <HAL_DMA_IRQHandler+0x6a0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d036      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7d      	ldr	r2, [pc, #500]	@ (8003474 <HAL_DMA_IRQHandler+0x6a4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d031      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7c      	ldr	r2, [pc, #496]	@ (8003478 <HAL_DMA_IRQHandler+0x6a8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d02c      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a7a      	ldr	r2, [pc, #488]	@ (800347c <HAL_DMA_IRQHandler+0x6ac>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d027      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a79      	ldr	r2, [pc, #484]	@ (8003480 <HAL_DMA_IRQHandler+0x6b0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d022      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a77      	ldr	r2, [pc, #476]	@ (8003484 <HAL_DMA_IRQHandler+0x6b4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01d      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a76      	ldr	r2, [pc, #472]	@ (8003488 <HAL_DMA_IRQHandler+0x6b8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d018      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a74      	ldr	r2, [pc, #464]	@ (800348c <HAL_DMA_IRQHandler+0x6bc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a73      	ldr	r2, [pc, #460]	@ (8003490 <HAL_DMA_IRQHandler+0x6c0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00e      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a71      	ldr	r2, [pc, #452]	@ (8003494 <HAL_DMA_IRQHandler+0x6c4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a70      	ldr	r2, [pc, #448]	@ (8003498 <HAL_DMA_IRQHandler+0x6c8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x516>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6e      	ldr	r2, [pc, #440]	@ (800349c <HAL_DMA_IRQHandler+0x6cc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d10a      	bne.n	80032fc <HAL_DMA_IRQHandler+0x52c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e009      	b.n	8003310 <HAL_DMA_IRQHandler+0x540>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03e      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2210      	movs	r2, #16
 800331e:	409a      	lsls	r2, r3
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d018      	beq.n	8003364 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d024      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
 8003350:	e01f      	b.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01b      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e016      	b.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2220      	movs	r2, #32
 800339c:	409a      	lsls	r2, r3
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8110 	beq.w	80035c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003460 <HAL_DMA_IRQHandler+0x690>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d04a      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003464 <HAL_DMA_IRQHandler+0x694>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d045      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a29      	ldr	r2, [pc, #164]	@ (8003468 <HAL_DMA_IRQHandler+0x698>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d040      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a28      	ldr	r2, [pc, #160]	@ (800346c <HAL_DMA_IRQHandler+0x69c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d03b      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a26      	ldr	r2, [pc, #152]	@ (8003470 <HAL_DMA_IRQHandler+0x6a0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d036      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a25      	ldr	r2, [pc, #148]	@ (8003474 <HAL_DMA_IRQHandler+0x6a4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d031      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a23      	ldr	r2, [pc, #140]	@ (8003478 <HAL_DMA_IRQHandler+0x6a8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02c      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a22      	ldr	r2, [pc, #136]	@ (800347c <HAL_DMA_IRQHandler+0x6ac>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d027      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a20      	ldr	r2, [pc, #128]	@ (8003480 <HAL_DMA_IRQHandler+0x6b0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1f      	ldr	r2, [pc, #124]	@ (8003484 <HAL_DMA_IRQHandler+0x6b4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01d      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_DMA_IRQHandler+0x6b8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_DMA_IRQHandler+0x6bc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1a      	ldr	r2, [pc, #104]	@ (8003490 <HAL_DMA_IRQHandler+0x6c0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a19      	ldr	r2, [pc, #100]	@ (8003494 <HAL_DMA_IRQHandler+0x6c4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a17      	ldr	r2, [pc, #92]	@ (8003498 <HAL_DMA_IRQHandler+0x6c8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_DMA_IRQHandler+0x678>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	@ (800349c <HAL_DMA_IRQHandler+0x6cc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d12b      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x6d0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e02a      	b.n	80034b4 <HAL_DMA_IRQHandler+0x6e4>
 800345e:	bf00      	nop
 8003460:	40020010 	.word	0x40020010
 8003464:	40020028 	.word	0x40020028
 8003468:	40020040 	.word	0x40020040
 800346c:	40020058 	.word	0x40020058
 8003470:	40020070 	.word	0x40020070
 8003474:	40020088 	.word	0x40020088
 8003478:	400200a0 	.word	0x400200a0
 800347c:	400200b8 	.word	0x400200b8
 8003480:	40020410 	.word	0x40020410
 8003484:	40020428 	.word	0x40020428
 8003488:	40020440 	.word	0x40020440
 800348c:	40020458 	.word	0x40020458
 8003490:	40020470 	.word	0x40020470
 8003494:	40020488 	.word	0x40020488
 8003498:	400204a0 	.word	0x400204a0
 800349c:	400204b8 	.word	0x400204b8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2300      	moveq	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8087 	beq.w	80035c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2220      	movs	r2, #32
 80034c4:	409a      	lsls	r2, r3
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d139      	bne.n	800354a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0216 	bic.w	r2, r2, #22
 80034e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_DMA_IRQHandler+0x736>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	223f      	movs	r2, #63	@ 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 834a 	beq.w	8003bd4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
          }
          return;
 8003548:	e344      	b.n	8003bd4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d018      	beq.n	800358a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02c      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
 8003576:	e027      	b.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e01e      	b.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0210 	bic.w	r2, r2, #16
 80035a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8306 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8088 	beq.w	80036f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7a      	ldr	r2, [pc, #488]	@ (80037d8 <HAL_DMA_IRQHandler+0xa08>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d04a      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a79      	ldr	r2, [pc, #484]	@ (80037dc <HAL_DMA_IRQHandler+0xa0c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d045      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a77      	ldr	r2, [pc, #476]	@ (80037e0 <HAL_DMA_IRQHandler+0xa10>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d040      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a76      	ldr	r2, [pc, #472]	@ (80037e4 <HAL_DMA_IRQHandler+0xa14>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d03b      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a74      	ldr	r2, [pc, #464]	@ (80037e8 <HAL_DMA_IRQHandler+0xa18>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d036      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a73      	ldr	r2, [pc, #460]	@ (80037ec <HAL_DMA_IRQHandler+0xa1c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d031      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a71      	ldr	r2, [pc, #452]	@ (80037f0 <HAL_DMA_IRQHandler+0xa20>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02c      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a70      	ldr	r2, [pc, #448]	@ (80037f4 <HAL_DMA_IRQHandler+0xa24>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d027      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6e      	ldr	r2, [pc, #440]	@ (80037f8 <HAL_DMA_IRQHandler+0xa28>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d022      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6d      	ldr	r2, [pc, #436]	@ (80037fc <HAL_DMA_IRQHandler+0xa2c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d01d      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6b      	ldr	r2, [pc, #428]	@ (8003800 <HAL_DMA_IRQHandler+0xa30>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d018      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6a      	ldr	r2, [pc, #424]	@ (8003804 <HAL_DMA_IRQHandler+0xa34>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a68      	ldr	r2, [pc, #416]	@ (8003808 <HAL_DMA_IRQHandler+0xa38>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00e      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a67      	ldr	r2, [pc, #412]	@ (800380c <HAL_DMA_IRQHandler+0xa3c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_DMA_IRQHandler+0xa40>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_DMA_IRQHandler+0x8b8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a64      	ldr	r2, [pc, #400]	@ (8003814 <HAL_DMA_IRQHandler+0xa44>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d108      	bne.n	800369a <HAL_DMA_IRQHandler+0x8ca>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <HAL_DMA_IRQHandler+0x8da>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d307      	bcc.n	80036c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f2      	bne.n	80036aa <HAL_DMA_IRQHandler+0x8da>
 80036c4:	e000      	b.n	80036c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2203      	movs	r2, #3
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80036de:	e003      	b.n	80036e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8272 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
 8003702:	e26c      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a43      	ldr	r2, [pc, #268]	@ (8003818 <HAL_DMA_IRQHandler+0xa48>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d022      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a42      	ldr	r2, [pc, #264]	@ (800381c <HAL_DMA_IRQHandler+0xa4c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d01d      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a40      	ldr	r2, [pc, #256]	@ (8003820 <HAL_DMA_IRQHandler+0xa50>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d018      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3f      	ldr	r2, [pc, #252]	@ (8003824 <HAL_DMA_IRQHandler+0xa54>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3d      	ldr	r2, [pc, #244]	@ (8003828 <HAL_DMA_IRQHandler+0xa58>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3c      	ldr	r2, [pc, #240]	@ (800382c <HAL_DMA_IRQHandler+0xa5c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3a      	ldr	r2, [pc, #232]	@ (8003830 <HAL_DMA_IRQHandler+0xa60>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_DMA_IRQHandler+0x984>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a39      	ldr	r2, [pc, #228]	@ (8003834 <HAL_DMA_IRQHandler+0xa64>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_DMA_IRQHandler+0x988>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_DMA_IRQHandler+0x98a>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 823f 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2204      	movs	r2, #4
 8003772:	409a      	lsls	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80cd 	beq.w	8003918 <HAL_DMA_IRQHandler+0xb48>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80c7 	beq.w	8003918 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2204      	movs	r2, #4
 8003794:	409a      	lsls	r2, r3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d049      	beq.n	8003838 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8210 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037c0:	e20a      	b.n	8003bd8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8206 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d4:	e200      	b.n	8003bd8 <HAL_DMA_IRQHandler+0xe08>
 80037d6:	bf00      	nop
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
 8003818:	58025408 	.word	0x58025408
 800381c:	5802541c 	.word	0x5802541c
 8003820:	58025430 	.word	0x58025430
 8003824:	58025444 	.word	0x58025444
 8003828:	58025458 	.word	0x58025458
 800382c:	5802546c 	.word	0x5802546c
 8003830:	58025480 	.word	0x58025480
 8003834:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d160      	bne.n	8003904 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7f      	ldr	r2, [pc, #508]	@ (8003a44 <HAL_DMA_IRQHandler+0xc74>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04a      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a7d      	ldr	r2, [pc, #500]	@ (8003a48 <HAL_DMA_IRQHandler+0xc78>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d045      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a4c <HAL_DMA_IRQHandler+0xc7c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a7a      	ldr	r2, [pc, #488]	@ (8003a50 <HAL_DMA_IRQHandler+0xc80>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a79      	ldr	r2, [pc, #484]	@ (8003a54 <HAL_DMA_IRQHandler+0xc84>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d036      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a77      	ldr	r2, [pc, #476]	@ (8003a58 <HAL_DMA_IRQHandler+0xc88>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d031      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a76      	ldr	r2, [pc, #472]	@ (8003a5c <HAL_DMA_IRQHandler+0xc8c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d02c      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a74      	ldr	r2, [pc, #464]	@ (8003a60 <HAL_DMA_IRQHandler+0xc90>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d027      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a73      	ldr	r2, [pc, #460]	@ (8003a64 <HAL_DMA_IRQHandler+0xc94>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a71      	ldr	r2, [pc, #452]	@ (8003a68 <HAL_DMA_IRQHandler+0xc98>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a70      	ldr	r2, [pc, #448]	@ (8003a6c <HAL_DMA_IRQHandler+0xc9c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003a70 <HAL_DMA_IRQHandler+0xca0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6d      	ldr	r2, [pc, #436]	@ (8003a74 <HAL_DMA_IRQHandler+0xca4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a78 <HAL_DMA_IRQHandler+0xca8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a7c <HAL_DMA_IRQHandler+0xcac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_IRQHandler+0xb12>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	@ (8003a80 <HAL_DMA_IRQHandler+0xcb0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <HAL_DMA_IRQHandler+0xb24>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0208 	bic.w	r2, r2, #8
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e007      	b.n	8003904 <HAL_DMA_IRQHandler+0xb34>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8165 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003916:	e15f      	b.n	8003bd8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2202      	movs	r2, #2
 8003922:	409a      	lsls	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80c5 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0xce8>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80bf 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2202      	movs	r2, #2
 8003944:	409a      	lsls	r2, r3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d018      	beq.n	8003986 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 813a 	beq.w	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003970:	e134      	b.n	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8130 	beq.w	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003984:	e12a      	b.n	8003bdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	f040 8089 	bne.w	8003aa4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2b      	ldr	r2, [pc, #172]	@ (8003a44 <HAL_DMA_IRQHandler+0xc74>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d04a      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a29      	ldr	r2, [pc, #164]	@ (8003a48 <HAL_DMA_IRQHandler+0xc78>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d045      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a28      	ldr	r2, [pc, #160]	@ (8003a4c <HAL_DMA_IRQHandler+0xc7c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d040      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a26      	ldr	r2, [pc, #152]	@ (8003a50 <HAL_DMA_IRQHandler+0xc80>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d03b      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a25      	ldr	r2, [pc, #148]	@ (8003a54 <HAL_DMA_IRQHandler+0xc84>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d036      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a23      	ldr	r2, [pc, #140]	@ (8003a58 <HAL_DMA_IRQHandler+0xc88>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a22      	ldr	r2, [pc, #136]	@ (8003a5c <HAL_DMA_IRQHandler+0xc8c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d02c      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a20      	ldr	r2, [pc, #128]	@ (8003a60 <HAL_DMA_IRQHandler+0xc90>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d027      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_DMA_IRQHandler+0xc94>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <HAL_DMA_IRQHandler+0xc98>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1c      	ldr	r2, [pc, #112]	@ (8003a6c <HAL_DMA_IRQHandler+0xc9c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1a      	ldr	r2, [pc, #104]	@ (8003a70 <HAL_DMA_IRQHandler+0xca0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_DMA_IRQHandler+0xca4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <HAL_DMA_IRQHandler+0xca8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <HAL_DMA_IRQHandler+0xcac>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xc62>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <HAL_DMA_IRQHandler+0xcb0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d128      	bne.n	8003a84 <HAL_DMA_IRQHandler+0xcb4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0214 	bic.w	r2, r2, #20
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e027      	b.n	8003a94 <HAL_DMA_IRQHandler+0xcc4>
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 020a 	bic.w	r2, r2, #10
 8003a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8097 	beq.w	8003bdc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab6:	e091      	b.n	8003bdc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8088 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8082 	beq.w	8003bde <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a41      	ldr	r2, [pc, #260]	@ (8003be4 <HAL_DMA_IRQHandler+0xe14>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d04a      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3f      	ldr	r2, [pc, #252]	@ (8003be8 <HAL_DMA_IRQHandler+0xe18>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d045      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bec <HAL_DMA_IRQHandler+0xe1c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d040      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf0 <HAL_DMA_IRQHandler+0xe20>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d03b      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf4 <HAL_DMA_IRQHandler+0xe24>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d036      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a39      	ldr	r2, [pc, #228]	@ (8003bf8 <HAL_DMA_IRQHandler+0xe28>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d031      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a38      	ldr	r2, [pc, #224]	@ (8003bfc <HAL_DMA_IRQHandler+0xe2c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d02c      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a36      	ldr	r2, [pc, #216]	@ (8003c00 <HAL_DMA_IRQHandler+0xe30>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d027      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a35      	ldr	r2, [pc, #212]	@ (8003c04 <HAL_DMA_IRQHandler+0xe34>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d022      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a33      	ldr	r2, [pc, #204]	@ (8003c08 <HAL_DMA_IRQHandler+0xe38>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01d      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a32      	ldr	r2, [pc, #200]	@ (8003c0c <HAL_DMA_IRQHandler+0xe3c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d018      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a30      	ldr	r2, [pc, #192]	@ (8003c10 <HAL_DMA_IRQHandler+0xe40>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2f      	ldr	r2, [pc, #188]	@ (8003c14 <HAL_DMA_IRQHandler+0xe44>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00e      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2d      	ldr	r2, [pc, #180]	@ (8003c18 <HAL_DMA_IRQHandler+0xe48>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d009      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c1c <HAL_DMA_IRQHandler+0xe4c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xdaa>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	@ (8003c20 <HAL_DMA_IRQHandler+0xe50>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <HAL_DMA_IRQHandler+0xdbc>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 021c 	bic.w	r2, r2, #28
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e007      	b.n	8003b9c <HAL_DMA_IRQHandler+0xdcc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 020e 	bic.w	r2, r2, #14
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
 8003bd2:	e004      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003bd4:	bf00      	nop
 8003bd6:	e002      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bdc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bde:	3728      	adds	r7, #40	@ 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40020010 	.word	0x40020010
 8003be8:	40020028 	.word	0x40020028
 8003bec:	40020040 	.word	0x40020040
 8003bf0:	40020058 	.word	0x40020058
 8003bf4:	40020070 	.word	0x40020070
 8003bf8:	40020088 	.word	0x40020088
 8003bfc:	400200a0 	.word	0x400200a0
 8003c00:	400200b8 	.word	0x400200b8
 8003c04:	40020410 	.word	0x40020410
 8003c08:	40020428 	.word	0x40020428
 8003c0c:	40020440 	.word	0x40020440
 8003c10:	40020458 	.word	0x40020458
 8003c14:	40020470 	.word	0x40020470
 8003c18:	40020488 	.word	0x40020488
 8003c1c:	400204a0 	.word	0x400204a0
 8003c20:	400204b8 	.word	0x400204b8

08003c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a42      	ldr	r2, [pc, #264]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x118>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d04a      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a41      	ldr	r2, [pc, #260]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d045      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3f      	ldr	r2, [pc, #252]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x120>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d040      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x124>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d03b      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3c      	ldr	r2, [pc, #240]	@ (8003d4c <DMA_CalcBaseAndBitshift+0x128>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d036      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a3b      	ldr	r2, [pc, #236]	@ (8003d50 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d031      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a39      	ldr	r2, [pc, #228]	@ (8003d54 <DMA_CalcBaseAndBitshift+0x130>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02c      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a38      	ldr	r2, [pc, #224]	@ (8003d58 <DMA_CalcBaseAndBitshift+0x134>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d027      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a36      	ldr	r2, [pc, #216]	@ (8003d5c <DMA_CalcBaseAndBitshift+0x138>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d022      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a35      	ldr	r2, [pc, #212]	@ (8003d60 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01d      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a33      	ldr	r2, [pc, #204]	@ (8003d64 <DMA_CalcBaseAndBitshift+0x140>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d018      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a32      	ldr	r2, [pc, #200]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x144>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x148>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x14c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x150>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <DMA_CalcBaseAndBitshift+0xa8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x154>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <DMA_CalcBaseAndBitshift+0xac>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <DMA_CalcBaseAndBitshift+0xae>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d024      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b10      	subs	r3, #16
 8003cde:	4a27      	ldr	r2, [pc, #156]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x158>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	4a24      	ldr	r2, [pc, #144]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x15c>)
 8003cf0:	5cd3      	ldrb	r3, [r2, r3]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d908      	bls.n	8003d10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b1f      	ldr	r3, [pc, #124]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x160>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	1d1a      	adds	r2, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d0e:	e00d      	b.n	8003d2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x160>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d1e:	e005      	b.n	8003d2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40020010 	.word	0x40020010
 8003d40:	40020028 	.word	0x40020028
 8003d44:	40020040 	.word	0x40020040
 8003d48:	40020058 	.word	0x40020058
 8003d4c:	40020070 	.word	0x40020070
 8003d50:	40020088 	.word	0x40020088
 8003d54:	400200a0 	.word	0x400200a0
 8003d58:	400200b8 	.word	0x400200b8
 8003d5c:	40020410 	.word	0x40020410
 8003d60:	40020428 	.word	0x40020428
 8003d64:	40020440 	.word	0x40020440
 8003d68:	40020458 	.word	0x40020458
 8003d6c:	40020470 	.word	0x40020470
 8003d70:	40020488 	.word	0x40020488
 8003d74:	400204a0 	.word	0x400204a0
 8003d78:	400204b8 	.word	0x400204b8
 8003d7c:	aaaaaaab 	.word	0xaaaaaaab
 8003d80:	0800b274 	.word	0x0800b274
 8003d84:	fffffc00 	.word	0xfffffc00

08003d88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d120      	bne.n	8003dde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d858      	bhi.n	8003e56 <DMA_CheckFifoParam+0xce>
 8003da4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <DMA_CheckFifoParam+0x24>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dcf 	.word	0x08003dcf
 8003db4:	08003dbd 	.word	0x08003dbd
 8003db8:	08003e57 	.word	0x08003e57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d048      	beq.n	8003e5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dcc:	e045      	b.n	8003e5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dd6:	d142      	bne.n	8003e5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ddc:	e03f      	b.n	8003e5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de6:	d123      	bne.n	8003e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d838      	bhi.n	8003e62 <DMA_CheckFifoParam+0xda>
 8003df0:	a201      	add	r2, pc, #4	@ (adr r2, 8003df8 <DMA_CheckFifoParam+0x70>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e0f 	.word	0x08003e0f
 8003e00:	08003e09 	.word	0x08003e09
 8003e04:	08003e21 	.word	0x08003e21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e0c:	e030      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d025      	beq.n	8003e66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e1e:	e022      	b.n	8003e66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e28:	d11f      	bne.n	8003e6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e2e:	e01c      	b.n	8003e6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d902      	bls.n	8003e3e <DMA_CheckFifoParam+0xb6>
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d003      	beq.n	8003e44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e3c:	e018      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
        break;
 8003e42:	e015      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00e      	beq.n	8003e6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
    break;
 8003e54:	e00b      	b.n	8003e6e <DMA_CheckFifoParam+0xe6>
        break;
 8003e56:	bf00      	nop
 8003e58:	e00a      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e008      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e006      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
        break;
 8003e62:	bf00      	nop
 8003e64:	e004      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
        break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
        break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <DMA_CheckFifoParam+0xe8>
    break;
 8003e6e:	bf00      	nop
    }
  }

  return status;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a38      	ldr	r2, [pc, #224]	@ (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a36      	ldr	r2, [pc, #216]	@ (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01d      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a35      	ldr	r2, [pc, #212]	@ (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a33      	ldr	r2, [pc, #204]	@ (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a32      	ldr	r2, [pc, #200]	@ (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a30      	ldr	r2, [pc, #192]	@ (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2f      	ldr	r2, [pc, #188]	@ (8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	3b08      	subs	r3, #8
 8003ef0:	4a28      	ldr	r2, [pc, #160]	@ (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4b26      	ldr	r3, [pc, #152]	@ (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a24      	ldr	r2, [pc, #144]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f0c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f1c:	e024      	b.n	8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	3b10      	subs	r3, #16
 8003f26:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d806      	bhi.n	8003f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d902      	bls.n	8003f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3308      	adds	r3, #8
 8003f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4b18      	ldr	r3, [pc, #96]	@ (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	461a      	mov	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	58025408 	.word	0x58025408
 8003f78:	5802541c 	.word	0x5802541c
 8003f7c:	58025430 	.word	0x58025430
 8003f80:	58025444 	.word	0x58025444
 8003f84:	58025458 	.word	0x58025458
 8003f88:	5802546c 	.word	0x5802546c
 8003f8c:	58025480 	.word	0x58025480
 8003f90:	58025494 	.word	0x58025494
 8003f94:	cccccccd 	.word	0xcccccccd
 8003f98:	16009600 	.word	0x16009600
 8003f9c:	58025880 	.word	0x58025880
 8003fa0:	aaaaaaab 	.word	0xaaaaaaab
 8003fa4:	400204b8 	.word	0x400204b8
 8003fa8:	4002040f 	.word	0x4002040f
 8003fac:	10008200 	.word	0x10008200
 8003fb0:	40020880 	.word	0x40020880

08003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04a      	beq.n	8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d847      	bhi.n	8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a25      	ldr	r2, [pc, #148]	@ (800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d022      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a24      	ldr	r2, [pc, #144]	@ (8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01d      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a22      	ldr	r2, [pc, #136]	@ (8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1e      	ldr	r2, [pc, #120]	@ (8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1c      	ldr	r2, [pc, #112]	@ (8004084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1b      	ldr	r2, [pc, #108]	@ (8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4b17      	ldr	r3, [pc, #92]	@ (800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a15      	ldr	r2, [pc, #84]	@ (8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800403c:	671a      	str	r2, [r3, #112]	@ 0x70
 800403e:	e009      	b.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4b14      	ldr	r3, [pc, #80]	@ (8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	461a      	mov	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a11      	ldr	r2, [pc, #68]	@ (8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004052:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3b01      	subs	r3, #1
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	58025408 	.word	0x58025408
 8004070:	5802541c 	.word	0x5802541c
 8004074:	58025430 	.word	0x58025430
 8004078:	58025444 	.word	0x58025444
 800407c:	58025458 	.word	0x58025458
 8004080:	5802546c 	.word	0x5802546c
 8004084:	58025480 	.word	0x58025480
 8004088:	58025494 	.word	0x58025494
 800408c:	1600963f 	.word	0x1600963f
 8004090:	58025940 	.word	0x58025940
 8004094:	1000823f 	.word	0x1000823f
 8004098:	40020940 	.word	0x40020940

0800409c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	460b      	mov	r3, r1
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e00a      	b.n	80040ce <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80040b8:	7afb      	ldrb	r3, [r7, #11]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d103      	bne.n	80040c6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	605a      	str	r2, [r3, #4]
      break;
 80040c4:	e002      	b.n	80040cc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ca:	bf00      	nop
  }

  return status;
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e003      	b.n	80040f6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2201      	movs	r2, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <HAL_EXTI_IRQHandler+0x5c>)
 800412e:	4413      	add	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4798      	blx	r3
    }
  }
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	58000088 	.word	0x58000088

08004164 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b098      	sub	sp, #96	@ 0x60
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800416c:	4a84      	ldr	r2, [pc, #528]	@ (8004380 <HAL_FDCAN_Init+0x21c>)
 800416e:	f107 030c 	add.w	r3, r7, #12
 8004172:	4611      	mov	r1, r2
 8004174:	224c      	movs	r2, #76	@ 0x4c
 8004176:	4618      	mov	r0, r3
 8004178:	f006 fbac 	bl	800a8d4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1c6      	b.n	8004514 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7e      	ldr	r2, [pc, #504]	@ (8004384 <HAL_FDCAN_Init+0x220>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d106      	bne.n	800419e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004198:	461a      	mov	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd f982 	bl	80014bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0210 	bic.w	r2, r2, #16
 80041c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c8:	f7fd ff14 	bl	8001ff4 <HAL_GetTick>
 80041cc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041ce:	e014      	b.n	80041fa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041d0:	f7fd ff10 	bl	8001ff4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b0a      	cmp	r3, #10
 80041dc:	d90d      	bls.n	80041fa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041e4:	f043 0201 	orr.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2203      	movs	r2, #3
 80041f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e18c      	b.n	8004514 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d0e3      	beq.n	80041d0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004218:	f7fd feec 	bl	8001ff4 <HAL_GetTick>
 800421c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800421e:	e014      	b.n	800424a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004220:	f7fd fee8 	bl	8001ff4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b0a      	cmp	r3, #10
 800422c:	d90d      	bls.n	800424a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2203      	movs	r2, #3
 8004242:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e164      	b.n	8004514 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0e3      	beq.n	8004220 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0202 	orr.w	r2, r2, #2
 8004266:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7c1b      	ldrb	r3, [r3, #16]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d108      	bne.n	8004282 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800427e:	619a      	str	r2, [r3, #24]
 8004280:	e007      	b.n	8004292 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004290:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7c5b      	ldrb	r3, [r3, #17]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d108      	bne.n	80042ac <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042a8:	619a      	str	r2, [r3, #24]
 80042aa:	e007      	b.n	80042bc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	7c9b      	ldrb	r3, [r3, #18]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d108      	bne.n	80042d6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042d2:	619a      	str	r2, [r3, #24]
 80042d4:	e007      	b.n	80042e6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042e4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800430a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0210 	bic.w	r2, r2, #16
 800431a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d108      	bne.n	8004336 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0204 	orr.w	r2, r2, #4
 8004332:	619a      	str	r2, [r3, #24]
 8004334:	e030      	b.n	8004398 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d02c      	beq.n	8004398 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d020      	beq.n	8004388 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004354:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0210 	orr.w	r2, r2, #16
 8004364:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d114      	bne.n	8004398 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0220 	orr.w	r2, r2, #32
 800437c:	619a      	str	r2, [r3, #24]
 800437e:	e00b      	b.n	8004398 <HAL_FDCAN_Init+0x234>
 8004380:	0800b20c 	.word	0x0800b20c
 8004384:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0220 	orr.w	r2, r2, #32
 8004396:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	3b01      	subs	r3, #1
 800439e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043a8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043c0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043c2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043cc:	d115      	bne.n	80043fa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	3b01      	subs	r3, #1
 80043da:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043dc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	3b01      	subs	r3, #1
 80043e4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043e6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	3b01      	subs	r3, #1
 80043f0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043f6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043f8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004420:	4413      	add	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d011      	beq.n	800444a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800442e:	f023 0107 	bic.w	r1, r3, #7
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	3360      	adds	r3, #96	@ 0x60
 800443a:	443b      	add	r3, r7
 800443c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d011      	beq.n	8004476 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800445a:	f023 0107 	bic.w	r1, r3, #7
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	3360      	adds	r3, #96	@ 0x60
 8004466:	443b      	add	r3, r7
 8004468:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447a:	2b00      	cmp	r3, #0
 800447c:	d012      	beq.n	80044a4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004486:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	3360      	adds	r3, #96	@ 0x60
 8004492:	443b      	add	r3, r7
 8004494:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004498:	011a      	lsls	r2, r3, #4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044b4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	3360      	adds	r3, #96	@ 0x60
 80044c0:	443b      	add	r3, r7
 80044c2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80044c6:	021a      	lsls	r2, r3, #8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a11      	ldr	r2, [pc, #68]	@ (800451c <HAL_FDCAN_Init+0x3b8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d107      	bne.n	80044ec <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f022 0203 	bic.w	r2, r2, #3
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fd81 	bl	800500c <FDCAN_CalcultateRamBlockAddresses>
 800450a:	4603      	mov	r3, r0
 800450c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004510:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004514:	4618      	mov	r0, r3
 8004516:	3760      	adds	r7, #96	@ 0x60
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	4000a000 	.word	0x4000a000

08004520 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d111      	bne.n	8004558 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e008      	b.n	800456a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800455e:	f043 0204 	orr.w	r2, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b086      	sub	sp, #24
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d141      	bne.n	8004612 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004596:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e038      	b.n	8004624 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e026      	b.n	8004624 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fe93 	bl	8005318 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2101      	movs	r1, #1
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004602:	2201      	movs	r2, #1
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	409a      	lsls	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	e008      	b.n	8004624 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004618:	f043 0208 	orr.w	r2, r3, #8
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800462c:	b480      	push	{r7}
 800462e:	b08b      	sub	sp, #44	@ 0x2c
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004644:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004646:	7efb      	ldrb	r3, [r7, #27]
 8004648:	2b02      	cmp	r3, #2
 800464a:	f040 8149 	bne.w	80048e0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d14c      	bne.n	80046ee <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800465c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800466a:	f043 0220 	orr.w	r2, r3, #32
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e13c      	b.n	80048f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800468e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e12a      	b.n	80048f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046ac:	d10a      	bne.n	80046c4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046be:	d101      	bne.n	80046c4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80046c0:	2301      	movs	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e0:	69f9      	ldr	r1, [r7, #28]
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ec:	e068      	b.n	80047c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b41      	cmp	r3, #65	@ 0x41
 80046f2:	d14c      	bne.n	800478e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0ec      	b.n	80048f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800472e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0da      	b.n	80048f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800474c:	d10a      	bne.n	8004764 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004756:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800475a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800475e:	d101      	bne.n	8004764 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004760:	2301      	movs	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	69f9      	ldr	r1, [r7, #28]
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
 800478c:	e018      	b.n	80047c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	d309      	bcc.n	80047ac <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0a2      	b.n	80048f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0c9b      	lsrs	r3, r3, #18
 80047da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e005      	b.n	80047f0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	3304      	adds	r3, #4
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	0e1b      	lsrs	r3, r3, #24
 8004844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0fda      	lsrs	r2, r3, #31
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	3304      	adds	r3, #4
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004860:	2300      	movs	r3, #0
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	e00a      	b.n	800487c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	441a      	add	r2, r3
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	440b      	add	r3, r1
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	3301      	adds	r3, #1
 800487a:	623b      	str	r3, [r7, #32]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a1f      	ldr	r2, [pc, #124]	@ (8004900 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004882:	5cd3      	ldrb	r3, [r2, r3]
 8004884:	461a      	mov	r2, r3
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	4293      	cmp	r3, r2
 800488a:	d3ec      	bcc.n	8004866 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b40      	cmp	r3, #64	@ 0x40
 8004890:	d105      	bne.n	800489e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800489c:	e01e      	b.n	80048dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b41      	cmp	r3, #65	@ 0x41
 80048a2:	d105      	bne.n	80048b0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80048ae:	e015      	b.n	80048dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b1f      	cmp	r3, #31
 80048b4:	d808      	bhi.n	80048c8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2101      	movs	r1, #1
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	fa01 f202 	lsl.w	r2, r1, r2
 80048c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80048c6:	e009      	b.n	80048dc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 021f 	and.w	r2, r3, #31
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f202 	lsl.w	r2, r1, r2
 80048d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e008      	b.n	80048f2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048e6:	f043 0208 	orr.w	r2, r3, #8
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	372c      	adds	r7, #44	@ 0x2c
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	0800b27c 	.word	0x0800b27c

08004904 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004916:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d002      	beq.n	8004924 <HAL_FDCAN_ActivateNotification+0x20>
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d155      	bne.n	80049d0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004942:	e014      	b.n	800496e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d108      	bne.n	8004966 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0202 	orr.w	r2, r2, #2
 8004962:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004964:	e003      	b.n	800496e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2203      	movs	r2, #3
 800496c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	430a      	orrs	r2, r1
 8004988:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <HAL_FDCAN_ActivateNotification+0xec>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80049be:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	0f9b      	lsrs	r3, r3, #30
 80049c6:	490b      	ldr	r1, [pc, #44]	@ (80049f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e008      	b.n	80049e2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d6:	f043 0202 	orr.w	r2, r3, #2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	3fcfffff 	.word	0x3fcfffff
 80049f4:	4000a800 	.word	0x4000a800

080049f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b096      	sub	sp, #88	@ 0x58
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004a00:	4b9a      	ldr	r3, [pc, #616]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	079b      	lsls	r3, r3, #30
 8004a06:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004a08:	4b98      	ldr	r3, [pc, #608]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	079b      	lsls	r3, r3, #30
 8004a0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a10:	4013      	ands	r3, r2
 8004a12:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a1a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a1e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a28:	4013      	ands	r3, r2
 8004a2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a40:	4013      	ands	r3, r2
 8004a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a58:	4013      	ands	r3, r2
 8004a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a62:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004a66:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a70:	4013      	ands	r3, r2
 8004a72:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a88:	4013      	ands	r3, r2
 8004a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004abc:	651a      	str	r2, [r3, #80]	@ 0x50
 8004abe:	4b6b      	ldr	r3, [pc, #428]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa54 	bl	8004f72 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004acc:	0a9b      	lsrs	r3, r3, #10
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01d      	beq.n	8004b12 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	0a9b      	lsrs	r3, r3, #10
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d017      	beq.n	8004b12 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004af4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004af6:	4013      	ands	r3, r2
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b02:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b04:	4b59      	ldr	r3, [pc, #356]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fa07 	bl	8004f20 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b1e:	4b54      	ldr	r3, [pc, #336]	@ (8004c70 <HAL_FDCAN_IRQHandler+0x278>)
 8004b20:	400b      	ands	r3, r1
 8004b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b24:	4a51      	ldr	r2, [pc, #324]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b28:	0f9b      	lsrs	r3, r3, #30
 8004b2a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004b2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9c0 	bl	8004eb4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b40:	4b4b      	ldr	r3, [pc, #300]	@ (8004c70 <HAL_FDCAN_IRQHandler+0x278>)
 8004b42:	400b      	ands	r3, r1
 8004b44:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b46:	4a49      	ldr	r2, [pc, #292]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b4a:	0f9b      	lsrs	r3, r3, #30
 8004b4c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004b4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f9ba 	bl	8004eca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004b62:	4b43      	ldr	r3, [pc, #268]	@ (8004c70 <HAL_FDCAN_IRQHandler+0x278>)
 8004b64:	400b      	ands	r3, r1
 8004b66:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b68:	4a40      	ldr	r2, [pc, #256]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b6c:	0f9b      	lsrs	r3, r3, #30
 8004b6e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004b70:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc fe50 	bl	8001818 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004b84:	4b3a      	ldr	r3, [pc, #232]	@ (8004c70 <HAL_FDCAN_IRQHandler+0x278>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b8a:	4a38      	ldr	r2, [pc, #224]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b8e:	0f9b      	lsrs	r3, r3, #30
 8004b90:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004b92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f9a3 	bl	8004ee0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9c:	0adb      	lsrs	r3, r3, #11
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	0adb      	lsrs	r3, r3, #11
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bba:	651a      	str	r2, [r3, #80]	@ 0x50
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f997 	bl	8004ef6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bca:	0a5b      	lsrs	r3, r3, #9
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01d      	beq.n	8004c10 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	0a5b      	lsrs	r3, r3, #9
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d017      	beq.n	8004c10 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004be8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c00:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c02:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f97d 	bl	8004f0a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c12:	0cdb      	lsrs	r3, r3, #19
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1e:	0cdb      	lsrs	r3, r3, #19
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004c30:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c32:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f97c 	bl	8004f36 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004c5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c60:	4b02      	ldr	r3, [pc, #8]	@ (8004c6c <HAL_FDCAN_IRQHandler+0x274>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	e004      	b.n	8004c74 <HAL_FDCAN_IRQHandler+0x27c>
 8004c6a:	bf00      	nop
 8004c6c:	4000a800 	.word	0x4000a800
 8004c70:	3fcfffff 	.word	0x3fcfffff
 8004c74:	f000 f969 	bl	8004f4a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d010      	beq.n	8004ca6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c86:	0c9b      	lsrs	r3, r3, #18
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004c98:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c9a:	4b83      	ldr	r3, [pc, #524]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f95c 	bl	8004f5e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca8:	0c5b      	lsrs	r3, r3, #17
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d015      	beq.n	8004cde <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	0c5b      	lsrs	r3, r3, #17
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00f      	beq.n	8004cde <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cc6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004cc8:	4b77      	ldr	r3, [pc, #476]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00d      	beq.n	8004d00 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cea:	4b70      	ldr	r3, [pc, #448]	@ (8004eac <HAL_FDCAN_IRQHandler+0x4b4>)
 8004cec:	400b      	ands	r3, r1
 8004cee:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cf0:	4a6d      	ldr	r2, [pc, #436]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf4:	0f9b      	lsrs	r3, r3, #30
 8004cf6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004cf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f94d 	bl	8004f9a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d011      	beq.n	8004d2a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d0c:	4b67      	ldr	r3, [pc, #412]	@ (8004eac <HAL_FDCAN_IRQHandler+0x4b4>)
 8004d0e:	400b      	ands	r3, r1
 8004d10:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d12:	4a65      	ldr	r2, [pc, #404]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	0f9b      	lsrs	r3, r3, #30
 8004d18:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a60      	ldr	r2, [pc, #384]	@ (8004eb0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	f040 80ac 	bne.w	8004e8e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a4 	beq.w	8004e8e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d72:	4013      	ands	r3, r2
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004d98:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	4013      	ands	r3, r2
 8004da4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004db0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dda:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004ddc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8e6 	bl	8004fb0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004df0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8e6 	bl	8004fc6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01a      	beq.n	8004e3c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	099b      	lsrs	r3, r3, #6
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e28:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2240      	movs	r2, #64	@ 0x40
 8004e30:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	6939      	ldr	r1, [r7, #16]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8d0 	bl	8004fdc <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e48:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004e4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f8d1 	bl	8004ff4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	6a3a      	ldr	r2, [r7, #32]
 8004e5e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f874 	bl	8004f86 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3758      	adds	r7, #88	@ 0x58
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	4000a800 	.word	0x4000a800
 8004eac:	3fcfffff 	.word	0x3fcfffff
 8004eb0:	4000a000 	.word	0x4000a000

08004eb4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005018:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005022:	4ba7      	ldr	r3, [pc, #668]	@ (80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005024:	4013      	ands	r3, r2
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	0091      	lsls	r1, r2, #2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	430b      	orrs	r3, r1
 8005030:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005044:	041a      	lsls	r2, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	4413      	add	r3, r2
 8005058:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005062:	4b97      	ldr	r3, [pc, #604]	@ (80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005064:	4013      	ands	r3, r2
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	0091      	lsls	r1, r2, #2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	430b      	orrs	r3, r1
 8005070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005084:	041a      	lsls	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80050a4:	4b86      	ldr	r3, [pc, #536]	@ (80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	0091      	lsls	r1, r2, #2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050be:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	041a      	lsls	r2, r3, #16
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4413      	add	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80050ec:	4b74      	ldr	r3, [pc, #464]	@ (80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	0091      	lsls	r1, r2, #2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005106:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510e:	041a      	lsls	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4413      	add	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005134:	4b62      	ldr	r3, [pc, #392]	@ (80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	0091      	lsls	r1, r2, #2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	430b      	orrs	r3, r1
 8005142:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4413      	add	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005160:	4b57      	ldr	r3, [pc, #348]	@ (80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	0091      	lsls	r1, r2, #2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	430b      	orrs	r3, r1
 800516e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800517a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005182:	041a      	lsls	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4413      	add	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80051a2:	4b47      	ldr	r3, [pc, #284]	@ (80052c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0091      	lsls	r1, r2, #2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	430b      	orrs	r3, r1
 80051b0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051bc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	041a      	lsls	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051d8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e0:	061a      	lsls	r2, r3, #24
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051f0:	4b34      	ldr	r3, [pc, #208]	@ (80052c4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80051f2:	4413      	add	r3, r2
 80051f4:	009a      	lsls	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005244:	441a      	add	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800525c:	441a      	add	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80052a2:	fb01 f303 	mul.w	r3, r1, r3
 80052a6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80052a8:	441a      	add	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b6:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d915      	bls.n	80052e8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80052bc:	e006      	b.n	80052cc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80052be:	bf00      	nop
 80052c0:	ffff0003 	.word	0xffff0003
 80052c4:	10002b00 	.word	0x10002b00
 80052c8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2203      	movs	r2, #3
 80052e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e010      	b.n	800530a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e005      	b.n	80052fc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3304      	adds	r3, #4
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d3f3      	bcc.n	80052f0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop

08005318 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	@ 0x24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005336:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800533e:	4313      	orrs	r3, r2
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	e00a      	b.n	800535a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800534c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005352:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005354:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005358:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005364:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800536a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005370:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	3304      	adds	r3, #4
 800539c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	3304      	adds	r3, #4
 80053a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e020      	b.n	80053f2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3303      	adds	r3, #3
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	3302      	adds	r3, #2
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	440b      	add	r3, r1
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053c8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	3301      	adds	r3, #1
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	440b      	add	r3, r1
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80053d6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	440a      	add	r2, r1
 80053de:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80053e0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3304      	adds	r3, #4
 80053ea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3304      	adds	r3, #4
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4a06      	ldr	r2, [pc, #24]	@ (8005410 <FDCAN_CopyMessageToRAM+0xf8>)
 80053f8:	5cd3      	ldrb	r3, [r2, r3]
 80053fa:	461a      	mov	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4293      	cmp	r3, r2
 8005400:	d3d6      	bcc.n	80053b0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3724      	adds	r7, #36	@ 0x24
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	0800b27c 	.word	0x0800b27c

08005414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	@ 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005422:	4b89      	ldr	r3, [pc, #548]	@ (8005648 <HAL_GPIO_Init+0x234>)
 8005424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005426:	e194      	b.n	8005752 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	4013      	ands	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8186 	beq.w	800574c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d005      	beq.n	8005458 <HAL_GPIO_Init+0x44>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d130      	bne.n	80054ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	2203      	movs	r2, #3
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4013      	ands	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4313      	orrs	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800548e:	2201      	movs	r2, #1
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0201 	and.w	r2, r3, #1
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d017      	beq.n	80054f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	2203      	movs	r2, #3
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d123      	bne.n	800554a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	08da      	lsrs	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3208      	adds	r2, #8
 800550a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	220f      	movs	r2, #15
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4013      	ands	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4313      	orrs	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	08da      	lsrs	r2, r3, #3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3208      	adds	r2, #8
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	2203      	movs	r2, #3
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f003 0203 	and.w	r2, r3, #3
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4313      	orrs	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80e0 	beq.w	800574c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800558c:	4b2f      	ldr	r3, [pc, #188]	@ (800564c <HAL_GPIO_Init+0x238>)
 800558e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005592:	4a2e      	ldr	r2, [pc, #184]	@ (800564c <HAL_GPIO_Init+0x238>)
 8005594:	f043 0302 	orr.w	r3, r3, #2
 8005598:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800559c:	4b2b      	ldr	r3, [pc, #172]	@ (800564c <HAL_GPIO_Init+0x238>)
 800559e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055aa:	4a29      	ldr	r2, [pc, #164]	@ (8005650 <HAL_GPIO_Init+0x23c>)
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	089b      	lsrs	r3, r3, #2
 80055b0:	3302      	adds	r3, #2
 80055b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	220f      	movs	r2, #15
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a20      	ldr	r2, [pc, #128]	@ (8005654 <HAL_GPIO_Init+0x240>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d052      	beq.n	800567c <HAL_GPIO_Init+0x268>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005658 <HAL_GPIO_Init+0x244>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d031      	beq.n	8005642 <HAL_GPIO_Init+0x22e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1e      	ldr	r2, [pc, #120]	@ (800565c <HAL_GPIO_Init+0x248>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02b      	beq.n	800563e <HAL_GPIO_Init+0x22a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <HAL_GPIO_Init+0x24c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d025      	beq.n	800563a <HAL_GPIO_Init+0x226>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005664 <HAL_GPIO_Init+0x250>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01f      	beq.n	8005636 <HAL_GPIO_Init+0x222>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005668 <HAL_GPIO_Init+0x254>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d019      	beq.n	8005632 <HAL_GPIO_Init+0x21e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <HAL_GPIO_Init+0x258>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <HAL_GPIO_Init+0x21a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <HAL_GPIO_Init+0x25c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00d      	beq.n	800562a <HAL_GPIO_Init+0x216>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <HAL_GPIO_Init+0x260>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d007      	beq.n	8005626 <HAL_GPIO_Init+0x212>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a17      	ldr	r2, [pc, #92]	@ (8005678 <HAL_GPIO_Init+0x264>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d101      	bne.n	8005622 <HAL_GPIO_Init+0x20e>
 800561e:	2309      	movs	r3, #9
 8005620:	e02d      	b.n	800567e <HAL_GPIO_Init+0x26a>
 8005622:	230a      	movs	r3, #10
 8005624:	e02b      	b.n	800567e <HAL_GPIO_Init+0x26a>
 8005626:	2308      	movs	r3, #8
 8005628:	e029      	b.n	800567e <HAL_GPIO_Init+0x26a>
 800562a:	2307      	movs	r3, #7
 800562c:	e027      	b.n	800567e <HAL_GPIO_Init+0x26a>
 800562e:	2306      	movs	r3, #6
 8005630:	e025      	b.n	800567e <HAL_GPIO_Init+0x26a>
 8005632:	2305      	movs	r3, #5
 8005634:	e023      	b.n	800567e <HAL_GPIO_Init+0x26a>
 8005636:	2304      	movs	r3, #4
 8005638:	e021      	b.n	800567e <HAL_GPIO_Init+0x26a>
 800563a:	2303      	movs	r3, #3
 800563c:	e01f      	b.n	800567e <HAL_GPIO_Init+0x26a>
 800563e:	2302      	movs	r3, #2
 8005640:	e01d      	b.n	800567e <HAL_GPIO_Init+0x26a>
 8005642:	2301      	movs	r3, #1
 8005644:	e01b      	b.n	800567e <HAL_GPIO_Init+0x26a>
 8005646:	bf00      	nop
 8005648:	58000080 	.word	0x58000080
 800564c:	58024400 	.word	0x58024400
 8005650:	58000400 	.word	0x58000400
 8005654:	58020000 	.word	0x58020000
 8005658:	58020400 	.word	0x58020400
 800565c:	58020800 	.word	0x58020800
 8005660:	58020c00 	.word	0x58020c00
 8005664:	58021000 	.word	0x58021000
 8005668:	58021400 	.word	0x58021400
 800566c:	58021800 	.word	0x58021800
 8005670:	58021c00 	.word	0x58021c00
 8005674:	58022000 	.word	0x58022000
 8005678:	58022400 	.word	0x58022400
 800567c:	2300      	movs	r3, #0
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	f002 0203 	and.w	r2, r2, #3
 8005684:	0092      	lsls	r2, r2, #2
 8005686:	4093      	lsls	r3, r2
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4313      	orrs	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800568e:	4938      	ldr	r1, [pc, #224]	@ (8005770 <HAL_GPIO_Init+0x35c>)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	089b      	lsrs	r3, r3, #2
 8005694:	3302      	adds	r3, #2
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800569c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	43db      	mvns	r3, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	43db      	mvns	r3, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4013      	ands	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	43db      	mvns	r3, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4013      	ands	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	f47f ae63 	bne.w	8005428 <HAL_GPIO_Init+0x14>
  }
}
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	3724      	adds	r7, #36	@ 0x24
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	58000400 	.word	0x58000400

08005774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
 8005780:	4613      	mov	r3, r2
 8005782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005784:	787b      	ldrb	r3, [r7, #1]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578a:	887a      	ldrh	r2, [r7, #2]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005790:	e003      	b.n	800579a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	041a      	lsls	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	619a      	str	r2, [r3, #24]
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057b8:	887a      	ldrh	r2, [r7, #2]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4013      	ands	r3, r2
 80057be:	041a      	lsls	r2, r3, #16
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	43d9      	mvns	r1, r3
 80057c4:	887b      	ldrh	r3, [r7, #2]
 80057c6:	400b      	ands	r3, r1
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057e4:	4b19      	ldr	r3, [pc, #100]	@ (800584c <HAL_PWREx_ConfigSupply+0x70>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d00a      	beq.n	8005806 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057f0:	4b16      	ldr	r3, [pc, #88]	@ (800584c <HAL_PWREx_ConfigSupply+0x70>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d001      	beq.n	8005802 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e01f      	b.n	8005842 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e01d      	b.n	8005842 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005806:	4b11      	ldr	r3, [pc, #68]	@ (800584c <HAL_PWREx_ConfigSupply+0x70>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f023 0207 	bic.w	r2, r3, #7
 800580e:	490f      	ldr	r1, [pc, #60]	@ (800584c <HAL_PWREx_ConfigSupply+0x70>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4313      	orrs	r3, r2
 8005814:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005816:	f7fc fbed 	bl	8001ff4 <HAL_GetTick>
 800581a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800581c:	e009      	b.n	8005832 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800581e:	f7fc fbe9 	bl	8001ff4 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800582c:	d901      	bls.n	8005832 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e007      	b.n	8005842 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <HAL_PWREx_ConfigSupply+0x70>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583e:	d1ee      	bne.n	800581e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	58024800 	.word	0x58024800

08005850 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08c      	sub	sp, #48	@ 0x30
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f000 bc48 	b.w	80060f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8088 	beq.w	8005982 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005872:	4b99      	ldr	r3, [pc, #612]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800587c:	4b96      	ldr	r3, [pc, #600]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005884:	2b10      	cmp	r3, #16
 8005886:	d007      	beq.n	8005898 <HAL_RCC_OscConfig+0x48>
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	2b18      	cmp	r3, #24
 800588c:	d111      	bne.n	80058b2 <HAL_RCC_OscConfig+0x62>
 800588e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d10c      	bne.n	80058b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005898:	4b8f      	ldr	r3, [pc, #572]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d06d      	beq.n	8005980 <HAL_RCC_OscConfig+0x130>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d169      	bne.n	8005980 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f000 bc21 	b.w	80060f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ba:	d106      	bne.n	80058ca <HAL_RCC_OscConfig+0x7a>
 80058bc:	4b86      	ldr	r3, [pc, #536]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a85      	ldr	r2, [pc, #532]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e02e      	b.n	8005928 <HAL_RCC_OscConfig+0xd8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0x9c>
 80058d2:	4b81      	ldr	r3, [pc, #516]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a80      	ldr	r2, [pc, #512]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	4b7e      	ldr	r3, [pc, #504]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a7d      	ldr	r2, [pc, #500]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e01d      	b.n	8005928 <HAL_RCC_OscConfig+0xd8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0xc0>
 80058f6:	4b78      	ldr	r3, [pc, #480]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a77      	ldr	r2, [pc, #476]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80058fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b75      	ldr	r3, [pc, #468]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a74      	ldr	r2, [pc, #464]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e00b      	b.n	8005928 <HAL_RCC_OscConfig+0xd8>
 8005910:	4b71      	ldr	r3, [pc, #452]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a70      	ldr	r2, [pc, #448]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a6d      	ldr	r2, [pc, #436]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d013      	beq.n	8005958 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fc fb60 	bl	8001ff4 <HAL_GetTick>
 8005934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005938:	f7fc fb5c 	bl	8001ff4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	@ 0x64
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e3d4      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800594a:	4b63      	ldr	r3, [pc, #396]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0xe8>
 8005956:	e014      	b.n	8005982 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fc fb4c 	bl	8001ff4 <HAL_GetTick>
 800595c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005960:	f7fc fb48 	bl	8001ff4 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	@ 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e3c0      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005972:	4b59      	ldr	r3, [pc, #356]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x110>
 800597e:	e000      	b.n	8005982 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80ca 	beq.w	8005b24 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005990:	4b51      	ldr	r3, [pc, #324]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005998:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800599a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_RCC_OscConfig+0x166>
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2b18      	cmp	r3, #24
 80059aa:	d156      	bne.n	8005a5a <HAL_RCC_OscConfig+0x20a>
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d151      	bne.n	8005a5a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b6:	4b48      	ldr	r3, [pc, #288]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_RCC_OscConfig+0x17e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e392      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059ce:	4b42      	ldr	r3, [pc, #264]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 0219 	bic.w	r2, r3, #25
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	493f      	ldr	r1, [pc, #252]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fc fb08 	bl	8001ff4 <HAL_GetTick>
 80059e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e8:	f7fc fb04 	bl	8001ff4 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e37c      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059fa:	4b37      	ldr	r3, [pc, #220]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a06:	f7fc fb25 	bl	8002054 <HAL_GetREVID>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d817      	bhi.n	8005a44 <HAL_RCC_OscConfig+0x1f4>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	d108      	bne.n	8005a2e <HAL_RCC_OscConfig+0x1de>
 8005a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005a24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a2c:	e07a      	b.n	8005b24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	031b      	lsls	r3, r3, #12
 8005a3c:	4926      	ldr	r1, [pc, #152]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a42:	e06f      	b.n	8005b24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a44:	4b24      	ldr	r3, [pc, #144]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	4921      	ldr	r1, [pc, #132]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a58:	e064      	b.n	8005b24 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d047      	beq.n	8005af2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 0219 	bic.w	r2, r3, #25
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	491a      	ldr	r1, [pc, #104]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fc fabe 	bl	8001ff4 <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7c:	f7fc faba 	bl	8001ff4 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e332      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a8e:	4b12      	ldr	r3, [pc, #72]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9a:	f7fc fadb 	bl	8002054 <HAL_GetREVID>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d819      	bhi.n	8005adc <HAL_RCC_OscConfig+0x28c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	d108      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x272>
 8005ab0:	4b09      	ldr	r3, [pc, #36]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ab8:	4a07      	ldr	r2, [pc, #28]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005abe:	6053      	str	r3, [r2, #4]
 8005ac0:	e030      	b.n	8005b24 <HAL_RCC_OscConfig+0x2d4>
 8005ac2:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	031b      	lsls	r3, r3, #12
 8005ad0:	4901      	ldr	r1, [pc, #4]	@ (8005ad8 <HAL_RCC_OscConfig+0x288>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	604b      	str	r3, [r1, #4]
 8005ad6:	e025      	b.n	8005b24 <HAL_RCC_OscConfig+0x2d4>
 8005ad8:	58024400 	.word	0x58024400
 8005adc:	4b9a      	ldr	r3, [pc, #616]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	061b      	lsls	r3, r3, #24
 8005aea:	4997      	ldr	r1, [pc, #604]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]
 8005af0:	e018      	b.n	8005b24 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af2:	4b95      	ldr	r3, [pc, #596]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a94      	ldr	r2, [pc, #592]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afe:	f7fc fa79 	bl	8001ff4 <HAL_GetTick>
 8005b02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b06:	f7fc fa75 	bl	8001ff4 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e2ed      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b18:	4b8b      	ldr	r3, [pc, #556]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f0      	bne.n	8005b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80a9 	beq.w	8005c84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b32:	4b85      	ldr	r3, [pc, #532]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b3a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b3c:	4b82      	ldr	r3, [pc, #520]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b40:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d007      	beq.n	8005b58 <HAL_RCC_OscConfig+0x308>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b18      	cmp	r3, #24
 8005b4c:	d13a      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x374>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d135      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b58:	4b7b      	ldr	r3, [pc, #492]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_OscConfig+0x320>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	2b80      	cmp	r3, #128	@ 0x80
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e2c1      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b70:	f7fc fa70 	bl	8002054 <HAL_GetREVID>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d817      	bhi.n	8005bae <HAL_RCC_OscConfig+0x35e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d108      	bne.n	8005b98 <HAL_RCC_OscConfig+0x348>
 8005b86:	4b70      	ldr	r3, [pc, #448]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b8e:	4a6e      	ldr	r2, [pc, #440]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b94:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b96:	e075      	b.n	8005c84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b98:	4b6b      	ldr	r3, [pc, #428]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	069b      	lsls	r3, r3, #26
 8005ba6:	4968      	ldr	r1, [pc, #416]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bac:	e06a      	b.n	8005c84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bae:	4b66      	ldr	r3, [pc, #408]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	4962      	ldr	r1, [pc, #392]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bc2:	e05f      	b.n	8005c84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d042      	beq.n	8005c52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fc fa0c 	bl	8001ff4 <HAL_GetTick>
 8005bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005be0:	f7fc fa08 	bl	8001ff4 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e280      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bf2:	4b55      	ldr	r3, [pc, #340]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bfe:	f7fc fa29 	bl	8002054 <HAL_GetREVID>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d817      	bhi.n	8005c3c <HAL_RCC_OscConfig+0x3ec>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d108      	bne.n	8005c26 <HAL_RCC_OscConfig+0x3d6>
 8005c14:	4b4c      	ldr	r3, [pc, #304]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c22:	6053      	str	r3, [r2, #4]
 8005c24:	e02e      	b.n	8005c84 <HAL_RCC_OscConfig+0x434>
 8005c26:	4b48      	ldr	r3, [pc, #288]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	069b      	lsls	r3, r3, #26
 8005c34:	4944      	ldr	r1, [pc, #272]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	604b      	str	r3, [r1, #4]
 8005c3a:	e023      	b.n	8005c84 <HAL_RCC_OscConfig+0x434>
 8005c3c:	4b42      	ldr	r3, [pc, #264]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	493f      	ldr	r1, [pc, #252]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60cb      	str	r3, [r1, #12]
 8005c50:	e018      	b.n	8005c84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c52:	4b3d      	ldr	r3, [pc, #244]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3c      	ldr	r2, [pc, #240]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5e:	f7fc f9c9 	bl	8001ff4 <HAL_GetTick>
 8005c62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c66:	f7fc f9c5 	bl	8001ff4 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e23d      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c78:	4b33      	ldr	r3, [pc, #204]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d036      	beq.n	8005cfe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d019      	beq.n	8005ccc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c98:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fc f9a6 	bl	8001ff4 <HAL_GetTick>
 8005ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cac:	f7fc f9a2 	bl	8001ff4 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e21a      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cbe:	4b22      	ldr	r3, [pc, #136]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x45c>
 8005cca:	e018      	b.n	8005cfe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd8:	f7fc f98c 	bl	8001ff4 <HAL_GetTick>
 8005cdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce0:	f7fc f988 	bl	8001ff4 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e200      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cf2:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d039      	beq.n	8005d7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d12:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a0c      	ldr	r2, [pc, #48]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005d18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d1e:	f7fc f969 	bl	8001ff4 <HAL_GetTick>
 8005d22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d26:	f7fc f965 	bl	8001ff4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e1dd      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d38:	4b03      	ldr	r3, [pc, #12]	@ (8005d48 <HAL_RCC_OscConfig+0x4f8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCC_OscConfig+0x4d6>
 8005d44:	e01b      	b.n	8005d7e <HAL_RCC_OscConfig+0x52e>
 8005d46:	bf00      	nop
 8005d48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d4c:	4b9b      	ldr	r3, [pc, #620]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a9a      	ldr	r2, [pc, #616]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d58:	f7fc f94c 	bl	8001ff4 <HAL_GetTick>
 8005d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d60:	f7fc f948 	bl	8001ff4 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1c0      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d72:	4b92      	ldr	r3, [pc, #584]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8081 	beq.w	8005e8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d8c:	4b8c      	ldr	r3, [pc, #560]	@ (8005fc0 <HAL_RCC_OscConfig+0x770>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a8b      	ldr	r2, [pc, #556]	@ (8005fc0 <HAL_RCC_OscConfig+0x770>)
 8005d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d98:	f7fc f92c 	bl	8001ff4 <HAL_GetTick>
 8005d9c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da0:	f7fc f928 	bl	8001ff4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b64      	cmp	r3, #100	@ 0x64
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e1a0      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005db2:	4b83      	ldr	r3, [pc, #524]	@ (8005fc0 <HAL_RCC_OscConfig+0x770>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x584>
 8005dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	4a7c      	ldr	r2, [pc, #496]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dd2:	e02d      	b.n	8005e30 <HAL_RCC_OscConfig+0x5e0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10c      	bne.n	8005df6 <HAL_RCC_OscConfig+0x5a6>
 8005ddc:	4b77      	ldr	r3, [pc, #476]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4a76      	ldr	r2, [pc, #472]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de8:	4b74      	ldr	r3, [pc, #464]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dec:	4a73      	ldr	r2, [pc, #460]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005dee:	f023 0304 	bic.w	r3, r3, #4
 8005df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005df4:	e01c      	b.n	8005e30 <HAL_RCC_OscConfig+0x5e0>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x5c8>
 8005dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	4a6e      	ldr	r2, [pc, #440]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	4a6b      	ldr	r2, [pc, #428]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e16:	e00b      	b.n	8005e30 <HAL_RCC_OscConfig+0x5e0>
 8005e18:	4b68      	ldr	r3, [pc, #416]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1c:	4a67      	ldr	r2, [pc, #412]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e24:	4b65      	ldr	r3, [pc, #404]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e28:	4a64      	ldr	r2, [pc, #400]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e2a:	f023 0304 	bic.w	r3, r3, #4
 8005e2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d015      	beq.n	8005e64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fc f8dc 	bl	8001ff4 <HAL_GetTick>
 8005e3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fc f8d8 	bl	8001ff4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e14e      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e56:	4b59      	ldr	r3, [pc, #356]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ee      	beq.n	8005e40 <HAL_RCC_OscConfig+0x5f0>
 8005e62:	e014      	b.n	8005e8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e64:	f7fc f8c6 	bl	8001ff4 <HAL_GetTick>
 8005e68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6c:	f7fc f8c2 	bl	8001ff4 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e138      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e82:	4b4e      	ldr	r3, [pc, #312]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1ee      	bne.n	8005e6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 812d 	beq.w	80060f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e98:	4b48      	ldr	r3, [pc, #288]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ea0:	2b18      	cmp	r3, #24
 8005ea2:	f000 80bd 	beq.w	8006020 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	f040 809e 	bne.w	8005fec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb0:	4b42      	ldr	r3, [pc, #264]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a41      	ldr	r2, [pc, #260]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fc f89a 	bl	8001ff4 <HAL_GetTick>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc f896 	bl	8001ff4 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e10e      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ed6:	4b39      	ldr	r3, [pc, #228]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ee2:	4b36      	ldr	r3, [pc, #216]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ee6:	4b37      	ldr	r3, [pc, #220]	@ (8005fc4 <HAL_RCC_OscConfig+0x774>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ef2:	0112      	lsls	r2, r2, #4
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	4931      	ldr	r1, [pc, #196]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	628b      	str	r3, [r1, #40]	@ 0x28
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	3b01      	subs	r3, #1
 8005f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	025b      	lsls	r3, r3, #9
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f16:	3b01      	subs	r3, #1
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f24:	3b01      	subs	r3, #1
 8005f26:	061b      	lsls	r3, r3, #24
 8005f28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f2c:	4923      	ldr	r1, [pc, #140]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005f32:	4b22      	ldr	r3, [pc, #136]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f36:	4a21      	ldr	r2, [pc, #132]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f42:	4b21      	ldr	r3, [pc, #132]	@ (8005fc8 <HAL_RCC_OscConfig+0x778>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f4a:	00d2      	lsls	r2, r2, #3
 8005f4c:	491b      	ldr	r1, [pc, #108]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f52:	4b1a      	ldr	r3, [pc, #104]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f56:	f023 020c 	bic.w	r2, r3, #12
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	4917      	ldr	r1, [pc, #92]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f64:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	f023 0202 	bic.w	r2, r3, #2
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f70:	4912      	ldr	r1, [pc, #72]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f76:	4b11      	ldr	r3, [pc, #68]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	4a10      	ldr	r2, [pc, #64]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f82:	4b0e      	ldr	r3, [pc, #56]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	4a0d      	ldr	r2, [pc, #52]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005f9a:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9e:	4a07      	ldr	r2, [pc, #28]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa6:	4b05      	ldr	r3, [pc, #20]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a04      	ldr	r2, [pc, #16]	@ (8005fbc <HAL_RCC_OscConfig+0x76c>)
 8005fac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb2:	f7fc f81f 	bl	8001ff4 <HAL_GetTick>
 8005fb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fb8:	e011      	b.n	8005fde <HAL_RCC_OscConfig+0x78e>
 8005fba:	bf00      	nop
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	58024800 	.word	0x58024800
 8005fc4:	fffffc0c 	.word	0xfffffc0c
 8005fc8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fcc:	f7fc f812 	bl	8001ff4 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e08a      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fde:	4b47      	ldr	r3, [pc, #284]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0x77c>
 8005fea:	e082      	b.n	80060f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fec:	4b43      	ldr	r3, [pc, #268]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a42      	ldr	r2, [pc, #264]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 8005ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fb fffc 	bl	8001ff4 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006000:	f7fb fff8 	bl	8001ff4 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e070      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006012:	4b3a      	ldr	r3, [pc, #232]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x7b0>
 800601e:	e068      	b.n	80060f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006020:	4b36      	ldr	r3, [pc, #216]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006026:	4b35      	ldr	r3, [pc, #212]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	2b01      	cmp	r3, #1
 8006032:	d031      	beq.n	8006098 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f003 0203 	and.w	r2, r3, #3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603e:	429a      	cmp	r2, r3
 8006040:	d12a      	bne.n	8006098 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d122      	bne.n	8006098 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d11a      	bne.n	8006098 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	0a5b      	lsrs	r3, r3, #9
 8006066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d111      	bne.n	8006098 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0c1b      	lsrs	r3, r3, #16
 8006078:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d108      	bne.n	8006098 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	0e1b      	lsrs	r3, r3, #24
 800608a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006092:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e02b      	b.n	80060f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800609c:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 800609e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d01f      	beq.n	80060f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80060b2:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	4a11      	ldr	r2, [pc, #68]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060be:	f7fb ff99 	bl	8001ff4 <HAL_GetTick>
 80060c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80060c4:	bf00      	nop
 80060c6:	f7fb ff95 	bl	8001ff4 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d0f9      	beq.n	80060c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060d2:	4b0a      	ldr	r3, [pc, #40]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 80060d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006100 <HAL_RCC_OscConfig+0x8b0>)
 80060d8:	4013      	ands	r3, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060de:	00d2      	lsls	r2, r2, #3
 80060e0:	4906      	ldr	r1, [pc, #24]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80060e6:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	4a04      	ldr	r2, [pc, #16]	@ (80060fc <HAL_RCC_OscConfig+0x8ac>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3730      	adds	r7, #48	@ 0x30
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	58024400 	.word	0x58024400
 8006100:	ffff0007 	.word	0xffff0007

08006104 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e19c      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006118:	4b8a      	ldr	r3, [pc, #552]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d910      	bls.n	8006148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b87      	ldr	r3, [pc, #540]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 020f 	bic.w	r2, r3, #15
 800612e:	4985      	ldr	r1, [pc, #532]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006136:	4b83      	ldr	r3, [pc, #524]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d001      	beq.n	8006148 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e184      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d010      	beq.n	8006176 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	4b7b      	ldr	r3, [pc, #492]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006160:	429a      	cmp	r2, r3
 8006162:	d908      	bls.n	8006176 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006164:	4b78      	ldr	r3, [pc, #480]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	4975      	ldr	r1, [pc, #468]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006172:	4313      	orrs	r3, r2
 8006174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d010      	beq.n	80061a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	4b70      	ldr	r3, [pc, #448]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800618e:	429a      	cmp	r2, r3
 8006190:	d908      	bls.n	80061a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006192:	4b6d      	ldr	r3, [pc, #436]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	496a      	ldr	r1, [pc, #424]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d010      	beq.n	80061d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699a      	ldr	r2, [r3, #24]
 80061b4:	4b64      	ldr	r3, [pc, #400]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061bc:	429a      	cmp	r2, r3
 80061be:	d908      	bls.n	80061d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061c0:	4b61      	ldr	r3, [pc, #388]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	495e      	ldr	r1, [pc, #376]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d010      	beq.n	8006200 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69da      	ldr	r2, [r3, #28]
 80061e2:	4b59      	ldr	r3, [pc, #356]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d908      	bls.n	8006200 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061ee:	4b56      	ldr	r3, [pc, #344]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	4953      	ldr	r1, [pc, #332]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d010      	beq.n	800622e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	4b4d      	ldr	r3, [pc, #308]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	429a      	cmp	r2, r3
 800621a:	d908      	bls.n	800622e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800621c:	4b4a      	ldr	r3, [pc, #296]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f023 020f 	bic.w	r2, r3, #15
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4947      	ldr	r1, [pc, #284]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 800622a:	4313      	orrs	r3, r2
 800622c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d055      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800623a:	4b43      	ldr	r3, [pc, #268]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4940      	ldr	r1, [pc, #256]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006248:	4313      	orrs	r3, r2
 800624a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d107      	bne.n	8006264 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006254:	4b3c      	ldr	r3, [pc, #240]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d121      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0f6      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d107      	bne.n	800627c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800626c:	4b36      	ldr	r3, [pc, #216]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d115      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0ea      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d107      	bne.n	8006294 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006284:	4b30      	ldr	r3, [pc, #192]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0de      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006294:	4b2c      	ldr	r3, [pc, #176]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0d6      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062a4:	4b28      	ldr	r3, [pc, #160]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f023 0207 	bic.w	r2, r3, #7
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4925      	ldr	r1, [pc, #148]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b6:	f7fb fe9d 	bl	8001ff4 <HAL_GetTick>
 80062ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062bc:	e00a      	b.n	80062d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062be:	f7fb fe99 	bl	8001ff4 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e0be      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d1eb      	bne.n	80062be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d010      	beq.n	8006314 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	429a      	cmp	r2, r3
 8006300:	d208      	bcs.n	8006314 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006302:	4b11      	ldr	r3, [pc, #68]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f023 020f 	bic.w	r2, r3, #15
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	490e      	ldr	r1, [pc, #56]	@ (8006348 <HAL_RCC_ClockConfig+0x244>)
 8006310:	4313      	orrs	r3, r2
 8006312:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006314:	4b0b      	ldr	r3, [pc, #44]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d214      	bcs.n	800634c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006322:	4b08      	ldr	r3, [pc, #32]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 020f 	bic.w	r2, r3, #15
 800632a:	4906      	ldr	r1, [pc, #24]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006332:	4b04      	ldr	r3, [pc, #16]	@ (8006344 <HAL_RCC_ClockConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d005      	beq.n	800634c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e086      	b.n	8006452 <HAL_RCC_ClockConfig+0x34e>
 8006344:	52002000 	.word	0x52002000
 8006348:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d010      	beq.n	800637a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	4b3f      	ldr	r3, [pc, #252]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006364:	429a      	cmp	r2, r3
 8006366:	d208      	bcs.n	800637a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006368:	4b3c      	ldr	r3, [pc, #240]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	4939      	ldr	r1, [pc, #228]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 8006376:	4313      	orrs	r3, r2
 8006378:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d010      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	4b34      	ldr	r3, [pc, #208]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006392:	429a      	cmp	r2, r3
 8006394:	d208      	bcs.n	80063a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006396:	4b31      	ldr	r3, [pc, #196]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	492e      	ldr	r1, [pc, #184]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d010      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	4b28      	ldr	r3, [pc, #160]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d208      	bcs.n	80063d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063c4:	4b25      	ldr	r3, [pc, #148]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	4922      	ldr	r1, [pc, #136]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d010      	beq.n	8006404 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69da      	ldr	r2, [r3, #28]
 80063e6:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d208      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063f2:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	4917      	ldr	r1, [pc, #92]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 8006400:	4313      	orrs	r3, r2
 8006402:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006404:	f000 f834 	bl	8006470 <HAL_RCC_GetSysClockFreq>
 8006408:	4602      	mov	r2, r0
 800640a:	4b14      	ldr	r3, [pc, #80]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	4912      	ldr	r1, [pc, #72]	@ (8006460 <HAL_RCC_ClockConfig+0x35c>)
 8006416:	5ccb      	ldrb	r3, [r1, r3]
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
 8006420:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006422:	4b0e      	ldr	r3, [pc, #56]	@ (800645c <HAL_RCC_ClockConfig+0x358>)
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	4a0d      	ldr	r2, [pc, #52]	@ (8006460 <HAL_RCC_ClockConfig+0x35c>)
 800642c:	5cd3      	ldrb	r3, [r2, r3]
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
 8006438:	4a0a      	ldr	r2, [pc, #40]	@ (8006464 <HAL_RCC_ClockConfig+0x360>)
 800643a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800643c:	4a0a      	ldr	r2, [pc, #40]	@ (8006468 <HAL_RCC_ClockConfig+0x364>)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006442:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <HAL_RCC_ClockConfig+0x368>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f7fb fd8a 	bl	8001f60 <HAL_InitTick>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
 8006460:	0800b258 	.word	0x0800b258
 8006464:	24000820 	.word	0x24000820
 8006468:	2400081c 	.word	0x2400081c
 800646c:	24000840 	.word	0x24000840

08006470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006470:	b480      	push	{r7}
 8006472:	b089      	sub	sp, #36	@ 0x24
 8006474:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006476:	4bb3      	ldr	r3, [pc, #716]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800647e:	2b18      	cmp	r3, #24
 8006480:	f200 8155 	bhi.w	800672e <HAL_RCC_GetSysClockFreq+0x2be>
 8006484:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064f1 	.word	0x080064f1
 8006490:	0800672f 	.word	0x0800672f
 8006494:	0800672f 	.word	0x0800672f
 8006498:	0800672f 	.word	0x0800672f
 800649c:	0800672f 	.word	0x0800672f
 80064a0:	0800672f 	.word	0x0800672f
 80064a4:	0800672f 	.word	0x0800672f
 80064a8:	0800672f 	.word	0x0800672f
 80064ac:	08006517 	.word	0x08006517
 80064b0:	0800672f 	.word	0x0800672f
 80064b4:	0800672f 	.word	0x0800672f
 80064b8:	0800672f 	.word	0x0800672f
 80064bc:	0800672f 	.word	0x0800672f
 80064c0:	0800672f 	.word	0x0800672f
 80064c4:	0800672f 	.word	0x0800672f
 80064c8:	0800672f 	.word	0x0800672f
 80064cc:	0800651d 	.word	0x0800651d
 80064d0:	0800672f 	.word	0x0800672f
 80064d4:	0800672f 	.word	0x0800672f
 80064d8:	0800672f 	.word	0x0800672f
 80064dc:	0800672f 	.word	0x0800672f
 80064e0:	0800672f 	.word	0x0800672f
 80064e4:	0800672f 	.word	0x0800672f
 80064e8:	0800672f 	.word	0x0800672f
 80064ec:	08006523 	.word	0x08006523
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f0:	4b94      	ldr	r3, [pc, #592]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064fc:	4b91      	ldr	r3, [pc, #580]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	08db      	lsrs	r3, r3, #3
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	4a90      	ldr	r2, [pc, #576]	@ (8006748 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
 800650c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800650e:	e111      	b.n	8006734 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006510:	4b8d      	ldr	r3, [pc, #564]	@ (8006748 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006512:	61bb      	str	r3, [r7, #24]
      break;
 8006514:	e10e      	b.n	8006734 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006516:	4b8d      	ldr	r3, [pc, #564]	@ (800674c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006518:	61bb      	str	r3, [r7, #24]
      break;
 800651a:	e10b      	b.n	8006734 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800651c:	4b8c      	ldr	r3, [pc, #560]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800651e:	61bb      	str	r3, [r7, #24]
      break;
 8006520:	e108      	b.n	8006734 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006522:	4b88      	ldr	r3, [pc, #544]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800652c:	4b85      	ldr	r3, [pc, #532]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006536:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006538:	4b82      	ldr	r3, [pc, #520]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006542:	4b80      	ldr	r3, [pc, #512]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	08db      	lsrs	r3, r3, #3
 8006548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	fb02 f303 	mul.w	r3, r2, r3
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80e1 	beq.w	8006728 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b02      	cmp	r3, #2
 800656a:	f000 8083 	beq.w	8006674 <HAL_RCC_GetSysClockFreq+0x204>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b02      	cmp	r3, #2
 8006572:	f200 80a1 	bhi.w	80066b8 <HAL_RCC_GetSysClockFreq+0x248>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x114>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d056      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006582:	e099      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006584:	4b6f      	ldr	r3, [pc, #444]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02d      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006590:	4b6c      	ldr	r3, [pc, #432]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	4a6b      	ldr	r2, [pc, #428]	@ (8006748 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
 80065a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ba:	4b62      	ldr	r3, [pc, #392]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006754 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80065ea:	e087      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006758 <HAL_RCC_GetSysClockFreq+0x2e8>
 80065fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fe:	4b51      	ldr	r3, [pc, #324]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006612:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006754 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800662e:	e065      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800675c <HAL_RCC_GetSysClockFreq+0x2ec>
 800663e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006642:	4b40      	ldr	r3, [pc, #256]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006652:	ed97 6a02 	vldr	s12, [r7, #8]
 8006656:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006754 <HAL_RCC_GetSysClockFreq+0x2e4>
 800665a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006672:	e043      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006760 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006686:	4b2f      	ldr	r3, [pc, #188]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006696:	ed97 6a02 	vldr	s12, [r7, #8]
 800669a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006754 <HAL_RCC_GetSysClockFreq+0x2e4>
 800669e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066b6:	e021      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800675c <HAL_RCC_GetSysClockFreq+0x2ec>
 80066c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066da:	ed97 6a02 	vldr	s12, [r7, #8]
 80066de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006754 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80066fc:	4b11      	ldr	r3, [pc, #68]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006700:	0a5b      	lsrs	r3, r3, #9
 8006702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006706:	3301      	adds	r3, #1
 8006708:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006714:	edd7 6a07 	vldr	s13, [r7, #28]
 8006718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800671c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006720:	ee17 3a90 	vmov	r3, s15
 8006724:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006726:	e005      	b.n	8006734 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
      break;
 800672c:	e002      	b.n	8006734 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800672e:	4b07      	ldr	r3, [pc, #28]	@ (800674c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006730:	61bb      	str	r3, [r7, #24]
      break;
 8006732:	bf00      	nop
  }

  return sysclockfreq;
 8006734:	69bb      	ldr	r3, [r7, #24]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3724      	adds	r7, #36	@ 0x24
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
 8006748:	03d09000 	.word	0x03d09000
 800674c:	003d0900 	.word	0x003d0900
 8006750:	007a1200 	.word	0x007a1200
 8006754:	46000000 	.word	0x46000000
 8006758:	4c742400 	.word	0x4c742400
 800675c:	4a742400 	.word	0x4a742400
 8006760:	4af42400 	.word	0x4af42400

08006764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800676a:	f7ff fe81 	bl	8006470 <HAL_RCC_GetSysClockFreq>
 800676e:	4602      	mov	r2, r0
 8006770:	4b10      	ldr	r3, [pc, #64]	@ (80067b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	0a1b      	lsrs	r3, r3, #8
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	490f      	ldr	r1, [pc, #60]	@ (80067b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800677c:	5ccb      	ldrb	r3, [r1, r3]
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	fa22 f303 	lsr.w	r3, r2, r3
 8006786:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006788:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	4a09      	ldr	r2, [pc, #36]	@ (80067b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006792:	5cd3      	ldrb	r3, [r2, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	fa22 f303 	lsr.w	r3, r2, r3
 800679e:	4a07      	ldr	r2, [pc, #28]	@ (80067bc <HAL_RCC_GetHCLKFreq+0x58>)
 80067a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067a2:	4a07      	ldr	r2, [pc, #28]	@ (80067c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80067a8:	4b04      	ldr	r3, [pc, #16]	@ (80067bc <HAL_RCC_GetHCLKFreq+0x58>)
 80067aa:	681b      	ldr	r3, [r3, #0]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	58024400 	.word	0x58024400
 80067b8:	0800b258 	.word	0x0800b258
 80067bc:	24000820 	.word	0x24000820
 80067c0:	2400081c 	.word	0x2400081c

080067c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80067c8:	f7ff ffcc 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067cc:	4602      	mov	r2, r0
 80067ce:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	091b      	lsrs	r3, r3, #4
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	4904      	ldr	r1, [pc, #16]	@ (80067ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80067da:	5ccb      	ldrb	r3, [r1, r3]
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	58024400 	.word	0x58024400
 80067ec:	0800b258 	.word	0x0800b258

080067f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067f4:	f7ff ffb6 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b06      	ldr	r3, [pc, #24]	@ (8006814 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	4904      	ldr	r1, [pc, #16]	@ (8006818 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006806:	5ccb      	ldrb	r3, [r1, r3]
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006810:	4618      	mov	r0, r3
 8006812:	bd80      	pop	{r7, pc}
 8006814:	58024400 	.word	0x58024400
 8006818:	0800b258 	.word	0x0800b258

0800681c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800681c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006820:	b0ca      	sub	sp, #296	@ 0x128
 8006822:	af00      	add	r7, sp, #0
 8006824:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800682e:	2300      	movs	r3, #0
 8006830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006840:	2500      	movs	r5, #0
 8006842:	ea54 0305 	orrs.w	r3, r4, r5
 8006846:	d049      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800684e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006852:	d02f      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006854:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006858:	d828      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800685a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800685e:	d01a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006860:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006864:	d822      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800686e:	d007      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006870:	e01c      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006872:	4bb8      	ldr	r3, [pc, #736]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	4ab7      	ldr	r2, [pc, #732]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800687c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800687e:	e01a      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006884:	3308      	adds	r3, #8
 8006886:	2102      	movs	r1, #2
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fc8f 	bl	80081ac <RCCEx_PLL2_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006894:	e00f      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689a:	3328      	adds	r3, #40	@ 0x28
 800689c:	2102      	movs	r1, #2
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 fd36 	bl	8008310 <RCCEx_PLL3_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068aa:	e004      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068b2:	e000      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80068b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10a      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068be:	4ba5      	ldr	r3, [pc, #660]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068cc:	4aa1      	ldr	r2, [pc, #644]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ce:	430b      	orrs	r3, r1
 80068d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80068d2:	e003      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80068e8:	f04f 0900 	mov.w	r9, #0
 80068ec:	ea58 0309 	orrs.w	r3, r8, r9
 80068f0:	d047      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d82a      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80068fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006919 	.word	0x08006919
 8006908:	08006927 	.word	0x08006927
 800690c:	0800693d 	.word	0x0800693d
 8006910:	0800695b 	.word	0x0800695b
 8006914:	0800695b 	.word	0x0800695b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4b8e      	ldr	r3, [pc, #568]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	4a8d      	ldr	r2, [pc, #564]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006924:	e01a      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	3308      	adds	r3, #8
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f001 fc3c 	bl	80081ac <RCCEx_PLL2_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800693a:	e00f      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800693c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006940:	3328      	adds	r3, #40	@ 0x28
 8006942:	2100      	movs	r1, #0
 8006944:	4618      	mov	r0, r3
 8006946:	f001 fce3 	bl	8008310 <RCCEx_PLL3_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006950:	e004      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800695a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800695c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006964:	4b7b      	ldr	r3, [pc, #492]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006968:	f023 0107 	bic.w	r1, r3, #7
 800696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006972:	4a78      	ldr	r2, [pc, #480]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006974:	430b      	orrs	r3, r1
 8006976:	6513      	str	r3, [r2, #80]	@ 0x50
 8006978:	e003      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800698e:	f04f 0b00 	mov.w	fp, #0
 8006992:	ea5a 030b 	orrs.w	r3, sl, fp
 8006996:	d04c      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800699e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a2:	d030      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80069a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a8:	d829      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80069ac:	d02d      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80069ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80069b0:	d825      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069b2:	2b80      	cmp	r3, #128	@ 0x80
 80069b4:	d018      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80069b6:	2b80      	cmp	r3, #128	@ 0x80
 80069b8:	d821      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80069be:	2b40      	cmp	r3, #64	@ 0x40
 80069c0:	d007      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80069c2:	e01c      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c4:	4b63      	ldr	r3, [pc, #396]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c8:	4a62      	ldr	r2, [pc, #392]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069d0:	e01c      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	3308      	adds	r3, #8
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 fbe6 	bl	80081ac <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069e6:	e011      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	3328      	adds	r3, #40	@ 0x28
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fc8d 	bl	8008310 <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80069fc:	e006      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a04:	e002      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a14:	4b4f      	ldr	r3, [pc, #316]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a18:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a22:	4a4c      	ldr	r2, [pc, #304]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a28:	e003      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006a3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006a42:	2300      	movs	r3, #0
 8006a44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006a48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d053      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a5e:	d035      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a64:	d82e      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a6a:	d031      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006a6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a70:	d828      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a76:	d01a      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a7c:	d822      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a86:	d007      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006a88:	e01c      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8a:	4b32      	ldr	r3, [pc, #200]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	4a31      	ldr	r2, [pc, #196]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a96:	e01c      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 fb83 	bl	80081ac <RCCEx_PLL2_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006aac:	e011      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	3328      	adds	r3, #40	@ 0x28
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fc2a 	bl	8008310 <RCCEx_PLL3_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e006      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aca:	e002      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ada:	4b1e      	ldr	r3, [pc, #120]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006aea:	4a1a      	ldr	r2, [pc, #104]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006af0:	e003      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006b06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006b10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006b14:	460b      	mov	r3, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	d056      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b26:	d038      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b2c:	d831      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b32:	d034      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006b34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b38:	d82b      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b3e:	d01d      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b44:	d825      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d006      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006b4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b4e:	d00a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006b50:	e01f      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b52:	bf00      	nop
 8006b54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b58:	4ba2      	ldr	r3, [pc, #648]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	4aa1      	ldr	r2, [pc, #644]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b64:	e01c      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 fb1c 	bl	80081ac <RCCEx_PLL2_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b7a:	e011      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b80:	3328      	adds	r3, #40	@ 0x28
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 fbc3 	bl	8008310 <RCCEx_PLL3_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b90:	e006      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b98:	e002      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10b      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006bb8:	4a8a      	ldr	r2, [pc, #552]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bbe:	e003      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bde:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006be2:	460b      	mov	r3, r1
 8006be4:	4313      	orrs	r3, r2
 8006be6:	d03a      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bee:	2b30      	cmp	r3, #48	@ 0x30
 8006bf0:	d01f      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006bf2:	2b30      	cmp	r3, #48	@ 0x30
 8006bf4:	d819      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d00c      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d815      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d019      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d111      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c06:	4b77      	ldr	r3, [pc, #476]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0a:	4a76      	ldr	r2, [pc, #472]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c12:	e011      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c18:	3308      	adds	r3, #8
 8006c1a:	2102      	movs	r1, #2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fac5 	bl	80081ac <RCCEx_PLL2_Config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c28:	e006      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c30:	e002      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c32:	bf00      	nop
 8006c34:	e000      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c40:	4b68      	ldr	r3, [pc, #416]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4e:	4a65      	ldr	r2, [pc, #404]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c50:	430b      	orrs	r3, r1
 8006c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c54:	e003      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	d051      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c88:	d035      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c8e:	d82e      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c94:	d031      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006c96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c9a:	d828      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ca0:	d01a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ca6:	d822      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cb0:	d007      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006cb2:	e01c      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cc0:	e01c      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fa6e 	bl	80081ac <RCCEx_PLL2_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cd6:	e011      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	3328      	adds	r3, #40	@ 0x28
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 fb15 	bl	8008310 <RCCEx_PLL3_Config>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cf4:	e002      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006cf6:	bf00      	nop
 8006cf8:	e000      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d04:	4b37      	ldr	r3, [pc, #220]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d12:	4a34      	ldr	r2, [pc, #208]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d18:	e003      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d056      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d4c:	d033      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006d4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d52:	d82c      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d58:	d02f      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006d5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d5e:	d826      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d64:	d02b      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006d66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d6a:	d820      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d70:	d012      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d76:	d81a      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d022      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d80:	d115      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	3308      	adds	r3, #8
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fa0e 	bl	80081ac <RCCEx_PLL2_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d96:	e015      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9c:	3328      	adds	r3, #40	@ 0x28
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 fab5 	bl	8008310 <RCCEx_PLL3_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dac:	e00a      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006db4:	e006      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006db6:	bf00      	nop
 8006db8:	e004      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006dba:	bf00      	nop
 8006dbc:	e002      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006dbe:	bf00      	nop
 8006dc0:	e000      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10d      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dda:	4a02      	ldr	r2, [pc, #8]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	6513      	str	r3, [r2, #80]	@ 0x50
 8006de0:	e006      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e00:	2300      	movs	r3, #0
 8006e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	d055      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e1c:	d033      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e22:	d82c      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e28:	d02f      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e2e:	d826      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e34:	d02b      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006e36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e3a:	d820      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e40:	d012      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e46:	d81a      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d022      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e50:	d115      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	3308      	adds	r3, #8
 8006e58:	2101      	movs	r1, #1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f9a6 	bl	80081ac <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e66:	e015      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6c:	3328      	adds	r3, #40	@ 0x28
 8006e6e:	2101      	movs	r1, #1
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fa4d 	bl	8008310 <RCCEx_PLL3_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e7c:	e00a      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e84:	e006      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e86:	bf00      	nop
 8006e88:	e004      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e9c:	4ba3      	ldr	r3, [pc, #652]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006eac:	4a9f      	ldr	r2, [pc, #636]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eb2:	e003      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	d037      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ee6:	d00e      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eec:	d816      	bhi.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d018      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006ef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ef6:	d111      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	4a8b      	ldr	r2, [pc, #556]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f04:	e00f      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 f94c 	bl	80081ac <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f1a:	e004      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f22:	e000      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3c:	4a7b      	ldr	r2, [pc, #492]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f42:	e003      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	d039      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d81c      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006f76:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fb9 	.word	0x08006fb9
 8006f80:	08006f8d 	.word	0x08006f8d
 8006f84:	08006f9b 	.word	0x08006f9b
 8006f88:	08006fb9 	.word	0x08006fb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f8c:	4b67      	ldr	r3, [pc, #412]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f90:	4a66      	ldr	r2, [pc, #408]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f98:	e00f      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	2102      	movs	r1, #2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 f902 	bl	80081ac <RCCEx_PLL2_Config>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fae:	e004      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fb6:	e000      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006fc2:	4b5a      	ldr	r3, [pc, #360]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc6:	f023 0103 	bic.w	r1, r3, #3
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fd0:	4a56      	ldr	r2, [pc, #344]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fd6:	e003      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006fec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ff6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f000 809f 	beq.w	8007140 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007002:	4b4b      	ldr	r3, [pc, #300]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a4a      	ldr	r2, [pc, #296]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800700c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800700e:	f7fa fff1 	bl	8001ff4 <HAL_GetTick>
 8007012:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007016:	e00b      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007018:	f7fa ffec 	bl	8001ff4 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b64      	cmp	r3, #100	@ 0x64
 8007026:	d903      	bls.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800702e:	e005      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007030:	4b3f      	ldr	r3, [pc, #252]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0ed      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800703c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007040:	2b00      	cmp	r3, #0
 8007042:	d179      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007044:	4b39      	ldr	r3, [pc, #228]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007046:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007050:	4053      	eors	r3, r2
 8007052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007056:	2b00      	cmp	r3, #0
 8007058:	d015      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800705a:	4b34      	ldr	r3, [pc, #208]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007062:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007066:	4b31      	ldr	r3, [pc, #196]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706a:	4a30      	ldr	r2, [pc, #192]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007070:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007072:	4b2e      	ldr	r3, [pc, #184]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007076:	4a2d      	ldr	r2, [pc, #180]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800707c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800707e:	4a2b      	ldr	r2, [pc, #172]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007084:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800708e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007092:	d118      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fa ffae 	bl	8001ff4 <HAL_GetTick>
 8007098:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800709c:	e00d      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709e:	f7fa ffa9 	bl	8001ff4 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d903      	bls.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80070b8:	e005      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070ba:	4b1c      	ldr	r3, [pc, #112]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0eb      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80070c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d129      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070de:	d10e      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80070e0:	4b12      	ldr	r3, [pc, #72]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070f0:	091a      	lsrs	r2, r3, #4
 80070f2:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	4a0d      	ldr	r2, [pc, #52]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6113      	str	r3, [r2, #16]
 80070fc:	e005      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80070fe:	4b0b      	ldr	r3, [pc, #44]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	4a0a      	ldr	r2, [pc, #40]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007104:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007108:	6113      	str	r3, [r2, #16]
 800710a:	4b08      	ldr	r3, [pc, #32]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800710c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800711a:	4a04      	ldr	r2, [pc, #16]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800711c:	430b      	orrs	r3, r1
 800711e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007120:	e00e      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800712a:	e009      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800712c:	58024400 	.word	0x58024400
 8007130:	58024800 	.word	0x58024800
 8007134:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800713c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f002 0301 	and.w	r3, r2, #1
 800714c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007150:	2300      	movs	r3, #0
 8007152:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007156:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800715a:	460b      	mov	r3, r1
 800715c:	4313      	orrs	r3, r2
 800715e:	f000 8089 	beq.w	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007166:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007168:	2b28      	cmp	r3, #40	@ 0x28
 800716a:	d86b      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800716c:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	0800724d 	.word	0x0800724d
 8007178:	08007245 	.word	0x08007245
 800717c:	08007245 	.word	0x08007245
 8007180:	08007245 	.word	0x08007245
 8007184:	08007245 	.word	0x08007245
 8007188:	08007245 	.word	0x08007245
 800718c:	08007245 	.word	0x08007245
 8007190:	08007245 	.word	0x08007245
 8007194:	08007219 	.word	0x08007219
 8007198:	08007245 	.word	0x08007245
 800719c:	08007245 	.word	0x08007245
 80071a0:	08007245 	.word	0x08007245
 80071a4:	08007245 	.word	0x08007245
 80071a8:	08007245 	.word	0x08007245
 80071ac:	08007245 	.word	0x08007245
 80071b0:	08007245 	.word	0x08007245
 80071b4:	0800722f 	.word	0x0800722f
 80071b8:	08007245 	.word	0x08007245
 80071bc:	08007245 	.word	0x08007245
 80071c0:	08007245 	.word	0x08007245
 80071c4:	08007245 	.word	0x08007245
 80071c8:	08007245 	.word	0x08007245
 80071cc:	08007245 	.word	0x08007245
 80071d0:	08007245 	.word	0x08007245
 80071d4:	0800724d 	.word	0x0800724d
 80071d8:	08007245 	.word	0x08007245
 80071dc:	08007245 	.word	0x08007245
 80071e0:	08007245 	.word	0x08007245
 80071e4:	08007245 	.word	0x08007245
 80071e8:	08007245 	.word	0x08007245
 80071ec:	08007245 	.word	0x08007245
 80071f0:	08007245 	.word	0x08007245
 80071f4:	0800724d 	.word	0x0800724d
 80071f8:	08007245 	.word	0x08007245
 80071fc:	08007245 	.word	0x08007245
 8007200:	08007245 	.word	0x08007245
 8007204:	08007245 	.word	0x08007245
 8007208:	08007245 	.word	0x08007245
 800720c:	08007245 	.word	0x08007245
 8007210:	08007245 	.word	0x08007245
 8007214:	0800724d 	.word	0x0800724d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721c:	3308      	adds	r3, #8
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f000 ffc3 	bl	80081ac <RCCEx_PLL2_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800722c:	e00f      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	3328      	adds	r3, #40	@ 0x28
 8007234:	2101      	movs	r1, #1
 8007236:	4618      	mov	r0, r3
 8007238:	f001 f86a 	bl	8008310 <RCCEx_PLL3_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007242:	e004      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800724a:	e000      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800724c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007256:	4bbf      	ldr	r3, [pc, #764]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007264:	4abb      	ldr	r2, [pc, #748]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007266:	430b      	orrs	r3, r1
 8007268:	6553      	str	r3, [r2, #84]	@ 0x54
 800726a:	e003      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f002 0302 	and.w	r3, r2, #2
 8007280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007284:	2300      	movs	r3, #0
 8007286:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800728a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800728e:	460b      	mov	r3, r1
 8007290:	4313      	orrs	r3, r2
 8007292:	d041      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800729a:	2b05      	cmp	r3, #5
 800729c:	d824      	bhi.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800729e:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072f1 	.word	0x080072f1
 80072a8:	080072bd 	.word	0x080072bd
 80072ac:	080072d3 	.word	0x080072d3
 80072b0:	080072f1 	.word	0x080072f1
 80072b4:	080072f1 	.word	0x080072f1
 80072b8:	080072f1 	.word	0x080072f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c0:	3308      	adds	r3, #8
 80072c2:	2101      	movs	r1, #1
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 ff71 	bl	80081ac <RCCEx_PLL2_Config>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072d0:	e00f      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d6:	3328      	adds	r3, #40	@ 0x28
 80072d8:	2101      	movs	r1, #1
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 f818 	bl	8008310 <RCCEx_PLL3_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072e6:	e004      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072ee:	e000      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80072f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10a      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072fa:	4b96      	ldr	r3, [pc, #600]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fe:	f023 0107 	bic.w	r1, r3, #7
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007308:	4a92      	ldr	r2, [pc, #584]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800730a:	430b      	orrs	r3, r1
 800730c:	6553      	str	r3, [r2, #84]	@ 0x54
 800730e:	e003      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f002 0304 	and.w	r3, r2, #4
 8007324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800732e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d044      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007340:	2b05      	cmp	r3, #5
 8007342:	d825      	bhi.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007344:	a201      	add	r2, pc, #4	@ (adr r2, 800734c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007399 	.word	0x08007399
 8007350:	08007365 	.word	0x08007365
 8007354:	0800737b 	.word	0x0800737b
 8007358:	08007399 	.word	0x08007399
 800735c:	08007399 	.word	0x08007399
 8007360:	08007399 	.word	0x08007399
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	3308      	adds	r3, #8
 800736a:	2101      	movs	r1, #1
 800736c:	4618      	mov	r0, r3
 800736e:	f000 ff1d 	bl	80081ac <RCCEx_PLL2_Config>
 8007372:	4603      	mov	r3, r0
 8007374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007378:	e00f      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737e:	3328      	adds	r3, #40	@ 0x28
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f000 ffc4 	bl	8008310 <RCCEx_PLL3_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800738e:	e004      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007396:	e000      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800739a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10b      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073a2:	4b6c      	ldr	r3, [pc, #432]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a6:	f023 0107 	bic.w	r1, r3, #7
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b2:	4a68      	ldr	r2, [pc, #416]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073b4:	430b      	orrs	r3, r1
 80073b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80073b8:	e003      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f002 0320 	and.w	r3, r2, #32
 80073ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073d2:	2300      	movs	r3, #0
 80073d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073dc:	460b      	mov	r3, r1
 80073de:	4313      	orrs	r3, r2
 80073e0:	d055      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ee:	d033      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80073f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073f4:	d82c      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80073f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fa:	d02f      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007400:	d826      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007402:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007406:	d02b      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007408:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800740c:	d820      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800740e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007412:	d012      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007418:	d81a      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d022      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800741e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007422:	d115      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007428:	3308      	adds	r3, #8
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f000 febd 	bl	80081ac <RCCEx_PLL2_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007438:	e015      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	3328      	adds	r3, #40	@ 0x28
 8007440:	2102      	movs	r1, #2
 8007442:	4618      	mov	r0, r3
 8007444:	f000 ff64 	bl	8008310 <RCCEx_PLL3_Config>
 8007448:	4603      	mov	r3, r0
 800744a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800744e:	e00a      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007456:	e006      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007458:	bf00      	nop
 800745a:	e004      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800745c:	bf00      	nop
 800745e:	e002      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007460:	bf00      	nop
 8007462:	e000      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800746e:	4b39      	ldr	r3, [pc, #228]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007472:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747e:	4a35      	ldr	r2, [pc, #212]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007480:	430b      	orrs	r3, r1
 8007482:	6553      	str	r3, [r2, #84]	@ 0x54
 8007484:	e003      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800749a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800749e:	2300      	movs	r3, #0
 80074a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80074a8:	460b      	mov	r3, r1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d058      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80074ba:	d033      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80074bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80074c0:	d82c      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c6:	d02f      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80074c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074cc:	d826      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074d2:	d02b      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80074d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074d8:	d820      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074de:	d012      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80074e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e4:	d81a      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d022      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80074ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ee:	d115      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f4:	3308      	adds	r3, #8
 80074f6:	2100      	movs	r1, #0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fe57 	bl	80081ac <RCCEx_PLL2_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007504:	e015      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	3328      	adds	r3, #40	@ 0x28
 800750c:	2102      	movs	r1, #2
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fefe 	bl	8008310 <RCCEx_PLL3_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800751a:	e00a      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007522:	e006      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007524:	bf00      	nop
 8007526:	e004      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007528:	bf00      	nop
 800752a:	e002      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800752c:	bf00      	nop
 800752e:	e000      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10e      	bne.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800753a:	4b06      	ldr	r3, [pc, #24]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800753c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800753e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007546:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800754a:	4a02      	ldr	r2, [pc, #8]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800754c:	430b      	orrs	r3, r1
 800754e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007550:	e006      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007552:	bf00      	nop
 8007554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800756c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007570:	2300      	movs	r3, #0
 8007572:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007576:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800757a:	460b      	mov	r3, r1
 800757c:	4313      	orrs	r3, r2
 800757e:	d055      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007588:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800758c:	d033      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800758e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007592:	d82c      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007598:	d02f      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800759a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800759e:	d826      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80075a4:	d02b      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80075a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80075aa:	d820      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075b0:	d012      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80075b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075b6:	d81a      	bhi.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d022      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80075bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075c0:	d115      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	3308      	adds	r3, #8
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fdee 	bl	80081ac <RCCEx_PLL2_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075d6:	e015      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075dc:	3328      	adds	r3, #40	@ 0x28
 80075de:	2102      	movs	r1, #2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fe95 	bl	8008310 <RCCEx_PLL3_Config>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075ec:	e00a      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f4:	e006      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075f6:	bf00      	nop
 80075f8:	e004      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075fa:	bf00      	nop
 80075fc:	e002      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800760c:	4ba1      	ldr	r3, [pc, #644]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800760e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007610:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800761c:	4a9d      	ldr	r2, [pc, #628]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800761e:	430b      	orrs	r3, r1
 8007620:	6593      	str	r3, [r2, #88]	@ 0x58
 8007622:	e003      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007628:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800762c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f002 0308 	and.w	r3, r2, #8
 8007638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800763c:	2300      	movs	r3, #0
 800763e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007642:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007646:	460b      	mov	r3, r1
 8007648:	4313      	orrs	r3, r2
 800764a:	d01e      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800764c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007658:	d10c      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	3328      	adds	r3, #40	@ 0x28
 8007660:	2102      	movs	r1, #2
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fe54 	bl	8008310 <RCCEx_PLL3_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007674:	4b87      	ldr	r3, [pc, #540]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007678:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007684:	4a83      	ldr	r2, [pc, #524]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007686:	430b      	orrs	r3, r1
 8007688:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f002 0310 	and.w	r3, r2, #16
 8007696:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800769a:	2300      	movs	r3, #0
 800769c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80076a4:	460b      	mov	r3, r1
 80076a6:	4313      	orrs	r3, r2
 80076a8:	d01e      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b6:	d10c      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076bc:	3328      	adds	r3, #40	@ 0x28
 80076be:	2102      	movs	r1, #2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fe25 	bl	8008310 <RCCEx_PLL3_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076d2:	4b70      	ldr	r3, [pc, #448]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076e2:	4a6c      	ldr	r2, [pc, #432]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076e4:	430b      	orrs	r3, r1
 80076e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80076f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007702:	460b      	mov	r3, r1
 8007704:	4313      	orrs	r3, r2
 8007706:	d03e      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007714:	d022      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800771a:	d81b      	bhi.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007724:	d00b      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007726:	e015      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	3308      	adds	r3, #8
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fd3b 	bl	80081ac <RCCEx_PLL2_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800773c:	e00f      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007742:	3328      	adds	r3, #40	@ 0x28
 8007744:	2102      	movs	r1, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fde2 	bl	8008310 <RCCEx_PLL3_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007752:	e004      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800775a:	e000      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800775c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800775e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007766:	4b4b      	ldr	r3, [pc, #300]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007776:	4a47      	ldr	r2, [pc, #284]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007778:	430b      	orrs	r3, r1
 800777a:	6593      	str	r3, [r2, #88]	@ 0x58
 800777c:	e003      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007792:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007794:	2300      	movs	r3, #0
 8007796:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007798:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800779c:	460b      	mov	r3, r1
 800779e:	4313      	orrs	r3, r2
 80077a0:	d03b      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077ae:	d01f      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80077b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077b4:	d818      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80077b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ba:	d003      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80077bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077c0:	d007      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80077c2:	e011      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c4:	4b33      	ldr	r3, [pc, #204]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	4a32      	ldr	r2, [pc, #200]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80077d0:	e00f      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d6:	3328      	adds	r3, #40	@ 0x28
 80077d8:	2101      	movs	r1, #1
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fd98 	bl	8008310 <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80077e6:	e004      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80077f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077fa:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780a:	4a22      	ldr	r2, [pc, #136]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800780c:	430b      	orrs	r3, r1
 800780e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007810:	e003      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007826:	673b      	str	r3, [r7, #112]	@ 0x70
 8007828:	2300      	movs	r3, #0
 800782a:	677b      	str	r3, [r7, #116]	@ 0x74
 800782c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007830:	460b      	mov	r3, r1
 8007832:	4313      	orrs	r3, r2
 8007834:	d034      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007844:	d007      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007846:	e011      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007848:	4b12      	ldr	r3, [pc, #72]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784c:	4a11      	ldr	r2, [pc, #68]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800784e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007854:	e00e      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785a:	3308      	adds	r3, #8
 800785c:	2102      	movs	r1, #2
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fca4 	bl	80081ac <RCCEx_PLL2_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800786a:	e003      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10d      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800787c:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800787e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007880:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788a:	4a02      	ldr	r2, [pc, #8]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800788c:	430b      	orrs	r3, r1
 800788e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007890:	e006      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007892:	bf00      	nop
 8007894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80078ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078ae:	2300      	movs	r3, #0
 80078b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80078b6:	460b      	mov	r3, r1
 80078b8:	4313      	orrs	r3, r2
 80078ba:	d00c      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	3328      	adds	r3, #40	@ 0x28
 80078c2:	2102      	movs	r1, #2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fd23 	bl	8008310 <RCCEx_PLL3_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80078e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80078e4:	2300      	movs	r3, #0
 80078e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80078e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80078ec:	460b      	mov	r3, r1
 80078ee:	4313      	orrs	r3, r2
 80078f0:	d038      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078fe:	d018      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007900:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007904:	d811      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790a:	d014      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800790c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007910:	d80b      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d011      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800791a:	d106      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791c:	4bc3      	ldr	r3, [pc, #780]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007920:	4ac2      	ldr	r2, [pc, #776]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007928:	e008      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007930:	e004      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007932:	bf00      	nop
 8007934:	e002      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007936:	bf00      	nop
 8007938:	e000      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800793a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007944:	4bb9      	ldr	r3, [pc, #740]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007948:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007954:	4ab5      	ldr	r2, [pc, #724]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007956:	430b      	orrs	r3, r1
 8007958:	6553      	str	r3, [r2, #84]	@ 0x54
 800795a:	e003      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007972:	2300      	movs	r3, #0
 8007974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007976:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800797a:	460b      	mov	r3, r1
 800797c:	4313      	orrs	r3, r2
 800797e:	d009      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007980:	4baa      	ldr	r3, [pc, #680]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007984:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800798e:	4aa7      	ldr	r2, [pc, #668]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007990:	430b      	orrs	r3, r1
 8007992:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80079a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80079a2:	2300      	movs	r3, #0
 80079a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80079a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80079aa:	460b      	mov	r3, r1
 80079ac:	4313      	orrs	r3, r2
 80079ae:	d00a      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079b0:	4b9e      	ldr	r3, [pc, #632]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80079c0:	4a9a      	ldr	r2, [pc, #616]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80079d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079d4:	2300      	movs	r3, #0
 80079d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80079dc:	460b      	mov	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	d009      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079e2:	4b92      	ldr	r3, [pc, #584]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079f0:	4a8e      	ldr	r2, [pc, #568]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079f2:	430b      	orrs	r3, r1
 80079f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a04:	2300      	movs	r3, #0
 8007a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a12:	4b86      	ldr	r3, [pc, #536]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	4a85      	ldr	r2, [pc, #532]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a1c:	6113      	str	r3, [r2, #16]
 8007a1e:	4b83      	ldr	r3, [pc, #524]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a20:	6919      	ldr	r1, [r3, #16]
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a2a:	4a80      	ldr	r2, [pc, #512]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a3e:	2300      	movs	r3, #0
 8007a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007a46:	460b      	mov	r3, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a4c:	4b77      	ldr	r3, [pc, #476]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a50:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5a:	4a74      	ldr	r2, [pc, #464]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a6e:	2300      	movs	r3, #0
 8007a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a76:	460b      	mov	r3, r1
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d00a      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a80:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8c:	4a67      	ldr	r2, [pc, #412]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aa4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	d011      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fb78 	bl	80081ac <RCCEx_PLL2_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	2100      	movs	r1, #0
 8007adc:	6239      	str	r1, [r7, #32]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4313      	orrs	r3, r2
 8007aec:	d011      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af2:	3308      	adds	r3, #8
 8007af4:	2101      	movs	r1, #1
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fb58 	bl	80081ac <RCCEx_PLL2_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	61b9      	str	r1, [r7, #24]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	61fb      	str	r3, [r7, #28]
 8007b24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	d011      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b32:	3308      	adds	r3, #8
 8007b34:	2102      	movs	r1, #2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fb38 	bl	80081ac <RCCEx_PLL2_Config>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	6139      	str	r1, [r7, #16]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	d011      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b72:	3328      	adds	r3, #40	@ 0x28
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fbca 	bl	8008310 <RCCEx_PLL3_Config>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	d011      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	3328      	adds	r3, #40	@ 0x28
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fbaa 	bl	8008310 <RCCEx_PLL3_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	2100      	movs	r1, #0
 8007bdc:	6039      	str	r1, [r7, #0]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	607b      	str	r3, [r7, #4]
 8007be4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007be8:	460b      	mov	r3, r1
 8007bea:	4313      	orrs	r3, r2
 8007bec:	d011      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf2:	3328      	adds	r3, #40	@ 0x28
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fb8a 	bl	8008310 <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007c12:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e000      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007c26:	46bd      	mov	sp, r7
 8007c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c2c:	58024400 	.word	0x58024400

08007c30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c34:	f7fe fd96 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	4b06      	ldr	r3, [pc, #24]	@ (8007c54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	4904      	ldr	r1, [pc, #16]	@ (8007c58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c46:	5ccb      	ldrb	r3, [r1, r3]
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	58024400 	.word	0x58024400
 8007c58:	0800b258 	.word	0x0800b258

08007c5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b089      	sub	sp, #36	@ 0x24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c64:	4ba1      	ldr	r3, [pc, #644]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c6e:	4b9f      	ldr	r3, [pc, #636]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c72:	0b1b      	lsrs	r3, r3, #12
 8007c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c86:	4b99      	ldr	r3, [pc, #612]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8a:	08db      	lsrs	r3, r3, #3
 8007c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	fb02 f303 	mul.w	r3, r2, r3
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8111 	beq.w	8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	f000 8083 	beq.w	8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	f200 80a1 	bhi.w	8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d056      	beq.n	8007d74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cc6:	e099      	b.n	8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc8:	4b88      	ldr	r3, [pc, #544]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d02d      	beq.n	8007d30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cd4:	4b85      	ldr	r3, [pc, #532]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	08db      	lsrs	r3, r3, #3
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	4a84      	ldr	r2, [pc, #528]	@ (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d2e:	e087      	b.n	8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d42:	4b6a      	ldr	r3, [pc, #424]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d72:	e065      	b.n	8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d86:	4b59      	ldr	r3, [pc, #356]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007db6:	e043      	b.n	8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dca:	4b48      	ldr	r3, [pc, #288]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dfa:	e021      	b.n	8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e0e:	4b37      	ldr	r3, [pc, #220]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007e40:	4b2a      	ldr	r3, [pc, #168]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e44:	0a5b      	lsrs	r3, r3, #9
 8007e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e66:	ee17 2a90 	vmov	r2, s15
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e78:	ee07 3a90 	vmov	s15, r3
 8007e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e94:	ee17 2a90 	vmov	r2, s15
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e9c:	4b13      	ldr	r3, [pc, #76]	@ (8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea0:	0e1b      	lsrs	r3, r3, #24
 8007ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec2:	ee17 2a90 	vmov	r2, s15
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007eca:	e008      	b.n	8007ede <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	609a      	str	r2, [r3, #8]
}
 8007ede:	bf00      	nop
 8007ee0:	3724      	adds	r7, #36	@ 0x24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	58024400 	.word	0x58024400
 8007ef0:	03d09000 	.word	0x03d09000
 8007ef4:	46000000 	.word	0x46000000
 8007ef8:	4c742400 	.word	0x4c742400
 8007efc:	4a742400 	.word	0x4a742400
 8007f00:	4af42400 	.word	0x4af42400

08007f04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b089      	sub	sp, #36	@ 0x24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f0c:	4ba1      	ldr	r3, [pc, #644]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007f16:	4b9f      	ldr	r3, [pc, #636]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	0d1b      	lsrs	r3, r3, #20
 8007f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f22:	4b9c      	ldr	r3, [pc, #624]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007f2e:	4b99      	ldr	r3, [pc, #612]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f32:	08db      	lsrs	r3, r3, #3
 8007f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8111 	beq.w	8008174 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	f000 8083 	beq.w	8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	f200 80a1 	bhi.w	80080a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d056      	beq.n	800801c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f6e:	e099      	b.n	80080a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f70:	4b88      	ldr	r3, [pc, #544]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d02d      	beq.n	8007fd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f7c:	4b85      	ldr	r3, [pc, #532]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	08db      	lsrs	r3, r3, #3
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	4a84      	ldr	r2, [pc, #528]	@ (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fd6:	e087      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fea:	4b6a      	ldr	r3, [pc, #424]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800800e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800801a:	e065      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008026:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80081a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800802a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802e:	4b59      	ldr	r3, [pc, #356]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008042:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800805e:	e043      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80081a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800806e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008072:	4b48      	ldr	r3, [pc, #288]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008082:	ed97 6a03 	vldr	s12, [r7, #12]
 8008086:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800808a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080a2:	e021      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80081a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080b6:	4b37      	ldr	r3, [pc, #220]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ec:	0a5b      	lsrs	r3, r3, #9
 80080ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008102:	edd7 6a07 	vldr	s13, [r7, #28]
 8008106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800810a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810e:	ee17 2a90 	vmov	r2, s15
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008116:	4b1f      	ldr	r3, [pc, #124]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008120:	ee07 3a90 	vmov	s15, r3
 8008124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008128:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800812c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008130:	edd7 6a07 	vldr	s13, [r7, #28]
 8008134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800813c:	ee17 2a90 	vmov	r2, s15
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008144:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008148:	0e1b      	lsrs	r3, r3, #24
 800814a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800815a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800815e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800816a:	ee17 2a90 	vmov	r2, s15
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008172:	e008      	b.n	8008186 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	609a      	str	r2, [r3, #8]
}
 8008186:	bf00      	nop
 8008188:	3724      	adds	r7, #36	@ 0x24
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400
 8008198:	03d09000 	.word	0x03d09000
 800819c:	46000000 	.word	0x46000000
 80081a0:	4c742400 	.word	0x4c742400
 80081a4:	4a742400 	.word	0x4a742400
 80081a8:	4af42400 	.word	0x4af42400

080081ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081ba:	4b53      	ldr	r3, [pc, #332]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d101      	bne.n	80081ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e099      	b.n	80082fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80081d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081d6:	f7f9 ff0d 	bl	8001ff4 <HAL_GetTick>
 80081da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081dc:	e008      	b.n	80081f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081de:	f7f9 ff09 	bl	8001ff4 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d901      	bls.n	80081f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e086      	b.n	80082fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081f0:	4b45      	ldr	r3, [pc, #276]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f0      	bne.n	80081de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081fc:	4b42      	ldr	r3, [pc, #264]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	031b      	lsls	r3, r3, #12
 800820a:	493f      	ldr	r1, [pc, #252]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 800820c:	4313      	orrs	r3, r2
 800820e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	3b01      	subs	r3, #1
 8008216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	3b01      	subs	r3, #1
 8008220:	025b      	lsls	r3, r3, #9
 8008222:	b29b      	uxth	r3, r3
 8008224:	431a      	orrs	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	3b01      	subs	r3, #1
 800822c:	041b      	lsls	r3, r3, #16
 800822e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	3b01      	subs	r3, #1
 800823a:	061b      	lsls	r3, r3, #24
 800823c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008240:	4931      	ldr	r1, [pc, #196]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008242:	4313      	orrs	r3, r2
 8008244:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008246:	4b30      	ldr	r3, [pc, #192]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	492d      	ldr	r1, [pc, #180]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008254:	4313      	orrs	r3, r2
 8008256:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008258:	4b2b      	ldr	r3, [pc, #172]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 800825a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825c:	f023 0220 	bic.w	r2, r3, #32
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	4928      	ldr	r1, [pc, #160]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008266:	4313      	orrs	r3, r2
 8008268:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800826a:	4b27      	ldr	r3, [pc, #156]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 800826c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826e:	4a26      	ldr	r2, [pc, #152]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008270:	f023 0310 	bic.w	r3, r3, #16
 8008274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008276:	4b24      	ldr	r3, [pc, #144]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800827a:	4b24      	ldr	r3, [pc, #144]	@ (800830c <RCCEx_PLL2_Config+0x160>)
 800827c:	4013      	ands	r3, r2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	69d2      	ldr	r2, [r2, #28]
 8008282:	00d2      	lsls	r2, r2, #3
 8008284:	4920      	ldr	r1, [pc, #128]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008286:	4313      	orrs	r3, r2
 8008288:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800828a:	4b1f      	ldr	r3, [pc, #124]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 800828c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828e:	4a1e      	ldr	r2, [pc, #120]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 8008290:	f043 0310 	orr.w	r3, r3, #16
 8008294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d106      	bne.n	80082aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800829c:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 800829e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a0:	4a19      	ldr	r2, [pc, #100]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082a8:	e00f      	b.n	80082ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d106      	bne.n	80082be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082b0:	4b15      	ldr	r3, [pc, #84]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	4a14      	ldr	r2, [pc, #80]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082bc:	e005      	b.n	80082ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082be:	4b12      	ldr	r3, [pc, #72]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c2:	4a11      	ldr	r2, [pc, #68]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d6:	f7f9 fe8d 	bl	8001ff4 <HAL_GetTick>
 80082da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082dc:	e008      	b.n	80082f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082de:	f7f9 fe89 	bl	8001ff4 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d901      	bls.n	80082f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e006      	b.n	80082fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082f0:	4b05      	ldr	r3, [pc, #20]	@ (8008308 <RCCEx_PLL2_Config+0x15c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0f0      	beq.n	80082de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	58024400 	.word	0x58024400
 800830c:	ffff0007 	.word	0xffff0007

08008310 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800831e:	4b53      	ldr	r3, [pc, #332]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b03      	cmp	r3, #3
 8008328:	d101      	bne.n	800832e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e099      	b.n	8008462 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800832e:	4b4f      	ldr	r3, [pc, #316]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a4e      	ldr	r2, [pc, #312]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800833a:	f7f9 fe5b 	bl	8001ff4 <HAL_GetTick>
 800833e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008340:	e008      	b.n	8008354 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008342:	f7f9 fe57 	bl	8001ff4 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d901      	bls.n	8008354 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e086      	b.n	8008462 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008354:	4b45      	ldr	r3, [pc, #276]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f0      	bne.n	8008342 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008360:	4b42      	ldr	r3, [pc, #264]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008364:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	493f      	ldr	r1, [pc, #252]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008370:	4313      	orrs	r3, r2
 8008372:	628b      	str	r3, [r1, #40]	@ 0x28
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	3b01      	subs	r3, #1
 800837a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	3b01      	subs	r3, #1
 8008384:	025b      	lsls	r3, r3, #9
 8008386:	b29b      	uxth	r3, r3
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	3b01      	subs	r3, #1
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	3b01      	subs	r3, #1
 800839e:	061b      	lsls	r3, r3, #24
 80083a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083a4:	4931      	ldr	r1, [pc, #196]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80083aa:	4b30      	ldr	r3, [pc, #192]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	492d      	ldr	r1, [pc, #180]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083bc:	4b2b      	ldr	r3, [pc, #172]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	4928      	ldr	r1, [pc, #160]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083ce:	4b27      	ldr	r3, [pc, #156]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	4a26      	ldr	r2, [pc, #152]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083da:	4b24      	ldr	r3, [pc, #144]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083de:	4b24      	ldr	r3, [pc, #144]	@ (8008470 <RCCEx_PLL3_Config+0x160>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	69d2      	ldr	r2, [r2, #28]
 80083e6:	00d2      	lsls	r2, r2, #3
 80083e8:	4920      	ldr	r1, [pc, #128]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083ee:	4b1f      	ldr	r3, [pc, #124]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	4a1e      	ldr	r2, [pc, #120]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 80083f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008400:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008404:	4a19      	ldr	r2, [pc, #100]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008406:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800840a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800840c:	e00f      	b.n	800842e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d106      	bne.n	8008422 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008414:	4b15      	ldr	r3, [pc, #84]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008418:	4a14      	ldr	r2, [pc, #80]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 800841a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800841e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008420:	e005      	b.n	800842e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008422:	4b12      	ldr	r3, [pc, #72]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008426:	4a11      	ldr	r2, [pc, #68]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008428:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800842c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800842e:	4b0f      	ldr	r3, [pc, #60]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a0e      	ldr	r2, [pc, #56]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800843a:	f7f9 fddb 	bl	8001ff4 <HAL_GetTick>
 800843e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008440:	e008      	b.n	8008454 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008442:	f7f9 fdd7 	bl	8001ff4 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d901      	bls.n	8008454 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e006      	b.n	8008462 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008454:	4b05      	ldr	r3, [pc, #20]	@ (800846c <RCCEx_PLL3_Config+0x15c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0f0      	beq.n	8008442 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	58024400 	.word	0x58024400
 8008470:	ffff0007 	.word	0xffff0007

08008474 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e10f      	b.n	80086a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a87      	ldr	r2, [pc, #540]	@ (80086b0 <HAL_SPI_Init+0x23c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00f      	beq.n	80084b6 <HAL_SPI_Init+0x42>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a86      	ldr	r2, [pc, #536]	@ (80086b4 <HAL_SPI_Init+0x240>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00a      	beq.n	80084b6 <HAL_SPI_Init+0x42>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a84      	ldr	r2, [pc, #528]	@ (80086b8 <HAL_SPI_Init+0x244>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d005      	beq.n	80084b6 <HAL_SPI_Init+0x42>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b0f      	cmp	r3, #15
 80084b0:	d901      	bls.n	80084b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e0f7      	b.n	80086a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f848 	bl	800954c <SPI_GetPacketSize>
 80084bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a7b      	ldr	r2, [pc, #492]	@ (80086b0 <HAL_SPI_Init+0x23c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00c      	beq.n	80084e2 <HAL_SPI_Init+0x6e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a79      	ldr	r2, [pc, #484]	@ (80086b4 <HAL_SPI_Init+0x240>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d007      	beq.n	80084e2 <HAL_SPI_Init+0x6e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a78      	ldr	r2, [pc, #480]	@ (80086b8 <HAL_SPI_Init+0x244>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d002      	beq.n	80084e2 <HAL_SPI_Init+0x6e>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d811      	bhi.n	8008506 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084e6:	4a72      	ldr	r2, [pc, #456]	@ (80086b0 <HAL_SPI_Init+0x23c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a70      	ldr	r2, [pc, #448]	@ (80086b4 <HAL_SPI_Init+0x240>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_SPI_Init+0x8c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a6f      	ldr	r2, [pc, #444]	@ (80086b8 <HAL_SPI_Init+0x244>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d104      	bne.n	800850a <HAL_SPI_Init+0x96>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b10      	cmp	r3, #16
 8008504:	d901      	bls.n	800850a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e0cd      	b.n	80086a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d106      	bne.n	8008524 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7f9 f84e 	bl	80015c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008546:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008550:	d119      	bne.n	8008586 <HAL_SPI_Init+0x112>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800855a:	d103      	bne.n	8008564 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008560:	2b00      	cmp	r3, #0
 8008562:	d008      	beq.n	8008576 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10c      	bne.n	8008586 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008574:	d107      	bne.n	8008586 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008584:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00f      	beq.n	80085b2 <HAL_SPI_Init+0x13e>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	2b06      	cmp	r3, #6
 8008598:	d90b      	bls.n	80085b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	e007      	b.n	80085c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ca:	431a      	orrs	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	ea42 0103 	orr.w	r1, r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	431a      	orrs	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008622:	ea42 0103 	orr.w	r1, r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d113      	bne.n	8008662 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800864c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008660:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0201 	bic.w	r2, r2, #1
 8008670:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	40013000 	.word	0x40013000
 80086b4:	40003800 	.word	0x40003800
 80086b8:	40003c00 	.word	0x40003c00

080086bc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	4613      	mov	r3, r2
 80086ca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3320      	adds	r3, #32
 80086d2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086d4:	f7f9 fc8e 	bl	8001ff4 <HAL_GetTick>
 80086d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d001      	beq.n	80086ea <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80086e6:	2302      	movs	r3, #2
 80086e8:	e1d1      	b.n	8008a8e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <HAL_SPI_Transmit+0x3a>
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e1c9      	b.n	8008a8e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_SPI_Transmit+0x4c>
 8008704:	2302      	movs	r3, #2
 8008706:	e1c2      	b.n	8008a8e <HAL_SPI_Transmit+0x3d2>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2203      	movs	r2, #3
 8008714:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	88fa      	ldrh	r2, [r7, #6]
 800872a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	88fa      	ldrh	r2, [r7, #6]
 8008732:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008760:	d108      	bne.n	8008774 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e009      	b.n	8008788 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008786:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	4b96      	ldr	r3, [pc, #600]	@ (80089e8 <HAL_SPI_Transmit+0x32c>)
 8008790:	4013      	ands	r3, r2
 8008792:	88f9      	ldrh	r1, [r7, #6]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	6812      	ldr	r2, [r2, #0]
 8008798:	430b      	orrs	r3, r1
 800879a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 0201 	orr.w	r2, r2, #1
 80087aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087b4:	d107      	bne.n	80087c6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	d947      	bls.n	800885e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80087ce:	e03f      	b.n	8008850 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d114      	bne.n	8008808 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ee:	1d1a      	adds	r2, r3, #4
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008806:	e023      	b.n	8008850 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008808:	f7f9 fbf4 	bl	8001ff4 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d803      	bhi.n	8008820 <HAL_SPI_Transmit+0x164>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881e:	d102      	bne.n	8008826 <HAL_SPI_Transmit+0x16a>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d114      	bne.n	8008850 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fdc2 	bl	80093b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008832:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e11e      	b.n	8008a8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1b9      	bne.n	80087d0 <HAL_SPI_Transmit+0x114>
 800885c:	e0f1      	b.n	8008a42 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	2b07      	cmp	r3, #7
 8008864:	f240 80e6 	bls.w	8008a34 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008868:	e05d      	b.n	8008926 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b02      	cmp	r3, #2
 8008876:	d132      	bne.n	80088de <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800887e:	b29b      	uxth	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	d918      	bls.n	80088b6 <HAL_SPI_Transmit+0x1fa>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d014      	beq.n	80088b6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b02      	subs	r3, #2
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088b4:	e037      	b.n	8008926 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ba:	881a      	ldrh	r2, [r3, #0]
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c4:	1c9a      	adds	r2, r3, #2
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088dc:	e023      	b.n	8008926 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088de:	f7f9 fb89 	bl	8001ff4 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d803      	bhi.n	80088f6 <HAL_SPI_Transmit+0x23a>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f4:	d102      	bne.n	80088fc <HAL_SPI_Transmit+0x240>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d114      	bne.n	8008926 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 fd57 	bl	80093b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008908:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e0b3      	b.n	8008a8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d19b      	bne.n	800886a <HAL_SPI_Transmit+0x1ae>
 8008932:	e086      	b.n	8008a42 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b02      	cmp	r3, #2
 8008940:	d154      	bne.n	80089ec <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008948:	b29b      	uxth	r3, r3
 800894a:	2b03      	cmp	r3, #3
 800894c:	d918      	bls.n	8008980 <HAL_SPI_Transmit+0x2c4>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008952:	2b40      	cmp	r3, #64	@ 0x40
 8008954:	d914      	bls.n	8008980 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b04      	subs	r3, #4
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800897e:	e059      	b.n	8008a34 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d917      	bls.n	80089bc <HAL_SPI_Transmit+0x300>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008990:	2b00      	cmp	r3, #0
 8008992:	d013      	beq.n	80089bc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008998:	881a      	ldrh	r2, [r3, #0]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089a2:	1c9a      	adds	r2, r3, #2
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b02      	subs	r3, #2
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089ba:	e03b      	b.n	8008a34 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3320      	adds	r3, #32
 80089c6:	7812      	ldrb	r2, [r2, #0]
 80089c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80089e6:	e025      	b.n	8008a34 <HAL_SPI_Transmit+0x378>
 80089e8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ec:	f7f9 fb02 	bl	8001ff4 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d803      	bhi.n	8008a04 <HAL_SPI_Transmit+0x348>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d102      	bne.n	8008a0a <HAL_SPI_Transmit+0x34e>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d114      	bne.n	8008a34 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 fcd0 	bl	80093b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e02c      	b.n	8008a8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f47f af79 	bne.w	8008934 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2108      	movs	r1, #8
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fd4f 	bl	80094f0 <SPI_WaitOnFlagUntilTimeout>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d007      	beq.n	8008a68 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a5e:	f043 0220 	orr.w	r2, r3, #32
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fca1 	bl	80093b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
  }
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop

08008a98 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aac:	095b      	lsrs	r3, r3, #5
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3330      	adds	r3, #48	@ 0x30
 8008aba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008abc:	f7f9 fa9a 	bl	8001ff4 <HAL_GetTick>
 8008ac0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d001      	beq.n	8008ad2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e250      	b.n	8008f74 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <HAL_SPI_Receive+0x46>
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e248      	b.n	8008f74 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_SPI_Receive+0x58>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e241      	b.n	8008f74 <HAL_SPI_Receive+0x4dc>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2204      	movs	r2, #4
 8008afc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	88fa      	ldrh	r2, [r7, #6]
 8008b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008b48:	d108      	bne.n	8008b5c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	e009      	b.n	8008b70 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008b6e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	4b95      	ldr	r3, [pc, #596]	@ (8008dcc <HAL_SPI_Receive+0x334>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	88f9      	ldrh	r1, [r7, #6]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	430b      	orrs	r3, r1
 8008b82:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0201 	orr.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b9c:	d107      	bne.n	8008bae <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	2b0f      	cmp	r3, #15
 8008bb4:	d96c      	bls.n	8008c90 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008bb6:	e064      	b.n	8008c82 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d114      	bne.n	8008bf8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008bd8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bde:	1d1a      	adds	r2, r3, #4
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bf6:	e044      	b.n	8008c82 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	8bfa      	ldrh	r2, [r7, #30]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d919      	bls.n	8008c3a <HAL_SPI_Receive+0x1a2>
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d014      	beq.n	8008c3a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c1a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c20:	1d1a      	adds	r2, r3, #4
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c38:	e023      	b.n	8008c82 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c3a:	f7f9 f9db 	bl	8001ff4 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d803      	bhi.n	8008c52 <HAL_SPI_Receive+0x1ba>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c50:	d102      	bne.n	8008c58 <HAL_SPI_Receive+0x1c0>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d114      	bne.n	8008c82 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 fba9 	bl	80093b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e178      	b.n	8008f74 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d194      	bne.n	8008bb8 <HAL_SPI_Receive+0x120>
 8008c8e:	e15e      	b.n	8008f4e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b07      	cmp	r3, #7
 8008c96:	f240 8153 	bls.w	8008f40 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008c9a:	e08f      	b.n	8008dbc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d114      	bne.n	8008cdc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	8812      	ldrh	r2, [r2, #0]
 8008cba:	b292      	uxth	r2, r2
 8008cbc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cc2:	1c9a      	adds	r2, r3, #2
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008cda:	e06f      	b.n	8008dbc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	8bfa      	ldrh	r2, [r7, #30]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d924      	bls.n	8008d34 <HAL_SPI_Receive+0x29c>
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d01f      	beq.n	8008d34 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	8812      	ldrh	r2, [r2, #0]
 8008cfc:	b292      	uxth	r2, r2
 8008cfe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d04:	1c9a      	adds	r2, r3, #2
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	8812      	ldrh	r2, [r2, #0]
 8008d12:	b292      	uxth	r2, r2
 8008d14:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d1a:	1c9a      	adds	r2, r3, #2
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b02      	subs	r3, #2
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d32:	e043      	b.n	8008dbc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d119      	bne.n	8008d74 <HAL_SPI_Receive+0x2dc>
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d014      	beq.n	8008d74 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	8812      	ldrh	r2, [r2, #0]
 8008d52:	b292      	uxth	r2, r2
 8008d54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d5a:	1c9a      	adds	r2, r3, #2
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d72:	e023      	b.n	8008dbc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d74:	f7f9 f93e 	bl	8001ff4 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d803      	bhi.n	8008d8c <HAL_SPI_Receive+0x2f4>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8a:	d102      	bne.n	8008d92 <HAL_SPI_Receive+0x2fa>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d114      	bne.n	8008dbc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 fb0c 	bl	80093b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e0db      	b.n	8008f74 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f47f af69 	bne.w	8008c9c <HAL_SPI_Receive+0x204>
 8008dca:	e0c0      	b.n	8008f4e <HAL_SPI_Receive+0x4b6>
 8008dcc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d117      	bne.n	8008e16 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008df2:	7812      	ldrb	r2, [r2, #0]
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008e14:	e094      	b.n	8008f40 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	8bfa      	ldrh	r2, [r7, #30]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d946      	bls.n	8008eb2 <HAL_SPI_Receive+0x41a>
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d041      	beq.n	8008eb2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e8e:	7812      	ldrb	r2, [r2, #0]
 8008e90:	b2d2      	uxtb	r2, r2
 8008e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b04      	subs	r3, #4
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008eb0:	e046      	b.n	8008f40 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d81c      	bhi.n	8008ef8 <HAL_SPI_Receive+0x460>
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d017      	beq.n	8008ef8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ed4:	7812      	ldrb	r2, [r2, #0]
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ef6:	e023      	b.n	8008f40 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ef8:	f7f9 f87c 	bl	8001ff4 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d803      	bhi.n	8008f10 <HAL_SPI_Receive+0x478>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0e:	d102      	bne.n	8008f16 <HAL_SPI_Receive+0x47e>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d114      	bne.n	8008f40 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 fa4a 	bl	80093b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e019      	b.n	8008f74 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f47f af41 	bne.w	8008dd0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 fa2e 	bl	80093b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e000      	b.n	8008f74 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008f72:	2300      	movs	r3, #0
  }
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3720      	adds	r7, #32
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	@ 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008f94:	6a3a      	ldr	r2, [r7, #32]
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	4013      	ands	r3, r2
 8008f9a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008fae:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3330      	adds	r3, #48	@ 0x30
 8008fb6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d010      	beq.n	8008fe4 <HAL_SPI_IRQHandler+0x68>
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699a      	ldr	r2, [r3, #24]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fda:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9c3 	bl	8009368 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008fe2:	e192      	b.n	800930a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d113      	bne.n	8009016 <HAL_SPI_IRQHandler+0x9a>
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10e      	bne.n	8009016 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	4798      	blx	r3
    hspi->RxISR(hspi);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	4798      	blx	r3
    handled = 1UL;
 8009012:	2301      	movs	r3, #1
 8009014:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10f      	bne.n	8009040 <HAL_SPI_IRQHandler+0xc4>
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009030:	2b00      	cmp	r3, #0
 8009032:	d105      	bne.n	8009040 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4798      	blx	r3
    handled = 1UL;
 800903c:	2301      	movs	r3, #1
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10f      	bne.n	800906a <HAL_SPI_IRQHandler+0xee>
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00a      	beq.n	800906a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800905a:	2b00      	cmp	r3, #0
 800905c:	d105      	bne.n	800906a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
    handled = 1UL;
 8009066:	2301      	movs	r3, #1
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	f040 8147 	bne.w	8009300 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 808b 	beq.w	8009194 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0208 	orr.w	r2, r2, #8
 800908c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	699a      	ldr	r2, [r3, #24]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0210 	orr.w	r2, r2, #16
 800909c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090ac:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	691a      	ldr	r2, [r3, #16]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0208 	bic.w	r2, r2, #8
 80090bc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d13d      	bne.n	8009148 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80090cc:	e036      	b.n	800913c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2b0f      	cmp	r3, #15
 80090d4:	d90b      	bls.n	80090ee <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090e0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090e6:	1d1a      	adds	r2, r3, #4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	665a      	str	r2, [r3, #100]	@ 0x64
 80090ec:	e01d      	b.n	800912a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	2b07      	cmp	r3, #7
 80090f4:	d90b      	bls.n	800910e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	8812      	ldrh	r2, [r2, #0]
 80090fe:	b292      	uxth	r2, r2
 8009100:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009106:	1c9a      	adds	r2, r3, #2
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	665a      	str	r2, [r3, #100]	@ 0x64
 800910c:	e00d      	b.n	800912a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800911a:	7812      	ldrb	r2, [r2, #0]
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009142:	b29b      	uxth	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1c2      	bne.n	80090ce <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f931 	bl	80093b0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f8f7 	bl	8009354 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009166:	e0d0      	b.n	800930a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009168:	7cfb      	ldrb	r3, [r7, #19]
 800916a:	2b05      	cmp	r3, #5
 800916c:	d103      	bne.n	8009176 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8e6 	bl	8009340 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009174:	e0c6      	b.n	8009304 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009176:	7cfb      	ldrb	r3, [r7, #19]
 8009178:	2b04      	cmp	r3, #4
 800917a:	d103      	bne.n	8009184 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f8d5 	bl	800932c <HAL_SPI_RxCpltCallback>
    return;
 8009182:	e0bf      	b.n	8009304 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009184:	7cfb      	ldrb	r3, [r7, #19]
 8009186:	2b03      	cmp	r3, #3
 8009188:	f040 80bc 	bne.w	8009304 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f8c3 	bl	8009318 <HAL_SPI_TxCpltCallback>
    return;
 8009192:	e0b7      	b.n	8009304 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 80b5 	beq.w	800930a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00f      	beq.n	80091ca <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091b0:	f043 0204 	orr.w	r2, r3, #4
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00f      	beq.n	80091f4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091da:	f043 0201 	orr.w	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091f2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00f      	beq.n	800921e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009204:	f043 0208 	orr.w	r2, r3, #8
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699a      	ldr	r2, [r3, #24]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800921c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00f      	beq.n	8009248 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800922e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0220 	orr.w	r2, r2, #32
 8009246:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800924e:	2b00      	cmp	r3, #0
 8009250:	d05a      	beq.n	8009308 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0201 	bic.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6919      	ldr	r1, [r3, #16]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b28      	ldr	r3, [pc, #160]	@ (8009310 <HAL_SPI_IRQHandler+0x394>)
 800926e:	400b      	ands	r3, r1
 8009270:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009278:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800927c:	d138      	bne.n	80092f0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800928c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d013      	beq.n	80092be <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800929a:	4a1e      	ldr	r2, [pc, #120]	@ (8009314 <HAL_SPI_IRQHandler+0x398>)
 800929c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7f9 fb4e 	bl	8002944 <HAL_DMA_Abort_IT>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d007      	beq.n	80092be <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d020      	beq.n	8009308 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092ca:	4a12      	ldr	r2, [pc, #72]	@ (8009314 <HAL_SPI_IRQHandler+0x398>)
 80092cc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f9 fb36 	bl	8002944 <HAL_DMA_Abort_IT>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d014      	beq.n	8009308 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80092ee:	e00b      	b.n	8009308 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f82b 	bl	8009354 <HAL_SPI_ErrorCallback>
    return;
 80092fe:	e003      	b.n	8009308 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009300:	bf00      	nop
 8009302:	e002      	b.n	800930a <HAL_SPI_IRQHandler+0x38e>
    return;
 8009304:	bf00      	nop
 8009306:	e000      	b.n	800930a <HAL_SPI_IRQHandler+0x38e>
    return;
 8009308:	bf00      	nop
  }
}
 800930a:	3728      	adds	r7, #40	@ 0x28
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	fffffc94 	.word	0xfffffc94
 8009314:	0800937d 	.word	0x0800937d

08009318 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009388:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff ffd6 	bl	8009354 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0208 	orr.w	r2, r2, #8
 80093ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0210 	orr.w	r2, r2, #16
 80093de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0201 	bic.w	r2, r2, #1
 80093ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6919      	ldr	r1, [r3, #16]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4b3c      	ldr	r3, [pc, #240]	@ (80094ec <SPI_CloseTransfer+0x13c>)
 80093fc:	400b      	ands	r3, r1
 80093fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689a      	ldr	r2, [r3, #8]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800940e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b04      	cmp	r3, #4
 800941a:	d014      	beq.n	8009446 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00f      	beq.n	8009446 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800942c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	699a      	ldr	r2, [r3, #24]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f042 0220 	orr.w	r2, r2, #32
 8009444:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b03      	cmp	r3, #3
 8009450:	d014      	beq.n	800947c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00f      	beq.n	800947c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009462:	f043 0204 	orr.w	r2, r3, #4
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800947a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00f      	beq.n	80094a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800948c:	f043 0201 	orr.w	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00f      	beq.n	80094d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094b6:	f043 0208 	orr.w	r2, r3, #8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	fffffc90 	.word	0xfffffc90

080094f0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	4613      	mov	r3, r2
 80094fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009500:	e010      	b.n	8009524 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009502:	f7f8 fd77 	bl	8001ff4 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d803      	bhi.n	800951a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d102      	bne.n	8009520 <SPI_WaitOnFlagUntilTimeout+0x30>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e00f      	b.n	8009544 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695a      	ldr	r2, [r3, #20]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	4013      	ands	r3, r2
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	429a      	cmp	r2, r3
 8009532:	bf0c      	ite	eq
 8009534:	2301      	moveq	r3, #1
 8009536:	2300      	movne	r3, #0
 8009538:	b2db      	uxtb	r3, r3
 800953a:	461a      	mov	r2, r3
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	429a      	cmp	r2, r3
 8009540:	d0df      	beq.n	8009502 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	3307      	adds	r3, #7
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	fb02 f303 	mul.w	r3, r2, r3
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e042      	b.n	800961a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800959a:	2b00      	cmp	r3, #0
 800959c:	d106      	bne.n	80095ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f83b 	bl	8009622 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2224      	movs	r2, #36	@ 0x24
 80095b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0201 	bic.w	r2, r2, #1
 80095c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fef1 	bl	800a3b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f986 	bl	80098e4 <UART_SetConfig>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e01b      	b.n	800961a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009600:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0201 	orr.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 ff70 	bl	800a4f8 <UART_CheckIdleState>
 8009618:	4603      	mov	r3, r0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b08a      	sub	sp, #40	@ 0x28
 800963a:	af02      	add	r7, sp, #8
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	603b      	str	r3, [r7, #0]
 8009642:	4613      	mov	r3, r2
 8009644:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964c:	2b20      	cmp	r3, #32
 800964e:	d17b      	bne.n	8009748 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <HAL_UART_Transmit+0x26>
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e074      	b.n	800974a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2221      	movs	r2, #33	@ 0x21
 800966c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009670:	f7f8 fcc0 	bl	8001ff4 <HAL_GetTick>
 8009674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	88fa      	ldrh	r2, [r7, #6]
 800967a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	88fa      	ldrh	r2, [r7, #6]
 8009682:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800968e:	d108      	bne.n	80096a2 <HAL_UART_Transmit+0x6c>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d104      	bne.n	80096a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	e003      	b.n	80096aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80096aa:	e030      	b.n	800970e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2200      	movs	r2, #0
 80096b4:	2180      	movs	r1, #128	@ 0x80
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 ffc8 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e03d      	b.n	800974a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10b      	bne.n	80096ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	3302      	adds	r3, #2
 80096e8:	61bb      	str	r3, [r7, #24]
 80096ea:	e007      	b.n	80096fc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	781a      	ldrb	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	3301      	adds	r3, #1
 80096fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1c8      	bne.n	80096ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2200      	movs	r2, #0
 8009722:	2140      	movs	r1, #64	@ 0x40
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 ff91 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2220      	movs	r2, #32
 8009734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e006      	b.n	800974a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2220      	movs	r2, #32
 8009740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	e000      	b.n	800974a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009748:	2302      	movs	r3, #2
  }
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b08a      	sub	sp, #40	@ 0x28
 8009756:	af02      	add	r7, sp, #8
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	603b      	str	r3, [r7, #0]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009768:	2b20      	cmp	r3, #32
 800976a:	f040 80b5 	bne.w	80098d8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <HAL_UART_Receive+0x28>
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e0ad      	b.n	80098da <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2222      	movs	r2, #34	@ 0x22
 800978a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009794:	f7f8 fc2e 	bl	8001ff4 <HAL_GetTick>
 8009798:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	88fa      	ldrh	r2, [r7, #6]
 800979e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	88fa      	ldrh	r2, [r7, #6]
 80097a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b2:	d10e      	bne.n	80097d2 <HAL_UART_Receive+0x80>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d105      	bne.n	80097c8 <HAL_UART_Receive+0x76>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80097c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097c6:	e02d      	b.n	8009824 <HAL_UART_Receive+0xd2>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	22ff      	movs	r2, #255	@ 0xff
 80097cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097d0:	e028      	b.n	8009824 <HAL_UART_Receive+0xd2>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10d      	bne.n	80097f6 <HAL_UART_Receive+0xa4>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d104      	bne.n	80097ec <HAL_UART_Receive+0x9a>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	22ff      	movs	r2, #255	@ 0xff
 80097e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097ea:	e01b      	b.n	8009824 <HAL_UART_Receive+0xd2>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	227f      	movs	r2, #127	@ 0x7f
 80097f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097f4:	e016      	b.n	8009824 <HAL_UART_Receive+0xd2>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097fe:	d10d      	bne.n	800981c <HAL_UART_Receive+0xca>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <HAL_UART_Receive+0xc0>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	227f      	movs	r2, #127	@ 0x7f
 800980c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009810:	e008      	b.n	8009824 <HAL_UART_Receive+0xd2>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	223f      	movs	r2, #63	@ 0x3f
 8009816:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800981a:	e003      	b.n	8009824 <HAL_UART_Receive+0xd2>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800982a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009834:	d108      	bne.n	8009848 <HAL_UART_Receive+0xf6>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d104      	bne.n	8009848 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e003      	b.n	8009850 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009850:	e036      	b.n	80098c0 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	2120      	movs	r1, #32
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 fef5 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e032      	b.n	80098da <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10c      	bne.n	8009894 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009880:	b29a      	uxth	r2, r3
 8009882:	8a7b      	ldrh	r3, [r7, #18]
 8009884:	4013      	ands	r3, r2
 8009886:	b29a      	uxth	r2, r3
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	3302      	adds	r3, #2
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	e00c      	b.n	80098ae <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989a:	b2da      	uxtb	r2, r3
 800989c:	8a7b      	ldrh	r3, [r7, #18]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	4013      	ands	r3, r2
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	3301      	adds	r3, #1
 80098ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	3b01      	subs	r3, #1
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1c2      	bne.n	8009852 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	e000      	b.n	80098da <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80098d8:	2302      	movs	r3, #2
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098e8:	b092      	sub	sp, #72	@ 0x48
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	431a      	orrs	r2, r3
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	431a      	orrs	r2, r3
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	4313      	orrs	r3, r2
 800990a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4bbe      	ldr	r3, [pc, #760]	@ (8009c0c <UART_SetConfig+0x328>)
 8009914:	4013      	ands	r3, r2
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	6812      	ldr	r2, [r2, #0]
 800991a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800991c:	430b      	orrs	r3, r1
 800991e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	430a      	orrs	r2, r1
 8009934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4ab3      	ldr	r2, [pc, #716]	@ (8009c10 <UART_SetConfig+0x32c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d004      	beq.n	8009950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800994c:	4313      	orrs	r3, r2
 800994e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	4baf      	ldr	r3, [pc, #700]	@ (8009c14 <UART_SetConfig+0x330>)
 8009958:	4013      	ands	r3, r2
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	6812      	ldr	r2, [r2, #0]
 800995e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009960:	430b      	orrs	r3, r1
 8009962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996a:	f023 010f 	bic.w	r1, r3, #15
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	430a      	orrs	r2, r1
 8009978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4aa6      	ldr	r2, [pc, #664]	@ (8009c18 <UART_SetConfig+0x334>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d177      	bne.n	8009a74 <UART_SetConfig+0x190>
 8009984:	4ba5      	ldr	r3, [pc, #660]	@ (8009c1c <UART_SetConfig+0x338>)
 8009986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800998c:	2b28      	cmp	r3, #40	@ 0x28
 800998e:	d86d      	bhi.n	8009a6c <UART_SetConfig+0x188>
 8009990:	a201      	add	r2, pc, #4	@ (adr r2, 8009998 <UART_SetConfig+0xb4>)
 8009992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009996:	bf00      	nop
 8009998:	08009a3d 	.word	0x08009a3d
 800999c:	08009a6d 	.word	0x08009a6d
 80099a0:	08009a6d 	.word	0x08009a6d
 80099a4:	08009a6d 	.word	0x08009a6d
 80099a8:	08009a6d 	.word	0x08009a6d
 80099ac:	08009a6d 	.word	0x08009a6d
 80099b0:	08009a6d 	.word	0x08009a6d
 80099b4:	08009a6d 	.word	0x08009a6d
 80099b8:	08009a45 	.word	0x08009a45
 80099bc:	08009a6d 	.word	0x08009a6d
 80099c0:	08009a6d 	.word	0x08009a6d
 80099c4:	08009a6d 	.word	0x08009a6d
 80099c8:	08009a6d 	.word	0x08009a6d
 80099cc:	08009a6d 	.word	0x08009a6d
 80099d0:	08009a6d 	.word	0x08009a6d
 80099d4:	08009a6d 	.word	0x08009a6d
 80099d8:	08009a4d 	.word	0x08009a4d
 80099dc:	08009a6d 	.word	0x08009a6d
 80099e0:	08009a6d 	.word	0x08009a6d
 80099e4:	08009a6d 	.word	0x08009a6d
 80099e8:	08009a6d 	.word	0x08009a6d
 80099ec:	08009a6d 	.word	0x08009a6d
 80099f0:	08009a6d 	.word	0x08009a6d
 80099f4:	08009a6d 	.word	0x08009a6d
 80099f8:	08009a55 	.word	0x08009a55
 80099fc:	08009a6d 	.word	0x08009a6d
 8009a00:	08009a6d 	.word	0x08009a6d
 8009a04:	08009a6d 	.word	0x08009a6d
 8009a08:	08009a6d 	.word	0x08009a6d
 8009a0c:	08009a6d 	.word	0x08009a6d
 8009a10:	08009a6d 	.word	0x08009a6d
 8009a14:	08009a6d 	.word	0x08009a6d
 8009a18:	08009a5d 	.word	0x08009a5d
 8009a1c:	08009a6d 	.word	0x08009a6d
 8009a20:	08009a6d 	.word	0x08009a6d
 8009a24:	08009a6d 	.word	0x08009a6d
 8009a28:	08009a6d 	.word	0x08009a6d
 8009a2c:	08009a6d 	.word	0x08009a6d
 8009a30:	08009a6d 	.word	0x08009a6d
 8009a34:	08009a6d 	.word	0x08009a6d
 8009a38:	08009a65 	.word	0x08009a65
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e222      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009a44:	2304      	movs	r3, #4
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e21e      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e21a      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009a54:	2310      	movs	r3, #16
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e216      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e212      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009a64:	2340      	movs	r3, #64	@ 0x40
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e20e      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009a6c:	2380      	movs	r3, #128	@ 0x80
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e20a      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a69      	ldr	r2, [pc, #420]	@ (8009c20 <UART_SetConfig+0x33c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d130      	bne.n	8009ae0 <UART_SetConfig+0x1fc>
 8009a7e:	4b67      	ldr	r3, [pc, #412]	@ (8009c1c <UART_SetConfig+0x338>)
 8009a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d826      	bhi.n	8009ad8 <UART_SetConfig+0x1f4>
 8009a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a90 <UART_SetConfig+0x1ac>)
 8009a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a90:	08009aa9 	.word	0x08009aa9
 8009a94:	08009ab1 	.word	0x08009ab1
 8009a98:	08009ab9 	.word	0x08009ab9
 8009a9c:	08009ac1 	.word	0x08009ac1
 8009aa0:	08009ac9 	.word	0x08009ac9
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e1ec      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e1e8      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e1e4      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e1e0      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ac8:	2320      	movs	r3, #32
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e1dc      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ad0:	2340      	movs	r3, #64	@ 0x40
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e1d8      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ad8:	2380      	movs	r3, #128	@ 0x80
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e1d4      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a4f      	ldr	r2, [pc, #316]	@ (8009c24 <UART_SetConfig+0x340>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d130      	bne.n	8009b4c <UART_SetConfig+0x268>
 8009aea:	4b4c      	ldr	r3, [pc, #304]	@ (8009c1c <UART_SetConfig+0x338>)
 8009aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aee:	f003 0307 	and.w	r3, r3, #7
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	d826      	bhi.n	8009b44 <UART_SetConfig+0x260>
 8009af6:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <UART_SetConfig+0x218>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b15 	.word	0x08009b15
 8009b00:	08009b1d 	.word	0x08009b1d
 8009b04:	08009b25 	.word	0x08009b25
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b35 	.word	0x08009b35
 8009b10:	08009b3d 	.word	0x08009b3d
 8009b14:	2300      	movs	r3, #0
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e1b6      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b1c:	2304      	movs	r3, #4
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e1b2      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b24:	2308      	movs	r3, #8
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e1ae      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e1aa      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b34:	2320      	movs	r3, #32
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3a:	e1a6      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b3c:	2340      	movs	r3, #64	@ 0x40
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b42:	e1a2      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b44:	2380      	movs	r3, #128	@ 0x80
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4a:	e19e      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a35      	ldr	r2, [pc, #212]	@ (8009c28 <UART_SetConfig+0x344>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d130      	bne.n	8009bb8 <UART_SetConfig+0x2d4>
 8009b56:	4b31      	ldr	r3, [pc, #196]	@ (8009c1c <UART_SetConfig+0x338>)
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	d826      	bhi.n	8009bb0 <UART_SetConfig+0x2cc>
 8009b62:	a201      	add	r2, pc, #4	@ (adr r2, 8009b68 <UART_SetConfig+0x284>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b81 	.word	0x08009b81
 8009b6c:	08009b89 	.word	0x08009b89
 8009b70:	08009b91 	.word	0x08009b91
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009ba9 	.word	0x08009ba9
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e180      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e17c      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b90:	2308      	movs	r3, #8
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e178      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009b98:	2310      	movs	r3, #16
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e174      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ba0:	2320      	movs	r3, #32
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e170      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009ba8:	2340      	movs	r3, #64	@ 0x40
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bae:	e16c      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009bb0:	2380      	movs	r3, #128	@ 0x80
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb6:	e168      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8009c2c <UART_SetConfig+0x348>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d142      	bne.n	8009c48 <UART_SetConfig+0x364>
 8009bc2:	4b16      	ldr	r3, [pc, #88]	@ (8009c1c <UART_SetConfig+0x338>)
 8009bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b05      	cmp	r3, #5
 8009bcc:	d838      	bhi.n	8009c40 <UART_SetConfig+0x35c>
 8009bce:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd4 <UART_SetConfig+0x2f0>)
 8009bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd4:	08009bed 	.word	0x08009bed
 8009bd8:	08009bf5 	.word	0x08009bf5
 8009bdc:	08009bfd 	.word	0x08009bfd
 8009be0:	08009c05 	.word	0x08009c05
 8009be4:	08009c31 	.word	0x08009c31
 8009be8:	08009c39 	.word	0x08009c39
 8009bec:	2300      	movs	r3, #0
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e14a      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e146      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e142      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009c04:	2310      	movs	r3, #16
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e13e      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009c0c:	cfff69f3 	.word	0xcfff69f3
 8009c10:	58000c00 	.word	0x58000c00
 8009c14:	11fff4ff 	.word	0x11fff4ff
 8009c18:	40011000 	.word	0x40011000
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	40004400 	.word	0x40004400
 8009c24:	40004800 	.word	0x40004800
 8009c28:	40004c00 	.word	0x40004c00
 8009c2c:	40005000 	.word	0x40005000
 8009c30:	2320      	movs	r3, #32
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c36:	e128      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009c38:	2340      	movs	r3, #64	@ 0x40
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3e:	e124      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009c40:	2380      	movs	r3, #128	@ 0x80
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c46:	e120      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4acb      	ldr	r2, [pc, #812]	@ (8009f7c <UART_SetConfig+0x698>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d176      	bne.n	8009d40 <UART_SetConfig+0x45c>
 8009c52:	4bcb      	ldr	r3, [pc, #812]	@ (8009f80 <UART_SetConfig+0x69c>)
 8009c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c5a:	2b28      	cmp	r3, #40	@ 0x28
 8009c5c:	d86c      	bhi.n	8009d38 <UART_SetConfig+0x454>
 8009c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c64 <UART_SetConfig+0x380>)
 8009c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c64:	08009d09 	.word	0x08009d09
 8009c68:	08009d39 	.word	0x08009d39
 8009c6c:	08009d39 	.word	0x08009d39
 8009c70:	08009d39 	.word	0x08009d39
 8009c74:	08009d39 	.word	0x08009d39
 8009c78:	08009d39 	.word	0x08009d39
 8009c7c:	08009d39 	.word	0x08009d39
 8009c80:	08009d39 	.word	0x08009d39
 8009c84:	08009d11 	.word	0x08009d11
 8009c88:	08009d39 	.word	0x08009d39
 8009c8c:	08009d39 	.word	0x08009d39
 8009c90:	08009d39 	.word	0x08009d39
 8009c94:	08009d39 	.word	0x08009d39
 8009c98:	08009d39 	.word	0x08009d39
 8009c9c:	08009d39 	.word	0x08009d39
 8009ca0:	08009d39 	.word	0x08009d39
 8009ca4:	08009d19 	.word	0x08009d19
 8009ca8:	08009d39 	.word	0x08009d39
 8009cac:	08009d39 	.word	0x08009d39
 8009cb0:	08009d39 	.word	0x08009d39
 8009cb4:	08009d39 	.word	0x08009d39
 8009cb8:	08009d39 	.word	0x08009d39
 8009cbc:	08009d39 	.word	0x08009d39
 8009cc0:	08009d39 	.word	0x08009d39
 8009cc4:	08009d21 	.word	0x08009d21
 8009cc8:	08009d39 	.word	0x08009d39
 8009ccc:	08009d39 	.word	0x08009d39
 8009cd0:	08009d39 	.word	0x08009d39
 8009cd4:	08009d39 	.word	0x08009d39
 8009cd8:	08009d39 	.word	0x08009d39
 8009cdc:	08009d39 	.word	0x08009d39
 8009ce0:	08009d39 	.word	0x08009d39
 8009ce4:	08009d29 	.word	0x08009d29
 8009ce8:	08009d39 	.word	0x08009d39
 8009cec:	08009d39 	.word	0x08009d39
 8009cf0:	08009d39 	.word	0x08009d39
 8009cf4:	08009d39 	.word	0x08009d39
 8009cf8:	08009d39 	.word	0x08009d39
 8009cfc:	08009d39 	.word	0x08009d39
 8009d00:	08009d39 	.word	0x08009d39
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e0bc      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d10:	2304      	movs	r3, #4
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d16:	e0b8      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d18:	2308      	movs	r3, #8
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1e:	e0b4      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d20:	2310      	movs	r3, #16
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d26:	e0b0      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d28:	2320      	movs	r3, #32
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2e:	e0ac      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d30:	2340      	movs	r3, #64	@ 0x40
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d36:	e0a8      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d38:	2380      	movs	r3, #128	@ 0x80
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3e:	e0a4      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a8f      	ldr	r2, [pc, #572]	@ (8009f84 <UART_SetConfig+0x6a0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d130      	bne.n	8009dac <UART_SetConfig+0x4c8>
 8009d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8009f80 <UART_SetConfig+0x69c>)
 8009d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	2b05      	cmp	r3, #5
 8009d54:	d826      	bhi.n	8009da4 <UART_SetConfig+0x4c0>
 8009d56:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <UART_SetConfig+0x478>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d75 	.word	0x08009d75
 8009d60:	08009d7d 	.word	0x08009d7d
 8009d64:	08009d85 	.word	0x08009d85
 8009d68:	08009d8d 	.word	0x08009d8d
 8009d6c:	08009d95 	.word	0x08009d95
 8009d70:	08009d9d 	.word	0x08009d9d
 8009d74:	2300      	movs	r3, #0
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7a:	e086      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d7c:	2304      	movs	r3, #4
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e082      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d84:	2308      	movs	r3, #8
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	e07e      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d92:	e07a      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d94:	2320      	movs	r3, #32
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9a:	e076      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009d9c:	2340      	movs	r3, #64	@ 0x40
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da2:	e072      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009da4:	2380      	movs	r3, #128	@ 0x80
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e06e      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a75      	ldr	r2, [pc, #468]	@ (8009f88 <UART_SetConfig+0x6a4>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d130      	bne.n	8009e18 <UART_SetConfig+0x534>
 8009db6:	4b72      	ldr	r3, [pc, #456]	@ (8009f80 <UART_SetConfig+0x69c>)
 8009db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dba:	f003 0307 	and.w	r3, r3, #7
 8009dbe:	2b05      	cmp	r3, #5
 8009dc0:	d826      	bhi.n	8009e10 <UART_SetConfig+0x52c>
 8009dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc8 <UART_SetConfig+0x4e4>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009de1 	.word	0x08009de1
 8009dcc:	08009de9 	.word	0x08009de9
 8009dd0:	08009df1 	.word	0x08009df1
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	2300      	movs	r3, #0
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de6:	e050      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009de8:	2304      	movs	r3, #4
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dee:	e04c      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009df0:	2308      	movs	r3, #8
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df6:	e048      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009df8:	2310      	movs	r3, #16
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfe:	e044      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e00:	2320      	movs	r3, #32
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e06:	e040      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e08:	2340      	movs	r3, #64	@ 0x40
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e03c      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e10:	2380      	movs	r3, #128	@ 0x80
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e038      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a5b      	ldr	r2, [pc, #364]	@ (8009f8c <UART_SetConfig+0x6a8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d130      	bne.n	8009e84 <UART_SetConfig+0x5a0>
 8009e22:	4b57      	ldr	r3, [pc, #348]	@ (8009f80 <UART_SetConfig+0x69c>)
 8009e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	d826      	bhi.n	8009e7c <UART_SetConfig+0x598>
 8009e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e34 <UART_SetConfig+0x550>)
 8009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e34:	08009e4d 	.word	0x08009e4d
 8009e38:	08009e55 	.word	0x08009e55
 8009e3c:	08009e5d 	.word	0x08009e5d
 8009e40:	08009e65 	.word	0x08009e65
 8009e44:	08009e6d 	.word	0x08009e6d
 8009e48:	08009e75 	.word	0x08009e75
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e52:	e01a      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e54:	2304      	movs	r3, #4
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5a:	e016      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e62:	e012      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e64:	2310      	movs	r3, #16
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6a:	e00e      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e6c:	2320      	movs	r3, #32
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e72:	e00a      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e74:	2340      	movs	r3, #64	@ 0x40
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7a:	e006      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e7c:	2380      	movs	r3, #128	@ 0x80
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e82:	e002      	b.n	8009e8a <UART_SetConfig+0x5a6>
 8009e84:	2380      	movs	r3, #128	@ 0x80
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8009f8c <UART_SetConfig+0x6a8>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	f040 80f8 	bne.w	800a086 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	dc46      	bgt.n	8009f2c <UART_SetConfig+0x648>
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	f2c0 8082 	blt.w	8009fa8 <UART_SetConfig+0x6c4>
 8009ea4:	3b02      	subs	r3, #2
 8009ea6:	2b1e      	cmp	r3, #30
 8009ea8:	d87e      	bhi.n	8009fa8 <UART_SetConfig+0x6c4>
 8009eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb0 <UART_SetConfig+0x5cc>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009f33 	.word	0x08009f33
 8009eb4:	08009fa9 	.word	0x08009fa9
 8009eb8:	08009f3b 	.word	0x08009f3b
 8009ebc:	08009fa9 	.word	0x08009fa9
 8009ec0:	08009fa9 	.word	0x08009fa9
 8009ec4:	08009fa9 	.word	0x08009fa9
 8009ec8:	08009f4b 	.word	0x08009f4b
 8009ecc:	08009fa9 	.word	0x08009fa9
 8009ed0:	08009fa9 	.word	0x08009fa9
 8009ed4:	08009fa9 	.word	0x08009fa9
 8009ed8:	08009fa9 	.word	0x08009fa9
 8009edc:	08009fa9 	.word	0x08009fa9
 8009ee0:	08009fa9 	.word	0x08009fa9
 8009ee4:	08009fa9 	.word	0x08009fa9
 8009ee8:	08009f5b 	.word	0x08009f5b
 8009eec:	08009fa9 	.word	0x08009fa9
 8009ef0:	08009fa9 	.word	0x08009fa9
 8009ef4:	08009fa9 	.word	0x08009fa9
 8009ef8:	08009fa9 	.word	0x08009fa9
 8009efc:	08009fa9 	.word	0x08009fa9
 8009f00:	08009fa9 	.word	0x08009fa9
 8009f04:	08009fa9 	.word	0x08009fa9
 8009f08:	08009fa9 	.word	0x08009fa9
 8009f0c:	08009fa9 	.word	0x08009fa9
 8009f10:	08009fa9 	.word	0x08009fa9
 8009f14:	08009fa9 	.word	0x08009fa9
 8009f18:	08009fa9 	.word	0x08009fa9
 8009f1c:	08009fa9 	.word	0x08009fa9
 8009f20:	08009fa9 	.word	0x08009fa9
 8009f24:	08009fa9 	.word	0x08009fa9
 8009f28:	08009f9b 	.word	0x08009f9b
 8009f2c:	2b40      	cmp	r3, #64	@ 0x40
 8009f2e:	d037      	beq.n	8009fa0 <UART_SetConfig+0x6bc>
 8009f30:	e03a      	b.n	8009fa8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f32:	f7fd fe7d 	bl	8007c30 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f38:	e03c      	b.n	8009fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fd fe8c 	bl	8007c5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f48:	e034      	b.n	8009fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4a:	f107 0318 	add.w	r3, r7, #24
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fd ffd8 	bl	8007f04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f58:	e02c      	b.n	8009fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f5a:	4b09      	ldr	r3, [pc, #36]	@ (8009f80 <UART_SetConfig+0x69c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d016      	beq.n	8009f94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f66:	4b06      	ldr	r3, [pc, #24]	@ (8009f80 <UART_SetConfig+0x69c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	08db      	lsrs	r3, r3, #3
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	4a07      	ldr	r2, [pc, #28]	@ (8009f90 <UART_SetConfig+0x6ac>)
 8009f72:	fa22 f303 	lsr.w	r3, r2, r3
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f78:	e01c      	b.n	8009fb4 <UART_SetConfig+0x6d0>
 8009f7a:	bf00      	nop
 8009f7c:	40011400 	.word	0x40011400
 8009f80:	58024400 	.word	0x58024400
 8009f84:	40007800 	.word	0x40007800
 8009f88:	40007c00 	.word	0x40007c00
 8009f8c:	58000c00 	.word	0x58000c00
 8009f90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009f94:	4b9d      	ldr	r3, [pc, #628]	@ (800a20c <UART_SetConfig+0x928>)
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f98:	e00c      	b.n	8009fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f9a:	4b9d      	ldr	r3, [pc, #628]	@ (800a210 <UART_SetConfig+0x92c>)
 8009f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f9e:	e009      	b.n	8009fb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa6:	e005      	b.n	8009fb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 81de 	beq.w	800a378 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc0:	4a94      	ldr	r2, [pc, #592]	@ (800a214 <UART_SetConfig+0x930>)
 8009fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	005b      	lsls	r3, r3, #1
 8009fd8:	4413      	add	r3, r2
 8009fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d305      	bcc.n	8009fec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d903      	bls.n	8009ff4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ff2:	e1c1      	b.n	800a378 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	60bb      	str	r3, [r7, #8]
 8009ffa:	60fa      	str	r2, [r7, #12]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a000:	4a84      	ldr	r2, [pc, #528]	@ (800a214 <UART_SetConfig+0x930>)
 800a002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a006:	b29b      	uxth	r3, r3
 800a008:	2200      	movs	r2, #0
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a016:	f7f6 f9bb 	bl	8000390 <__aeabi_uldivmod>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4610      	mov	r0, r2
 800a020:	4619      	mov	r1, r3
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	020b      	lsls	r3, r1, #8
 800a02c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a030:	0202      	lsls	r2, r0, #8
 800a032:	6979      	ldr	r1, [r7, #20]
 800a034:	6849      	ldr	r1, [r1, #4]
 800a036:	0849      	lsrs	r1, r1, #1
 800a038:	2000      	movs	r0, #0
 800a03a:	460c      	mov	r4, r1
 800a03c:	4605      	mov	r5, r0
 800a03e:	eb12 0804 	adds.w	r8, r2, r4
 800a042:	eb43 0905 	adc.w	r9, r3, r5
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	469a      	mov	sl, r3
 800a04e:	4693      	mov	fp, r2
 800a050:	4652      	mov	r2, sl
 800a052:	465b      	mov	r3, fp
 800a054:	4640      	mov	r0, r8
 800a056:	4649      	mov	r1, r9
 800a058:	f7f6 f99a 	bl	8000390 <__aeabi_uldivmod>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4613      	mov	r3, r2
 800a062:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a06a:	d308      	bcc.n	800a07e <UART_SetConfig+0x79a>
 800a06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a072:	d204      	bcs.n	800a07e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a07a:	60da      	str	r2, [r3, #12]
 800a07c:	e17c      	b.n	800a378 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a084:	e178      	b.n	800a378 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a08e:	f040 80c5 	bne.w	800a21c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a092:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a096:	2b20      	cmp	r3, #32
 800a098:	dc48      	bgt.n	800a12c <UART_SetConfig+0x848>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	db7b      	blt.n	800a196 <UART_SetConfig+0x8b2>
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d879      	bhi.n	800a196 <UART_SetConfig+0x8b2>
 800a0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a8 <UART_SetConfig+0x7c4>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a133 	.word	0x0800a133
 800a0ac:	0800a13b 	.word	0x0800a13b
 800a0b0:	0800a197 	.word	0x0800a197
 800a0b4:	0800a197 	.word	0x0800a197
 800a0b8:	0800a143 	.word	0x0800a143
 800a0bc:	0800a197 	.word	0x0800a197
 800a0c0:	0800a197 	.word	0x0800a197
 800a0c4:	0800a197 	.word	0x0800a197
 800a0c8:	0800a153 	.word	0x0800a153
 800a0cc:	0800a197 	.word	0x0800a197
 800a0d0:	0800a197 	.word	0x0800a197
 800a0d4:	0800a197 	.word	0x0800a197
 800a0d8:	0800a197 	.word	0x0800a197
 800a0dc:	0800a197 	.word	0x0800a197
 800a0e0:	0800a197 	.word	0x0800a197
 800a0e4:	0800a197 	.word	0x0800a197
 800a0e8:	0800a163 	.word	0x0800a163
 800a0ec:	0800a197 	.word	0x0800a197
 800a0f0:	0800a197 	.word	0x0800a197
 800a0f4:	0800a197 	.word	0x0800a197
 800a0f8:	0800a197 	.word	0x0800a197
 800a0fc:	0800a197 	.word	0x0800a197
 800a100:	0800a197 	.word	0x0800a197
 800a104:	0800a197 	.word	0x0800a197
 800a108:	0800a197 	.word	0x0800a197
 800a10c:	0800a197 	.word	0x0800a197
 800a110:	0800a197 	.word	0x0800a197
 800a114:	0800a197 	.word	0x0800a197
 800a118:	0800a197 	.word	0x0800a197
 800a11c:	0800a197 	.word	0x0800a197
 800a120:	0800a197 	.word	0x0800a197
 800a124:	0800a197 	.word	0x0800a197
 800a128:	0800a189 	.word	0x0800a189
 800a12c:	2b40      	cmp	r3, #64	@ 0x40
 800a12e:	d02e      	beq.n	800a18e <UART_SetConfig+0x8aa>
 800a130:	e031      	b.n	800a196 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a132:	f7fc fb47 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 800a136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a138:	e033      	b.n	800a1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a13a:	f7fc fb59 	bl	80067f0 <HAL_RCC_GetPCLK2Freq>
 800a13e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a140:	e02f      	b.n	800a1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a146:	4618      	mov	r0, r3
 800a148:	f7fd fd88 	bl	8007c5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a150:	e027      	b.n	800a1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a152:	f107 0318 	add.w	r3, r7, #24
 800a156:	4618      	mov	r0, r3
 800a158:	f7fd fed4 	bl	8007f04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a160:	e01f      	b.n	800a1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a162:	4b2d      	ldr	r3, [pc, #180]	@ (800a218 <UART_SetConfig+0x934>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a16e:	4b2a      	ldr	r3, [pc, #168]	@ (800a218 <UART_SetConfig+0x934>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	08db      	lsrs	r3, r3, #3
 800a174:	f003 0303 	and.w	r3, r3, #3
 800a178:	4a24      	ldr	r2, [pc, #144]	@ (800a20c <UART_SetConfig+0x928>)
 800a17a:	fa22 f303 	lsr.w	r3, r2, r3
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a180:	e00f      	b.n	800a1a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a182:	4b22      	ldr	r3, [pc, #136]	@ (800a20c <UART_SetConfig+0x928>)
 800a184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a186:	e00c      	b.n	800a1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a188:	4b21      	ldr	r3, [pc, #132]	@ (800a210 <UART_SetConfig+0x92c>)
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18c:	e009      	b.n	800a1a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a18e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a194:	e005      	b.n	800a1a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80e7 	beq.w	800a378 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ae:	4a19      	ldr	r2, [pc, #100]	@ (800a214 <UART_SetConfig+0x930>)
 800a1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1bc:	005a      	lsls	r2, r3, #1
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	441a      	add	r2, r3
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	d916      	bls.n	800a204 <UART_SetConfig+0x920>
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1dc:	d212      	bcs.n	800a204 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f023 030f 	bic.w	r3, r3, #15
 800a1e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	085b      	lsrs	r3, r3, #1
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	e0b9      	b.n	800a378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a20a:	e0b5      	b.n	800a378 <UART_SetConfig+0xa94>
 800a20c:	03d09000 	.word	0x03d09000
 800a210:	003d0900 	.word	0x003d0900
 800a214:	0800b28c 	.word	0x0800b28c
 800a218:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a21c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a220:	2b20      	cmp	r3, #32
 800a222:	dc49      	bgt.n	800a2b8 <UART_SetConfig+0x9d4>
 800a224:	2b00      	cmp	r3, #0
 800a226:	db7c      	blt.n	800a322 <UART_SetConfig+0xa3e>
 800a228:	2b20      	cmp	r3, #32
 800a22a:	d87a      	bhi.n	800a322 <UART_SetConfig+0xa3e>
 800a22c:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <UART_SetConfig+0x950>)
 800a22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a232:	bf00      	nop
 800a234:	0800a2bf 	.word	0x0800a2bf
 800a238:	0800a2c7 	.word	0x0800a2c7
 800a23c:	0800a323 	.word	0x0800a323
 800a240:	0800a323 	.word	0x0800a323
 800a244:	0800a2cf 	.word	0x0800a2cf
 800a248:	0800a323 	.word	0x0800a323
 800a24c:	0800a323 	.word	0x0800a323
 800a250:	0800a323 	.word	0x0800a323
 800a254:	0800a2df 	.word	0x0800a2df
 800a258:	0800a323 	.word	0x0800a323
 800a25c:	0800a323 	.word	0x0800a323
 800a260:	0800a323 	.word	0x0800a323
 800a264:	0800a323 	.word	0x0800a323
 800a268:	0800a323 	.word	0x0800a323
 800a26c:	0800a323 	.word	0x0800a323
 800a270:	0800a323 	.word	0x0800a323
 800a274:	0800a2ef 	.word	0x0800a2ef
 800a278:	0800a323 	.word	0x0800a323
 800a27c:	0800a323 	.word	0x0800a323
 800a280:	0800a323 	.word	0x0800a323
 800a284:	0800a323 	.word	0x0800a323
 800a288:	0800a323 	.word	0x0800a323
 800a28c:	0800a323 	.word	0x0800a323
 800a290:	0800a323 	.word	0x0800a323
 800a294:	0800a323 	.word	0x0800a323
 800a298:	0800a323 	.word	0x0800a323
 800a29c:	0800a323 	.word	0x0800a323
 800a2a0:	0800a323 	.word	0x0800a323
 800a2a4:	0800a323 	.word	0x0800a323
 800a2a8:	0800a323 	.word	0x0800a323
 800a2ac:	0800a323 	.word	0x0800a323
 800a2b0:	0800a323 	.word	0x0800a323
 800a2b4:	0800a315 	.word	0x0800a315
 800a2b8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ba:	d02e      	beq.n	800a31a <UART_SetConfig+0xa36>
 800a2bc:	e031      	b.n	800a322 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2be:	f7fc fa81 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 800a2c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2c4:	e033      	b.n	800a32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2c6:	f7fc fa93 	bl	80067f0 <HAL_RCC_GetPCLK2Freq>
 800a2ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2cc:	e02f      	b.n	800a32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fd fcc2 	bl	8007c5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2dc:	e027      	b.n	800a32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2de:	f107 0318 	add.w	r3, r7, #24
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fd fe0e 	bl	8007f04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ec:	e01f      	b.n	800a32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ee:	4b2d      	ldr	r3, [pc, #180]	@ (800a3a4 <UART_SetConfig+0xac0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0320 	and.w	r3, r3, #32
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d009      	beq.n	800a30e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a4 <UART_SetConfig+0xac0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	08db      	lsrs	r3, r3, #3
 800a300:	f003 0303 	and.w	r3, r3, #3
 800a304:	4a28      	ldr	r2, [pc, #160]	@ (800a3a8 <UART_SetConfig+0xac4>)
 800a306:	fa22 f303 	lsr.w	r3, r2, r3
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a30c:	e00f      	b.n	800a32e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a30e:	4b26      	ldr	r3, [pc, #152]	@ (800a3a8 <UART_SetConfig+0xac4>)
 800a310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a312:	e00c      	b.n	800a32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a314:	4b25      	ldr	r3, [pc, #148]	@ (800a3ac <UART_SetConfig+0xac8>)
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a318:	e009      	b.n	800a32e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a31a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a320:	e005      	b.n	800a32e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a32c:	bf00      	nop
    }

    if (pclk != 0U)
 800a32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a330:	2b00      	cmp	r3, #0
 800a332:	d021      	beq.n	800a378 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a338:	4a1d      	ldr	r2, [pc, #116]	@ (800a3b0 <UART_SetConfig+0xacc>)
 800a33a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a33e:	461a      	mov	r2, r3
 800a340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a342:	fbb3 f2f2 	udiv	r2, r3, r2
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	085b      	lsrs	r3, r3, #1
 800a34c:	441a      	add	r2, r3
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	fbb2 f3f3 	udiv	r3, r2, r3
 800a356:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35a:	2b0f      	cmp	r3, #15
 800a35c:	d909      	bls.n	800a372 <UART_SetConfig+0xa8e>
 800a35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a364:	d205      	bcs.n	800a372 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a368:	b29a      	uxth	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60da      	str	r2, [r3, #12]
 800a370:	e002      	b.n	800a378 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2201      	movs	r2, #1
 800a384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2200      	movs	r2, #0
 800a38c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2200      	movs	r2, #0
 800a392:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a394:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3748      	adds	r7, #72	@ 0x48
 800a39c:	46bd      	mov	sp, r7
 800a39e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3a2:	bf00      	nop
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	03d09000 	.word	0x03d09000
 800a3ac:	003d0900 	.word	0x003d0900
 800a3b0:	0800b28c 	.word	0x0800b28c

0800a3b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c0:	f003 0308 	and.w	r3, r3, #8
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00a      	beq.n	800a3de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00a      	beq.n	800a422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00a      	beq.n	800a466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46a:	f003 0320 	and.w	r3, r3, #32
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	430a      	orrs	r2, r1
 800a486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01a      	beq.n	800a4ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4b2:	d10a      	bne.n	800a4ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	605a      	str	r2, [r3, #4]
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b098      	sub	sp, #96	@ 0x60
 800a4fc:	af02      	add	r7, sp, #8
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a508:	f7f7 fd74 	bl	8001ff4 <HAL_GetTick>
 800a50c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0308 	and.w	r3, r3, #8
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d12f      	bne.n	800a57c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a51c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a524:	2200      	movs	r2, #0
 800a526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f88e 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d022      	beq.n	800a57c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a54a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a554:	647b      	str	r3, [r7, #68]	@ 0x44
 800a556:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a55a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a55c:	e841 2300 	strex	r3, r2, [r1]
 800a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e6      	bne.n	800a536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2220      	movs	r2, #32
 800a56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e063      	b.n	800a644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b04      	cmp	r3, #4
 800a588:	d149      	bne.n	800a61e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a58a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a592:	2200      	movs	r2, #0
 800a594:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f857 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d03c      	beq.n	800a61e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e6      	bne.n	800a5a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	e853 3f00 	ldrex	r3, [r3]
 800a5e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f023 0301 	bic.w	r3, r3, #1
 800a5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5f6:	61fa      	str	r2, [r7, #28]
 800a5f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fa:	69b9      	ldr	r1, [r7, #24]
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	e841 2300 	strex	r3, r2, [r1]
 800a602:	617b      	str	r3, [r7, #20]
   return(result);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e5      	bne.n	800a5d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e012      	b.n	800a644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2220      	movs	r2, #32
 800a62a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3758      	adds	r7, #88	@ 0x58
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	603b      	str	r3, [r7, #0]
 800a658:	4613      	mov	r3, r2
 800a65a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a65c:	e04f      	b.n	800a6fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a664:	d04b      	beq.n	800a6fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a666:	f7f7 fcc5 	bl	8001ff4 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	429a      	cmp	r2, r3
 800a674:	d302      	bcc.n	800a67c <UART_WaitOnFlagUntilTimeout+0x30>
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e04e      	b.n	800a71e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0304 	and.w	r3, r3, #4
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d037      	beq.n	800a6fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2b80      	cmp	r3, #128	@ 0x80
 800a692:	d034      	beq.n	800a6fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2b40      	cmp	r3, #64	@ 0x40
 800a698:	d031      	beq.n	800a6fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	f003 0308 	and.w	r3, r3, #8
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d110      	bne.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f839 	bl	800a728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2208      	movs	r2, #8
 800a6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e029      	b.n	800a71e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6d8:	d111      	bne.n	800a6fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f000 f81f 	bl	800a728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e00f      	b.n	800a71e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	69da      	ldr	r2, [r3, #28]
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4013      	ands	r3, r2
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	bf0c      	ite	eq
 800a70e:	2301      	moveq	r3, #1
 800a710:	2300      	movne	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	461a      	mov	r2, r3
 800a716:	79fb      	ldrb	r3, [r7, #7]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d0a0      	beq.n	800a65e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a728:	b480      	push	{r7}
 800a72a:	b095      	sub	sp, #84	@ 0x54
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a74e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a750:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e6      	bne.n	800a730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3308      	adds	r3, #8
 800a768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	61fb      	str	r3, [r7, #28]
   return(result);
 800a772:	69fa      	ldr	r2, [r7, #28]
 800a774:	4b1e      	ldr	r3, [pc, #120]	@ (800a7f0 <UART_EndRxTransfer+0xc8>)
 800a776:	4013      	ands	r3, r2
 800a778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3308      	adds	r3, #8
 800a780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e5      	bne.n	800a762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d118      	bne.n	800a7d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	e853 3f00 	ldrex	r3, [r3]
 800a7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f023 0310 	bic.w	r3, r3, #16
 800a7b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7bc:	61bb      	str	r3, [r7, #24]
 800a7be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c0:	6979      	ldr	r1, [r7, #20]
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	e841 2300 	strex	r3, r2, [r1]
 800a7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e6      	bne.n	800a79e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7e4:	bf00      	nop
 800a7e6:	3754      	adds	r7, #84	@ 0x54
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	effffffe 	.word	0xeffffffe

0800a7f4 <_vsniprintf_r>:
 800a7f4:	b530      	push	{r4, r5, lr}
 800a7f6:	4614      	mov	r4, r2
 800a7f8:	2c00      	cmp	r4, #0
 800a7fa:	b09b      	sub	sp, #108	@ 0x6c
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	461a      	mov	r2, r3
 800a800:	da05      	bge.n	800a80e <_vsniprintf_r+0x1a>
 800a802:	238b      	movs	r3, #139	@ 0x8b
 800a804:	6003      	str	r3, [r0, #0]
 800a806:	f04f 30ff 	mov.w	r0, #4294967295
 800a80a:	b01b      	add	sp, #108	@ 0x6c
 800a80c:	bd30      	pop	{r4, r5, pc}
 800a80e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a812:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a816:	f04f 0300 	mov.w	r3, #0
 800a81a:	9319      	str	r3, [sp, #100]	@ 0x64
 800a81c:	bf14      	ite	ne
 800a81e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a822:	4623      	moveq	r3, r4
 800a824:	9302      	str	r3, [sp, #8]
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a82c:	9100      	str	r1, [sp, #0]
 800a82e:	9104      	str	r1, [sp, #16]
 800a830:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a834:	4669      	mov	r1, sp
 800a836:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a838:	f000 f9ae 	bl	800ab98 <_svfiprintf_r>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	bfbc      	itt	lt
 800a840:	238b      	movlt	r3, #139	@ 0x8b
 800a842:	602b      	strlt	r3, [r5, #0]
 800a844:	2c00      	cmp	r4, #0
 800a846:	d0e0      	beq.n	800a80a <_vsniprintf_r+0x16>
 800a848:	9b00      	ldr	r3, [sp, #0]
 800a84a:	2200      	movs	r2, #0
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	e7dc      	b.n	800a80a <_vsniprintf_r+0x16>

0800a850 <vsniprintf>:
 800a850:	b507      	push	{r0, r1, r2, lr}
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	4613      	mov	r3, r2
 800a856:	460a      	mov	r2, r1
 800a858:	4601      	mov	r1, r0
 800a85a:	4803      	ldr	r0, [pc, #12]	@ (800a868 <vsniprintf+0x18>)
 800a85c:	6800      	ldr	r0, [r0, #0]
 800a85e:	f7ff ffc9 	bl	800a7f4 <_vsniprintf_r>
 800a862:	b003      	add	sp, #12
 800a864:	f85d fb04 	ldr.w	pc, [sp], #4
 800a868:	24000848 	.word	0x24000848

0800a86c <memset>:
 800a86c:	4402      	add	r2, r0
 800a86e:	4603      	mov	r3, r0
 800a870:	4293      	cmp	r3, r2
 800a872:	d100      	bne.n	800a876 <memset+0xa>
 800a874:	4770      	bx	lr
 800a876:	f803 1b01 	strb.w	r1, [r3], #1
 800a87a:	e7f9      	b.n	800a870 <memset+0x4>

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	@ (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	24000848 	.word	0x24000848

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4d0d      	ldr	r5, [pc, #52]	@ (800a8c0 <__libc_init_array+0x38>)
 800a88c:	4c0d      	ldr	r4, [pc, #52]	@ (800a8c4 <__libc_init_array+0x3c>)
 800a88e:	1b64      	subs	r4, r4, r5
 800a890:	10a4      	asrs	r4, r4, #2
 800a892:	2600      	movs	r6, #0
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	4d0b      	ldr	r5, [pc, #44]	@ (800a8c8 <__libc_init_array+0x40>)
 800a89a:	4c0c      	ldr	r4, [pc, #48]	@ (800a8cc <__libc_init_array+0x44>)
 800a89c:	f000 fc64 	bl	800b168 <_init>
 800a8a0:	1b64      	subs	r4, r4, r5
 800a8a2:	10a4      	asrs	r4, r4, #2
 800a8a4:	2600      	movs	r6, #0
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	4798      	blx	r3
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	4798      	blx	r3
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	0800b2e0 	.word	0x0800b2e0
 800a8c4:	0800b2e0 	.word	0x0800b2e0
 800a8c8:	0800b2e0 	.word	0x0800b2e0
 800a8cc:	0800b2e4 	.word	0x0800b2e4

0800a8d0 <__retarget_lock_acquire_recursive>:
 800a8d0:	4770      	bx	lr

0800a8d2 <__retarget_lock_release_recursive>:
 800a8d2:	4770      	bx	lr

0800a8d4 <memcpy>:
 800a8d4:	440a      	add	r2, r1
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8dc:	d100      	bne.n	800a8e0 <memcpy+0xc>
 800a8de:	4770      	bx	lr
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ea:	4291      	cmp	r1, r2
 800a8ec:	d1f9      	bne.n	800a8e2 <memcpy+0xe>
 800a8ee:	bd10      	pop	{r4, pc}

0800a8f0 <_free_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	d041      	beq.n	800a97c <_free_r+0x8c>
 800a8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fc:	1f0c      	subs	r4, r1, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfb8      	it	lt
 800a902:	18e4      	addlt	r4, r4, r3
 800a904:	f000 f8e0 	bl	800aac8 <__malloc_lock>
 800a908:	4a1d      	ldr	r2, [pc, #116]	@ (800a980 <_free_r+0x90>)
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	b933      	cbnz	r3, 800a91c <_free_r+0x2c>
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	6014      	str	r4, [r2, #0]
 800a912:	4628      	mov	r0, r5
 800a914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a918:	f000 b8dc 	b.w	800aad4 <__malloc_unlock>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d908      	bls.n	800a932 <_free_r+0x42>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	1821      	adds	r1, r4, r0
 800a924:	428b      	cmp	r3, r1
 800a926:	bf01      	itttt	eq
 800a928:	6819      	ldreq	r1, [r3, #0]
 800a92a:	685b      	ldreq	r3, [r3, #4]
 800a92c:	1809      	addeq	r1, r1, r0
 800a92e:	6021      	streq	r1, [r4, #0]
 800a930:	e7ed      	b.n	800a90e <_free_r+0x1e>
 800a932:	461a      	mov	r2, r3
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b10b      	cbz	r3, 800a93c <_free_r+0x4c>
 800a938:	42a3      	cmp	r3, r4
 800a93a:	d9fa      	bls.n	800a932 <_free_r+0x42>
 800a93c:	6811      	ldr	r1, [r2, #0]
 800a93e:	1850      	adds	r0, r2, r1
 800a940:	42a0      	cmp	r0, r4
 800a942:	d10b      	bne.n	800a95c <_free_r+0x6c>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	4401      	add	r1, r0
 800a948:	1850      	adds	r0, r2, r1
 800a94a:	4283      	cmp	r3, r0
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	d1e0      	bne.n	800a912 <_free_r+0x22>
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	6053      	str	r3, [r2, #4]
 800a956:	4408      	add	r0, r1
 800a958:	6010      	str	r0, [r2, #0]
 800a95a:	e7da      	b.n	800a912 <_free_r+0x22>
 800a95c:	d902      	bls.n	800a964 <_free_r+0x74>
 800a95e:	230c      	movs	r3, #12
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	e7d6      	b.n	800a912 <_free_r+0x22>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	1821      	adds	r1, r4, r0
 800a968:	428b      	cmp	r3, r1
 800a96a:	bf04      	itt	eq
 800a96c:	6819      	ldreq	r1, [r3, #0]
 800a96e:	685b      	ldreq	r3, [r3, #4]
 800a970:	6063      	str	r3, [r4, #4]
 800a972:	bf04      	itt	eq
 800a974:	1809      	addeq	r1, r1, r0
 800a976:	6021      	streq	r1, [r4, #0]
 800a978:	6054      	str	r4, [r2, #4]
 800a97a:	e7ca      	b.n	800a912 <_free_r+0x22>
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	bf00      	nop
 800a980:	24000cc4 	.word	0x24000cc4

0800a984 <sbrk_aligned>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4e0f      	ldr	r6, [pc, #60]	@ (800a9c4 <sbrk_aligned+0x40>)
 800a988:	460c      	mov	r4, r1
 800a98a:	6831      	ldr	r1, [r6, #0]
 800a98c:	4605      	mov	r5, r0
 800a98e:	b911      	cbnz	r1, 800a996 <sbrk_aligned+0x12>
 800a990:	f000 fba4 	bl	800b0dc <_sbrk_r>
 800a994:	6030      	str	r0, [r6, #0]
 800a996:	4621      	mov	r1, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	f000 fb9f 	bl	800b0dc <_sbrk_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	d103      	bne.n	800a9aa <sbrk_aligned+0x26>
 800a9a2:	f04f 34ff 	mov.w	r4, #4294967295
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}
 800a9aa:	1cc4      	adds	r4, r0, #3
 800a9ac:	f024 0403 	bic.w	r4, r4, #3
 800a9b0:	42a0      	cmp	r0, r4
 800a9b2:	d0f8      	beq.n	800a9a6 <sbrk_aligned+0x22>
 800a9b4:	1a21      	subs	r1, r4, r0
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 fb90 	bl	800b0dc <_sbrk_r>
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d1f2      	bne.n	800a9a6 <sbrk_aligned+0x22>
 800a9c0:	e7ef      	b.n	800a9a2 <sbrk_aligned+0x1e>
 800a9c2:	bf00      	nop
 800a9c4:	24000cc0 	.word	0x24000cc0

0800a9c8 <_malloc_r>:
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	1ccd      	adds	r5, r1, #3
 800a9ce:	f025 0503 	bic.w	r5, r5, #3
 800a9d2:	3508      	adds	r5, #8
 800a9d4:	2d0c      	cmp	r5, #12
 800a9d6:	bf38      	it	cc
 800a9d8:	250c      	movcc	r5, #12
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	4606      	mov	r6, r0
 800a9de:	db01      	blt.n	800a9e4 <_malloc_r+0x1c>
 800a9e0:	42a9      	cmp	r1, r5
 800a9e2:	d904      	bls.n	800a9ee <_malloc_r+0x26>
 800a9e4:	230c      	movs	r3, #12
 800a9e6:	6033      	str	r3, [r6, #0]
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aac4 <_malloc_r+0xfc>
 800a9f2:	f000 f869 	bl	800aac8 <__malloc_lock>
 800a9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fa:	461c      	mov	r4, r3
 800a9fc:	bb44      	cbnz	r4, 800aa50 <_malloc_r+0x88>
 800a9fe:	4629      	mov	r1, r5
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff ffbf 	bl	800a984 <sbrk_aligned>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	4604      	mov	r4, r0
 800aa0a:	d158      	bne.n	800aabe <_malloc_r+0xf6>
 800aa0c:	f8d8 4000 	ldr.w	r4, [r8]
 800aa10:	4627      	mov	r7, r4
 800aa12:	2f00      	cmp	r7, #0
 800aa14:	d143      	bne.n	800aa9e <_malloc_r+0xd6>
 800aa16:	2c00      	cmp	r4, #0
 800aa18:	d04b      	beq.n	800aab2 <_malloc_r+0xea>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	4630      	mov	r0, r6
 800aa20:	eb04 0903 	add.w	r9, r4, r3
 800aa24:	f000 fb5a 	bl	800b0dc <_sbrk_r>
 800aa28:	4581      	cmp	r9, r0
 800aa2a:	d142      	bne.n	800aab2 <_malloc_r+0xea>
 800aa2c:	6821      	ldr	r1, [r4, #0]
 800aa2e:	1a6d      	subs	r5, r5, r1
 800aa30:	4629      	mov	r1, r5
 800aa32:	4630      	mov	r0, r6
 800aa34:	f7ff ffa6 	bl	800a984 <sbrk_aligned>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d03a      	beq.n	800aab2 <_malloc_r+0xea>
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	442b      	add	r3, r5
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	f8d8 3000 	ldr.w	r3, [r8]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	bb62      	cbnz	r2, 800aaa4 <_malloc_r+0xdc>
 800aa4a:	f8c8 7000 	str.w	r7, [r8]
 800aa4e:	e00f      	b.n	800aa70 <_malloc_r+0xa8>
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	1b52      	subs	r2, r2, r5
 800aa54:	d420      	bmi.n	800aa98 <_malloc_r+0xd0>
 800aa56:	2a0b      	cmp	r2, #11
 800aa58:	d917      	bls.n	800aa8a <_malloc_r+0xc2>
 800aa5a:	1961      	adds	r1, r4, r5
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	6025      	str	r5, [r4, #0]
 800aa60:	bf18      	it	ne
 800aa62:	6059      	strne	r1, [r3, #4]
 800aa64:	6863      	ldr	r3, [r4, #4]
 800aa66:	bf08      	it	eq
 800aa68:	f8c8 1000 	streq.w	r1, [r8]
 800aa6c:	5162      	str	r2, [r4, r5]
 800aa6e:	604b      	str	r3, [r1, #4]
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f82f 	bl	800aad4 <__malloc_unlock>
 800aa76:	f104 000b 	add.w	r0, r4, #11
 800aa7a:	1d23      	adds	r3, r4, #4
 800aa7c:	f020 0007 	bic.w	r0, r0, #7
 800aa80:	1ac2      	subs	r2, r0, r3
 800aa82:	bf1c      	itt	ne
 800aa84:	1a1b      	subne	r3, r3, r0
 800aa86:	50a3      	strne	r3, [r4, r2]
 800aa88:	e7af      	b.n	800a9ea <_malloc_r+0x22>
 800aa8a:	6862      	ldr	r2, [r4, #4]
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	bf0c      	ite	eq
 800aa90:	f8c8 2000 	streq.w	r2, [r8]
 800aa94:	605a      	strne	r2, [r3, #4]
 800aa96:	e7eb      	b.n	800aa70 <_malloc_r+0xa8>
 800aa98:	4623      	mov	r3, r4
 800aa9a:	6864      	ldr	r4, [r4, #4]
 800aa9c:	e7ae      	b.n	800a9fc <_malloc_r+0x34>
 800aa9e:	463c      	mov	r4, r7
 800aaa0:	687f      	ldr	r7, [r7, #4]
 800aaa2:	e7b6      	b.n	800aa12 <_malloc_r+0x4a>
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	42a3      	cmp	r3, r4
 800aaaa:	d1fb      	bne.n	800aaa4 <_malloc_r+0xdc>
 800aaac:	2300      	movs	r3, #0
 800aaae:	6053      	str	r3, [r2, #4]
 800aab0:	e7de      	b.n	800aa70 <_malloc_r+0xa8>
 800aab2:	230c      	movs	r3, #12
 800aab4:	6033      	str	r3, [r6, #0]
 800aab6:	4630      	mov	r0, r6
 800aab8:	f000 f80c 	bl	800aad4 <__malloc_unlock>
 800aabc:	e794      	b.n	800a9e8 <_malloc_r+0x20>
 800aabe:	6005      	str	r5, [r0, #0]
 800aac0:	e7d6      	b.n	800aa70 <_malloc_r+0xa8>
 800aac2:	bf00      	nop
 800aac4:	24000cc4 	.word	0x24000cc4

0800aac8 <__malloc_lock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	@ (800aad0 <__malloc_lock+0x8>)
 800aaca:	f7ff bf01 	b.w	800a8d0 <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	24000cbc 	.word	0x24000cbc

0800aad4 <__malloc_unlock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	@ (800aadc <__malloc_unlock+0x8>)
 800aad6:	f7ff befc 	b.w	800a8d2 <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	24000cbc 	.word	0x24000cbc

0800aae0 <__ssputs_r>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	688e      	ldr	r6, [r1, #8]
 800aae6:	461f      	mov	r7, r3
 800aae8:	42be      	cmp	r6, r7
 800aaea:	680b      	ldr	r3, [r1, #0]
 800aaec:	4682      	mov	sl, r0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	4690      	mov	r8, r2
 800aaf2:	d82d      	bhi.n	800ab50 <__ssputs_r+0x70>
 800aaf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aafc:	d026      	beq.n	800ab4c <__ssputs_r+0x6c>
 800aafe:	6965      	ldr	r5, [r4, #20]
 800ab00:	6909      	ldr	r1, [r1, #16]
 800ab02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab06:	eba3 0901 	sub.w	r9, r3, r1
 800ab0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab0e:	1c7b      	adds	r3, r7, #1
 800ab10:	444b      	add	r3, r9
 800ab12:	106d      	asrs	r5, r5, #1
 800ab14:	429d      	cmp	r5, r3
 800ab16:	bf38      	it	cc
 800ab18:	461d      	movcc	r5, r3
 800ab1a:	0553      	lsls	r3, r2, #21
 800ab1c:	d527      	bpl.n	800ab6e <__ssputs_r+0x8e>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	f7ff ff52 	bl	800a9c8 <_malloc_r>
 800ab24:	4606      	mov	r6, r0
 800ab26:	b360      	cbz	r0, 800ab82 <__ssputs_r+0xa2>
 800ab28:	6921      	ldr	r1, [r4, #16]
 800ab2a:	464a      	mov	r2, r9
 800ab2c:	f7ff fed2 	bl	800a8d4 <memcpy>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab3a:	81a3      	strh	r3, [r4, #12]
 800ab3c:	6126      	str	r6, [r4, #16]
 800ab3e:	6165      	str	r5, [r4, #20]
 800ab40:	444e      	add	r6, r9
 800ab42:	eba5 0509 	sub.w	r5, r5, r9
 800ab46:	6026      	str	r6, [r4, #0]
 800ab48:	60a5      	str	r5, [r4, #8]
 800ab4a:	463e      	mov	r6, r7
 800ab4c:	42be      	cmp	r6, r7
 800ab4e:	d900      	bls.n	800ab52 <__ssputs_r+0x72>
 800ab50:	463e      	mov	r6, r7
 800ab52:	6820      	ldr	r0, [r4, #0]
 800ab54:	4632      	mov	r2, r6
 800ab56:	4641      	mov	r1, r8
 800ab58:	f000 faa6 	bl	800b0a8 <memmove>
 800ab5c:	68a3      	ldr	r3, [r4, #8]
 800ab5e:	1b9b      	subs	r3, r3, r6
 800ab60:	60a3      	str	r3, [r4, #8]
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	4433      	add	r3, r6
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	2000      	movs	r0, #0
 800ab6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6e:	462a      	mov	r2, r5
 800ab70:	f000 fac4 	bl	800b0fc <_realloc_r>
 800ab74:	4606      	mov	r6, r0
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d1e0      	bne.n	800ab3c <__ssputs_r+0x5c>
 800ab7a:	6921      	ldr	r1, [r4, #16]
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	f7ff feb7 	bl	800a8f0 <_free_r>
 800ab82:	230c      	movs	r3, #12
 800ab84:	f8ca 3000 	str.w	r3, [sl]
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab8e:	81a3      	strh	r3, [r4, #12]
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	e7e9      	b.n	800ab6a <__ssputs_r+0x8a>
	...

0800ab98 <_svfiprintf_r>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	4698      	mov	r8, r3
 800ab9e:	898b      	ldrh	r3, [r1, #12]
 800aba0:	061b      	lsls	r3, r3, #24
 800aba2:	b09d      	sub	sp, #116	@ 0x74
 800aba4:	4607      	mov	r7, r0
 800aba6:	460d      	mov	r5, r1
 800aba8:	4614      	mov	r4, r2
 800abaa:	d510      	bpl.n	800abce <_svfiprintf_r+0x36>
 800abac:	690b      	ldr	r3, [r1, #16]
 800abae:	b973      	cbnz	r3, 800abce <_svfiprintf_r+0x36>
 800abb0:	2140      	movs	r1, #64	@ 0x40
 800abb2:	f7ff ff09 	bl	800a9c8 <_malloc_r>
 800abb6:	6028      	str	r0, [r5, #0]
 800abb8:	6128      	str	r0, [r5, #16]
 800abba:	b930      	cbnz	r0, 800abca <_svfiprintf_r+0x32>
 800abbc:	230c      	movs	r3, #12
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	b01d      	add	sp, #116	@ 0x74
 800abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abca:	2340      	movs	r3, #64	@ 0x40
 800abcc:	616b      	str	r3, [r5, #20]
 800abce:	2300      	movs	r3, #0
 800abd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd2:	2320      	movs	r3, #32
 800abd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abdc:	2330      	movs	r3, #48	@ 0x30
 800abde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad7c <_svfiprintf_r+0x1e4>
 800abe2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abe6:	f04f 0901 	mov.w	r9, #1
 800abea:	4623      	mov	r3, r4
 800abec:	469a      	mov	sl, r3
 800abee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abf2:	b10a      	cbz	r2, 800abf8 <_svfiprintf_r+0x60>
 800abf4:	2a25      	cmp	r2, #37	@ 0x25
 800abf6:	d1f9      	bne.n	800abec <_svfiprintf_r+0x54>
 800abf8:	ebba 0b04 	subs.w	fp, sl, r4
 800abfc:	d00b      	beq.n	800ac16 <_svfiprintf_r+0x7e>
 800abfe:	465b      	mov	r3, fp
 800ac00:	4622      	mov	r2, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	4638      	mov	r0, r7
 800ac06:	f7ff ff6b 	bl	800aae0 <__ssputs_r>
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f000 80a7 	beq.w	800ad5e <_svfiprintf_r+0x1c6>
 800ac10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac12:	445a      	add	r2, fp
 800ac14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac16:	f89a 3000 	ldrb.w	r3, [sl]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 809f 	beq.w	800ad5e <_svfiprintf_r+0x1c6>
 800ac20:	2300      	movs	r3, #0
 800ac22:	f04f 32ff 	mov.w	r2, #4294967295
 800ac26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac2a:	f10a 0a01 	add.w	sl, sl, #1
 800ac2e:	9304      	str	r3, [sp, #16]
 800ac30:	9307      	str	r3, [sp, #28]
 800ac32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac36:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac38:	4654      	mov	r4, sl
 800ac3a:	2205      	movs	r2, #5
 800ac3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac40:	484e      	ldr	r0, [pc, #312]	@ (800ad7c <_svfiprintf_r+0x1e4>)
 800ac42:	f7f5 fb55 	bl	80002f0 <memchr>
 800ac46:	9a04      	ldr	r2, [sp, #16]
 800ac48:	b9d8      	cbnz	r0, 800ac82 <_svfiprintf_r+0xea>
 800ac4a:	06d0      	lsls	r0, r2, #27
 800ac4c:	bf44      	itt	mi
 800ac4e:	2320      	movmi	r3, #32
 800ac50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac54:	0711      	lsls	r1, r2, #28
 800ac56:	bf44      	itt	mi
 800ac58:	232b      	movmi	r3, #43	@ 0x2b
 800ac5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac64:	d015      	beq.n	800ac92 <_svfiprintf_r+0xfa>
 800ac66:	9a07      	ldr	r2, [sp, #28]
 800ac68:	4654      	mov	r4, sl
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f04f 0c0a 	mov.w	ip, #10
 800ac70:	4621      	mov	r1, r4
 800ac72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac76:	3b30      	subs	r3, #48	@ 0x30
 800ac78:	2b09      	cmp	r3, #9
 800ac7a:	d94b      	bls.n	800ad14 <_svfiprintf_r+0x17c>
 800ac7c:	b1b0      	cbz	r0, 800acac <_svfiprintf_r+0x114>
 800ac7e:	9207      	str	r2, [sp, #28]
 800ac80:	e014      	b.n	800acac <_svfiprintf_r+0x114>
 800ac82:	eba0 0308 	sub.w	r3, r0, r8
 800ac86:	fa09 f303 	lsl.w	r3, r9, r3
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	46a2      	mov	sl, r4
 800ac90:	e7d2      	b.n	800ac38 <_svfiprintf_r+0xa0>
 800ac92:	9b03      	ldr	r3, [sp, #12]
 800ac94:	1d19      	adds	r1, r3, #4
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	9103      	str	r1, [sp, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	bfbb      	ittet	lt
 800ac9e:	425b      	neglt	r3, r3
 800aca0:	f042 0202 	orrlt.w	r2, r2, #2
 800aca4:	9307      	strge	r3, [sp, #28]
 800aca6:	9307      	strlt	r3, [sp, #28]
 800aca8:	bfb8      	it	lt
 800acaa:	9204      	strlt	r2, [sp, #16]
 800acac:	7823      	ldrb	r3, [r4, #0]
 800acae:	2b2e      	cmp	r3, #46	@ 0x2e
 800acb0:	d10a      	bne.n	800acc8 <_svfiprintf_r+0x130>
 800acb2:	7863      	ldrb	r3, [r4, #1]
 800acb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800acb6:	d132      	bne.n	800ad1e <_svfiprintf_r+0x186>
 800acb8:	9b03      	ldr	r3, [sp, #12]
 800acba:	1d1a      	adds	r2, r3, #4
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	9203      	str	r2, [sp, #12]
 800acc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acc4:	3402      	adds	r4, #2
 800acc6:	9305      	str	r3, [sp, #20]
 800acc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad8c <_svfiprintf_r+0x1f4>
 800accc:	7821      	ldrb	r1, [r4, #0]
 800acce:	2203      	movs	r2, #3
 800acd0:	4650      	mov	r0, sl
 800acd2:	f7f5 fb0d 	bl	80002f0 <memchr>
 800acd6:	b138      	cbz	r0, 800ace8 <_svfiprintf_r+0x150>
 800acd8:	9b04      	ldr	r3, [sp, #16]
 800acda:	eba0 000a 	sub.w	r0, r0, sl
 800acde:	2240      	movs	r2, #64	@ 0x40
 800ace0:	4082      	lsls	r2, r0
 800ace2:	4313      	orrs	r3, r2
 800ace4:	3401      	adds	r4, #1
 800ace6:	9304      	str	r3, [sp, #16]
 800ace8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acec:	4824      	ldr	r0, [pc, #144]	@ (800ad80 <_svfiprintf_r+0x1e8>)
 800acee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acf2:	2206      	movs	r2, #6
 800acf4:	f7f5 fafc 	bl	80002f0 <memchr>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d036      	beq.n	800ad6a <_svfiprintf_r+0x1d2>
 800acfc:	4b21      	ldr	r3, [pc, #132]	@ (800ad84 <_svfiprintf_r+0x1ec>)
 800acfe:	bb1b      	cbnz	r3, 800ad48 <_svfiprintf_r+0x1b0>
 800ad00:	9b03      	ldr	r3, [sp, #12]
 800ad02:	3307      	adds	r3, #7
 800ad04:	f023 0307 	bic.w	r3, r3, #7
 800ad08:	3308      	adds	r3, #8
 800ad0a:	9303      	str	r3, [sp, #12]
 800ad0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad0e:	4433      	add	r3, r6
 800ad10:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad12:	e76a      	b.n	800abea <_svfiprintf_r+0x52>
 800ad14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad18:	460c      	mov	r4, r1
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	e7a8      	b.n	800ac70 <_svfiprintf_r+0xd8>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	3401      	adds	r4, #1
 800ad22:	9305      	str	r3, [sp, #20]
 800ad24:	4619      	mov	r1, r3
 800ad26:	f04f 0c0a 	mov.w	ip, #10
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad30:	3a30      	subs	r2, #48	@ 0x30
 800ad32:	2a09      	cmp	r2, #9
 800ad34:	d903      	bls.n	800ad3e <_svfiprintf_r+0x1a6>
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0c6      	beq.n	800acc8 <_svfiprintf_r+0x130>
 800ad3a:	9105      	str	r1, [sp, #20]
 800ad3c:	e7c4      	b.n	800acc8 <_svfiprintf_r+0x130>
 800ad3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad42:	4604      	mov	r4, r0
 800ad44:	2301      	movs	r3, #1
 800ad46:	e7f0      	b.n	800ad2a <_svfiprintf_r+0x192>
 800ad48:	ab03      	add	r3, sp, #12
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad88 <_svfiprintf_r+0x1f0>)
 800ad50:	a904      	add	r1, sp, #16
 800ad52:	4638      	mov	r0, r7
 800ad54:	f3af 8000 	nop.w
 800ad58:	1c42      	adds	r2, r0, #1
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	d1d6      	bne.n	800ad0c <_svfiprintf_r+0x174>
 800ad5e:	89ab      	ldrh	r3, [r5, #12]
 800ad60:	065b      	lsls	r3, r3, #25
 800ad62:	f53f af2d 	bmi.w	800abc0 <_svfiprintf_r+0x28>
 800ad66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad68:	e72c      	b.n	800abc4 <_svfiprintf_r+0x2c>
 800ad6a:	ab03      	add	r3, sp, #12
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	462a      	mov	r2, r5
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <_svfiprintf_r+0x1f0>)
 800ad72:	a904      	add	r1, sp, #16
 800ad74:	4638      	mov	r0, r7
 800ad76:	f000 f879 	bl	800ae6c <_printf_i>
 800ad7a:	e7ed      	b.n	800ad58 <_svfiprintf_r+0x1c0>
 800ad7c:	0800b2a4 	.word	0x0800b2a4
 800ad80:	0800b2ae 	.word	0x0800b2ae
 800ad84:	00000000 	.word	0x00000000
 800ad88:	0800aae1 	.word	0x0800aae1
 800ad8c:	0800b2aa 	.word	0x0800b2aa

0800ad90 <_printf_common>:
 800ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	4616      	mov	r6, r2
 800ad96:	4698      	mov	r8, r3
 800ad98:	688a      	ldr	r2, [r1, #8]
 800ad9a:	690b      	ldr	r3, [r1, #16]
 800ad9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ada0:	4293      	cmp	r3, r2
 800ada2:	bfb8      	it	lt
 800ada4:	4613      	movlt	r3, r2
 800ada6:	6033      	str	r3, [r6, #0]
 800ada8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adac:	4607      	mov	r7, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	b10a      	cbz	r2, 800adb6 <_printf_common+0x26>
 800adb2:	3301      	adds	r3, #1
 800adb4:	6033      	str	r3, [r6, #0]
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	0699      	lsls	r1, r3, #26
 800adba:	bf42      	ittt	mi
 800adbc:	6833      	ldrmi	r3, [r6, #0]
 800adbe:	3302      	addmi	r3, #2
 800adc0:	6033      	strmi	r3, [r6, #0]
 800adc2:	6825      	ldr	r5, [r4, #0]
 800adc4:	f015 0506 	ands.w	r5, r5, #6
 800adc8:	d106      	bne.n	800add8 <_printf_common+0x48>
 800adca:	f104 0a19 	add.w	sl, r4, #25
 800adce:	68e3      	ldr	r3, [r4, #12]
 800add0:	6832      	ldr	r2, [r6, #0]
 800add2:	1a9b      	subs	r3, r3, r2
 800add4:	42ab      	cmp	r3, r5
 800add6:	dc26      	bgt.n	800ae26 <_printf_common+0x96>
 800add8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800addc:	6822      	ldr	r2, [r4, #0]
 800adde:	3b00      	subs	r3, #0
 800ade0:	bf18      	it	ne
 800ade2:	2301      	movne	r3, #1
 800ade4:	0692      	lsls	r2, r2, #26
 800ade6:	d42b      	bmi.n	800ae40 <_printf_common+0xb0>
 800ade8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800adec:	4641      	mov	r1, r8
 800adee:	4638      	mov	r0, r7
 800adf0:	47c8      	blx	r9
 800adf2:	3001      	adds	r0, #1
 800adf4:	d01e      	beq.n	800ae34 <_printf_common+0xa4>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	6922      	ldr	r2, [r4, #16]
 800adfa:	f003 0306 	and.w	r3, r3, #6
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	bf02      	ittt	eq
 800ae02:	68e5      	ldreq	r5, [r4, #12]
 800ae04:	6833      	ldreq	r3, [r6, #0]
 800ae06:	1aed      	subeq	r5, r5, r3
 800ae08:	68a3      	ldr	r3, [r4, #8]
 800ae0a:	bf0c      	ite	eq
 800ae0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae10:	2500      	movne	r5, #0
 800ae12:	4293      	cmp	r3, r2
 800ae14:	bfc4      	itt	gt
 800ae16:	1a9b      	subgt	r3, r3, r2
 800ae18:	18ed      	addgt	r5, r5, r3
 800ae1a:	2600      	movs	r6, #0
 800ae1c:	341a      	adds	r4, #26
 800ae1e:	42b5      	cmp	r5, r6
 800ae20:	d11a      	bne.n	800ae58 <_printf_common+0xc8>
 800ae22:	2000      	movs	r0, #0
 800ae24:	e008      	b.n	800ae38 <_printf_common+0xa8>
 800ae26:	2301      	movs	r3, #1
 800ae28:	4652      	mov	r2, sl
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	47c8      	blx	r9
 800ae30:	3001      	adds	r0, #1
 800ae32:	d103      	bne.n	800ae3c <_printf_common+0xac>
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3c:	3501      	adds	r5, #1
 800ae3e:	e7c6      	b.n	800adce <_printf_common+0x3e>
 800ae40:	18e1      	adds	r1, r4, r3
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	2030      	movs	r0, #48	@ 0x30
 800ae46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae4a:	4422      	add	r2, r4
 800ae4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae54:	3302      	adds	r3, #2
 800ae56:	e7c7      	b.n	800ade8 <_printf_common+0x58>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	4641      	mov	r1, r8
 800ae5e:	4638      	mov	r0, r7
 800ae60:	47c8      	blx	r9
 800ae62:	3001      	adds	r0, #1
 800ae64:	d0e6      	beq.n	800ae34 <_printf_common+0xa4>
 800ae66:	3601      	adds	r6, #1
 800ae68:	e7d9      	b.n	800ae1e <_printf_common+0x8e>
	...

0800ae6c <_printf_i>:
 800ae6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae70:	7e0f      	ldrb	r7, [r1, #24]
 800ae72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae74:	2f78      	cmp	r7, #120	@ 0x78
 800ae76:	4691      	mov	r9, r2
 800ae78:	4680      	mov	r8, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	469a      	mov	sl, r3
 800ae7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae82:	d807      	bhi.n	800ae94 <_printf_i+0x28>
 800ae84:	2f62      	cmp	r7, #98	@ 0x62
 800ae86:	d80a      	bhi.n	800ae9e <_printf_i+0x32>
 800ae88:	2f00      	cmp	r7, #0
 800ae8a:	f000 80d1 	beq.w	800b030 <_printf_i+0x1c4>
 800ae8e:	2f58      	cmp	r7, #88	@ 0x58
 800ae90:	f000 80b8 	beq.w	800b004 <_printf_i+0x198>
 800ae94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae9c:	e03a      	b.n	800af14 <_printf_i+0xa8>
 800ae9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aea2:	2b15      	cmp	r3, #21
 800aea4:	d8f6      	bhi.n	800ae94 <_printf_i+0x28>
 800aea6:	a101      	add	r1, pc, #4	@ (adr r1, 800aeac <_printf_i+0x40>)
 800aea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aeac:	0800af05 	.word	0x0800af05
 800aeb0:	0800af19 	.word	0x0800af19
 800aeb4:	0800ae95 	.word	0x0800ae95
 800aeb8:	0800ae95 	.word	0x0800ae95
 800aebc:	0800ae95 	.word	0x0800ae95
 800aec0:	0800ae95 	.word	0x0800ae95
 800aec4:	0800af19 	.word	0x0800af19
 800aec8:	0800ae95 	.word	0x0800ae95
 800aecc:	0800ae95 	.word	0x0800ae95
 800aed0:	0800ae95 	.word	0x0800ae95
 800aed4:	0800ae95 	.word	0x0800ae95
 800aed8:	0800b017 	.word	0x0800b017
 800aedc:	0800af43 	.word	0x0800af43
 800aee0:	0800afd1 	.word	0x0800afd1
 800aee4:	0800ae95 	.word	0x0800ae95
 800aee8:	0800ae95 	.word	0x0800ae95
 800aeec:	0800b039 	.word	0x0800b039
 800aef0:	0800ae95 	.word	0x0800ae95
 800aef4:	0800af43 	.word	0x0800af43
 800aef8:	0800ae95 	.word	0x0800ae95
 800aefc:	0800ae95 	.word	0x0800ae95
 800af00:	0800afd9 	.word	0x0800afd9
 800af04:	6833      	ldr	r3, [r6, #0]
 800af06:	1d1a      	adds	r2, r3, #4
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6032      	str	r2, [r6, #0]
 800af0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af14:	2301      	movs	r3, #1
 800af16:	e09c      	b.n	800b052 <_printf_i+0x1e6>
 800af18:	6833      	ldr	r3, [r6, #0]
 800af1a:	6820      	ldr	r0, [r4, #0]
 800af1c:	1d19      	adds	r1, r3, #4
 800af1e:	6031      	str	r1, [r6, #0]
 800af20:	0606      	lsls	r6, r0, #24
 800af22:	d501      	bpl.n	800af28 <_printf_i+0xbc>
 800af24:	681d      	ldr	r5, [r3, #0]
 800af26:	e003      	b.n	800af30 <_printf_i+0xc4>
 800af28:	0645      	lsls	r5, r0, #25
 800af2a:	d5fb      	bpl.n	800af24 <_printf_i+0xb8>
 800af2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af30:	2d00      	cmp	r5, #0
 800af32:	da03      	bge.n	800af3c <_printf_i+0xd0>
 800af34:	232d      	movs	r3, #45	@ 0x2d
 800af36:	426d      	negs	r5, r5
 800af38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af3c:	4858      	ldr	r0, [pc, #352]	@ (800b0a0 <_printf_i+0x234>)
 800af3e:	230a      	movs	r3, #10
 800af40:	e011      	b.n	800af66 <_printf_i+0xfa>
 800af42:	6821      	ldr	r1, [r4, #0]
 800af44:	6833      	ldr	r3, [r6, #0]
 800af46:	0608      	lsls	r0, r1, #24
 800af48:	f853 5b04 	ldr.w	r5, [r3], #4
 800af4c:	d402      	bmi.n	800af54 <_printf_i+0xe8>
 800af4e:	0649      	lsls	r1, r1, #25
 800af50:	bf48      	it	mi
 800af52:	b2ad      	uxthmi	r5, r5
 800af54:	2f6f      	cmp	r7, #111	@ 0x6f
 800af56:	4852      	ldr	r0, [pc, #328]	@ (800b0a0 <_printf_i+0x234>)
 800af58:	6033      	str	r3, [r6, #0]
 800af5a:	bf14      	ite	ne
 800af5c:	230a      	movne	r3, #10
 800af5e:	2308      	moveq	r3, #8
 800af60:	2100      	movs	r1, #0
 800af62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af66:	6866      	ldr	r6, [r4, #4]
 800af68:	60a6      	str	r6, [r4, #8]
 800af6a:	2e00      	cmp	r6, #0
 800af6c:	db05      	blt.n	800af7a <_printf_i+0x10e>
 800af6e:	6821      	ldr	r1, [r4, #0]
 800af70:	432e      	orrs	r6, r5
 800af72:	f021 0104 	bic.w	r1, r1, #4
 800af76:	6021      	str	r1, [r4, #0]
 800af78:	d04b      	beq.n	800b012 <_printf_i+0x1a6>
 800af7a:	4616      	mov	r6, r2
 800af7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800af80:	fb03 5711 	mls	r7, r3, r1, r5
 800af84:	5dc7      	ldrb	r7, [r0, r7]
 800af86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af8a:	462f      	mov	r7, r5
 800af8c:	42bb      	cmp	r3, r7
 800af8e:	460d      	mov	r5, r1
 800af90:	d9f4      	bls.n	800af7c <_printf_i+0x110>
 800af92:	2b08      	cmp	r3, #8
 800af94:	d10b      	bne.n	800afae <_printf_i+0x142>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	07df      	lsls	r7, r3, #31
 800af9a:	d508      	bpl.n	800afae <_printf_i+0x142>
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	6861      	ldr	r1, [r4, #4]
 800afa0:	4299      	cmp	r1, r3
 800afa2:	bfde      	ittt	le
 800afa4:	2330      	movle	r3, #48	@ 0x30
 800afa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afae:	1b92      	subs	r2, r2, r6
 800afb0:	6122      	str	r2, [r4, #16]
 800afb2:	f8cd a000 	str.w	sl, [sp]
 800afb6:	464b      	mov	r3, r9
 800afb8:	aa03      	add	r2, sp, #12
 800afba:	4621      	mov	r1, r4
 800afbc:	4640      	mov	r0, r8
 800afbe:	f7ff fee7 	bl	800ad90 <_printf_common>
 800afc2:	3001      	adds	r0, #1
 800afc4:	d14a      	bne.n	800b05c <_printf_i+0x1f0>
 800afc6:	f04f 30ff 	mov.w	r0, #4294967295
 800afca:	b004      	add	sp, #16
 800afcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	f043 0320 	orr.w	r3, r3, #32
 800afd6:	6023      	str	r3, [r4, #0]
 800afd8:	4832      	ldr	r0, [pc, #200]	@ (800b0a4 <_printf_i+0x238>)
 800afda:	2778      	movs	r7, #120	@ 0x78
 800afdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	6831      	ldr	r1, [r6, #0]
 800afe4:	061f      	lsls	r7, r3, #24
 800afe6:	f851 5b04 	ldr.w	r5, [r1], #4
 800afea:	d402      	bmi.n	800aff2 <_printf_i+0x186>
 800afec:	065f      	lsls	r7, r3, #25
 800afee:	bf48      	it	mi
 800aff0:	b2ad      	uxthmi	r5, r5
 800aff2:	6031      	str	r1, [r6, #0]
 800aff4:	07d9      	lsls	r1, r3, #31
 800aff6:	bf44      	itt	mi
 800aff8:	f043 0320 	orrmi.w	r3, r3, #32
 800affc:	6023      	strmi	r3, [r4, #0]
 800affe:	b11d      	cbz	r5, 800b008 <_printf_i+0x19c>
 800b000:	2310      	movs	r3, #16
 800b002:	e7ad      	b.n	800af60 <_printf_i+0xf4>
 800b004:	4826      	ldr	r0, [pc, #152]	@ (800b0a0 <_printf_i+0x234>)
 800b006:	e7e9      	b.n	800afdc <_printf_i+0x170>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	f023 0320 	bic.w	r3, r3, #32
 800b00e:	6023      	str	r3, [r4, #0]
 800b010:	e7f6      	b.n	800b000 <_printf_i+0x194>
 800b012:	4616      	mov	r6, r2
 800b014:	e7bd      	b.n	800af92 <_printf_i+0x126>
 800b016:	6833      	ldr	r3, [r6, #0]
 800b018:	6825      	ldr	r5, [r4, #0]
 800b01a:	6961      	ldr	r1, [r4, #20]
 800b01c:	1d18      	adds	r0, r3, #4
 800b01e:	6030      	str	r0, [r6, #0]
 800b020:	062e      	lsls	r6, r5, #24
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	d501      	bpl.n	800b02a <_printf_i+0x1be>
 800b026:	6019      	str	r1, [r3, #0]
 800b028:	e002      	b.n	800b030 <_printf_i+0x1c4>
 800b02a:	0668      	lsls	r0, r5, #25
 800b02c:	d5fb      	bpl.n	800b026 <_printf_i+0x1ba>
 800b02e:	8019      	strh	r1, [r3, #0]
 800b030:	2300      	movs	r3, #0
 800b032:	6123      	str	r3, [r4, #16]
 800b034:	4616      	mov	r6, r2
 800b036:	e7bc      	b.n	800afb2 <_printf_i+0x146>
 800b038:	6833      	ldr	r3, [r6, #0]
 800b03a:	1d1a      	adds	r2, r3, #4
 800b03c:	6032      	str	r2, [r6, #0]
 800b03e:	681e      	ldr	r6, [r3, #0]
 800b040:	6862      	ldr	r2, [r4, #4]
 800b042:	2100      	movs	r1, #0
 800b044:	4630      	mov	r0, r6
 800b046:	f7f5 f953 	bl	80002f0 <memchr>
 800b04a:	b108      	cbz	r0, 800b050 <_printf_i+0x1e4>
 800b04c:	1b80      	subs	r0, r0, r6
 800b04e:	6060      	str	r0, [r4, #4]
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	2300      	movs	r3, #0
 800b056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b05a:	e7aa      	b.n	800afb2 <_printf_i+0x146>
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	4632      	mov	r2, r6
 800b060:	4649      	mov	r1, r9
 800b062:	4640      	mov	r0, r8
 800b064:	47d0      	blx	sl
 800b066:	3001      	adds	r0, #1
 800b068:	d0ad      	beq.n	800afc6 <_printf_i+0x15a>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	079b      	lsls	r3, r3, #30
 800b06e:	d413      	bmi.n	800b098 <_printf_i+0x22c>
 800b070:	68e0      	ldr	r0, [r4, #12]
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	4298      	cmp	r0, r3
 800b076:	bfb8      	it	lt
 800b078:	4618      	movlt	r0, r3
 800b07a:	e7a6      	b.n	800afca <_printf_i+0x15e>
 800b07c:	2301      	movs	r3, #1
 800b07e:	4632      	mov	r2, r6
 800b080:	4649      	mov	r1, r9
 800b082:	4640      	mov	r0, r8
 800b084:	47d0      	blx	sl
 800b086:	3001      	adds	r0, #1
 800b088:	d09d      	beq.n	800afc6 <_printf_i+0x15a>
 800b08a:	3501      	adds	r5, #1
 800b08c:	68e3      	ldr	r3, [r4, #12]
 800b08e:	9903      	ldr	r1, [sp, #12]
 800b090:	1a5b      	subs	r3, r3, r1
 800b092:	42ab      	cmp	r3, r5
 800b094:	dcf2      	bgt.n	800b07c <_printf_i+0x210>
 800b096:	e7eb      	b.n	800b070 <_printf_i+0x204>
 800b098:	2500      	movs	r5, #0
 800b09a:	f104 0619 	add.w	r6, r4, #25
 800b09e:	e7f5      	b.n	800b08c <_printf_i+0x220>
 800b0a0:	0800b2b5 	.word	0x0800b2b5
 800b0a4:	0800b2c6 	.word	0x0800b2c6

0800b0a8 <memmove>:
 800b0a8:	4288      	cmp	r0, r1
 800b0aa:	b510      	push	{r4, lr}
 800b0ac:	eb01 0402 	add.w	r4, r1, r2
 800b0b0:	d902      	bls.n	800b0b8 <memmove+0x10>
 800b0b2:	4284      	cmp	r4, r0
 800b0b4:	4623      	mov	r3, r4
 800b0b6:	d807      	bhi.n	800b0c8 <memmove+0x20>
 800b0b8:	1e43      	subs	r3, r0, #1
 800b0ba:	42a1      	cmp	r1, r4
 800b0bc:	d008      	beq.n	800b0d0 <memmove+0x28>
 800b0be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0c6:	e7f8      	b.n	800b0ba <memmove+0x12>
 800b0c8:	4402      	add	r2, r0
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	428a      	cmp	r2, r1
 800b0ce:	d100      	bne.n	800b0d2 <memmove+0x2a>
 800b0d0:	bd10      	pop	{r4, pc}
 800b0d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0da:	e7f7      	b.n	800b0cc <memmove+0x24>

0800b0dc <_sbrk_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d06      	ldr	r5, [pc, #24]	@ (800b0f8 <_sbrk_r+0x1c>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	f7f6 fbf2 	bl	80018d0 <_sbrk>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d102      	bne.n	800b0f6 <_sbrk_r+0x1a>
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	b103      	cbz	r3, 800b0f6 <_sbrk_r+0x1a>
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	24000cb8 	.word	0x24000cb8

0800b0fc <_realloc_r>:
 800b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b100:	4607      	mov	r7, r0
 800b102:	4614      	mov	r4, r2
 800b104:	460d      	mov	r5, r1
 800b106:	b921      	cbnz	r1, 800b112 <_realloc_r+0x16>
 800b108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b10c:	4611      	mov	r1, r2
 800b10e:	f7ff bc5b 	b.w	800a9c8 <_malloc_r>
 800b112:	b92a      	cbnz	r2, 800b120 <_realloc_r+0x24>
 800b114:	f7ff fbec 	bl	800a8f0 <_free_r>
 800b118:	4625      	mov	r5, r4
 800b11a:	4628      	mov	r0, r5
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b120:	f000 f81a 	bl	800b158 <_malloc_usable_size_r>
 800b124:	4284      	cmp	r4, r0
 800b126:	4606      	mov	r6, r0
 800b128:	d802      	bhi.n	800b130 <_realloc_r+0x34>
 800b12a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b12e:	d8f4      	bhi.n	800b11a <_realloc_r+0x1e>
 800b130:	4621      	mov	r1, r4
 800b132:	4638      	mov	r0, r7
 800b134:	f7ff fc48 	bl	800a9c8 <_malloc_r>
 800b138:	4680      	mov	r8, r0
 800b13a:	b908      	cbnz	r0, 800b140 <_realloc_r+0x44>
 800b13c:	4645      	mov	r5, r8
 800b13e:	e7ec      	b.n	800b11a <_realloc_r+0x1e>
 800b140:	42b4      	cmp	r4, r6
 800b142:	4622      	mov	r2, r4
 800b144:	4629      	mov	r1, r5
 800b146:	bf28      	it	cs
 800b148:	4632      	movcs	r2, r6
 800b14a:	f7ff fbc3 	bl	800a8d4 <memcpy>
 800b14e:	4629      	mov	r1, r5
 800b150:	4638      	mov	r0, r7
 800b152:	f7ff fbcd 	bl	800a8f0 <_free_r>
 800b156:	e7f1      	b.n	800b13c <_realloc_r+0x40>

0800b158 <_malloc_usable_size_r>:
 800b158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b15c:	1f18      	subs	r0, r3, #4
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bfbc      	itt	lt
 800b162:	580b      	ldrlt	r3, [r1, r0]
 800b164:	18c0      	addlt	r0, r0, r3
 800b166:	4770      	bx	lr

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
